<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>懒羊羊</title>
  
  <subtitle>xxlila</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xxlaila.github.io/"/>
  <updated>2019-10-25T09:52:27.686Z</updated>
  <id>https://xxlaila.github.io/</id>
  
  <author>
    <name>xxlaila</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pipeline多分支gitlab触发</title>
    <link href="https://xxlaila.github.io/2019/10/25/pipeline%E5%A4%9A%E5%88%86%E6%94%AFgitlab%E8%A7%A6%E5%8F%91/"/>
    <id>https://xxlaila.github.io/2019/10/25/pipeline多分支gitlab触发/</id>
    <published>2019-10-25T09:20:15.000Z</published>
    <updated>2019-10-25T09:52:27.686Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Welcome to my blog, enter password to read." />    <label for="hbePass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="857d9cf81ea9d00ce5bf0277ce9da4d911b4728b868f93b14b75ffd6582b4a51"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="jenkins" scheme="https://xxlaila.github.io//categories/jenkins/"/>
    
    
      <category term="pipeline" scheme="https://xxlaila.github.io//tags/pipeline/"/>
    
  </entry>
  
  <entry>
    <title>jenkins运维篇</title>
    <link href="https://xxlaila.github.io/2019/10/22/jenkins%E8%BF%90%E7%BB%B4%E7%AF%87/"/>
    <id>https://xxlaila.github.io/2019/10/22/jenkins运维篇/</id>
    <published>2019-10-22T01:22:52.000Z</published>
    <updated>2019-10-22T02:26:30.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jenkins-可视化构建"><a href="#jenkins-可视化构建" class="headerlink" title="jenkins 可视化构建"></a>jenkins 可视化构建</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在之前遇到过开发提交代码后，完全不管提交的代码是否发布成功，及时后来加入了企业微信的告警机制，但是依然有人不会去关注这个。只有在测试人员在反馈xxx你的代码提交了没有，这时候研发人员才回去看，有时候一个触发构建失败了，摆在那里很久，如有下一个开发人员要对这个工程修改提交的时候发现过不了，这时候再来解决，成本就有点大。这里可以借助看板的形式让研发人员可以随时关注到自己的提交的工程，结合告警来做，效果还是不错的。</p><a id="more"></a><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装Build Monitor View 插件，然后在主页面添加<code>+</code>一个视图<br><img src="http://img.xxlaila.cn/1571707794737.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以根据job的类型或者根据自己的条件进行<a href="https://xxlaila.github.io/2019/08/09/jenkins-job%E7%AE%A1%E7%90%86/">过滤job</a>来生成看板。</p><ul><li>Build Monitor - View Settings: 根据job的一些状态来进行排序<br><img src="http://img.xxlaila.cn/1571708048469.jpg" alt="img"></li></ul><h3 id="jenkins-监控"><a href="#jenkins-监控" class="headerlink" title="jenkins 监控"></a>jenkins 监控</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有时候我们没有监控，但是有时候需要看看jenkins的一些监控信息，如：内存、cpu、系统负债、http响应时间、系统进程数、线程数等，有懒得安装监控，这时候我们可以借助jenkins自带的一个插件<code>Monitoring</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;插件安装完成后，我们可以在系统管理菜单下面看到<code>Monitoring of Jenkins master</code><br><img src="http://img.xxlaila.cn/1571708499625.jpg" alt="img"></p><p>点击进入以后我们可以看到<br><img src="http://img.xxlaila.cn/1571708561404.jpg" alt="img"><br>页面显示乱码，这个可以自己google解决</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jenkins-可视化构建&quot;&gt;&lt;a href=&quot;#jenkins-可视化构建&quot; class=&quot;headerlink&quot; title=&quot;jenkins 可视化构建&quot;&gt;&lt;/a&gt;jenkins 可视化构建&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在之前遇到过开发提交代码后，完全不管提交的代码是否发布成功，及时后来加入了企业微信的告警机制，但是依然有人不会去关注这个。只有在测试人员在反馈xxx你的代码提交了没有，这时候研发人员才回去看，有时候一个触发构建失败了，摆在那里很久，如有下一个开发人员要对这个工程修改提交的时候发现过不了，这时候再来解决，成本就有点大。这里可以借助看板的形式让研发人员可以随时关注到自己的提交的工程，结合告警来做，效果还是不错的。&lt;/p&gt;
    
    </summary>
    
      <category term="jenkins" scheme="https://xxlaila.github.io//categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="https://xxlaila.github.io//tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>pipeline语法</title>
    <link href="https://xxlaila.github.io/2019/10/21/pipeline%E8%AF%AD%E6%B3%95/"/>
    <id>https://xxlaila.github.io/2019/10/21/pipeline语法/</id>
    <published>2019-10-21T07:26:19.000Z</published>
    <updated>2019-10-25T09:45:01.997Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在测试k8s上的ci/cd，之前的ci/cd其实也能满足目前先业务的需求，但是想尝试改进一下，优化以前的job，希望在登录ci的时候更加的简洁，而且查找job的时候，点击一个job就能查看完整的信息，不需要job之间的来回切换，等等各种理由，😁😁。这里使用jenkins pipeline，起初测试的时候使用pipeline，没问题以后，使用jenkinsfile。</p><a id="more"></a><h3 id="pipeline-常用介绍"><a href="#pipeline-常用介绍" class="headerlink" title="pipeline 常用介绍"></a>pipeline 常用介绍</h3><h4 id="清理历史build"><a href="#清理历史build" class="headerlink" title="清理历史build"></a>清理历史build</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;普通job的时候清理和保留历史job的build 很简单，勾勾就可以啦，但是pipeline就的使用一下方式，而且还的写在最前面，不然识别不了，会报错的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options &#123;</span><br><span class="line">        buildDiscarder(logRotar(numToKeepStr: <span class="string">'8'</span>))</span><br><span class="line">        disableConcurrentBuilds()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>buildDiscarder: 保持构建的最大个数</li><li>disableConcurrentBuilds: 禁止并发构建</li></ul><p>详细参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buildDiscarder(logRotator(numToKeepStr: <span class="string">'8'</span>, artifactNumToKeepStr: <span class="string">'8'</span>, daysToKeepStr: <span class="string">'8'</span>, artifactDaysToKeepStr: <span class="string">'7'</span>))</span><br></pre></td></tr></table></figure><ul><li>artifactDaysToKeepStr: 发布包保留天数</li><li>artifactNumToKeepStr: 发布包最大保留#个构建</li><li>daysToKeepStr: 保持构建的天数</li><li>numToKeepStr: 保持构建的最大个数</li></ul><h4 id="gitlab事件触发"><a href="#gitlab事件触发" class="headerlink" title="gitlab事件触发"></a>gitlab事件触发</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前的我们的ci/cd都是开发提交到某一个分支，然后jenkins会自动触发编译、发布，而且配置这个步骤也需要好几步才能实现，但在pipeline中也可以通过代码形式最这种触发器(勾子)进行配置。这样让每个项目都和jenkins进行耦合；运维人员只需要专注的维护Jenkinsfile，创建对应的项目即可。gitlab触发jenkins的构建需要依赖Gitlab插件。这里需要自行安装</p><ul><li><p>接受固定的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">        gitlab(triggersOnPush: <span class="literal">true</span>,</span><br><span class="line">              triggersOnMergeRequest: <span class="literal">true</span>,</span><br><span class="line">              branchFilterType: <span class="string">"NameBasedFilter"</span>,</span><br><span class="line">              includeBranchesSpec: <span class="string">"dev,test,master"</span>,</span><br><span class="line">              secretToken: <span class="string">"<span class="variable">$&#123;env.git_token&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>triggerOnPush: 当Gitlab触发push事件时，是否执行构建</p></li><li><p>triggerOnMergeRequest: 当Gitlab触发mergeRequest事件时，是否执行构建</p></li><li><p>branchFilterType: 只有符合条件的分支才会触发构建，必选，否则无法实现触发。</p><ul><li>All: 所有分支</li><li>NameBasedFilter: 基于分支名进行过滤，多个分支名使用逗号分隔<ul><li>includeBranchesSpec: 基于branchFilterType值，输入期望包括的分支的规则</li><li>excludeBranchesSpec: 基于branchFilterType值，输入期望排除的分支的规则</li></ul></li><li>RegexBasedFilter: 基于正则表达式对分支名进行过滤<ul><li>sourceBranchRegex: 定义期望的通过正则表达式限制的分支规则</li></ul></li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以分支不阐述，其他的两个选项是最实用的，我们在正式使用的时候一定会用到这个，上面的例子是一个接受固定的几个分支</p><ul><li>匹配的方式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">        gitlab(triggersOnPush: <span class="literal">true</span>,</span><br><span class="line">              triggersOnMergeRequest: <span class="literal">true</span>,</span><br><span class="line">              branchFilterType: <span class="string">"RegexBasedFilter"</span>,</span><br><span class="line">              sourceBranchRegex: <span class="string">"dev.*"</span>,</span><br><span class="line">              secretToken: <span class="string">"<span class="variable">$&#123;env.git_token&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里的git_token需要在jenkins的全局变量里面添加一个<code>Environment variables</code>对应的一个键值即可。</p><p><strong>注</strong>: 所有的触发器都需要先手动执行一次，让jenkins家在其中的配置，对应的指令才会生效。</p><ul><li><p>jenkins 验证<br><img src="http://img.xxlaila.cn/1571644117201.jpg" alt="img"></p></li><li><p>gitlab验证<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要将项目回调地址写入到Gitlab钩子当中才可以。经过测试一个pipeline的job可以管理多个分支的触发，避免之前的每一个分支的job进行触发。</p></li></ul><h4 id="parameters-模块"><a href="#parameters-模块" class="headerlink" title="parameters 模块"></a>parameters 模块</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该模块需要安装，parameters指令提供用户在触发Pipeline时应提供的参数列表。这些用户指定的参数的值通过该params对象可用于Pipeline步骤。研发经常会有打出一个特性分支，这个分支用于hotfix，这个时候就要给研发提交一个可以选择的分支，然他们去部署到对应的环境。</p><ul><li><p>字符串参数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;定义一个字符串参数，用户可以在Jenkins UI上输入字符串，常见使用这个参数的场景有，用户名，收件人邮箱，文件网络路径，主机名称的或者url等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    string(name: <span class="string">'DEPLOY_ENV'</span>, defaultValue: <span class="string">'staging'</span>, description: <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>布尔值参数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;定义一个布尔类型参数，用户可以在Jenkins UI上选择是还是否，选择是表示代码会执行这部分，如果选择否，会跳过这部分。一般需要使用布尔值的场景有，执行一些特定集成的脚本或则工作，或者事后清除环境，例如清楚Jenkins的workspace这样的动作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    booleanParam(name: <span class="string">'DEBUG_BUILD'</span>, defaultValue: <span class="literal">true</span>, description: <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择参数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择（choice）的参数就是支持用户从多个选择项中，选择一个值用来表示这个变量的值。工作中常用的场景，有选择服务器类型，选择版本号等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    choice(name: <span class="string">'ENV_TYPE'</span>, choices: [<span class="string">'dev'</span>, <span class="string">'test'</span>, <span class="string">'product'</span>], description: <span class="string">'dev env test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当然parameters模块我们用的最多的是在手动的时候我们可以手动点击进行构建部署，至于其他的目前我暂时未用到</p><ul><li>选择分支部署<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;label <span class="string">'agent-node'</span>&#125;</span><br><span class="line">    parameters &#123;</span><br><span class="line">        gitParameter branchFilter: <span class="string">'origin/(.*)'</span>, defaultValue: <span class="string">'dev'</span>, name: <span class="string">'BRANCH'</span>, <span class="built_in">type</span>: <span class="string">'PT_BRANCH'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'gitlib code'</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                git branch:<span class="string">"<span class="variable">$&#123;params.BRANCH&#125;</span>"</span>, credentialsId:<span class="string">'gitlabUser'</span>, url: <span class="string">"http://gitlab.xxlaila.cn/xxx/kxl-eureka.git"</span></span><br><span class="line">                script &#123;</span><br><span class="line">                    build_tag = sh(returnStdout: <span class="literal">true</span>, script: <span class="string">'git rev-parse --short HEAD'</span>).trim()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>parameters<a href="https://wiki.jenkins.io/display/JENKINS/Git+Parameter+Plugin" target="_blank" rel="noopener">官方参考</a>，介绍得挺详细的，<a href="https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/136740885/Triggering+Jenkins+Based+on+New+Tags" target="_blank" rel="noopener">辅助参考</a><br><img src="http://img.xxlaila.cn/1571651950634.jpg" alt="img"></p><ul><li>还可以写成<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    gitParameter(</span><br><span class="line">        branch: <span class="string">''</span>,</span><br><span class="line">        branchFilter: <span class="string">'origin/(.*)'</span>,</span><br><span class="line">        defaultValue: <span class="string">'dev'</span>,</span><br><span class="line">        description: <span class="string">'test code'</span>,</span><br><span class="line">        name: <span class="string">'BRANCH'</span>,</span><br><span class="line">        quickFilterEnabled: <span class="literal">false</span>,</span><br><span class="line">        selectedValue: <span class="string">'NONE'</span>,</span><br><span class="line">        sortMode: <span class="string">'NONE'</span>,</span><br><span class="line">        tagFilter: <span class="string">'*'</span>,</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'PT_BRANCH'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里有一个问题：当这里设置了可以选择分支的时候，然后在之前的自动触发就会有问题，就是在去分支拉去代码的时候就一只是dev分支，而不是其他的分支，这里仍然在探索的测试中。<br>编辑job可以看到<br><img src="http://img.xxlaila.cn/1571903055002.jpg" alt="img"></p><h3 id="多分支pipeline"><a href="#多分支pipeline" class="headerlink" title="多分支pipeline"></a>多分支pipeline</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp按照上面的又要支持用户可以选择分支，又要适合自动触发功能。用单分支pipeline来管理项目，又要回到我们最初的模式，而在实际过程中，我们可以用到多分支同时进行开发。这样就满足了我们的实际需求。多分支任务这里不做过多的详细介绍，这里阐述两个功能点；分别是分支的扫描策略和孤儿项策略(Orphaned Item)。</p><h4 id="分支的扫描策略"><a href="#分支的扫描策略" class="headerlink" title="分支的扫描策略"></a>分支的扫描策略</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp分支扫描是jenkins根据一定的策略去代码仓库扫描分支，如果有新分支就创建一个以新分支命名的任务，如果发现分支被删除，就删除对应的jenkins任务。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp在”扫描多分支流水线触发器(Scan Multibranch Pipeline Triggers)”下有一个: Periodically if not otherwise run（没有手动触发，就定期扫描分支）。选择此项，设置一个扫描间隔时长。可以根据项目分支的频繁程度设置周期的长短，也可以在任务页面手动触发jenkins进行扫描。<br><img src="http://img.xxlaila.cn/1571973819297.jpg" alt="img"></p><h4 id="孤儿项策略-Orphaned-Item"><a href="#孤儿项策略-Orphaned-Item" class="headerlink" title="孤儿项策略(Orphaned Item)"></a>孤儿项策略(Orphaned Item)</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp该功能是在代码仓库中删除了release分支，那么在多任务页面上，该分支在jenkins上的任务也应该对应删除。什么时候删除，取决于下次分支扫描时间。如果代码仓库中的分支被删除，而jenkins上响应的任务没有被删除，那么这个任务就是所说的孤儿任务。对于分支任务的历史记录，保存多长时间设置</p><ul><li><p>界面配置<br><img src="http://img.xxlaila.cn/1571974190710.jpg" alt="img"></p></li><li><p>pipeline 写法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">orphanedItemStrategy &#123;</span><br><span class="line">    discardolditems &#123;</span><br><span class="line">        daysTokeep(10)</span><br><span class="line">        numToKeep(5)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注</strong>:  这里孤儿策略pipeline 需要另外一种方式来支持，<a href="https://gitee.com/jenkins-zh/gitlab-branch-source-plugin" target="_blank" rel="noopener">Setting up GitLab Server Configuration on Jenkins</a>，这里没有用到这个，不做过多的阐述。<a href="https://github.com/jenkinsci/job-dsl-plugin/wiki/Migration" target="_blank" rel="noopener">github参考</a></p><h3 id="多分支的自动触发"><a href="#多分支的自动触发" class="headerlink" title="多分支的自动触发"></a>多分支的自动触发</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbsp分支的触好处是多多的，自然在多分支面前自动触发肯定也少不了。多分支的触发有两种模式，分别是前面提到的Gitlab trigger和Generic Webhook Trigger。下面分别对两种模式进行阐述和实际的测试</p><h4 id="Generic-Webhook-Trigger"><a href="#Generic-Webhook-Trigger" class="headerlink" title="Generic Webhook Trigger"></a>Generic Webhook Trigger</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;nbspGeneric Webhook Trigger 插件需要提前安装，GenericTrigger触发条件是由GWT插件提供，GenericTrigger触发的条件分为5个部分。<a href="https://wiki.jenkins.io/display/JENKINS/Generic+Webhook+Trigger+Plugin" target="_blank" rel="noopener">GenericTrigger官方参考</a></p><ul><li>从HTTP POST请求中提取参数</li><li>token，GWT插件用于标识jenkins项目的唯一性</li><li>根据请求参数值判断是否触发Jenkins项目执行</li><li>日志控制打印</li><li>webhook响应控制 </li></ul><h4 id="GerenericTrigger-的写法"><a href="#GerenericTrigger-的写法" class="headerlink" title="GerenericTrigger 的写法"></a>GerenericTrigger 的写法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">    GenericTrigger(</span><br><span class="line">        genericVariables:[</span><br><span class="line">            [key: <span class="string">'ref'</span>, value: <span class="string">'$.ref'</span>]</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        token: env.JOB_NAME,</span><br><span class="line">        regexpFilterText: <span class="string">'$ref'</span>,</span><br><span class="line">        regexpFilterExpression: <span class="string">'refs/heads/'</span> + env.BRANCH_NAME</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;env.BRANCH_NAME这里指的是分支名。当然这样修改以后是不行的，是达不到自动触发的，需要自行去gitlab上添加钩子，这里经过测试流程：用户修改dev分支，push到gitlab dev分支可以触发任务的dev分支自动构建；合并到test分支，也可以触发test分支自动构建；在合并到master分支也能自动触发任务的master分支自动构建。<br><img src="http://img.xxlaila.cn/1571984557618.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们要实现这块，要理解知道这个东西，首先要知道gitlab push 数据的格式，知道了gitlab push格式，我们才知道应该怎么操作，<a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#webhooks" target="_blank" rel="noopener">gitlab push数据的格式参考</a>，</p><ul><li>参考<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"object_kind"</span>: <span class="string">"push"</span>,</span><br><span class="line">  <span class="string">"before"</span>: <span class="string">"95790bf891e76fee5e1747ab589903a6a1f80f22"</span>,</span><br><span class="line">  <span class="string">"after"</span>: <span class="string">"da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">  <span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br><span class="line">  <span class="string">"checkout_sha"</span>: <span class="string">"da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">  <span class="string">"user_id"</span>: 4,</span><br><span class="line">  <span class="string">"user_name"</span>: <span class="string">"John Smith"</span>,</span><br><span class="line">  <span class="string">"user_username"</span>: <span class="string">"jsmith"</span>,</span><br><span class="line">  <span class="string">"user_email"</span>: <span class="string">"john@example.com"</span>,</span><br><span class="line">  <span class="string">"user_avatar"</span>: <span class="string">"https://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=8://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=80"</span>,</span><br><span class="line">  <span class="string">"project_id"</span>: 15,</span><br><span class="line">  <span class="string">"project"</span>:&#123;</span><br><span class="line">    <span class="string">"id"</span>: 15,</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"Diaspora"</span>,</span><br><span class="line">    <span class="string">"description"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="string">"web_url"</span>:<span class="string">"http://example.com/mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"avatar_url"</span>:null,</span><br><span class="line">    <span class="string">"git_ssh_url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"git_http_url"</span>:<span class="string">"http://example.com/mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"namespace"</span>:<span class="string">"Mike"</span>,</span><br><span class="line">    <span class="string">"visibility_level"</span>:0,</span><br><span class="line">    <span class="string">"path_with_namespace"</span>:<span class="string">"mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"default_branch"</span>:<span class="string">"master"</span>,</span><br><span class="line">    <span class="string">"homepage"</span>:<span class="string">"http://example.com/mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"ssh_url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"http_url"</span>:<span class="string">"http://example.com/mike/diaspora.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"repository"</span>:&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Diaspora"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"homepage"</span>: <span class="string">"http://example.com/mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"git_http_url"</span>:<span class="string">"http://example.com/mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"git_ssh_url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"visibility_level"</span>:0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"commits"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"b6568db1bc1dcd7f8b4d5a946b0b91f9dacd7327"</span>,</span><br><span class="line">      <span class="string">"message"</span>: <span class="string">"Update Catalan translation to e38cb41."</span>,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2011-12-12T14:27:31+02:00"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"http://example.com/mike/diaspora/commit/b6568db1bc1dcd7f8b4d5a946b0b91f9dacd7327"</span>,</span><br><span class="line">      <span class="string">"author"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Jordi Mallach"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"jordi@softcatala.org"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"added"</span>: [<span class="string">"CHANGELOG"</span>],</span><br><span class="line">      <span class="string">"modified"</span>: [<span class="string">"app/controller/application.rb"</span>],</span><br><span class="line">      <span class="string">"removed"</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">      <span class="string">"message"</span>: <span class="string">"fixed readme"</span>,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2012-01-03T23:36:29+02:00"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"http://example.com/mike/diaspora/commit/da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">      <span class="string">"author"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"GitLab dev user"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"gitlabdev@dv6700.(none)"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"added"</span>: [<span class="string">"CHANGELOG"</span>],</span><br><span class="line">      <span class="string">"modified"</span>: [<span class="string">"app/controller/application.rb"</span>],</span><br><span class="line">      <span class="string">"removed"</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"total_commits_count"</span>: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果我们想根据不同的分支提交来触发jenkins的构建，那就应该知道post数据哪一个属性代表了不同的分支，我们可以在第四行看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br></pre></td></tr></table></figure><p><strong>注释</strong>: 也可以通过IDEA工具提交的时候看到提交的选项。可以看到我们用ref可以很好的区分不同分支，这里就是为什么要填写ref的原因。我们可以通过pipeline代码的生成器来生成</p><ul><li>pipeline 代码生成器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">  GenericTrigger causeString: <span class="string">'Generic Cause'</span>, genericVariables: [[defaultValue: <span class="string">''</span>, key: <span class="string">'ref'</span>, regexpFilter: <span class="string">''</span>, value: <span class="string">'$.ref'</span>]], printContributedVariables: <span class="literal">true</span>, printPostContent: <span class="literal">true</span>, regexpFilterExpression: <span class="string">'\'</span>refs/heads/\<span class="string">' + evn.BRANCH_NAME'</span>, regexpFilterText: <span class="string">'$ref'</span>, token: <span class="string">'env.JOB_NAME'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://img.xxlaila.cn/1571982583457.jpg" alt="img"><br><img src="http://img.xxlaila.cn/1571982622070.jpg" alt="img"></p><p><strong>注</strong>: token参数的作用是标识一个pipeline在jenkins中的唯一性，这个参数的重要性就得提起GWT插件的原理。当jenkins收到generic-webhook-trgger/invoke接口的请求时，会将请求代理给GWT插件处理，GWT插件内容会从jenkins实例对象中取出所有的参数化jenkins项目，包括pipeline，然后进行遍历。如果我们在参数化项目中Generic Trigger配置token的值与webhook请求时的token一致，就会触发改项目。如果多个参数化项目的token一样，则都会进行触发，所以这里的token最好时JOB_NAME项目名，因为这个是在项目或者是在为服务领域他都是唯一的。</p><ul><li>参数介绍:<ul><li>regexpFilterText: 需要进行匹配的key，例子中，使用从post body中提取的ref变量值。</li><li>regexpFilterExpression: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" target="_blank" rel="noopener">正则表达式</a>；如果regexpFilterText参数符合regexpFilterExpression参数的正则表达式，则触发执行。</li><li>printPostContent: 布尔值，将webhook请求信息打印到日志上</li><li>printContributedVariables: 布尔值，将提取后的变量名及变量值打印出来</li><li>causeString: 字符串型，触发原因，可以直接应用提取后的变量，如 causeString: ‘Triggered on $msg’</li><li>Silent response: 布尔型，在正常情况下，当webhook请求成功后，GWT插件会返回HTTP 200状态码和触发结果给对方调用，但是当Silentresponse设置为true时，就只返回HTTP 200状态码，不反悔触发结果</li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的看的出来，我们只要是提交了分支都可以进行触发构建，但是呢，在实际生产中，我们定义了dev——&gt;test——master 分支，就是只想要这几个进行触发构建，其他的不进行触发，让开发自己去点击。</p><ul><li><p>指定分支构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">  GenericTrigger causeString: <span class="string">'Triggered on $msg'</span>, genericVariables: [[defaultValue: <span class="string">''</span>, key: <span class="string">'ref'</span>, regexpFilter: <span class="string">''</span>, value: <span class="string">'$.ref'</span>]], printContributedVariables: <span class="literal">true</span>, printPostContent: <span class="literal">true</span>, regexpFilterExpression: <span class="string">'\'</span>refs/heads/(dev|<span class="built_in">test</span>|master)\<span class="string">''</span>, regexpFilterText: <span class="string">'$ref'</span>, token: <span class="string">'env.JOB_NAME'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多分支Gitlab trigger<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多分支的Gitlab trigger和我们前面介绍的gitlab事件触发一样的，没有任何区别，这里我测试了一个job，没有任何问题。同时新建了一个分支，jenkins会自动的扫描新建一个以分支为名的任务，进行自动触发。当我删除了某一个分支，就会触发自动扫描，然后查看分支为删除。</p></li><li><p>删除分支<br><img src="http://img.xxlaila.cn/1571996378764.jpg" alt="img"><br><img src="http://img.xxlaila.cn/1571996257688.jpg" alt="img"></p></li><li><p>整体效果图<br><img src="http://img.xxlaila.cn/1571990331005.jpg" alt="img"></p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里介绍一下部署这块，根据branch来进行判断，不同的branch部署到不同的环境，当设定的值不在branch范围内，就需要人为的制定部署环境。当人员三分钟内没有来进行环境部署的选择，系统就会断开，对该分支标记为结束。</p><p><a href="http://xxlaila.github.io/2019/10/25/pipeline%E5%A4%9A%E5%88%86%E6%94%AFgitlab%E8%A7%A6%E5%8F%91/">完整文件</a><br><a href="https://jenkinsci.github.io/job-dsl-plugin/#path/buildPipelineView" target="_blank" rel="noopener">推荐学习参考地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;pipeline&quot;&gt;&lt;a href=&quot;#pipeline&quot; class=&quot;headerlink&quot; title=&quot;pipeline&quot;&gt;&lt;/a&gt;pipeline&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在测试k8s上的ci/cd，之前的ci/cd其实也能满足目前先业务的需求，但是想尝试改进一下，优化以前的job，希望在登录ci的时候更加的简洁，而且查找job的时候，点击一个job就能查看完整的信息，不需要job之间的来回切换，等等各种理由，😁😁。这里使用jenkins pipeline，起初测试的时候使用pipeline，没问题以后，使用jenkinsfile。&lt;/p&gt;
    
    </summary>
    
      <category term="jenkins" scheme="https://xxlaila.github.io//categories/jenkins/"/>
    
    
      <category term="pipeline" scheme="https://xxlaila.github.io//tags/pipeline/"/>
    
  </entry>
  
  <entry>
    <title>elasticserch</title>
    <link href="https://xxlaila.github.io/2019/10/17/elasticserch%E6%97%A5%E5%B8%B8%E7%BB%B4%E6%8A%A4/"/>
    <id>https://xxlaila.github.io/2019/10/17/elasticserch日常维护/</id>
    <published>2019-10-17T03:23:17.000Z</published>
    <updated>2019-10-21T09:05:41.025Z</updated>
    
    <content type="html"><![CDATA[<h3 id="days-1"><a href="#days-1" class="headerlink" title="days 1"></a>days 1</h3><a id="more"></a><h4 id="elasticserch-索引和数据操作"><a href="#elasticserch-索引和数据操作" class="headerlink" title="elasticserch 索引和数据操作"></a>elasticserch 索引和数据操作</h4><ul><li><p>查看索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl -XGET 'http://127.0.0.1:9200/_cat/indices?v'</span></span><br></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl -XGET 'http://127.0.0.1:9200/_cat/indices?v' |grep "red"|awk '&#123;print $3&#125;'|uniq &gt;l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in `cat a`;do  curl -XDELETE http://127.0.0.1:9200/$&#123;i&#125;;done</span></span><br></pre></td></tr></table></figure></li><li><p>查看shards</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl -XGET http://127.0.0.1:9200/_cat/shards</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shards 有几种类型，这里说一下<code>UNASSIGNED</code>，es 集群里面的分片是分配在多台node上的，为的就是高可用，比如你的某台机器crash了，那么集群就会让其他副本顶上来，避免出现某个分片不能提供服务的情况，但是难免还是会出现 UNASSIGNED shards 的错误。</p><ul><li>删除shards UNASSIGNED<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl -XGET 'http://127.0.0.1:9200/_cat/shards'|grep "UNASSIGNED"|awk '&#123;print $1&#125;'|uniq &gt;l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in `cat l`;do curl -XDELETE http://127.0.0.1:9200/$i;done</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="elasticserch验证集群"><a href="#elasticserch验证集群" class="headerlink" title="elasticserch验证集群"></a>elasticserch验证集群</h4><ul><li><p>集群相关API</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat</span><br><span class="line">=^.^=</span><br><span class="line">/_cat/allocation</span><br><span class="line">/_cat/shards</span><br><span class="line">/_cat/shards/&#123;index&#125;</span><br><span class="line">/_cat/master</span><br><span class="line">/_cat/nodes</span><br><span class="line">/_cat/tasks</span><br><span class="line">/_cat/indices</span><br><span class="line">/_cat/indices/&#123;index&#125;</span><br><span class="line">/_cat/segments</span><br><span class="line">/_cat/segments/&#123;index&#125;</span><br><span class="line">/_cat/count</span><br><span class="line">/_cat/count/&#123;index&#125;</span><br><span class="line">/_cat/recovery</span><br><span class="line">/_cat/recovery/&#123;index&#125;</span><br><span class="line">/_cat/health</span><br><span class="line">/_cat/pending_tasks</span><br><span class="line">/_cat/aliases</span><br><span class="line">/_cat/aliases/&#123;<span class="built_in">alias</span>&#125;</span><br><span class="line">/_cat/thread_pool</span><br><span class="line">/_cat/thread_pool/&#123;thread_pools&#125;</span><br><span class="line">/_cat/plugins</span><br><span class="line">/_cat/fielddata</span><br><span class="line">/_cat/fielddata/&#123;fields&#125;</span><br><span class="line">/_cat/nodeattrs</span><br><span class="line">/_cat/repositories</span><br><span class="line">/_cat/snapshots/&#123;repository&#125;</span><br><span class="line">/_cat/templates</span><br></pre></td></tr></table></figure></li><li><p>查看集群名称等信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"elk_elasticsearch_data_2"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elk_elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"T47wQwa6TT-6MHJVFM40Tw"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"rpm"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"595516e"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2018-08-17T23:18:47.308994Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"7.4.0"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"5.6.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"5.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看集群节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/nodes?v</span><br><span class="line">ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">172.21.16.198           29          85   0    0.10    0.04     0.05 mdi       -      elk_elasticsearch_data_2</span><br><span class="line">172.21.16.187           48          85   0    0.00    0.01     0.05 mdi       *      elk_elasticsearch_master</span><br><span class="line">172.21.16.206           25          86   0    0.08    0.03     0.05 mdi       -      elk_elasticsearch_data_3</span><br></pre></td></tr></table></figure></li><li><p>验证集群磁盘分配情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/allocation?v</span><br><span class="line">shards disk.indices disk.used disk.avail disk.total disk.percent host          ip            node</span><br><span class="line">    98          1gb     3.6gb     96.3gb     99.9gb            3 172.21.16.198 172.21.16.198 elk_elasticsearch_data_2</span><br><span class="line">    99      887.1mb     4.5gb     95.4gb     99.9gb            4 172.21.16.187 172.21.16.187 elk_elasticsearch_master</span><br><span class="line">    99        957mb     3.5gb     96.4gb     99.9gb            3 172.21.16.206 172.21.16.206 elk_elasticsearch_data_3</span><br></pre></td></tr></table></figure></li><li><p>验证集群健康状况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/health?v </span><br><span class="line">epoch      timestamp cluster           status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1571648406 17:00:06  elk_elasticsearch green           3         3    296 148    0    0        0             0                  -                100.0%</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;days-1&quot;&gt;&lt;a href=&quot;#days-1&quot; class=&quot;headerlink&quot; title=&quot;days 1&quot;&gt;&lt;/a&gt;days 1&lt;/h3&gt;
    
    </summary>
    
      <category term="elasticserch" scheme="https://xxlaila.github.io//categories/elasticserch/"/>
    
    
      <category term="elasticserch" scheme="https://xxlaila.github.io//tags/elasticserch/"/>
    
  </entry>
  
  <entry>
    <title>nexus配置ldap</title>
    <link href="https://xxlaila.github.io/2019/10/15/nexus%E9%85%8D%E7%BD%AEldap/"/>
    <id>https://xxlaila.github.io/2019/10/15/nexus配置ldap/</id>
    <published>2019-10-15T09:28:34.000Z</published>
    <updated>2019-10-17T08:11:44.041Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置nexus"><a href="#配置nexus" class="headerlink" title="配置nexus"></a>配置nexus</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录nexus在设置页，点击ldap，</p><a id="more"></a><p><img src="http://img.xxlaila.cn/1571131890608.jpg" alt="img"><br>参数介绍:</p><ul><li>Name: 随便写</li><li>LDAP server address: 支持ldaps和ldap,而端口则取决于配置。 如果没有特殊配置，ldap默认端口是389</li><li>Search base: 只需要填DC即可，比如DC=example,DC=com。 其它内容，比如CN、OU等，不需要填写</li><li>Authentication method有以下选项:<ul><li>Simple Authentication</li><li>Anonymous Authentication</li><li>DIGEST-MD5</li><li>CRAM-MD5<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通常选择Simple Authentication即可。Username or DN、Password里填写账户、密码，而 Connection rules无需修改。填写完毕后，点击【Verify connection】按钮，可以验证信息。 如果成功，即可保存。</li></ul></li></ul><h4 id="Choose-Users-and-Groups"><a href="#Choose-Users-and-Groups" class="headerlink" title="Choose Users and Groups"></a>Choose Users and Groups</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这项故名思义就是配置用户和组的，在最开头的Configuration template中，有四种模板可选：</p><ul><li>Active Directory</li><li>Generic Ldap Server</li><li>Posix with Dynamic Groups</li><li>Posix with Static Groups</li></ul><p>这里选择<code>Generic Ldap Server</code></p><ul><li>Base DN 在LDAP中找到用户的基本位置。这是相对于搜索基础的（例如ou = people）。</li><li>User subtree通常需要勾选。 如果把LDAP的Tree比作目录的话，勾选以后相当于递归查找子目录。</li><li>User filter通过过滤规则，减少搜索信息，用于提升性能。 仅仅只是提升性能，所以，如果不懂它特殊的匹配规则，也可以不填。</li><li>之前选择了<code>Generic Ldap Server</code>模版后，User ID attribute默认为uid，Real name attribute默认为cn、Email attribute默认为mail、Password attribute为空。</li><li>Map LDAP groups as roles如果不勾选，就不会同步用户组信息。 如果勾选，则可以选择Group type和Group member of attribute。 若无必要，保持默认即可，默认是勾选的。<br><img src="http://img.xxlaila.cn/1571133103461.jpg" alt="img"></li><li>填写完成后，通过【Verify user mapping】可以验证查询结果<br><img src="http://img.xxlaila.cn/1571133221971.jpg" alt="img"><br>点击创建<br><img src="http://img.xxlaila.cn/1571133286829.jpg" alt="img"></li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新起一个窗口利用ldap里面的账号进行登录，可以登录，没有问题，但是登录之后用户没有任何权限，这对于研发来说又是一个不可接受的事情。接下来配置权限</p><h5 id="禁止匿名访问"><a href="#禁止匿名访问" class="headerlink" title="禁止匿名访问"></a>禁止匿名访问</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实际应用中，是不允许匿名用户不可以登录就能访问的，这样我们ldap就没有任何意义了<br><img src="http://img.xxlaila.cn/1571133691247.jpg" alt="img"></p><ul><li>禁止匿名用户<br><img src="http://img.xxlaila.cn/1571133811908.jpg" alt="img"></li></ul><h5 id="创建角色"><a href="#创建角色" class="headerlink" title="创建角色"></a>创建角色</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Security——&gt;Roles——&gt;Create role，这里创建角色有两种。一种是nexus relos本地角色，一种是External roles mapping外部映射的形式。为了满足我们ldap账户登录进来有浏览库的权限，研发又可以上传第三方依赖库的权限，但是不能删除和私下增加库Repositories。所以这里我们需要单独建立一个本地的relos，然后在映射外部的ldap到这个本地的roles，这样ldap账户登录进来就能实现日常的基本操作。</p><ul><li><p>创建nexus relos本地角色<br><img src="http://img.xxlaila.cn/1571296771150.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建完成后，我们需要对他赋予权限，对用户进行权限控制，没有权限控制，就没办法达成我们上面的目标。下面是我赋予的权限，可以结合实际需求来进行赋予。</p></li><li><p>权限介绍:</p><ul><li>ng-component-upload: 有上传的权限，比如java依赖的一些第三方库，研发可以自己进行上传</li><li>ng-repository-admin-<em>-</em>-browse: 浏览所有的repository</li><li>ng-repository-admin-<em>-</em>-read: 可以所有读取repository的配置信息</li><li>ng-repository-view-maven2-maven-central-browse: 具有浏览maven-central内容</li><li>ng-repository-view-maven2-maven-central-read: 读取maven-central内容，在maven编译的时候具有下载的权限，(后面不一一介绍)</li><li>ng-repository-view-maven2-maven-public-browse</li><li>ng-repository-view-maven2-maven-public-read</li><li>ng-repository-view-maven2-maven-releases-browse</li><li>ng-repository-view-maven2-maven-releases-read</li><li>ng-repository-view-maven2-maven-snapshots-browse</li><li>ng-repository-view-maven2-maven-snapshots-read</li><li>ng-repository-view-npm-npm-kxl-all-browse: 以下是自己做的npm代理缓存，可以参考之前的<a href="https://xxlaila.github.io/2019/08/23/nexus3搭建npm私服/">nexus3搭建npm私服</a></li><li>ng-repository-view-npm-npm-kxl-all-read</li><li>ng-repository-view-npm-npm-external-browse</li><li>ng-repository-view-npm-npm-external-read</li><li>ng-repository-view-npm-npm-internal-browse</li><li>ng-repository-view-npm-npm-internal-read</li><li>ng-search-read: 让用户具有所有权限，没有此权限，研发查找一个包，估计会死</li></ul></li><li><p>创建是External roles mapping外部映射<br><img src="http://img.xxlaila.cn/1571134166780.jpg" alt="img"><br><img src="http://img.xxlaila.cn/1571297568491.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在进行Roles ID 这栏目，需要填写的是Users，这个Users会在ldap上同步Users的一个用户组。根据自己的ldap账户组设置来进行填写。下图是ldap的组设置<br><img src="http://img.xxlaila.cn/1571298567078.jpg" alt="img"></p></li></ul><p><strong>注</strong>: 其实在这里我们也可以进行Privileges的权限赋予，但是我选择的是先创建一个本地的nexus relos。然后我们在Roles栏关联之前创建的<code>Developer</code>，完成以后通过ldap账户登录进行测试</p><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里主要是从四个方面来测试ldap账户。分别是: 登录默认的权限、浏览所有库的权限、Browse的浏览、Browse库的上传</p><ul><li><p>登录默认的权限<br><img src="http://img.xxlaila.cn/1571297962563.jpg" alt="img"></p></li><li><p>浏览所有库的权限<br><img src="http://img.xxlaila.cn/1571298121188.jpg" alt="img"></p></li><li><p>Browse的浏<br><img src="http://img.xxlaila.cn/1571298018356.jpg" alt="img"><br><img src="http://img.xxlaila.cn/1571298167348.jpg" alt="img"></p></li><li><p>Browse库的上传<br><img src="http://img.xxlaila.cn/1571298224331.jpg" alt="img"><br><img src="http://img.xxlaila.cn/1571298260091.jpg" alt="img"></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;配置nexus&quot;&gt;&lt;a href=&quot;#配置nexus&quot; class=&quot;headerlink&quot; title=&quot;配置nexus&quot;&gt;&lt;/a&gt;配置nexus&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;登录nexus在设置页，点击ldap，&lt;/p&gt;
    
    </summary>
    
      <category term="nexus" scheme="https://xxlaila.github.io//categories/nexus/"/>
    
    
      <category term="nexus" scheme="https://xxlaila.github.io//tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>jenkins配置备份</title>
    <link href="https://xxlaila.github.io/2019/10/15/jenkins%E9%85%8D%E7%BD%AE%E5%A4%87%E4%BB%BD/"/>
    <id>https://xxlaila.github.io/2019/10/15/jenkins配置备份/</id>
    <published>2019-10-15T00:55:19.000Z</published>
    <updated>2019-10-22T02:07:09.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jenkins-备份"><a href="#jenkins-备份" class="headerlink" title="jenkins 备份"></a>jenkins 备份</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当jenkins在用起来的时候，我们难保他不会出故障，但是出了故障我们怎么做到快速的恢复呢，这时备份就显得尤为重要了。但jenkins本身不提供备份的功能，所以这里就需要借助外力。备份可以多样化，一种是我们直接到jenkins的目录下面手动备份jenkins目录。一种是我们就jenkins自带的插件<code>thinBackup</code>和<code>Periodic Backup</code>进行备份恢复，下面进行分别介绍</p><a id="more"></a><h3 id="thinBackup备份"><a href="#thinBackup备份" class="headerlink" title="thinBackup备份"></a>thinBackup备份</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录jenkins——&gt;系统管理——&gt;插件管理<br><img src="http://img.xxlaila.cn/1571101180571.jpg" alt="img"><br>安装完成之后重启jenkins服务，登录jenkins在系统管理界面可以看到<br><img src="http://img.xxlaila.cn/1571101557754.jpg" alt="img"></p><h4 id="配置ThinBackup"><a href="#配置ThinBackup" class="headerlink" title="配置ThinBackup"></a>配置ThinBackup</h4><ul><li>点击ThinBackup<br><img src="http://img.xxlaila.cn/1571101640273.jpg" alt="img"><br>可以看到有三个选项:</li><li>Backup Now: 手动立即备份</li><li>Restore: 恢复备份</li><li>Settings: 备份参数的设置</li></ul><h5 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面是我的备份参数，可以根据自己的需要自己设定备份参数，设置好友save即可，<code>Backup schedule for full backups</code>意思是周一到周五每天凌晨两点进行备份<br><img src="http://img.xxlaila.cn/1571102057919.jpg" alt="img"></p><h5 id="Restore"><a href="#Restore" class="headerlink" title="Restore"></a>Restore</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;备份文件是以日期+时间节点组成的文件名，我们恢复什么时间段的，点击进行恢复，<br><img src="http://img.xxlaila.cn/1571102188007.jpg" alt="img"></p><h3 id="Periodic-Backup"><a href="#Periodic-Backup" class="headerlink" title="Periodic Backup"></a>Periodic Backup</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;备份除了上面提到的插件还有一个插件是<code>Periodic Backup</code>，安装<code>Periodic Backup</code>不阐述，安装完成后可以在系统管理菜单下面有一个<code>Periodic Backup Manager</code>菜单<br><img src="http://img.xxlaila.cn/1571709136813.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开<code>Periodic Backup Manager</code>，第一次打开是没有任何东西的，需要我们自己去建立一个规则，点击<code>Configure</code><br><img src="http://img.xxlaila.cn/1571709270639.jpg" alt="img"></p><p>配置项很简单:</p><ul><li></li><li>Temporary Directory: 临时目录</li><li>Backup schedule (cron): 进行备份cron的表达式，填写完成后点击<code>Validate cron syntax</code>进行验证</li><li>Maximum backups in location: 最大位置备份，保留多少个备份文件</li><li>Store no older than (days): 保留的时间</li><li>File Management Strategy: 备份策略<ul><li>ConfigOnly: 只备份配置文件</li><li>FullBackup: 进行全量备份，可以通过Excludes list中填入Ant风格表达式，排除不希望备份的文件，多个表达式使用分号分隔</li></ul></li><li>Storage Strategy: 存储策略，就是是否需要进行压缩存储</li><li>Backup Location: 备份的位置，都是本地目录<br><img src="http://img.xxlaila.cn/1571709879768.jpg" alt="img"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jenkins-备份&quot;&gt;&lt;a href=&quot;#jenkins-备份&quot; class=&quot;headerlink&quot; title=&quot;jenkins 备份&quot;&gt;&lt;/a&gt;jenkins 备份&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;当jenkins在用起来的时候，我们难保他不会出故障，但是出了故障我们怎么做到快速的恢复呢，这时备份就显得尤为重要了。但jenkins本身不提供备份的功能，所以这里就需要借助外力。备份可以多样化，一种是我们直接到jenkins的目录下面手动备份jenkins目录。一种是我们就jenkins自带的插件&lt;code&gt;thinBackup&lt;/code&gt;和&lt;code&gt;Periodic Backup&lt;/code&gt;进行备份恢复，下面进行分别介绍&lt;/p&gt;
    
    </summary>
    
      <category term="jenkins" scheme="https://xxlaila.github.io//categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="https://xxlaila.github.io//tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>jenkins配置ldap</title>
    <link href="https://xxlaila.github.io/2019/10/14/jenkins%E9%85%8D%E7%BD%AEldap/"/>
    <id>https://xxlaila.github.io/2019/10/14/jenkins配置ldap/</id>
    <published>2019-10-14T03:49:32.000Z</published>
    <updated>2019-10-15T02:18:25.482Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;公司研发人员和测试人员，还有运维人员有时候登录jenkins去查看一些job的状态或者是其他的东西，虽然有企业微信的通知，但是感觉还是不能满足，比如job错误了，企业微信虽然吧错误发给了研发人员，但是研发还是要登录jenkins上去看，就感觉要舒服一点，测试上做的一些自动化测试，有时候失败了他们也会去看或者是去建立一些自动化的job。之前建立了公共的账号，开发和测试人员都去登录，但是有时候他们误操作了，导致一些其他的东西失败或者错误，虽然做了权限控制，但是他们还是死不承认，所以这里介入ldap。谁动的就知道了，这样就不怕了。</p><a id="more"></a><h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录jenkins——&gt;系统管理——&gt;全局安全配置<br><img src="http://img.xxlaila.cn/1571025388007.jpg" alt="img"><br>访问控制——&gt;LDAP<br><img src="http://img.xxlaila.cn/1571027524602.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置完成以后我们需要测试一下连接是否正常，点击<code>Test LDAP setttings</code>，输入在ldap的其中一个账户来进行验证，没问题的结果如下:<br><img src="http://img.xxlaila.cn/1571027696951.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置完成并测试通过后就可以用LDAP直接登录了<br><strong>注</strong>: 启用了LDAP登录后将无法再用之前的登录方式（本地认证将无法在使用）登录，登录进来的任何一个账号都是管理员，都是管理着肯定来说不安全，权限配置请下看</p><p><a href="https://wiki.jenkins.io/display/JENKINS/LDAP+Plugin" target="_blank" rel="noopener">官方参考</a></p><h3 id="配置ldap的账户权限"><a href="#配置ldap的账户权限" class="headerlink" title="配置ldap的账户权限"></a>配置ldap的账户权限</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面我们虽然吧ldap配置完成，但是我们需要对用户进行权限的配置，不可能每个人登录都能对我们jenkins进行无限制的操作，这不符合我们之前的意图。安装<code>Role-based Authorization Strategy</code>插件</p><ul><li>在系统管理——&gt;全局安全配置,可以看到下面选项，每项介<a href="https://xxlaila.github.io/2019/08/09/jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/">参考</a><br><img src="http://img.xxlaila.cn/1571034253089.jpg" alt="img"></li></ul><p>保存以后，返回系统管理界面就可以看到多处一个<code>Manage and Assign Roles</code><br><img src="http://img.xxlaila.cn/1571034433352.jpg" alt="img"><br>点击进去</p><p><img src="http://img.xxlaila.cn/1571034507945.jpg" alt="img"></p><ul><li><strong>Manage Roles</strong>: 角色分为Global和Project，可创建角色分组和添加项目。</li><li><strong>Assign Roles</strong>: 增加具体的用户，分配到角色组，指定项目权限。</li></ul><p><a href="https://xxlaila.github.io/2019/08/09/jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/">权限设置</a></p><ul><li>下面我的配置，和之前的大同小异<br><img src="http://img.xxlaila.cn/1571038684383.jpg" alt="img"></li></ul><p><strong>注</strong>:  这里有一个小问题，这样配置以后，新用户登录进来以后就会提示没有权限，<code>Access Denied,xxxx没有全部/Read权限</code>，这是因为在打开jenkins后，没有创建用户前，先不要勾选系统设置中启用安全选项，如果勾选了，就会出现无法进入jenkins的现象<br><img src="http://img.xxlaila.cn/1571037187865.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在网上看到有这种的解决办法，有几种方案，一个是修改confing.xml的文件，修改config.xml文件的三种方式感觉都不太切合实际的业务；下面是我做的两种办法，推荐使用第二种</p><ul><li><p>Role-Based Strategy<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>Assign Roles</code>吧用户添加进来，然后勾选权限，<br>系统管理——&gt;Manage and Assign Roles——&gt;Assign Roles<br><img src="http://img.xxlaila.cn/1571037604678.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是这有一个弊端，就是每次新来一个用户就得去添加一次用户权限，虽然满足了业务需求，但是不科学</p></li><li><p>项目矩阵授权策略<br><img src="http://img.xxlaila.cn/1571041499340.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个全局的配置，特定组只能按照最小的权限授权，额外的权限可以在具体的项目权限矩阵里面在添加。 默认只有<code>Anonymous Users</code>和<code>Authenticated Users</code>，管理员组是需要添加的<code>admin</code></p></li><li><p>Anonymous Users: 匿名用户，显然不能</p></li><li><p>Authenticated Users: 认证用户，就是只要是认证的账号都可以拥有的权限</p></li><li><p>admin: 就是拥有所有的权限了，这个组一般只能运维人员和部门老大加入。</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加入admin组以后，他会自动去同步ldap的组用户，如果用户在ldap是admin组，那么在这里就会是管理员权限，如果用户是普通组，那么就是<code>Authenticated Users</code>组赋予的权限，使用这种方式只要用户是ldap里面的，就可以登录查看。这样就满足了业务场景需求</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;公司研发人员和测试人员，还有运维人员有时候登录jenkins去查看一些job的状态或者是其他的东西，虽然有企业微信的通知，但是感觉还是不能满足，比如job错误了，企业微信虽然吧错误发给了研发人员，但是研发还是要登录jenkins上去看，就感觉要舒服一点，测试上做的一些自动化测试，有时候失败了他们也会去看或者是去建立一些自动化的job。之前建立了公共的账号，开发和测试人员都去登录，但是有时候他们误操作了，导致一些其他的东西失败或者错误，虽然做了权限控制，但是他们还是死不承认，所以这里介入ldap。谁动的就知道了，这样就不怕了。&lt;/p&gt;
    
    </summary>
    
      <category term="jenkins" scheme="https://xxlaila.github.io//categories/jenkins/"/>
    
    
      <category term="jenkins ldap" scheme="https://xxlaila.github.io//tags/jenkins-ldap/"/>
    
  </entry>
  
  <entry>
    <title>java应用部署</title>
    <link href="https://xxlaila.github.io/2019/10/12/java%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
    <id>https://xxlaila.github.io/2019/10/12/java应用部署/</id>
    <published>2019-10-12T03:38:32.000Z</published>
    <updated>2019-10-15T02:18:36.026Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Welcome to my blog, enter password to read." />    <label for="hbePass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="228dd2936472938646206dad34a588890ef30d79a9156bb41a3a8245074c82c8"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="kubernetes" scheme="https://xxlaila.github.io//categories/kubernetes/"/>
    
    
      <category term="java" scheme="https://xxlaila.github.io//tags/java/"/>
    
  </entry>
  
  <entry>
    <title>harbor 使用</title>
    <link href="https://xxlaila.github.io/2019/10/10/harbor-%E4%BD%BF%E7%94%A8/"/>
    <id>https://xxlaila.github.io/2019/10/10/harbor-使用/</id>
    <published>2019-10-10T08:49:41.000Z</published>
    <updated>2019-10-14T03:24:27.988Z</updated>
    
    <content type="html"><![CDATA[<h4 id="days-2019-10-10"><a href="#days-2019-10-10" class="headerlink" title="days(2019-10-10)"></a>days(2019-10-10)</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面文章介绍了harbor的部署，今天第一次学习入门使用。</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务器安装docker以后，我们怎么吧镜像push到我们的私有仓库，和怎么吧镜像pull到本地，首先在服务器上装备docker环境</p><h5 id="连接harbor"><a href="#连接harbor" class="headerlink" title="连接harbor"></a>连接harbor</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker login reg.xxlaila.cn</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">Error response from daemon: Get https://172.21.16.90/v1/users/: dial tcp reg.xxlaila.cn:443: connect: connection refused</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里第一次连接报错，Docker自从1.3.X之后docker registry交互默认使用的是HTTPS，但是我们搭建私有镜像默认使用的是HTTP服务，所以与私有镜像交时出现以上错误。</p><h5 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h5><ul><li><p>方法一: 修改或添加配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/docker/daemon.json </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"insecure-registries"</span> : [<span class="string">"reg.xxlaila.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新启动docker，并重新登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl restart docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  docker login reg.xxlaila.cn</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure></li><li><p>方法二：修改启动文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /usr/lib/systemd/system/docker.service  </span></span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry reg.xxlaila.cn <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="Harbor上创建新项目供上传使用"><a href="#Harbor上创建新项目供上传使用" class="headerlink" title="Harbor上创建新项目供上传使用"></a>Harbor上创建新项目供上传使用</h5><p><img src="http://img.xxlaila.cn/1570697850857.jpg" alt="img"></p><h5 id="Docker服务器给镜像打标签"><a href="#Docker服务器给镜像打标签" class="headerlink" title="Docker服务器给镜像打标签"></a>Docker服务器给镜像打标签</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/xxlaila/kxl-eureka   v2                  eb8cf7e3f24f        7 months ago        474 MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker tag docker.io/xxlaila/kxl-eureka:v2 reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/xxlaila/kxl-eureka    v2                  eb8cf7e3f24f        7 months ago        474 MB</span><br><span class="line">reg.xxlaila.cn/kxl/kxl-eureka   v2                  eb8cf7e3f24f        7 months ago        474 MB</span><br></pre></td></tr></table></figure><h5 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker push reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line">The push refers to a repository [reg.xxlaila.cn/kxl/kxl-eureka]</span><br><span class="line">f6026bf67b63: Pushed </span><br><span class="line">1489a4b0f1dd: Pushed </span><br><span class="line">2af6e035aa36: Pushed </span><br><span class="line">472cfce4528e: Pushed </span><br><span class="line">071d8bd76517: Pushed </span><br><span class="line">v2: digest: sha256:20d3bc74fdcb2fc4cdfc9066f742c828898c728f7e3f2114498ebe2848b71653 size: 1368</span><br></pre></td></tr></table></figure><p><img src="http://img.xxlaila.cn/1570698233987.jpg" alt="img"></p><h5 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h5><ul><li><p>删除本地镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker rmi reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker rmi docker.io/xxlaila/kxl-eureka:v2</span></span><br></pre></td></tr></table></figure></li><li><p>下载harbor上的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker pull reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line">Trying to pull repository reg.xxlaila.cn/kxl/kxl-eureka ... </span><br><span class="line">v2: Pulling from reg.xxlaila.cn/kxl/kxl-eureka</span><br><span class="line">a02a4930cb5d: Pull complete </span><br><span class="line">6ea3dcbee0db: Extracting [==================================================&gt;]  81.4 MB/81.4 MB</span><br><span class="line">6ea3dcbee0db: Pull complete </span><br><span class="line">c423a7a79cc1: Pull complete </span><br><span class="line">7418081934c1: Pull complete </span><br><span class="line">f89b73853622: Pull complete </span><br><span class="line">Digest: sha256:20d3bc74fdcb2fc4cdfc9066f742c828898c728f7e3f2114498ebe2848b71653</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> reg.xxlaila.cn/kxl/kxl-eureka:v2</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://img.xxlaila.cn/1570698681073.jpg" alt="img"></p><h4 id="days-2019-10-12"><a href="#days-2019-10-12" class="headerlink" title="days(2019-10-12)"></a>days(2019-10-12)</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于公司需求，开发人员比较多，又不想研发用一个账号，也不想给研发一个个的开账号，位置harbor支持了ldap。有了这么一个东西，我们就能很好的为研发创建账号支持研发随时查看docker的镜像。</p><h4 id="配置harbor-ldap"><a href="#配置harbor-ldap" class="headerlink" title="配置harbor ldap"></a>配置harbor ldap</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新版本的harbor很多东西都可以直接在界面配置，不需要去修改文件，省去了大量的工作，web界面配置更加方便快捷，登录harbor平台，点击配置管理——&gt;修改认证模式，认证模式支持很多类型，这里选择ldap。<br><img src="http://img.xxlaila.cn/1571019665079.jpg" alt="img"><br><strong>注</strong>: 在密码这栏填写需要填写管理员的密码，普通用户的密码是不行的，即使是在管理员的用户也是不行的。<br>点击测试ldap，提示连接成功后保存<br><img src="http://img.xxlaila.cn/1571019741060.jpg" alt="img"></p><h4 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在配置ldap页面旁边有一个邮箱配置，邮件服务器用于向请求重设密码的用户发送响应。<br><img src="http://img.xxlaila.cn/1570873497729.jpg" alt="img"><br>点击测试，测试没问题之后点击保存。</p><h4 id="测试ladp连接"><a href="#测试ladp连接" class="headerlink" title="测试ladp连接"></a>测试ladp连接</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新打开一个一个浏览器窗口，利用ladp账户进行登录。<br><img src="http://img.xxlaila.cn/1571019859287.jpg" alt="img"><br><strong>注释</strong>: 新版本的在登录界面没有什么选择ldap登录，直接使用ldap账号登录就ok</p><h4 id="将项目角色分配给LDAP-AD组"><a href="#将项目角色分配给LDAP-AD组" class="headerlink" title="将项目角色分配给LDAP / AD组"></a>将项目角色分配给LDAP / AD组</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改之前的ldap配置，增加组的配置<br><img src="http://img.xxlaila.cn/1571023069387.jpg" alt="img"><br>在项目-&gt;成员-&gt; +组中。<br><img src="http://img.xxlaila.cn/1571023177214.jpg" alt="img"><br><img src="http://img.xxlaila.cn/1571023223796.jpg" alt="img"></p><h4 id="设置ldap账户的权限"><a href="#设置ldap账户的权限" class="headerlink" title="设置ldap账户的权限"></a>设置ldap账户的权限</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当ldap配置以后，ldap账户登录没有管理员权限，我们管理harbor还的使用<code>harbor</code>的admin账户登录，这样无疑对运维人员维护带来了不便利。当ldap用户登录，harbor就会记录该用户，我们设置运维用户为超级管理员，这样就实现了一个账号登录，维护的时候也不用账号切换<br><img src="http://img.xxlaila.cn/1571023451423.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;days-2019-10-10&quot;&gt;&lt;a href=&quot;#days-2019-10-10&quot; class=&quot;headerlink&quot; title=&quot;days(2019-10-10)&quot;&gt;&lt;/a&gt;days(2019-10-10)&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面文章介绍了harbor的部署，今天第一次学习入门使用。&lt;/p&gt;
    
    </summary>
    
      <category term="kubrnetes" scheme="https://xxlaila.github.io//categories/kubrnetes/"/>
    
    
      <category term="harbor" scheme="https://xxlaila.github.io//tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>HPA认识</title>
    <link href="https://xxlaila.github.io/2019/10/09/hpa/"/>
    <id>https://xxlaila.github.io/2019/10/09/hpa/</id>
    <published>2019-10-09T07:12:23.000Z</published>
    <updated>2019-10-23T00:33:54.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pod-自动扩缩容"><a href="#Pod-自动扩缩容" class="headerlink" title="Pod 自动扩缩容"></a>Pod 自动扩缩容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes提供了这样一个资源对象: <code>Horizontal Pod Autoscaling</code> Pod水平自动伸缩），简称HPA。HAP通过监控分析RC或者Deployment控制的所有Pod的负载变化情况来确定是否需要调整Pod的副本数量，这是HPA最基本的原理。</p><a id="more"></a><p><img src="http://img.xxlaila.cn/1570605234009.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HPA在kubernetes集群中被设计成一个Kubernetes API资源和控制器，可以通过kubectl autoscale命令来创建一个HPA资源对象，HPA Controller默认15s轮询一次（可通过kube-controller-manager的标志–horizontal-pod-autoscaler-sync-period进行设置），查询指定的资源（RC或者Deployment）中Pod的资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。<br><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="noopener">详细介绍</a></p><h3 id="Pod水平自动伸缩练习"><a href="#Pod水平自动伸缩练习" class="headerlink" title="Pod水平自动伸缩练习"></a>Pod水平自动伸缩练习</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于Horizontal Pod Autoscaler使用此API收集指标，因此需要在群集中部署metrics-server监视以通过资源指标API提供指标,</p><h4 id="运行php-apache服务器"><a href="#运行php-apache服务器" class="headerlink" title="运行php-apache服务器"></a>运行php-apache服务器</h4><p>首先，我们将开始运行该映像的部署，并将其服务公开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run php-apache --image=0layfolk0/hpa-example --requests=cpu=200m --limits=cpu=500m --expose --port=80</span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">service/php-apache created</span><br><span class="line">deployment.apps/php-apache created</span><br></pre></td></tr></table></figure><h4 id="创建水平Pod自动缩放器"><a href="#创建水平Pod自动缩放器" class="headerlink" title="创建水平Pod自动缩放器"></a>创建水平Pod自动缩放器</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当服务运行以后。我们将使用kubectl autoscale创建自动 缩放器。以下命令将创建一个水平Pod自动缩放器，该缩放器将维护由我们在这些说明的第一步中创建的php-apache部署控制的Pod的1至10个副本。粗略地说，HPA将（通过部署）增加或减少副本数，以将所有Pod的平均CPU利用率维持在50％（因为每个pod通过kubectl运行请求200毫核，这意味着平均CPU利用率为100毫-核心）。<a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#algorithm-details" target="_blank" rel="noopener">算法更多信息</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10</span><br><span class="line">horizontalpodautoscaler.autoscaling/php-apache autoscaled</span><br></pre></td></tr></table></figure><p>我们可以通过运行以下命令检查自动定标器的当前状态:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   0%/50%    1         10        1          14s</span><br></pre></td></tr></table></figure><p><strong>注释</strong>: 由于我们没有向服务器发送任何请求，因此当前CPU消耗为0％（“ CURRENT”列显示了由相应部署控制的所有Pod的平均值）。</p><h4 id="增加压力测试"><a href="#增加压力测试" class="headerlink" title="增加压力测试"></a>增加压力测试</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们要对<code>php-apache</code>做压力测试来观看自动缩放如何对增加的负载做出反应，我们将启动一个容器，并将无限循环的查询发送到php-apache服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run -i --tty load-generator --image=busybox /bin/sh</span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">If you don<span class="string">'t see a command prompt, try pressing enter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/ # while true; do wget -q -O- http://php-apache.default.svc.cluster.local; done</span></span><br><span class="line"><span class="string">OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!O</span></span><br></pre></td></tr></table></figure><p>在一分钟左右的时间内，我们应该通过执行以下命令来看到更高的CPU负载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME         REFERENCE               TARGETS    MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   250%/50%   1         10        1          9m12s</span><br><span class="line"></span><br><span class="line">$ kubectl get deployment php-apache</span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">php-apache   3/5     5            3           88m</span><br></pre></td></tr></table></figure><p>这里由于网络问题和pull 镜像太慢了，我就直接结束了测试</p><h4 id="停止压力测试"><a href="#停止压力测试" class="headerlink" title="停止压力测试"></a>停止压力测试</h4><p>我们在<code>busybox</code>容器的终端里面执行<code>&lt;Ctrl&gt; + C</code>来结束压力测试，然后我们在观察结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$  kubectl get hpa</span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   91%/50%   1         10        5          10m</span><br><span class="line"></span><br><span class="line">$ kubectl get deployment php-apache</span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">php-apache   2/2     2            2           99m</span><br></pre></td></tr></table></figure><p><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/" target="_blank" rel="noopener">自动缩放多个指标和自定义指标</a></p><h3 id="nginx-测试"><a href="#nginx-测试" class="headerlink" title="nginx 测试"></a>nginx 测试</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用之前<a href="https://xxlaila.github.io/2019/10/09/Deployment%E4%BD%BF%E7%94%A8/">Deployment</a>里面的nginx做测试，我们只需要吧之前的yaml文件稍作修改即可</p><h4 id="修改nginx-deployment-yaml"><a href="#修改nginx-deployment-yaml" class="headerlink" title="修改nginx-deployment.yaml"></a>修改nginx-deployment.yaml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; nginx-deployment.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-deploy</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-deploy</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-deploy</span><br><span class="line">        image: nginx:1.13.3</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            memory: <span class="string">"200Mi"</span></span><br><span class="line">            cpu: <span class="string">"200m"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="新建立nginx-deploy-hpa-yaml"><a href="#新建立nginx-deploy-hpa-yaml" class="headerlink" title="新建立nginx-deploy-hpa.yaml"></a>新建立nginx-deploy-hpa.yaml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; nginx-deploy-hpa.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: autoscaling/v1</span><br><span class="line">kind: HorizontalPodAutoscaler</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  maxReplicas: 5</span><br><span class="line">  minReplicas: 1</span><br><span class="line">  scaleTargetRef:</span><br><span class="line">    apiVersion: extensions/v1beta1</span><br><span class="line">    kind: Deployment</span><br><span class="line">    name: nginx-deploy</span><br><span class="line">  targetCPUUtilizationPercentage: 10</span><br><span class="line">status:</span><br><span class="line">  currentCPUUtilizationPercentage: 8</span><br><span class="line">  currentReplicas: 1</span><br><span class="line">  desiredReplicas: 0</span><br></pre></td></tr></table></figure><ul><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f nginx-deployment.yaml</span><br><span class="line">$ kubectl apply -f kubectl apply -f nginx-deploy-hpa.yaml</span><br></pre></td></tr></table></figure></li><li><p>查看验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   0%/10%    1         5         2          45s</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                        DESIRED   CURRENT   READY   AGE</span><br><span class="line">load-generator-7fbcc7489f   1         1         1       8m28s</span><br><span class="line">nginx-deploy-d494b9564      2         2         2       13m</span><br></pre></td></tr></table></figure></li><li><p>执行压力测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run -i --tty load-generator --image=busybox /bin/sh</span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">If you don<span class="string">'t see a command prompt, try pressing enter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/ # while true; do wget -q -O- http://172.30.224.5:80; done</span></span><br></pre></td></tr></table></figure></li><li><p>查看效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   28%/10%   1         5         4          4m48s</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                        DESIRED   CURRENT   READY   AGE</span><br><span class="line">load-generator-7fbcc7489f   1         1         1       12m</span><br><span class="line">nginx-deploy-d494b9564      5         5         5       18m</span><br><span class="line"></span><br><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   16%/10%   1         5         5          5m39s</span><br></pre></td></tr></table></figure></li><li><p>结束压测<br>等待一会查看结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   0%/10%    1         5         1          12m</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                        DESIRED   CURRENT   READY   AGE</span><br><span class="line">load-generator-7fbcc7489f   1         1         1       19m</span><br><span class="line">nginx-deploy-d494b9564      1         1         1       25m</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Pod-自动扩缩容&quot;&gt;&lt;a href=&quot;#Pod-自动扩缩容&quot; class=&quot;headerlink&quot; title=&quot;Pod 自动扩缩容&quot;&gt;&lt;/a&gt;Pod 自动扩缩容&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Kubernetes提供了这样一个资源对象: &lt;code&gt;Horizontal Pod Autoscaling&lt;/code&gt; Pod水平自动伸缩），简称HPA。HAP通过监控分析RC或者Deployment控制的所有Pod的负载变化情况来确定是否需要调整Pod的副本数量，这是HPA最基本的原理。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://xxlaila.github.io//categories/kubernetes/"/>
    
    
      <category term="hpa" scheme="https://xxlaila.github.io//tags/hpa/"/>
    
  </entry>
  
  <entry>
    <title>Deployment使用</title>
    <link href="https://xxlaila.github.io/2019/10/09/Deployment%E4%BD%BF%E7%94%A8/"/>
    <id>https://xxlaila.github.io/2019/10/09/Deployment使用/</id>
    <published>2019-10-09T01:59:08.000Z</published>
    <updated>2019-10-09T07:10:56.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Deployment和rc的对比"><a href="#Deployment和rc的对比" class="headerlink" title="Deployment和rc的对比"></a>Deployment和rc的对比</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先RC是Kubernetes的一个核心概念，当我们把应用部署到集群之后，需要保证应用能够持续稳定的运行，RC就是这个保证的关键，主要功能如:</p><ul><li>确保Pod数量: 它会确保Kubernetes中有指定数量的Pod在运行，如果少于指定数量的Pod，RC就会创建新的，反之这会删除多余的，保证Pod的副本数量不变。</li><li>确保Pod健康: 当Pod不健康，比如运行出错了，总之无法提供正常服务时，RC也会杀死不健康的Pod，重新创建新的。</li><li>弹性伸缩: 在业务高峰或者低峰的时候，可以用过RC来动态的调整Pod数量来提供资源的利用率，当然我们也提到过如果使用HPA这种资源对象的话可以做到自动伸缩。</li><li>滚动升级: 滚动升级是一种平滑的升级方式，通过逐步替换的策略，保证整体系统的稳定性</li></ul><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deployment同样也是Kubernetes系统的一个核心概念，主要职责和RC一样的都是保证Pod的数量和健康，二者大部分功能都是完全一致的，我们可以看成是一个升级版的RC控制器，Deployment具备的新特性</p><ul><li>RC的全部功能: Deployment具备上面描述的RC的全部功能</li><li>事件和状态查看: 可以查看Deployment的升级详细进度和状态</li><li>回滚: 当升级Pod的时候如果出现问题，可以使用回滚操作回滚到之前的任一版本</li><li>版本记录: 每一次对Deployment的操作，都能够保存下来，这也是保证可以回滚到任一版本的基础</li><li>暂停和启动: 对于每一次升级都能够随时暂停和启动</li></ul><p><strong>对比</strong>: Deployment作为新一代的RC，在功能上更为丰富，同时官方也是推荐使用Deployment来管理Pod，比如一些官方组件kube-dns、kube-proxy也都是使用的Deployment来管理的，所以最好使用Deployment来管理Pod。</p><h3 id="Deployment-介绍"><a href="#Deployment-介绍" class="headerlink" title="Deployment 介绍"></a>Deployment 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deployment拥有多个Replica Set，而一个Replica Set拥有一个或多个Pod。一个Deployment控制多个rs主要是为了支持回滚机制，每当Deployment操作时，Kubernetes会重新生成一个Replica Set并保留，以后有需要的话就可以回滚至之前的状态。</p><p><strong>实例</strong>: 创建一个Deployment，它创建了一个Replica Set来启动3个nginx pod，yaml文件如下:</p><ul><li><p>nginx-deployment.yaml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; nginx-deployment.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f nginx-deployment.yaml</span><br><span class="line">deployment.apps/nginx-deploy created</span><br></pre></td></tr></table></figure></li><li><p>执行一下命令查看刚刚创建的Deployment</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deployments</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deploy   0/3     3            0           12s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次执行上面命令</span></span><br><span class="line">$ kubectl get deployments</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deploy   1/3     3            1           35s</span><br></pre></td></tr></table></figure></li><li><p>可以看到Deployment已经创建了1个Replica Set了，执行下面的命令查看rs和pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get rs</span><br><span class="line">NAME                     DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d   3         3         2       70s</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">$ kubectl get pod --show-labels</span><br><span class="line">NAME                           READY   STATUS              RESTARTS   AGE   LABELS</span><br><span class="line">nginx-deploy-6dd86d77d-9n9vf   1/1     Running             0          99s   app=nginx,pod-template-hash=6dd86d77d</span><br><span class="line">nginx-deploy-6dd86d77d-bhrsk   0/1     ContainerCreating   0          99s   app=nginx,pod-template-hash=6dd86d77d</span><br><span class="line">nginx-deploy-6dd86d77d-jdnrh   1/1     Running             0          99s   app=nginx,pod-template-hash=6dd86d77d</span><br></pre></td></tr></table></figure></li></ul><p>上面的Deployment的yaml文件中的replicas:3将会保证我们始终有3个POD在运行。</p><h3 id="滚动升级"><a href="#滚动升级" class="headerlink" title="滚动升级"></a>滚动升级</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改之前使用的nginx-deployment.yaml文件中的nginx镜像修改为nginx:1.13.3，然后在spec下面添加滚动升级策略：</p><ul><li><p>nginx-deploments.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.3</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure></li><li><p>minReadySeconds:</p><ul><li>滚动升级时5s后认为该pod就绪</li><li>如果没有设置该值，Kubernetes会假设该容器启动起来后就提供服务了</li><li>如果没有设置该值，在某些极端情况下可能会造成服务不正常运行</li></ul></li><li><p>rollingUpdate:</p><ul><li>于replicas为3,则整个升级,pod个数在2-4个之间</li></ul></li><li><p>maxSurge:</p><ul><li>升级过程中最多可以比原先设置多出的POD数量</li><li>例如：maxSurage=1，replicas=3,则表示Kubernetes会先启动1一个新的Pod后才删掉一个旧的POD，整个升级过程中最多会有3+1个POD。</li></ul></li><li><p>maxUnavaible:</p><ul><li>升级过程中最多有多少个POD处于无法提供服务的状态</li><li>当maxSurge不为0时，该值也不能为0</li><li>例如：maxUnavaible=1，则表示Kubernetes整个升级过程中最多会有1个POD处于无法服务的状态。</li></ul></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f nginx-deployment.yaml</span><br><span class="line">deployment.apps/nginx-deploy configured</span><br></pre></td></tr></table></figure></li><li><p>查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用rollout命令</span></span><br><span class="line">$ kubectl rollout status deployment/nginx-deploy</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deploy"</span> rollout to finish: 2 out of 3 new replicas have been updated...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停升级</span></span><br><span class="line">$ kubectl rollout pause deployment deployment/nginx-deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续升级</span></span><br><span class="line">$ kubectl rollout resume deployment deployment/nginx-deploy</span><br></pre></td></tr></table></figure></li></ul><p>升级结束后，继续查看rs的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get rs</span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d    0         0         0       21m</span><br><span class="line">nginx-deploy-799d666985   3         3         3       10m</span><br></pre></td></tr></table></figure><p>根据AGE我们可以看到离我们最近的当前状态是：3，和我们的yaml文件是一致的，证明升级成功了。用describe命令可以查看升级的全部信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe deploy nginx-deploy</span><br><span class="line">Name:                   nginx-deploy</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Wed, 09 Oct 2019 10:12:56 +0800</span><br><span class="line">Labels:                 k8s-app=nginx-demo</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 2</span><br><span class="line">                        kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                          &#123;<span class="string">"apiVersion"</span>:<span class="string">"apps/v1beta1"</span>,<span class="string">"kind"</span>:<span class="string">"Deployment"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"labels"</span>:&#123;<span class="string">"k8s-app"</span>:<span class="string">"nginx-demo"</span>&#125;,<span class="string">"name"</span>:<span class="string">"nginx-deploy"</span>,<span class="string">"nam...</span></span><br><span class="line"><span class="string">Selector:               app=nginx</span></span><br><span class="line"><span class="string">Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable</span></span><br><span class="line"><span class="string">StrategyType:           RollingUpdate</span></span><br><span class="line"><span class="string">MinReadySeconds:        5</span></span><br><span class="line"><span class="string">RollingUpdateStrategy:  1 max unavailable, 1 max surge</span></span><br><span class="line"><span class="string">Pod Template:</span></span><br><span class="line"><span class="string">  Labels:  app=nginx</span></span><br><span class="line"><span class="string">  Containers:</span></span><br><span class="line"><span class="string">   nginx:</span></span><br><span class="line"><span class="string">    Image:        nginx:1.13.3</span></span><br><span class="line"><span class="string">    Port:         80/TCP</span></span><br><span class="line"><span class="string">    Host Port:    0/TCP</span></span><br><span class="line"><span class="string">    Environment:  &lt;none&gt;</span></span><br><span class="line"><span class="string">    Mounts:       &lt;none&gt;</span></span><br><span class="line"><span class="string">  Volumes:        &lt;none&gt;</span></span><br><span class="line"><span class="string">Conditions:</span></span><br><span class="line"><span class="string">  Type           Status  Reason</span></span><br><span class="line"><span class="string">  ----           ------  ------</span></span><br><span class="line"><span class="string">  Available      True    MinimumReplicasAvailable</span></span><br><span class="line"><span class="string">  Progressing    True    NewReplicaSetAvailable</span></span><br><span class="line"><span class="string">OldReplicaSets:  &lt;none&gt;</span></span><br><span class="line"><span class="string">NewReplicaSet:   nginx-deploy-799d666985 (3/3 replicas created)</span></span><br><span class="line"><span class="string">Events:</span></span><br><span class="line"><span class="string">  Type    Reason             Age   From                   Message</span></span><br><span class="line"><span class="string">  ----    ------             ----  ----                   -------</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  23m   deployment-controller  Scaled up replica set nginx-deploy-6dd86d77d to 3</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  12m   deployment-controller  Scaled up replica set nginx-deploy-799d666985 to 1</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  12m   deployment-controller  Scaled down replica set nginx-deploy-6dd86d77d to 2</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  12m   deployment-controller  Scaled up replica set nginx-deploy-799d666985 to 2</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  11m   deployment-controller  Scaled down replica set nginx-deploy-6dd86d77d to 1</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  11m   deployment-controller  Scaled up replica set nginx-deploy-799d666985 to 3</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  10m   deployment-controller  Scaled down replica set nginx-deploy-6dd86d77d to 0</span></span><br></pre></td></tr></table></figure><h3 id="回滚Deployment"><a href="#回滚Deployment" class="headerlink" title="回滚Deployment"></a>回滚Deployment</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面已经滚动平滑的升级Deployment，但是如果升级后的POD出了问题该怎么办？我们能够想到的最好最快的方式当然是回退到上一次能够提供正常工作的版本，Deployment就为我们提供了回滚机制。</p><ul><li>首先，查看Deployment的升级历史:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rollout <span class="built_in">history</span> deployment nginx-deploy</span><br><span class="line">deployment.extensions/nginx-deploy </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         &lt;none&gt;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上面的结果可以看出在执行Deployment升级的时候最好带上record参数，便于我们查看历史版本信息。<code>kubectl apply --filename=nginx-deployment.yaml --record=true</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认情况下，所有通过kubectl xxxx –record都会被kubernetes记录到etcd进行持久化，这无疑会占用资源，最重要的是，时间久了，当你kubectl get rs时，会有成百上千的垃圾RS返回，这对于运维来说维护很不便利，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我们在上生产时，我们最好通过设置Deployment的.spec.revisionHistoryLimit来限制最大保留的revision number，比如15个版本，回滚的时候一般只会回滚到最近的几个版本就足够了。其实rollout history中记录的revision都和ReplicaSets一一对应。如果手动delete某个ReplicaSet，对应的rollout history就会被删除，也就是还说你无法回滚到这个revison。rollout history和ReplicaSet的对应关系，可以在kubectl describe rs $RSNAME返回的revision字段中得到，这里的revision就对应着rollout history返回的revison。</p><ul><li><p>yaml例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ cat nginx-deployment.yaml </span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.3</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure></li><li><p>可以使用下面的命令查看单个revison的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rollout <span class="built_in">history</span> deployment nginx-deploy --revision=2</span><br><span class="line">deployment.extensions/nginx-deploy with revision <span class="comment">#2</span></span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:app=nginx</span><br><span class="line">pod-template-hash=799d666985</span><br><span class="line">  Annotations:kubernetes.io/change-cause: kubectl apply --filename=nginx-deployment.yaml --record=<span class="literal">true</span></span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:nginx:1.13.3</span><br><span class="line">    Port:80/TCP</span><br><span class="line">    Host Port:0/TCP</span><br><span class="line">    Environment:&lt;none&gt;</span><br><span class="line">    Mounts:&lt;none&gt;</span><br><span class="line">  Volumes:&lt;none&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接回退到当前版本的前一个版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl rollout undo deployment nginx-deploy</span><br><span class="line">deployment.extensions/nginx-deploy rolled back</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用revision回退到指定的版本</span></span><br><span class="line">$ kubectl rollout undo deployment nginx-deploy --to-revision=1</span><br><span class="line">deployment.extensions/nginx-deploy rolled back</span><br></pre></td></tr></table></figure></li><li><p>查看Deployment现在的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deployments</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deploy   2/3     3            2           56m</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d    1         1         1       56m</span><br><span class="line">nginx-deploy-799d666985   3         3         1       46m</span><br><span class="line"></span><br><span class="line">$ kubectl rollout status deployment/nginx-deploy</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deploy"</span> rollout to finish: 2 of 3 updated replicas are available...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deploy"</span> rollout to finish: 2 of 3 updated replicas are available...</span><br><span class="line">deployment <span class="string">"nginx-deploy"</span> successfully rolled out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成后查看</span></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d    0         0         0       57m</span><br><span class="line">nginx-deploy-799d666985   3         3         3       47m</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">官方参考</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Deployment和rc的对比&quot;&gt;&lt;a href=&quot;#Deployment和rc的对比&quot; class=&quot;headerlink&quot; title=&quot;Deployment和rc的对比&quot;&gt;&lt;/a&gt;Deployment和rc的对比&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;首先RC是Kubernetes的一个核心概念，当我们把应用部署到集群之后，需要保证应用能够持续稳定的运行，RC就是这个保证的关键，主要功能如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保Pod数量: 它会确保Kubernetes中有指定数量的Pod在运行，如果少于指定数量的Pod，RC就会创建新的，反之这会删除多余的，保证Pod的副本数量不变。&lt;/li&gt;
&lt;li&gt;确保Pod健康: 当Pod不健康，比如运行出错了，总之无法提供正常服务时，RC也会杀死不健康的Pod，重新创建新的。&lt;/li&gt;
&lt;li&gt;弹性伸缩: 在业务高峰或者低峰的时候，可以用过RC来动态的调整Pod数量来提供资源的利用率，当然我们也提到过如果使用HPA这种资源对象的话可以做到自动伸缩。&lt;/li&gt;
&lt;li&gt;滚动升级: 滚动升级是一种平滑的升级方式，通过逐步替换的策略，保证整体系统的稳定性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://xxlaila.github.io//categories/kubernetes/"/>
    
    
      <category term="Deployment" scheme="https://xxlaila.github.io//tags/Deployment/"/>
    
  </entry>
  
  <entry>
    <title>harbor私有仓库部署</title>
    <link href="https://xxlaila.github.io/2019/09/30/harbor%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2/"/>
    <id>https://xxlaila.github.io/2019/09/30/harbor私有仓库部署/</id>
    <published>2019-09-30T06:55:28.000Z</published>
    <updated>2019-10-14T08:06:02.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><a id="more"></a><h3 id="部署环境准备"><a href="#部署环境准备" class="headerlink" title="部署环境准备"></a>部署环境准备</h3><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><table><thead><tr><th>系统</th><th>配置</th><th>ip</th></tr></thead><tbody><tr><td>centos 7.4</td><td>4/8G/200G</td><td>172.21.16.90</td></tr></tbody></table><h4 id="下载所需文件"><a href="#下载所需文件" class="headerlink" title="下载所需文件"></a>下载所需文件</h4><h5 id="docker-compose-下载"><a href="#docker-compose-下载" class="headerlink" title="docker-compose 下载"></a>docker-compose 下载</h5><p>docker compose <a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">发布页面</a>下载最新的 docker-compose 二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span></span><br><span class="line"><span class="comment"># mv ~/docker-compose-Linux-x86_64 /usr/bin/docker-compose </span></span><br><span class="line"><span class="comment"># chmod a+x  /ur/bin/docker-compose</span></span><br></pre></td></tr></table></figure><ul><li>官方的安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"># chmod +x /usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="harbor-下载"><a href="#harbor-下载" class="headerlink" title="harbor 下载"></a>harbor 下载</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;harbor 安装方式有两种，一种是在线安装，一种是离线安装，这里由于网络不好，使用的是离线安装，harbor<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">发布页面</a>下载最新的 harbor 离线安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget https://storage.googleapis.com/harbor-releases/release-1.9.0/harbor-offline-installer-v1.9.0.tgz</span></span><br><span class="line"><span class="comment"># tar -zxvf harbor-offline-installer-v1.9.0.tgz</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum-config-manager   --add-repo   https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># sudo yum -y install docker-ce-18.09.6-3.el7.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cat /etc/sysctl.d/k8s.conf &lt;&lt;EOF</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables: 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables: 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># sysctl -p /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="comment"># systemctl  start docker</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>: 不添加<code>/etc/sysctl.d/k8s.conf</code> 启动docker会提示<code>WARNING: bridge-nf-call-iptables is disabled  WARNING: bridge-nf-call-ip6tables is disabled</code></p><h4 id="导入-docker-images"><a href="#导入-docker-images" class="headerlink" title="导入 docker images"></a>导入 docker images</h4><p>导入离线安装包中harbor相关的 docker images：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd harbor</span></span><br><span class="line"><span class="comment"># docker load -i harbor.v1.9.0.tar.gz </span></span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                      TAG                        IMAGE ID            CREATED             SIZE</span><br><span class="line">goharbor/chartmuseum-photon     v0.9.0-v1.9.0              00c12627cbd7        2 weeks ago         131MB</span><br><span class="line">goharbor/harbor-migrator        v1.9.0                     75d4de5e0f16        2 weeks ago         362MB</span><br><span class="line">goharbor/redis-photon           v1.9.0                     3249afaa9965        2 weeks ago         109MB</span><br><span class="line">goharbor/clair-photon           v2.0.9-v1.9.0              e54ad567c58f        2 weeks ago         165MB</span><br><span class="line">goharbor/notary-server-photon   v0.6.1-v1.9.0              2cdecba59f38        2 weeks ago         138MB</span><br><span class="line">goharbor/notary-signer-photon   v0.6.1-v1.9.0              973378593def        2 weeks ago         135MB</span><br><span class="line">goharbor/harbor-registryctl     v1.9.0                     30a01bf0f4df        2 weeks ago         99.6MB</span><br><span class="line">goharbor/registry-photon        v2.7.1-patch-2819-v1.9.0   32571099a9fe        2 weeks ago         82.3MB</span><br><span class="line">goharbor/nginx-photon           v1.9.0                     f933d62f9952        2 weeks ago         43.9MB</span><br><span class="line">goharbor/harbor-log             v1.9.0                     28e27d511335        2 weeks ago         82.6MB</span><br><span class="line">goharbor/harbor-jobservice      v1.9.0                     f3cd0b181a89        2 weeks ago         141MB</span><br><span class="line">goharbor/harbor-core            v1.9.0                     f2814ed8aadd        2 weeks ago         155MB</span><br><span class="line">goharbor/harbor-portal          v1.9.0                     0778d4c5d27e        2 weeks ago         51.3MB</span><br><span class="line">goharbor/harbor-db              v1.9.0                     a809e14d2d49        2 weeks ago         147MB</span><br><span class="line">goharbor/prepare                v1.9.0                     aa594772c1e8        2 weeks ago         147MB</span><br></pre></td></tr></table></figure><h4 id="修改-harbor-yml-文件"><a href="#修改-harbor-yml-文件" class="headerlink" title="修改 harbor.yml 文件"></a>修改 harbor.yml 文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim harbor.yml</span></span><br><span class="line">hostname: reg.xxlaila.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># email configure</span></span><br><span class="line">email_server: smtp.exmail.qq.com</span><br><span class="line">email_server_port: 465</span><br><span class="line">email_username: admin@xxlaila.cn</span><br><span class="line">email_password: 123</span><br><span class="line">email_from: admin&lt;admin@xxlaila.cn&gt;</span><br><span class="line">email_ssl: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User registration is prohibited</span></span><br><span class="line">self_registration: off</span><br><span class="line"></span><br><span class="line"><span class="comment"># LDAP authentication configuration item</span></span><br><span class="line"><span class="comment">#ldap_url: ldaps://ldap.xxlaila.cn</span></span><br><span class="line"><span class="comment">#ldap_searchdn: uid=username,ou=people,dc=xxlaila,dc=com</span></span><br><span class="line"><span class="comment">#ldap_search_pwd: password</span></span><br><span class="line"><span class="comment">#ldap_basedn: ou=people,dc=xxlaila,dc=com</span></span><br><span class="line"><span class="comment">#ldap_filter: (objectClass=person)</span></span><br><span class="line"><span class="comment">#ldap_uid: uid </span></span><br><span class="line"><span class="comment">#ldap_scope: 3 </span></span><br><span class="line"><span class="comment">#ldap_timeout: 5</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>: 新版本的邮箱、ldap现在都不需要在配置文件里面来添加配置了，直接通过web界面来进行配置即可，这里我只是添加进来，保留，😁😁😁</p><h4 id="加载和启动-harbor-镜像"><a href="#加载和启动-harbor-镜像" class="headerlink" title="加载和启动 harbor 镜像"></a>加载和启动 harbor 镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir /data</span></span><br><span class="line"><span class="comment"># chmod 777 /var/run/docker.sock /data</span></span><br><span class="line"><span class="comment"># ./install.sh </span></span><br><span class="line"></span><br><span class="line">[Step 0]: checking installation environment ...</span><br><span class="line"></span><br><span class="line">Note: docker version: 19.03.2</span><br><span class="line"></span><br><span class="line">Note: docker-compose version: 1.24.1</span><br><span class="line"></span><br><span class="line">[Step 1]: loading Harbor images ...</span><br><span class="line">Loaded image: goharbor/harbor-portal:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-core:v1.9.0</span><br><span class="line">Loaded image: goharbor/nginx-photon:v1.9.0</span><br><span class="line">Loaded image: goharbor/notary-signer-photon:v0.6.1-v1.9.0</span><br><span class="line">Loaded image: goharbor/registry-photon:v2.7.1-patch-2819-v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-migrator:v1.9.0</span><br><span class="line">Loaded image: goharbor/chartmuseum-photon:v0.9.0-v1.9.0</span><br><span class="line">Loaded image: goharbor/prepare:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-log:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-db:v1.9.0</span><br><span class="line">Loaded image: goharbor/clair-photon:v2.0.9-v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-jobservice:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-registryctl:v1.9.0</span><br><span class="line">Loaded image: goharbor/redis-photon:v1.9.0</span><br><span class="line">Loaded image: goharbor/notary-server-photon:v0.6.1-v1.9.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Step 2]: preparing environment ...</span><br><span class="line">prepare base dir is <span class="built_in">set</span> to /opt/harbor</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: /config/core/env</span><br><span class="line">Generated configuration file: /config/core/app.conf</span><br><span class="line">Generated configuration file: /config/registry/config.yml</span><br><span class="line">Generated configuration file: /config/registryctl/env</span><br><span class="line">Generated configuration file: /config/db/env</span><br><span class="line">Generated configuration file: /config/jobservice/env</span><br><span class="line">Generated configuration file: /config/jobservice/config.yml</span><br><span class="line">Generated and saved secret to file: /secret/keys/secretkey</span><br><span class="line">Generated certificate, key file: /secret/core/private_key.pem, cert file: /secret/registry/root.crt</span><br><span class="line">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class="line">Clean up the input dir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Step 3]: starting Harbor ...</span><br><span class="line">Creating network <span class="string">"harbor_harbor"</span> with the default driver</span><br><span class="line">Creating harbor-log ... <span class="keyword">done</span></span><br><span class="line">Creating registryctl   ... <span class="keyword">done</span></span><br><span class="line">Creating redis         ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-portal ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-db     ... <span class="keyword">done</span></span><br><span class="line">Creating registry      ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-core   ... <span class="keyword">done</span></span><br><span class="line">Creating nginx             ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-jobservice ... <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should be able to visit the admin portal at http://reg.xxlaila.cn. </span><br><span class="line">For more details, please visit https://github.com/goharbor/harbor .</span><br></pre></td></tr></table></figure><h4 id="访问管理界面"><a href="#访问管理界面" class="headerlink" title="访问管理界面"></a>访问管理界面</h4><p>确认所有组件都工作正常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose  ps</span></span><br><span class="line">      Name                     Command                       State                     Ports          </span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line">harbor-core         /harbor/harbor_core              Up (healthy)                                     </span><br><span class="line">harbor-db           /docker-entrypoint.sh            Up (healthy)            5432/tcp                 </span><br><span class="line">harbor-jobservice   /harbor/harbor_jobservice  ...   Up (health: starting)                            </span><br><span class="line">harbor-log          /bin/sh -c /usr/<span class="built_in">local</span>/bin/ ...   Up (healthy)            127.0.0.1:1514-&gt;10514/tcp</span><br><span class="line">harbor-portal       nginx -g daemon off;             Up (healthy)            8080/tcp                 </span><br><span class="line">nginx               nginx -g daemon off;             Up (healthy)            0.0.0.0:80-&gt;8080/tcp     </span><br><span class="line">redis               redis-server /etc/redis.conf     Up (healthy)            6379/tcp                 </span><br><span class="line">registry            /entrypoint.sh /etc/regist ...   Up (healthy)            5000/tcp                 </span><br><span class="line">registryctl         /harbor/start.sh                 Up (healthy)</span><br></pre></td></tr></table></figure><h5 id="harbor-组建介绍"><a href="#harbor-组建介绍" class="headerlink" title="harbor 组建介绍"></a>harbor 组建介绍</h5><ul><li>harbor-core:  Harbor的核心功能，主要提供以下服务：<ul><li>UI：提供图形化界面，帮助用户管理registry上的镜像（image）, 并对用户进行授权。 </li><li>webhook：为了及时获取registry 上image状态变化的情况， 在Registry上配置webhook，把状态变化传递给UI模块。</li><li>token 服务：负责根据用户权限给每个docker push/pull命令签发token. Docker 客户端向Regiøstry服务发起的请求,如果不包含token，会被重定向到这里，获得token后再重新向Registry进行请求。</li></ul></li><li>harbor-db: 为core services提供数据库服务，负责储存用户权限、审计日志、Docker image分组信息等数据。</li><li>harbor-jobservice: harbor-jobservice 是harbor的job管理模块，job在harbor里面主要是为了镜像仓库之前同步使用的;</li><li>harbor-log: 为了帮助监控Harbor运行，负责收集其他组件的log，供日后进行分析。</li><li>nginx: nginx负责流量转发和安全验证，对外提供的流量都是从nginx中转，所以开放https的443端口，它将流量分发到后端的ui和正在docker镜像存储的docker registry。</li><li>redis: 存储缓存信息</li><li>registry: 负责储存Docker镜像，并处理docker push/pull 命令。由于我们要对用户进行访问控制，即不同用户对Docker image有不同的读写权限，Registry会指向一个token服务，强制用户的每次docker pull/push请求都要携带一个合法的token, Registry会通过公钥对token 进行解密验证。</li><li>registryctl: 是harbor的管理员配置harbor的一些常用配置和高级配置</li></ul><p>在浏览器访问<a href="http://reg.xxlaila.cn，" target="_blank" rel="noopener">http://reg.xxlaila.cn，</a> 用账号 admin 和 harbor.yml 配置文件中的默认密码 Harbor12345 登陆系统<br><img src="http://img.xxlaila.cn/8095d05-b9b7-4bdc-b0fc-7810db649e23.png" alt="img"><br><img src="http://img.xxlaila.cn/4bfab8be-e5de-4165-9268-fa591c5f12f8.png" alt="img"></p><h4 id="harbor-运行时产生的文件、目录"><a href="#harbor-运行时产生的文件、目录" class="headerlink" title="harbor 运行时产生的文件、目录"></a>harbor 运行时产生的文件、目录</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;harbor 将日志打印到 /var/log/harbor 的相关目录下，传统的docker logs XXX 或 docker-compose logs XXX 看不到容器的日志。只有使用常用系统命令来进行日志的查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # 日志目录</span></span><br><span class="line"><span class="comment"># ls /var/log/harbor</span></span><br><span class="line">core.log  jobservice.log  portal.log  postgresql.log  proxy.log  redis.log  registryctl.log  registry.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 数据目录，包括数据库、镜像仓库</span></span><br><span class="line"><span class="comment"># ls /data/</span></span><br><span class="line">ca_download  database  job_logs  psc  redis  registry  secret</span><br></pre></td></tr></table></figure><h4 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h4><p>下列操作的工作目录均为解压离线安装文件后生成的 harbor 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # 停止 harbor</span></span><br><span class="line"><span class="comment"># docker-compose down -v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 启动 harbor</span></span><br><span class="line"><span class="comment"># docker-compose up -d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 更修改的配置更新到 docker-compose.yml 文件</span></span><br><span class="line"><span class="comment"># ./prepare</span></span><br><span class="line">prepare base dir is <span class="built_in">set</span> to /opt/harbor</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Clearing the configuration file: /config/nginx/nginx.conf</span><br><span class="line">Clearing the configuration file: /config/core/env</span><br><span class="line">Clearing the configuration file: /config/core/app.conf</span><br><span class="line">Clearing the configuration file: /config/registry/config.yml</span><br><span class="line">Clearing the configuration file: /config/registry/root.crt</span><br><span class="line">Clearing the configuration file: /config/registryctl/env</span><br><span class="line">Clearing the configuration file: /config/registryctl/config.yml</span><br><span class="line">Clearing the configuration file: /config/db/env</span><br><span class="line">Clearing the configuration file: /config/jobservice/env</span><br><span class="line">Clearing the configuration file: /config/jobservice/config.yml</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: /config/core/env</span><br><span class="line">Generated configuration file: /config/core/app.conf</span><br><span class="line">Generated configuration file: /config/registry/config.yml</span><br><span class="line">Generated configuration file: /config/registryctl/env</span><br><span class="line">Generated configuration file: /config/db/env</span><br><span class="line">Generated configuration file: /config/jobservice/env</span><br><span class="line">Generated configuration file: /config/jobservice/config.yml</span><br><span class="line">loaded secret from file: /secret/keys/secretkey</span><br><span class="line">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class="line">Clean up the input dir</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://xxlaila.github.io//categories/kubernetes/"/>
    
    
      <category term="harbor" scheme="https://xxlaila.github.io//tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>k8s pod健康检测</title>
    <link href="https://xxlaila.github.io/2019/09/27/k8s-pod%E5%81%A5%E5%BA%B7%E6%A3%80%E6%B5%8B/"/>
    <id>https://xxlaila.github.io/2019/09/27/k8s-pod健康检测/</id>
    <published>2019-09-27T05:37:53.000Z</published>
    <updated>2019-09-29T03:25:26.771Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pod健康检测机制"><a href="#Pod健康检测机制" class="headerlink" title="Pod健康检测机制"></a>Pod健康检测机制</h3><p>对于Pod的健康状态检测，kubernetes提供了两类探针(Probe)来执行对Pod的健康状态检测:</p><ul><li><strong>LivenessProbe探针</strong>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于判断容器是否存活，即Pod是否为running状态，如果LivenessProbe探针探测到容器不健康，则kubelet将kill掉容器，并根据容器的重启策略是否重启，如果一个容器不包含LivenessProbe探针，则Kubelet认为容器的LivenessProbe探针的返回值永远成功.</li></ul><a id="more"></a><ul><li><strong>ReadinessProbe探针</strong>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于判断容器是否启动完成，即容器的Ready是否为True，可以接收请求，如果ReadinessProbe探测失败，则容器的Ready将为False，控制器将此Pod的Endpoint从对应的service的Endpoint列表中移除，从此不再将任何请求调度此Pod上，直到下次探测成功。</li></ul><!--more--><p>每类探针都支持三种探测方法:</p><ul><li><strong>exec</strong>: 通过执行命令来检查服务是否正常，针对复杂检测或无HTTP接口的服务，命令返回值为0则表示容器健康。</li><li><strong>httpGet</strong>: 通过发送http请求检查服务是否正常，返回200-399状态码则表明容器健康。</li><li><strong>tcpSocket</strong>: 通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康。</li></ul><p>探针探测的结果有以下三者之一:</p><ul><li><strong>Success</strong>: Container通过了检查</li><li><strong>Failure</strong>: Container未通过检查</li><li><strong>Unknown</strong>: 未能执行检查，因此不采取任何措施</li></ul><h3 id="LivenessProbe探针配置"><a href="#LivenessProbe探针配置" class="headerlink" title="LivenessProbe探针配置"></a>LivenessProbe探针配置</h3><h4 id="例一：通过exec方式做健康探测"><a href="#例一：通过exec方式做健康探测" class="headerlink" title="例一：通过exec方式做健康探测"></a>例一：通过exec方式做健康探测</h4><ul><li>exec-liveness.yaml<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; <span class="built_in">exec</span>-liveness.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">test</span>: liveness</span><br><span class="line">  name: liveness-exec</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600</span><br><span class="line">    livenessProbe:</span><br><span class="line">      <span class="built_in">exec</span>:</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - cat</span><br><span class="line">        - /tmp/healthy</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 5</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在该配置文件中，对容器执行livenessProbe检查，periodSeconds字段指定kubelet每5s执行一次检查，检查的命令为cat /tmp/healthy，initialDelaySeconds字段告诉kubelet应该在执行第一次检查之前等待5秒，如果命令执行成功，则返回0，那么kubelet就认为容器是健康的，如果为非0，则Kubelet会Kill掉容器并根据重启策略来决定是否需要重启。</p><ul><li>当容器启动时，它会执行以下命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c <span class="string">"touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600"</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于容器的前30秒，有一个/tmp/healthy文件。因此，在前30秒内，该命令cat /tmp/healthy返回成功代码。30秒后，cat /tmp/healthy返回失败代码。</p><ul><li><p>创建Pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  kubectl create -f  <span class="built_in">exec</span>-liveness.yaml </span><br><span class="line">pod/liveness-exec created</span><br></pre></td></tr></table></figure></li><li><p>在30秒内，查看Pod事件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod liveness-exec</span><br><span class="line">…………</span><br><span class="line">QoS Class:       BestEffort</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From                   Message</span><br><span class="line">  ----    ------     ----  ----                   -------</span><br><span class="line">  Normal  Scheduled  23s   default-scheduler      Successfully assigned default/liveness-exec to 172.21.17.34</span><br><span class="line">  Normal  Pulling    20s   kubelet, 172.21.17.34  Pulling image <span class="string">"busybox"</span></span><br><span class="line">  Normal  Pulled     2s    kubelet, 172.21.17.34  Successfully pulled image <span class="string">"busybox"</span></span><br><span class="line">  Normal  Created    2s    kubelet, 172.21.17.34  Created container liveness</span><br><span class="line">  Normal  Started    1s    kubelet, 172.21.17.34  Started container liveness</span><br></pre></td></tr></table></figure></li><li><p>35秒后，再次查看Pod事件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod liveness-exec</span><br><span class="line">…………</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age              From                   Message</span><br><span class="line">  ----     ------     ----             ----                   -------</span><br><span class="line">  Normal   Scheduled  58s              default-scheduler      Successfully assigned default/liveness-exec to 172.21.17.34</span><br><span class="line">  Normal   Pulling    55s              kubelet, 172.21.17.34  Pulling image <span class="string">"busybox"</span></span><br><span class="line">  Normal   Pulled     37s              kubelet, 172.21.17.34  Successfully pulled image <span class="string">"busybox"</span></span><br><span class="line">  Normal   Created    37s              kubelet, 172.21.17.34  Created container liveness</span><br><span class="line">  Normal   Started    36s              kubelet, 172.21.17.34  Started container liveness</span><br><span class="line">  Warning  Unhealthy  0s (x2 over 5s)  kubelet, 172.21.17.34  Liveness probe failed: cat: can<span class="string">'t open '</span>/tmp/healthy<span class="string">': No such file or directory</span></span><br></pre></td></tr></table></figure></li><li><p>再等30秒，确认Container已重新启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod liveness-exec</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-exec   1/1     Running   1          115s</span><br><span class="line"></span><br><span class="line">$ kubectl describe pod liveness-exec</span><br><span class="line">………………</span><br><span class="line">QoS Class:       BestEffort</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age                 From                   Message</span><br><span class="line">  ----     ------     ----                ----                   -------</span><br><span class="line">  Normal   Scheduled  2m7s                default-scheduler      Successfully assigned default/liveness-exec to 172.21.17.34</span><br><span class="line">  Warning  Unhealthy  64s (x3 over 74s)   kubelet, 172.21.17.34  Liveness probe failed: cat: can<span class="string">'t open '</span>/tmp/healthy<span class="string">': No such file or directory</span></span><br><span class="line"><span class="string">  Normal   Killing    64s                 kubelet, 172.21.17.34  Container liveness failed liveness probe, will be restarted</span></span><br><span class="line"><span class="string">  Normal   Pulling    34s (x2 over 2m4s)  kubelet, 172.21.17.34  Pulling image "busybox"</span></span><br><span class="line"><span class="string">  Normal   Pulled     25s (x2 over 106s)  kubelet, 172.21.17.34  Successfully pulled image "busybox"</span></span><br><span class="line"><span class="string">  Normal   Created    25s (x2 over 106s)  kubelet, 172.21.17.34  Created container liveness</span></span><br><span class="line"><span class="string">  Normal   Started    25s (x2 over 105s)  kubelet, 172.21.17.34  Started container liveness</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="例二-通过HTTP方式做健康探测"><a href="#例二-通过HTTP方式做健康探测" class="headerlink" title="例二: 通过HTTP方式做健康探测"></a>例二: 通过HTTP方式做健康探测</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; http-liveness.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">test</span>: liveness</span><br><span class="line">  name: liveness-http</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: carlziess/liveness</span><br><span class="line">    args:</span><br><span class="line">    - /server</span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: /healthz</span><br><span class="line">        port: 8080</span><br><span class="line">        httpHeaders:</span><br><span class="line">        - name: X-Custom-Header</span><br><span class="line">          value: Awesome</span><br><span class="line">      initialDelaySeconds: 3</span><br><span class="line">      periodSeconds: 3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建一个Pod，其中periodSeconds字段指定kubelet每3秒执行一次探测，initialDelaySeconds字段告诉kubelet延迟等待3秒，探测方式为向容器中运行的服务发送HTTP GET请求，请求8080端口下的/healthz, 任何大于或等于200且小于400的代码表示成功。任何其他代码表示失败。</p><ul><li><p>创建pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f http-liveness.yaml </span><br><span class="line">pod/liveness-http created</span><br></pre></td></tr></table></figure></li><li><p>检查验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod liveness-http</span><br><span class="line">………………</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age                   From                   Message</span><br><span class="line">  ----     ------     ----                  ----                   -------</span><br><span class="line">  Normal   Scheduled  2m59s                 default-scheduler      Successfully assigned default/liveness-http to 172.21.17.34</span><br><span class="line">  Normal   Pulled     119s (x3 over 2m46s)  kubelet, 172.21.17.34  Successfully pulled image <span class="string">"carlziess/liveness"</span></span><br><span class="line">  Normal   Created    119s (x3 over 2m46s)  kubelet, 172.21.17.34  Created container liveness</span><br><span class="line">  Normal   Started    118s (x3 over 2m45s)  kubelet, 172.21.17.34  Started container liveness</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-http   1/1     Running   0          26s</span><br></pre></td></tr></table></figure></li><li><p><strong>httpGet</strong>探测方式有如下可选的控制字段</p><ul><li>host: 要连接的主机名，默认为Pod IP，可以在http request head中设置host头部。</li><li>scheme: 用于连接host的协议，默认为HTTP。</li><li>path: http服务器上的访问URL</li><li>httpHeaders: 自定义HTTP请求headers，HTTP允许重复headers</li><li>port: 容器上要访问端口号或名称</li></ul></li></ul><h4 id="例三-通过TCP方式做健康探测"><a href="#例三-通过TCP方式做健康探测" class="headerlink" title="例三: 通过TCP方式做健康探测"></a>例三: 通过TCP方式做健康探测</h4><p>Kubelet将尝试在指定的端口上打开容器上的套接字，如果能建立连接，则表明容器健康。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; tcp-liveness-readiness.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: goproxy</span><br><span class="line">  labels:</span><br><span class="line">    app: goproxy</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: goproxy</span><br><span class="line">    image: goproxy/goproxy</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 8080</span><br><span class="line">    readinessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 8080</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 10</span><br><span class="line">    livenessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 8080</span><br><span class="line">      initialDelaySeconds: 15</span><br><span class="line">      periodSeconds: 20</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TCP检查方式和HTTP检查方式非常相似，示例中两种探针都使用了，在容器启动5秒后，kubelet将发送第一个readinessProbe探针，这将连接到容器的8080端口，如果探测成功，则该Pod将被标识为ready，10秒后，kubelet将进行第二次连接。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此，配置还包含了livenessProbe探针，在容器启动15秒后，kubelet将发送第一个livenessProbe探针，仍然尝试连接容器的8080端口，如果连接失败则重启容器。</p><ul><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f tcp-liveness-readiness.yaml</span><br><span class="line">pod/goproxy created</span><br></pre></td></tr></table></figure></li><li><p>15秒后，查看Pod事件以验证活动探测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod goproxy</span><br><span class="line">………………</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From                    Message</span><br><span class="line">  ----    ------     ----  ----                    -------</span><br><span class="line">  Normal  Scheduled  26s   default-scheduler       Successfully assigned default/goproxy to 172.21.16.231</span><br><span class="line">  Normal  Pulling    22s   kubelet, 172.21.16.231  Pulling image <span class="string">"goproxy/goproxy"</span></span><br></pre></td></tr></table></figure></li></ul><p>当容器有多个端口时，通常会给每个端口命名，所以在使用探针探测时，也可以直接写自定义的端口名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ports:</span><br><span class="line">- name: liveness-port</span><br><span class="line">  containerPort: 8080</span><br><span class="line">  hostPort: 8080</span><br><span class="line">livenessProbe:</span><br><span class="line">  httpGet:</span><br><span class="line">    path: /healthz</span><br><span class="line">    port: liveness-port</span><br></pre></td></tr></table></figure><h3 id="ReadinessProbe探针配置"><a href="#ReadinessProbe探针配置" class="headerlink" title="ReadinessProbe探针配置"></a>ReadinessProbe探针配置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadinessProbe探针的使用场景livenessProbe稍有不同，有的时候应用程序可能暂时无法接受请求，比如Pod已经Running了，但是容器内应用程序尚未启动成功，在这种情况下，如果没有ReadinessProbe，则Kubernetes认为它可以处理请求了，然而此时，我们知道程序还没启动成功是不能接收用户请求的，所以不希望kubernetes把请求调度给它，则使用ReadinessProbe探针。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadinessProbe和livenessProbe可以使用相同探测方式，只是对Pod的处置方式不同，ReadinessProbe是将Pod IP:Port从对应的EndPoint列表中删除，而livenessProbe则Kill容器并根据Pod的重启策略来决定作出对应的措施。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;探针探测容器是否已准备就绪，如果未准备就绪则kubernetes不会将流量转发给此Pod。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadinessProbe探针与livenessProbe一样也支持exec、httpGet、TCP的探测方式，配置方式相同，只不过是将livenessProbe字段修改为ReadinessProbe。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">readinessProbe:</span><br><span class="line">  <span class="built_in">exec</span>:</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">    - cat</span><br><span class="line">    - /tmp/healthy</span><br><span class="line">  initialDelaySeconds: 5</span><br><span class="line">  periodSeconds: 5</span><br></pre></td></tr></table></figure><p>ReadinessProbe探针的HTTP、TCP的探测方式也与livenessProbe的基本一致。</p><h4 id="例四-ReadinessProbe示例"><a href="#例四-ReadinessProbe示例" class="headerlink" title="例四: ReadinessProbe示例"></a>例四: ReadinessProbe示例</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加入ReadinessProbe探针和一个没有ReadinessProbe探针的示例，该示例中，创建了一个deploy，名为JavaApp，启动的容器运行一个java应用程序，程序监听端口为9093。</p><ul><li><p>没有ReadinessProbe</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; k8s.yaml &lt;&lt; EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  labels:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9093</span><br><span class="line">    name: biz-gateway</span><br><span class="line">  selector:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: biz-gateway</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: biz-gateway</span><br><span class="line">        image: docker.io/xxlaila/biz-gateway:dev-08c8a4e</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9093</span><br><span class="line">        env:</span><br><span class="line">        - name: RUN_ENV</span><br><span class="line">          value: dev</span><br><span class="line">        - name: CONFIG_API_SERVER</span><br><span class="line">          value: http://api.conf.xxlaila.cn</span><br><span class="line">        - name: RUN_CLUSTER</span><br><span class="line">          value: default</span><br><span class="line">        - name: RUN_MODE</span><br><span class="line">          value: AUTO</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f k8s.yaml </span><br><span class="line">service/biz-gateway created</span><br><span class="line">deployment.extensions/biz-gateway created</span><br></pre></td></tr></table></figure></li><li><p>刚创建后，等一会后，查看Pod状态，记着要给image留下pull的时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods  |grep <span class="string">"biz-gateway"</span></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">biz-gateway-95f6b677f-rnz22   1/1     Running   0          2m8s</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到，整个过程Pod用了2m8s，自身状态已Running，其READ字段，1/1 表示1个容器状态已准备就绪了，此时，对于kubernetes而言，已经可以接收请求了,而实际上服务还无法访问，因为JAVA程序还尚启动起来，2m8ss后方可正常访问，所以针对此类程序，必须配置ReadinessProbe。</p><ul><li>加入readinessProbe<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; k8s.yaml &lt;&lt; EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  labels:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 9093</span><br><span class="line">    name: biz-gateway</span><br><span class="line">  selector:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: biz-gateway</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: biz-gateway</span><br><span class="line">        image: docker.io/xxlaila/biz-gateway:dev-08c8a4e</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9093</span><br><span class="line">        readinessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 9093</span><br><span class="line">          initialDelaySeconds: 140</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">        env:</span><br><span class="line">        - name: RUN_ENV</span><br><span class="line">          value: dev</span><br><span class="line">        - name: CONFIG_API_SERVER</span><br><span class="line">          value: http://api.conf.xxlaila.cn</span><br><span class="line">        - name: RUN_CLUSTER</span><br><span class="line">          value: default</span><br><span class="line">        - name: RUN_MODE</span><br><span class="line">          value: AUTO</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在该配置文件中，ReadinessProbe探针的探测方式为tcpSocket，因为程序监听在9093端口，所以这里探测为对9093建立连接,这里第一次探测时间是在Pod Runing后140秒后，间隔10秒后执行第二次探测。</p><ul><li><p>创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f ./</span><br><span class="line">service/biz-gateway created</span><br><span class="line">deployment.extensions/biz-gateway created</span><br></pre></td></tr></table></figure></li><li><p>查看验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建后等待了60s</span></span><br><span class="line">$ kubectl get pod -o wide</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE   IP            NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">biz-gateway-f69cc8678-qs8s7   0/1     Running   0          60s   172.30.56.6   172.21.17.40   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续等待一会</span></span><br><span class="line">$ kubectl get pod -o wide</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE     IP            NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">biz-gateway-f69cc8678-qs8s7   1/1     Running   0          2m36s   172.30.56.6   172.21.17.40   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到在2m36秒后，pod启动ok，在第一次查看的时候，Pod虽然已处于Runnig状态，但是由于第一次探测时间未到，所以READY字段为0/1，即容器的状态为未准备就绪，在未准备就绪的情况下，其Pod对应的Service下的Endpoint也为空，所以才不会有任何请求被调度进来。</p><ul><li>查看Endpoint<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次执行</span></span><br><span class="line">$ kubectl get endpoints</span><br><span class="line">NAME          ENDPOINTS                                                AGE</span><br><span class="line">biz-gateway                                                            57s</span><br><span class="line">kubernetes    172.21.16.110:6443,172.21.17.30:6443,172.21.17.31:6443   13d</span><br><span class="line"></span><br><span class="line">在2m36s后在次执行</span><br><span class="line">$ kubectl get endpoints</span><br><span class="line">NAME          ENDPOINTS                                                AGE</span><br><span class="line">biz-gateway   172.30.56.6:9093                                         2m41s</span><br><span class="line">kubernetes    172.21.16.110:6443,172.21.17.30:6443,172.21.17.31:6443   13d</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置探针-Probe-相关属性"><a href="#配置探针-Probe-相关属性" class="headerlink" title="配置探针(Probe)相关属性"></a>配置探针(Probe)相关属性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;探针(Probe)有许多可选字段，可以用来更加精确的控制Liveness和Readiness两种探针的行为(Probe)：</p><ul><li>initialDelaySeconds：Pod启动后延迟多久才进行检查，单位：秒</li><li>periodSeconds：检查的间隔时间，默认为10，单位：秒。</li><li>timeoutSeconds：探测的超时时间，默认为1，单位：秒。</li><li>successThreshold：探测失败后认为成功的最小连接成功次数，默认为1，在Liveness探针中必须为1，最小值为1。</li><li>failureThreshold：探测失败的重试次数，重试一定次数后将认为失败，在readiness探针中，Pod会被标记为未就绪，默认为3，最小值为1。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>之前错误参考排查介绍</strong>: 在之前安装jenkins的时候，创建pod就一值处于<code>running</code>,但是过一会，界面就报错，错误如下图<br><img src="http://img.xxlaila.cn/15008WechatIMG.png" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后查看pod日志和系统系统，都没有任何问题，pod日志如下，然后就问了朋友，就说有可能是pod的健康检测机制，最后就修改了pod的健康检测机制，jenkins服务器部署ok。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">log</span> $(kubectl get pods -n kube-ops | awk <span class="string">'&#123;print $1&#125;'</span> | grep jenkins) -n kube-ops</span><br><span class="line"><span class="built_in">log</span> is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use logs instead.</span><br><span class="line">VM settings:</span><br><span class="line">    Max. Heap Size: 3.00G</span><br><span class="line">    Ergonomics Machine Class: server</span><br><span class="line">    Using VM: OpenJDK 64-Bit Server VM</span><br><span class="line"></span><br><span class="line">Running from: /usr/share/jenkins/jenkins.war</span><br><span class="line">webroot: EnvVars.masterEnvVars.get(<span class="string">"JENKINS_HOME"</span>)</span><br><span class="line">2019-09-27 03:02:24.133+0000 [id=1] INFO org.eclipse.jetty.util.log.Log<span class="comment">#initialized: Logging initialized @429ms to org.eclipse.jetty.util.log.JavaUtilLog</span></span><br><span class="line">2019-09-27 03:02:24.247+0000 [id=1] INFO winstone.Logger<span class="comment">#logInternal: Beginning extraction from war file</span></span><br></pre></td></tr></table></figure><p><strong>后续</strong>: 虽然健康检测可以取消，不加入，但是当我们在上生产环境的时候还是要加上，正如例四介绍的那样。如果我们在生产环境错故障自愈、轮询发布等。都需要这个东西，加入再升级的时候，服务器都还没起来，k8s就吧流量给调度过来，升级下一个pod，外部用户访问就会报错，那就是很尴尬</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Pod健康检测机制&quot;&gt;&lt;a href=&quot;#Pod健康检测机制&quot; class=&quot;headerlink&quot; title=&quot;Pod健康检测机制&quot;&gt;&lt;/a&gt;Pod健康检测机制&lt;/h3&gt;&lt;p&gt;对于Pod的健康状态检测，kubernetes提供了两类探针(Probe)来执行对Pod的健康状态检测:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LivenessProbe探针&lt;/strong&gt;:&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;用于判断容器是否存活，即Pod是否为running状态，如果LivenessProbe探针探测到容器不健康，则kubelet将kill掉容器，并根据容器的重启策略是否重启，如果一个容器不包含LivenessProbe探针，则Kubelet认为容器的LivenessProbe探针的返回值永远成功.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://xxlaila.github.io//categories/kubernetes/"/>
    
    
      <category term="pod" scheme="https://xxlaila.github.io//tags/pod/"/>
    
  </entry>
  
  <entry>
    <title>EFK</title>
    <link href="https://xxlaila.github.io/2019/09/25/EFK/"/>
    <id>https://xxlaila.github.io/2019/09/25/EFK/</id>
    <published>2019-09-25T07:24:18.000Z</published>
    <updated>2019-09-26T03:13:12.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化配置文件准备"><a href="#初始化配置文件准备" class="headerlink" title="初始化配置文件准备"></a>初始化配置文件准备</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将下载的 kubernetes-server-linux-amd64.tar.gz 解压后，再解压其中的 kubernetes-src.tar.gz 文件。<code>kubernetes/cluster/addons/fluentd-elasticsearch</code>这是文件所在的路径</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;es 数据默认的存储在docker里面，在用的是node节点的空间，而node节点我们不可能都准备很大的空间，那样很浪费资源，所以这里我们需要准备外部的nfs存储空间，然后通过<a href="https://xxlaila.github.io/2019/09/24/%E5%88%A9%E7%94%A8NFS%E5%8A%A8%E6%80%81%E6%8F%90%E4%BE%9BKubernetes%E5%90%8E%E7%AB%AF%E5%AD%98%E5%82%A8%E5%8D%B7/">pv</a>的模式进行挂载，数据存储到nfs服务器上，这样保障了es收集数据的可用性。</p><a id="more"></a><h3 id="创建存储介质"><a href="#创建存储介质" class="headerlink" title="创建存储介质"></a>创建存储介质</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; pvc.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: es-nfs-data</span><br><span class="line">provisioner: fuseim.pri/ifs</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f pvc.yaml</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li><p>es-statefulset.yaml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RBAC authn and authz</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - <span class="string">"services"</span></span><br><span class="line">  - <span class="string">"namespaces"</span></span><br><span class="line">  - <span class="string">"endpoints"</span></span><br><span class="line">  verbs:</span><br><span class="line">  - <span class="string">"get"</span></span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># Elasticsearch deployment itself</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    version: v6.6.1</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  serviceName: elasticsearch-logging</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: elasticsearch-logging</span><br><span class="line">      version: v6.6.1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: elasticsearch-logging</span><br><span class="line">        version: v6.6.1</span><br><span class="line">        kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: elasticsearch-logging</span><br><span class="line">      containers:</span><br><span class="line">      - image: elasticsearch:6.6.1</span><br><span class="line">        name: elasticsearch-logging</span><br><span class="line">        resources:</span><br><span class="line">          <span class="comment"># need more cpu upon initialization, therefore burstable class</span></span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9200</span><br><span class="line">          name: db</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 9300</span><br><span class="line">          name: transport</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: elasticsearch-logging</span><br><span class="line">          mountPath: /data</span><br><span class="line">        env:</span><br><span class="line">        - name: <span class="string">"NAMESPACE"</span></span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">      <span class="comment"># Elasticsearch requires vm.max_map_count to be at least 262144.</span></span><br><span class="line">      <span class="comment"># If your OS already sets up this number to a higher value, feel free</span></span><br><span class="line">      <span class="comment"># to remove this init container.</span></span><br><span class="line">      initContainers:</span><br><span class="line">      - image: alpine:3.6</span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">"/sbin/sysctl"</span>, <span class="string">"-w"</span>, <span class="string">"vm.max_map_count=262144"</span>]</span><br><span class="line">        name: elasticsearch-logging-init</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: <span class="literal">true</span></span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: elasticsearch-logging</span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [ <span class="string">"ReadWriteMany"</span> ]</span><br><span class="line">      storageClassName: <span class="string">"es-nfs-data"</span></span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 30Gi</span><br></pre></td></tr></table></figure></li><li><p>fluentd-es-ds.yaml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - <span class="string">"namespaces"</span></span><br><span class="line">  - <span class="string">"pods"</span></span><br><span class="line">  verbs:</span><br><span class="line">  - <span class="string">"get"</span></span><br><span class="line">  - <span class="string">"watch"</span></span><br><span class="line">  - <span class="string">"list"</span></span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es-v2.4.0</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    version: v2.4.0</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: fluentd-es</span><br><span class="line">      version: v2.4.0</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: fluentd-es</span><br><span class="line">        kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">        version: v2.4.0</span><br><span class="line">      <span class="comment"># This annotation ensures that fluentd does not get evicted if the node</span></span><br><span class="line">      <span class="comment"># supports critical pod annotation based priority scheme.</span></span><br><span class="line">      <span class="comment"># Note that this does not guarantee admission on the nodes (#40573).</span></span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">        seccomp.security.alpha.kubernetes.io/pod: <span class="string">'docker/default'</span></span><br><span class="line">    spec:</span><br><span class="line">      priorityClassName: system-node-critical</span><br><span class="line">      serviceAccountName: fluentd-es</span><br><span class="line">      containers:</span><br><span class="line">      - name: fluentd-es</span><br><span class="line">        image: docker.io/xxlaila/fluentd-elasticsearch:v2.4.0</span><br><span class="line">        env:</span><br><span class="line">        - name: FLUENTD_ARGS</span><br><span class="line">          value: --no-supervisor -q</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            memory: 500Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 200Mi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: varlog</span><br><span class="line">          mountPath: /var/<span class="built_in">log</span></span><br><span class="line">        - name: varlibdockercontainers</span><br><span class="line">          mountPath: /var/lib/docker/containers</span><br><span class="line">          readOnly: <span class="literal">true</span></span><br><span class="line">        - name: config-volume</span><br><span class="line">          mountPath: /etc/fluent/config.d</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">      - name: varlog</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/<span class="built_in">log</span></span><br><span class="line">      - name: varlibdockercontainers</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/lib/docker/containers</span><br><span class="line">      - name: config-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: fluentd-es-config-v0.2.0</span><br></pre></td></tr></table></figure></li><li><p>kibana-deployment.yaml<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注释里面的两行配置,不注释的话，打开kibana的时候会提示<code>kibana {&quot;statusCode&quot;:404,&quot;error&quot;:&quot;Not Found&quot;,&quot;message&quot;:&quot;Not Found&quot;}</code>,参考<a href="https://github.com/kubernetes-sigs/kubespray/issues/3322" target="_blank" rel="noopener">解决方案</a>,注释配置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- name: SERVER_BASEPATH</span><br><span class="line">  value: /api/v1/namespaces/kube-system/services/kibana-logging/proxy</span><br></pre></td></tr></table></figure></li></ul><h4 id="执行创建"><a href="#执行创建" class="headerlink" title="执行创建"></a>执行创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f ./</span><br></pre></td></tr></table></figure><h4 id="查看创建"><a href="#查看创建" class="headerlink" title="查看创建"></a>查看创建</h4><ul><li><p>查看pod</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -n kube-system |egrep <span class="string">"kibana|elasticsearch|fluentd"</span></span><br><span class="line">elasticsearch-logging-0                       1/1     Running   0          65m</span><br><span class="line">elasticsearch-logging-1                       1/1     Running   0          61m</span><br><span class="line">fluentd-es-v2.4.0-4fp28                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-b7k67                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-f8jzp                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-shwzm                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-ww8r8                       1/1     Running   0          30m</span><br><span class="line">kibana-logging-57b55f58bc-xh5lp               1/1     Running   0          6m35s</span><br></pre></td></tr></table></figure></li><li><p>查看service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get svc -n kube-system |egrep <span class="string">"kibana|elasticsearch"</span></span><br><span class="line">elasticsearch-logging     ClusterIP   10.254.30.110    &lt;none&gt;        9200/TCP                 9s</span><br><span class="line">kibana-logging            ClusterIP   10.254.188.5     &lt;none&gt;        5601/TCP                 16h</span><br></pre></td></tr></table></figure></li><li><p>查看pv，pvc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$  kubectl get pv,pvc -n kube-system</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                                       STORAGECLASS   REASON   AGE</span><br><span class="line">persistentvolume/pvc-65fdd14e-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            Delete           Bound    kube-system/elasticsearch-logging-elasticsearch-logging-0   es-nfs-data             21m</span><br><span class="line">persistentvolume/pvc-fe818f55-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            Delete           Bound    kube-system/elasticsearch-logging-elasticsearch-logging-1   es-nfs-data             16m</span><br><span class="line"></span><br><span class="line">NAME                                                                  STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">persistentvolumeclaim/elasticsearch-logging-elasticsearch-logging-0   Bound    pvc-65fdd14e-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            es-nfs-data    21m</span><br><span class="line">persistentvolumeclaim/elasticsearch-logging-elasticsearch-logging-1   Bound    pvc-fe818f55-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            es-nfs-data    17m</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建web访问"><a href="#创建web访问" class="headerlink" title="创建web访问"></a>创建web访问</h3><ul><li><p>kibana-Ingress.yaml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; kibana-Ingress.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: kibana-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: kibana.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: kibana-logging</span><br><span class="line">          servicePort: 5601</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>es-Ingress.yaml </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; es-Ingress &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: es-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: es.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: elasticsearch-logging</span><br><span class="line">          servicePort: 9200</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f es-Ingress.yaml kibana-Ingress.yaml</span><br></pre></td></tr></table></figure></li><li><p>在浏览器访问es<br><img src="http://img.xxlaila.cn/1569462606884.jpg" alt="img"></p></li><li><p>浏览器访问kibana<br><img src="http://img.xxlaila.cn/1569464839630.jpg" alt="img"><br>建立索引，默认的索引是根据天来自动创建在es里面，这里我是在kibana里面是根据月来却分的<br><img src="http://img.xxlaila.cn/1569464950776.jpg" alt="img"></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初始化配置文件准备&quot;&gt;&lt;a href=&quot;#初始化配置文件准备&quot; class=&quot;headerlink&quot; title=&quot;初始化配置文件准备&quot;&gt;&lt;/a&gt;初始化配置文件准备&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;将下载的 kubernetes-server-linux-amd64.tar.gz 解压后，再解压其中的 kubernetes-src.tar.gz 文件。&lt;code&gt;kubernetes/cluster/addons/fluentd-elasticsearch&lt;/code&gt;这是文件所在的路径&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;es 数据默认的存储在docker里面，在用的是node节点的空间，而node节点我们不可能都准备很大的空间，那样很浪费资源，所以这里我们需要准备外部的nfs存储空间，然后通过&lt;a href=&quot;https://xxlaila.github.io/2019/09/24/%E5%88%A9%E7%94%A8NFS%E5%8A%A8%E6%80%81%E6%8F%90%E4%BE%9BKubernetes%E5%90%8E%E7%AB%AF%E5%AD%98%E5%82%A8%E5%8D%B7/&quot;&gt;pv&lt;/a&gt;的模式进行挂载，数据存储到nfs服务器上，这样保障了es收集数据的可用性。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://xxlaila.github.io//categories/kubernetes/"/>
    
    
      <category term="efk" scheme="https://xxlaila.github.io//tags/efk/"/>
    
  </entry>
  
  <entry>
    <title>网络状态监控</title>
    <link href="https://xxlaila.github.io/2019/09/25/%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/"/>
    <id>https://xxlaila.github.io/2019/09/25/网络状态监控/</id>
    <published>2019-09-25T05:27:04.000Z</published>
    <updated>2019-09-26T03:13:12.554Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;监控IDC机房网络质量情况，本地区到其他地区，其他地区到本节点，或者各省市时间网络、运营商网络状态，监视网络性能，包括常规的 ping，用 fping、echoping、tracert 监视 www 服务器性能，监视 dns 查询性能，监视 ssh 性能等。底层也是 rrdtool 做支持，特点是画的图非常漂亮，网络丢包和延迟用颜色和阴影来表示。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Smokeping。最新版本的 Smokeping 支持多个节点的检测结果从一个图上画出来</p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装yum源"><a href="#安装yum源" class="headerlink" title="安装yum源"></a>安装yum源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm               </span></span><br><span class="line"><span class="comment"># rpm –Uvh http://mirrors.neusoft.edu.cn/epel/6/i386/epel-release-6-8.noarch.rpm</span></span><br></pre></td></tr></table></figure><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum –y install perl perl-Net-Telnet perl-Net-DNS perl-LDAP perl-libwww-perl perl-RadiusPerl perl-IO-Socket-SSL perl-Socket6 perl-CGI-SpeedyCGI perl-FCGI perl-CGI-SpeedCGI perl-Time-HiRes perl-ExtUtils-MakeMaker perl-RRD-Simple rrdtool rrdtool-perl curl fping echo</span></span><br><span class="line">ping  httpd httpd-devel gcc make  wget libxml2-devel libpng-devel glib pango pango-devel freetype freetype-devel fontconfig cairo cairo-devel libart_lgpl libart_lgpl-devel mod_fastcgi</span><br></pre></td></tr></table></figure><h3 id="安装smokeping"><a href="#安装smokeping" class="headerlink" title="安装smokeping"></a>安装smokeping</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget http://oss.oetiker.ch/smokeping/pub/smokeping-2.6.11.tar.gz 这里下载的最新版</span></span><br></pre></td></tr></table></figure><h4 id="安装FCGI"><a href="#安装FCGI" class="headerlink" title="安装FCGI"></a>安装FCGI</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxf CGI-4.33.tar.gz</span></span><br><span class="line"><span class="comment"># cd CGI-4.33</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装Config-Grammar"><a href="#安装Config-Grammar" class="headerlink" title="安装Config-Grammar"></a>安装Config-Grammar</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxf Config-Grammar-1.10.tar.gz</span></span><br><span class="line"><span class="comment"># cd Config-Grammar-1.10</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装ExtUtils-MakeMaker"><a href="#安装ExtUtils-MakeMaker" class="headerlink" title="安装ExtUtils-MakeMaker"></a>安装ExtUtils-MakeMaker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxf ExtUtils-MakeMaker-7.24.tar.gz</span></span><br><span class="line"><span class="comment"># cd ExtUtils-MakeMaker</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装Simple"><a href="#安装Simple" class="headerlink" title="安装Simple"></a>安装Simple</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxf Test-Simple-1.302056.tar.gz</span></span><br><span class="line"><span class="comment"># cd Test-Simple-1.302056</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><h4 id="安装Net-OpenSSH"><a href="#安装Net-OpenSSH" class="headerlink" title="安装Net-OpenSSH"></a>安装Net-OpenSSH</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxf Net-OpenSSH-0.73.tar.gz</span></span><br><span class="line"><span class="comment"># cd Net-OpenSSH-0.73</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装Net-SNMP"><a href="#安装Net-SNMP" class="headerlink" title="安装Net-SNMP"></a>安装Net-SNMP</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar Net-SNMP-v6.0.1.tar.gz</span></span><br><span class="line"><span class="comment"># cd Net-SNMP-v6.0.1</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装perl-ldap"><a href="#安装perl-ldap" class="headerlink" title="安装perl-ldap"></a>安装perl-ldap</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxf perl-ldap-0.65.tar.gz</span></span><br><span class="line"><span class="comment"># cd perl-ldap-0.65</span></span><br><span class="line"><span class="comment"># ./install-nomake</span></span><br></pre></td></tr></table></figure><h4 id="安装Net-DNS"><a href="#安装Net-DNS" class="headerlink" title="安装Net-DNS"></a>安装Net-DNS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxf Net-DNS-1.06.tar.gz</span></span><br><span class="line"><span class="comment"># cd Net-DNS-1.06</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装IO-Tty"><a href="#安装IO-Tty" class="headerlink" title="安装IO-Tty"></a>安装IO-Tty</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar IO-Tty-1.12.tar.gz</span></span><br><span class="line"><span class="comment"># cd IO-Tty-1.12</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装libwww-perl"><a href="#安装libwww-perl" class="headerlink" title="安装libwww-perl"></a>安装libwww-perl</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxf libwww-perl-6.15.tar.gz</span></span><br><span class="line"><span class="comment"># cd libwww-perl-6.15</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装smokeping-1"><a href="#安装smokeping-1" class="headerlink" title="安装smokeping"></a>安装smokeping</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxf smokeping-2.6.11.tar.gz</span></span><br><span class="line"><span class="comment"># cd smokeping-2.6.11</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/usr/local/smokeping</span></span><br><span class="line"><span class="comment"># /usr/bin/gmake install</span></span><br></pre></td></tr></table></figure><p>上面是手动安装，针对网络不能翻墙。也可以采取smokeping一键安装的方式进行安装</p><h3 id="smokeping一键安装"><a href="#smokeping一键安装" class="headerlink" title="smokeping一键安装"></a>smokeping一键安装</h3><h4 id="安装smokeping-2"><a href="#安装smokeping-2" class="headerlink" title="安装smokeping"></a>安装smokeping</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tar zxf smokeping-2.6.11.tar.gz</span></span><br><span class="line"><span class="comment"># cd smokeping-2.6.11</span></span><br><span class="line"><span class="comment"># ./setup/build-perl-modules.sh /usr/local/smokeping/thirdparty</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/usr/local/smokeping</span></span><br><span class="line"><span class="comment"># /usr/bin/gmake install</span></span><br></pre></td></tr></table></figure><h3 id="配置smkeping"><a href="#配置smkeping" class="headerlink" title="配置smkeping"></a>配置smkeping</h3><h4 id="创建cache、data、var目录"><a href="#创建cache、data、var目录" class="headerlink" title="创建cache、data、var目录"></a>创建cache、data、var目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd /usr/local/smokeping/</span></span><br><span class="line"><span class="comment"># mkdir &#123;cache,data,var&#125;</span></span><br></pre></td></tr></table></figure><h4 id="创建日志文件"><a href="#创建日志文件" class="headerlink" title="创建日志文件"></a>创建日志文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># touch /var/log/smokeping.log</span></span><br></pre></td></tr></table></figure><h4 id="赋权限"><a href="#赋权限" class="headerlink" title="赋权限"></a>赋权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chown apache:apache cache/ data/ var/</span></span><br><span class="line"><span class="comment"># chown  apache:apache /var/log/smokeping.log</span></span><br><span class="line"><span class="comment"># chmod 755 cache/ data/ var/    #这里也要赋权限，会影响图片无法加载</span></span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/local/smokeping/htdocs</span></span><br><span class="line"><span class="comment"># cp -arp smokeping.fcgi.dist smokeping.fcgi</span></span><br><span class="line"><span class="comment"># cd ../etc/</span></span><br><span class="line"><span class="comment"># cp -arp config.dist config</span></span><br><span class="line"><span class="comment"># chmod 600 /usr/local/smokeping/etc/smokeping_secrets.dist</span></span><br><span class="line"><span class="comment"># vim config</span></span><br><span class="line">*** General ***</span><br><span class="line">owner    = Peter Random</span><br><span class="line">contact  = some@address.nowhere</span><br><span class="line">mailhost = my.mail.host</span><br><span class="line">sendmail = /usr/sbin/sendmail</span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> do not put the Image Cache below cgi-bin</span></span><br><span class="line"><span class="comment"># since all files under cgi-bin will be executed ... this is not</span></span><br><span class="line"><span class="comment"># good for images.</span></span><br><span class="line">imgcache = /usr/<span class="built_in">local</span>/smokeping/cache</span><br><span class="line">imgurl   = http://172.16.1.100/cache                                                      <span class="comment">#这里如果不配置正确，会影响后面出图，这里一个坑</span></span><br><span class="line">datadir  = /usr/<span class="built_in">local</span>/smokeping/data</span><br><span class="line">piddir  = /usr/<span class="built_in">local</span>/smokeping/var</span><br><span class="line">cgiurl   = http://172.16.1.100/smokeping/smokeping.cgi</span><br><span class="line"><span class="comment">#cgiurl   = http://some.url/smokeping.cgi</span></span><br><span class="line">smokemail = /usr/<span class="built_in">local</span>/smokeping/etc/smokemail.dist</span><br><span class="line">tmail = /usr/<span class="built_in">local</span>/smokeping/etc/tmail.dist</span><br><span class="line"><span class="comment"># specify this to get syslog logging</span></span><br><span class="line">syslogfacility = local0</span><br><span class="line"><span class="comment"># each probe is now run in its own process</span></span><br><span class="line"><span class="comment"># disable this to revert to the old behaviour</span></span><br><span class="line"><span class="comment"># concurrentprobes = no</span></span><br><span class="line">*** Alerts ***</span><br><span class="line">to = alertee@address.somewhere</span><br><span class="line">from = smokealert@company.xy</span><br><span class="line">+someloss</span><br><span class="line"><span class="built_in">type</span> = loss</span><br><span class="line"><span class="comment"># in percent</span></span><br><span class="line">pattern = &gt;0%,*12*,&gt;0%,*12*,&gt;0%</span><br><span class="line">comment = loss 3 <span class="built_in">times</span>  <span class="keyword">in</span> a row</span><br><span class="line">*** Database ***</span><br><span class="line">step     = 60                                              <span class="comment">#检测时间，默认300</span></span><br><span class="line">pings    = 20</span><br></pre></td></tr></table></figure><p>配置文件上述修改带有注视部分，其他参数参考官方，而且都能看懂。后面有很多配置不全部贴出来</p><h3 id="配置apache"><a href="#配置apache" class="headerlink" title="配置apache"></a>配置apache</h3><h4 id="配置httpd-conf"><a href="#配置httpd-conf" class="headerlink" title="配置httpd.conf"></a>配置httpd.conf</h4><p>在DocumentRoot “/var/www/html”这行增加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">Alias /cache <span class="string">"/usr/local/smokeping/cache"</span></span><br><span class="line">Alias /cropper <span class="string">"/usr/local/smokeping/htdocs/cropper"</span></span><br><span class="line">Alias /smokeping <span class="string">"/usr/local/smokeping/htdocs/smokeping.fcgi"</span></span><br><span class="line">&lt;Directory <span class="string">"/usr/local/smokeping"</span>&gt;</span><br><span class="line">        AllowOverride None</span><br><span class="line">        Options All</span><br><span class="line">        AddHandler cgi-script .fcgi .cgi</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all</span><br><span class="line">        AuthName <span class="string">"Smokeping"</span></span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthUserFile /usr/<span class="built_in">local</span>/smokeping/htdocs/htpasswd</span><br><span class="line">        Require valid-user</span><br><span class="line">        DirectoryIndex smokeping.fcgi</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h4 id="apache登录认证"><a href="#apache登录认证" class="headerlink" title="apache登录认证"></a>apache登录认证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/local/smokeping/htdocs</span></span><br><span class="line"><span class="comment"># htpasswd -c /usr/local/smokeping/htdocs/htpasswd admin                   #回车设置admin账户的密码</span></span><br></pre></td></tr></table></figure><h4 id="安装网页支持的中文字体"><a href="#安装网页支持的中文字体" class="headerlink" title="安装网页支持的中文字体"></a>安装网页支持的中文字体</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum -y install wqy-zenhei-fonts.noarch</span></span><br></pre></td></tr></table></figure><h4 id="smokeping开机脚本"><a href="#smokeping开机脚本" class="headerlink" title="smokeping开机脚本"></a>smokeping开机脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/init.d/smokeping</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PIDFILE=/usr/<span class="built_in">local</span>/smokeping/var/smokeping.pid</span><br><span class="line">SMOKEPING=/usr/<span class="built_in">local</span>/smokeping/bin/smokeping</span><br><span class="line">ERROR=0</span><br><span class="line">RUNNING=0</span><br><span class="line">ARGV=<span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$ARGV</span>"</span> = <span class="string">"x"</span> ] ; <span class="keyword">then</span></span><br><span class="line">ARGS=<span class="built_in">help</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">for</span> ARG <span class="keyword">in</span> <span class="variable">$@</span> <span class="variable">$ARGS</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ] ; <span class="keyword">then</span></span><br><span class="line">PID=`cat <span class="variable">$PIDFILE</span>`</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">kill</span> -0 <span class="variable">$PID</span> 2&gt;/dev/null ; <span class="keyword">then</span></span><br><span class="line"><span class="comment"># smokeping is running</span></span><br><span class="line">RUNNING=1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># smokeping not running but PID file exists =&gt; delete PID file</span></span><br><span class="line">rm -f <span class="variable">$PIDFILE</span></span><br><span class="line">RUNNING=0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># smokeping (no pid file) not running</span></span><br><span class="line">RUNNING=0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$ARG</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 0 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$SMOKEPING</span> &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping started"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping could not be started"</span></span><br><span class="line">ERROR=1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping is running with PID <span class="variable">$PID</span>"</span></span><br><span class="line">ERROR=2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">kill</span> <span class="variable">$PID</span> ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping (<span class="variable">$PID</span>) stopped"</span></span><br><span class="line">rm <span class="variable">$PIDFILE</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping could not be stopped"</span></span><br><span class="line">ERROR=3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping not running"</span></span><br><span class="line">ERROR=4</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$SMOKEPING</span> --restart &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping restarted"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping could not be started"</span></span><br><span class="line">ERROR=5</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="variable">$0</span> start</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">strace_debug)</span><br><span class="line">rm -f /tmp/strace_smokeping</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> strace -o/tmp/strace_smokeping <span class="variable">$SMOKEPING</span> --restart &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping restarted with strace debug in /tmp/strace_smokeping"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping strace debug could not be started"</span></span><br><span class="line">ERROR=6</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> strace -o/tmp/strace_smokeping <span class="variable">$SMOKEPING</span> &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping started with strace debug in /tmp/strace_smokeping"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping strace debug could not be started"</span></span><br><span class="line">ERROR=7</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">status)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping is running with PID (<span class="variable">$PID</span>)"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping is not running"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"usage: <span class="variable">$0</span> (start|stop|restart|status|strace_debug|help)"</span></span><br><span class="line">cat</span><br><span class="line">start - start smokeping</span><br><span class="line">stop - stop smokeping</span><br><span class="line">restart - restart smokeping <span class="keyword">if</span> running or start <span class="keyword">if</span> not running</span><br><span class="line">status - show status <span class="keyword">if</span> smokeping is running or not</span><br><span class="line"><span class="built_in">help</span> - this screen</span><br><span class="line">EOF</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$ERROR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod +x /etc/init.d/smokeping</span></span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service httpd start</span></span><br><span class="line"><span class="comment"># /etc/init.d/smokeping start</span></span><br></pre></td></tr></table></figure><p>打开浏览器测试http://{ip}/smokeping  会提示输入用户和密码<br><img src="http://img.xxlaila.cn/74D2C8DE-129F-4219-87C5-D6A771D19484.png" alt="img"><br><img src="http://img.xxlaila.cn/91D9FA70-65B1-4752-8F15-68A158E72A49.png" alt="img"></p><h4 id="配置文件添加"><a href="#配置文件添加" class="headerlink" title="配置文件添加"></a>配置文件添加</h4><p>配置文件添介绍，在配置文件里面+表示一级++表示二级+++三级<br>本次添加的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><span class="line">+ Other</span><br><span class="line">menu = 其他网络监控</span><br><span class="line">title = 其他所有网络监控列表</span><br><span class="line">++ dianxin</span><br><span class="line">menu = 电信网络监控</span><br><span class="line">title = 电信网络监控列表</span><br><span class="line">host = /Other/dianxin/dianxin-hlj /Other/dianxin/dianxin-gd /Other/dianxin/dianxin-gs /Other/dianxin/dianxin-sh /Other/dianxin/dianxin-sc /Other/dianxin/dianxin-cq /Other/dianxin/dianxin-gz /Other/dianxin/dianxin-ln /Other/dianxin/dianxin-zj /Other/dianxin/dianxin-sd /Other/dianxin/dianxin-hib /Other/dianxin/dianxin-ah /Other/dianxin/dianxin-hb /Other/dianxin/dianxin-jl /Other/dianxin/dianxin-jx</span><br><span class="line">+++ dianxin-hlj</span><br><span class="line">menu = 黑龙江电信</span><br><span class="line">title = 黑龙江电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 219.150.32.132</span><br><span class="line">+++ dianxin-gd</span><br><span class="line">menu = 广东电信</span><br><span class="line">title = 广东电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.96.134.133</span><br><span class="line">+++ dianxin-gs</span><br><span class="line">menu = 甘肃电信</span><br><span class="line">title = 甘肃电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.100.64.68</span><br><span class="line">+++ dianxin-sh</span><br><span class="line">menu = 上海电信</span><br><span class="line">title = 上海电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.96.209.5</span><br><span class="line">+++ dianxin-sc</span><br><span class="line">menu = 四川电信</span><br><span class="line">title = 四川电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.6.145.111</span><br><span class="line">+++ dianxin-cq</span><br><span class="line">menu = 重庆电信</span><br><span class="line">title = 重庆电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 61.128.128.68</span><br><span class="line">+++ dianxin-gz</span><br><span class="line">menu = 贵州电信</span><br><span class="line">title = 贵州电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.98.192.68</span><br><span class="line">+++ dianxin-ln</span><br><span class="line">menu = 辽宁电信</span><br><span class="line">title = 辽宁电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 219.149.6.99</span><br><span class="line">+++ dianxin-zj</span><br><span class="line">menu = 浙江电信</span><br><span class="line">title = 浙江电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.96.96.68</span><br><span class="line">+++ dianxin-sd</span><br><span class="line">menu = 山东电信</span><br><span class="line">title = 山东电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 222.173.95.53</span><br><span class="line">+++ dianxin-hib</span><br><span class="line">menu = 湖北电信</span><br><span class="line">title = 湖北电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.103.0.68</span><br><span class="line">+++ dianxin-ah</span><br><span class="line">menu = 安徽电信</span><br><span class="line">title = 安徽电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 220.178.75.134</span><br><span class="line">+++ dianxin-hb</span><br><span class="line">menu = 河北电信</span><br><span class="line">title = 河北电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.99.160.68</span><br><span class="line">+++ dianxin-jl</span><br><span class="line">menu = 吉林电信</span><br><span class="line">title = 吉林电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host =  219.149.194.55</span><br><span class="line">+++ dianxin-jx</span><br><span class="line">menu = 江西电信</span><br><span class="line">title = 江西电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.101.224.68</span><br><span class="line"><span class="comment">#+++ dianxin-multi</span></span><br><span class="line"><span class="comment">#menu = 多个电信网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个电信网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/dianxin/dianxin-hlj /Other/dianxin/dianxin-gd /Other/dianxin/dianxin-gs /Other/dianxin/dianxin-sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">++ liantong</span><br><span class="line">menu = 联通网络监控</span><br><span class="line">title = 联通网络监控列表</span><br><span class="line">host = /Other/liantong/liantong-hlj /Other/liantong/liantong-gd /Other/liantong/liantong-gs /Other/liantong/liantong-sh /Other/liantong/liantong-sc /Other/liantong/liantong-cq /Other/liantong/liantong-gz /Other/liantong/liantong-ln /Other/liantong/liantong-zj /Other/liantong/liantong-sd /Other/liantong/liantong-hib /Other/liantong/liantong-ah /Other/liantong/liantong-hb /Other/liantong/liantong-jl /Other/liantong/liantong-jx</span><br><span class="line">+++ liantong-hlj</span><br><span class="line">menu = 黑龙江联通</span><br><span class="line">title = 黑龙江联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.97.224.68</span><br><span class="line">+++ liantong-gd</span><br><span class="line">menu = 广东联通</span><br><span class="line">title = 广东联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 221.4.66.66</span><br><span class="line">+++ liantong-gs</span><br><span class="line">menu = 甘肃联通</span><br><span class="line">title = 甘肃联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 221.7.34.10</span><br><span class="line">+++ liantong-sh</span><br><span class="line">menu = 上海联通</span><br><span class="line">title = 上海联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 210.22.70.3</span><br><span class="line">+++ liantong-sc</span><br><span class="line">menu = 四川联通</span><br><span class="line">title = 四川联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 119.6.6.6</span><br><span class="line">+++ liantong-cq</span><br><span class="line">menu = 重庆联通</span><br><span class="line">title = 重庆联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 221.7.92.98</span><br><span class="line">+++ liantong-gz</span><br><span class="line">menu = 贵州联通</span><br><span class="line">title = 贵州联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 221.13.30.242</span><br><span class="line">+++ liantong-ln</span><br><span class="line">menu = 辽宁联通</span><br><span class="line">title = 辽宁联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 124.161.97.234</span><br><span class="line">+++ liantong-zj</span><br><span class="line">menu = 浙江联通</span><br><span class="line">title = 浙江联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 221.12.33.227</span><br><span class="line">+++ liantong-sd</span><br><span class="line">menu = 山东联通</span><br><span class="line">title = 山东联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.102.152.3</span><br><span class="line">+++ liantong-hib</span><br><span class="line">menu = 湖北联通</span><br><span class="line">title = 湖北联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.104.111.114</span><br><span class="line">+++ liantong-ah</span><br><span class="line">menu = 安徽联通</span><br><span class="line">title = 安徽联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.91.88.129</span><br><span class="line">+++ liantong-hb</span><br><span class="line">menu = 河北联通</span><br><span class="line">title = 河北联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.99.160.68</span><br><span class="line">+++ liantong-jl</span><br><span class="line">menu = 吉林联通</span><br><span class="line">title = 吉林联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.98.5.6</span><br><span class="line">+++ liantong-jx</span><br><span class="line">menu = 江西联通</span><br><span class="line">title = 江西联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 220.248.192.12</span><br><span class="line"><span class="comment">#+++ liantong-multi</span></span><br><span class="line"><span class="comment">#menu = 多个联通网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个联通网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/liantong/liantong-hlj /Other/liantong/liantong-gd /Other/liantong/liantong-gs /Other/liantong/liantong-sh</span></span><br><span class="line">++ yidong</span><br><span class="line">menu = 移动网络监控</span><br><span class="line">title = 移动网络监控列表</span><br><span class="line">host = /Other/yidong/yidong-hlj /Other/yidong/yidong-gd /Other/yidong/yidong-gs /Other/yidong/yidong-sh /Other/yidong/yidong-sc /Other/yidong/yidong-cq /Other/yidong/yidong-gz /Other/yidong/yidong-ln /Other/yidong/yidong-zj /Other/yidong/yidong-sd /Other/yidong/yidong-hib /Other/yidong/yidong-ah /Other/yidong/yidong-hb</span><br><span class="line">+++ yidong-hlj</span><br><span class="line">menu = 黑龙江移动</span><br><span class="line">title = 黑龙江移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 211.137.241.34</span><br><span class="line">+++ yidong-gd</span><br><span class="line">menu = 广东移动</span><br><span class="line">title = 广东移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 211.137.241.34</span><br><span class="line">+++ yidong-gs</span><br><span class="line">menu = 甘肃移动</span><br><span class="line">title = 甘肃移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 218.203.160.194</span><br><span class="line">+++ yidong-sh</span><br><span class="line">menu = 上海移动</span><br><span class="line">title = 上海移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 117.131.0.22</span><br><span class="line">+++ yidong-sc</span><br><span class="line">menu = 四川移动</span><br><span class="line">title = 四川移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.137.96.205</span><br><span class="line">+++ yidong-cq</span><br><span class="line">menu = 重庆移动</span><br><span class="line">title = 重庆移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.201.4.3</span><br><span class="line">+++ yidong-gz</span><br><span class="line">menu = 贵州移动</span><br><span class="line">title = 贵州移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.139.1.3</span><br><span class="line">+++ yidong-ln</span><br><span class="line">menu = 辽宁移动</span><br><span class="line">title = 辽宁移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.59.181.182</span><br><span class="line">+++ yidong-zj</span><br><span class="line">menu = 浙江移动</span><br><span class="line">title = 浙江移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.140.10.2</span><br><span class="line">+++ yidong-sd</span><br><span class="line">menu = 山东移动</span><br><span class="line">title = 山东移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.137.191.26</span><br><span class="line">+++ yidong-hib</span><br><span class="line">menu = 湖北移动</span><br><span class="line">title = 湖北移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.137.76.68</span><br><span class="line">+++ yidong-ah</span><br><span class="line">menu = 安徽移动</span><br><span class="line">title = 安徽移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.138.180.2</span><br><span class="line">+++ yidong-hb</span><br><span class="line">menu = 河北移动</span><br><span class="line">title = 河北移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.98.2.4</span><br><span class="line"><span class="comment">#+++ yidong-multi</span></span><br><span class="line"><span class="comment">#menu = 多个移动网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个移动网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/yidong/yidong-hlj /Other/yidong/yidong-gd /Other/yidong/yidong-gs /Other/yidong/yidong-sh</span></span><br><span class="line">++ jiaoyu</span><br><span class="line">menu = 教育网络监控</span><br><span class="line">title = 教育网络监控列表</span><br><span class="line">host = /Other/jiaoyu/jiaoyu-qh /Other/jiaoyu/jiaoyu-sh /Other/jiaoyu/jiaoyu-wh /Other/jiaoyu/jiaoyu-hn</span><br><span class="line">+++ jiaoyu-qh</span><br><span class="line">menu = 清华大学</span><br><span class="line">title = 清华大学</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 166.111.8.28</span><br><span class="line">+++ jiaoyu-sh</span><br><span class="line">menu = 上海交大</span><br><span class="line">title = 上海交大</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.112.26.34</span><br><span class="line">+++ jiaoyu-wh</span><br><span class="line">menu = 武汉科技大学</span><br><span class="line">title = 武汉科技大学</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.114.240.6</span><br><span class="line">+++ jiaoyu-hn</span><br><span class="line">menu = 华南农业大学</span><br><span class="line">title = 华南农业大学</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.116.160.33</span><br><span class="line"><span class="comment">#+++ jiaoyu-multi</span></span><br><span class="line"><span class="comment">#menu = 多个教育网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个教育网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/jiaoyu/jiaoyu-qh /Other/jiaoyu/jiaoyu-sh /Other/jiaoyu/jiaoyu-wh /Other/jiaoyu/jiaoyu-hn</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;监控IDC机房网络质量情况，本地区到其他地区，其他地区到本节点，或者各省市时间网络、运营商网络状态，监视网络性能，包括常规的 ping，用 fping、echoping、tracert 监视 www 服务器性能，监视 dns 查询性能，监视 ssh 性能等。底层也是 rrdtool 做支持，特点是画的图非常漂亮，网络丢包和延迟用颜色和阴影来表示。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Smokeping。最新版本的 Smokeping 支持多个节点的检测结果从一个图上画出来&lt;/p&gt;
    
    </summary>
    
      <category term="监控" scheme="https://xxlaila.github.io//categories/%E7%9B%91%E6%8E%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 常用命令学习</title>
    <link href="https://xxlaila.github.io/2019/09/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    <id>https://xxlaila.github.io/2019/09/25/Linux常用命令学习/</id>
    <published>2019-09-25T03:38:07.000Z</published>
    <updated>2019-10-23T00:39:00.657Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查找文件使用命令"><a href="#查找文件使用命令" class="headerlink" title="查找文件使用命令"></a>查找文件使用命令</h4><ul><li><p>查找目录下面大小超过5M的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find /home/ -size +5M</span><br></pre></td></tr></table></figure></li><li><p>查找目录下100天之前修改过的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find /home/ -mtime +100</span><br></pre></td></tr></table></figure></li><li><p>查找目录下60天未被访问过的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find /home/ \! atime -60</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>查找目录下面文件“core“，如果发现无需提示直接删除。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ find / -name core -<span class="built_in">exec</span> rm &#123;&#125; \</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找排除某一个文件然后进行删除</span></span><br><span class="line">$ find / -<span class="built_in">type</span> f ! -name <span class="string">"test"</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br><span class="line">$ find ./ -mtime +3 -name <span class="string">"*.log"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br><span class="line">$ find /tmp -mtime +30 -<span class="built_in">type</span> f -name <span class="string">"*.sh[ab]"</span> -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure></li></ul><p>在一个目录中保留最近30天的文件，30天前的文件自动删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find /tmp -mtime +30 -<span class="built_in">type</span> f -name <span class="string">"*.sh[ab]"</span> -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><ul><li>/tmp  –设置查找的目录；</li><li>-mtime +30 –设置时间为30天前；</li><li>-type f –设置查找的类型为文件；</li><li>-name *.sh[ab] –设置文件名称中包含sha或者shb；</li><li>-exec rm -f –查找完毕后执行删除操作；</li><li><strong>提示</strong>：将此命令写入crontab后即可自动完成查找并删除的工作</li></ul><ul><li>显示目录文件的文件名和它们的拥有者<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ll | awk <span class="string">'&#123;print $3,"owns",$9&#125;'</span></span><br></pre></td></tr></table></figure></li></ul><p>显示你的系统上PCI总线和附加设备的信息。指定-v，-vv或-vvv来获取越来越详细的输出</p><ul><li><p>lspci 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum whatprovides */lspci</span><br><span class="line">pciutils-3.5.1-2.el7.x86_64 : PCI bus related utilities</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /usr/sbin/lspci</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pciutils-3.5.1-3.el7.x86_64 : PCI bus related utilities</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /usr/sbin/lspci</span><br><span class="line"></span><br><span class="line">$ sudo yum install pciutils</span><br><span class="line"></span><br><span class="line">lspci 更多[详细使用](https://blog.csdn.net/styshoo/article/details/51281437)</span><br><span class="line"></span><br><span class="line">$ lspci -vvvvv</span><br></pre></td></tr></table></figure></li><li><p>查看当前的Linux服务器的运行级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ who -r</span><br><span class="line">$ who -b </span><br><span class="line"><span class="comment"># 查看系统最后一次启动的时间</span></span><br><span class="line"></span><br><span class="line">$ last reboot</span><br><span class="line"><span class="comment"># 查看系统历史启动的时间</span></span><br></pre></td></tr></table></figure></li><li><p>查看系统运行了多长时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/uptime| awk -F. <span class="string">'&#123;run_days=$1 / 86400;run_hour=($1 % 86400)/3600;run_minute=($1 % 3600)/60;run_second=$1 % 60;printf("系统已运行：%d天%d时%d分%d秒",run_days,run_hour,run_minute,run_second)&#125;'</span></span><br><span class="line">$ w</span><br><span class="line">$ uptime</span><br></pre></td></tr></table></figure></li><li><p>查看系统启动的日期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ date -d <span class="string">"<span class="variable">$(awk -F. '&#123;print $1&#125;' /proc/uptime)</span> second ago"</span> +<span class="string">"%Y-%m-%d %H:%M:%S"</span></span><br></pre></td></tr></table></figure></li><li><p>查找目录下文件内容没有包括“nginx”、“msgType”字符串的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep -r -l -v <span class="string">"nginx"</span> /data/</span><br><span class="line">$ grep -r  -v <span class="string">"msgType"</span> /data/</span><br></pre></td></tr></table></figure></li><li><p>查找目录下文件内容包括”nginx”字符串的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grep -r <span class="string">"nginx"</span> /data/                                             会把<span class="string">"nginx"</span>字符串所在这行的内容显示出来</span><br><span class="line">$ grep -o “nginx” /data/</span><br><span class="line">$ grep -r -l <span class="string">"nginx"</span> /data/                                          不显示<span class="string">"nginx"</span>字符串所在行，是显示文件</span><br></pre></td></tr></table></figure></li><li><p>cat使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat sentry.conf.py |grep -v <span class="string">"^#"</span>          查看配置文件不包括注释内容</span><br><span class="line">$ cat -b `find /var/<span class="built_in">log</span>/httpd/ -cmin -60 -<span class="built_in">print</span> |sed <span class="string">"1d"</span>`\ |awk <span class="string">'&#123;print $2&#125;'</span>|sort |uniq -c |sort -n -k 1 -r |head -n 1               统计当前目录下日志文件里面I平访问量最多的一个IP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某一个时间段的IP地址访问排名前10</span></span><br><span class="line">$ cat nginx_access.log|grep <span class="string">'+0800'</span>|awk <span class="string">'&#123;split($1,array,"[");if(array[2]&gt;="25/Jul/2017:14:17:30" &amp;&amp; array[2]&lt;="25/Jul/2017:20:17:30")&#123;print $0&#125;&#125;'</span>|awk -F<span class="string">"^`"</span> &amp;&amp; <span class="string">"-"</span> &amp;&amp; <span class="string">"^`"</span> <span class="string">'&#123;print $1&#125;'</span>|sort|uniq -c|sort -n -k 1 -r|head -n 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计当前日志ip访问前10</span></span><br><span class="line">$ cat nginx_access.log |awk -F<span class="string">"^"</span> <span class="string">'&#123;print $1&#125;'</span>|sort|uniq -c|sort -n -k 1 -r|head -n 10</span><br></pre></td></tr></table></figure></li><li><p>获取IP地址通用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig |sed -n 2p |awk <span class="string">'&#123;print $1$2&#125;'</span>|sed <span class="string">'s/^.*[^0-9]\([0-9]\&#123;1,3\&#125;\)\.\([0-9]\&#123;1,3\&#125;\)\.\([0-9]\&#123;1,3\&#125;\)\.\([0-9]\&#123;1,3\&#125;\)$/\1\.\2\.\3\.\4/g'</span></span><br></pre></td></tr></table></figure></li><li><p>curl使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监控网页的响应时间</span></span><br><span class="line">$ curl -o /dev/null -s -w <span class="string">"time_connect: %&#123;time_connect&#125;\ntime_starttransfer: %&#123;time_starttransfer&#125;\ntime_total: %&#123;time_total&#125;\n"</span> <span class="string">"http://www.baidu.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控站点可用性</span></span><br><span class="line">$ curl -o /dev/null -s -w %&#123;http_code&#125; <span class="string">"http://www.baidu.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启gzip请求</span></span><br><span class="line">$ curl -I http://www.sina.com.cn/ -H Accept-Encoding:gzip,defalte</span><br></pre></td></tr></table></figure></li><li><p>每10秒显示一次复制的大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ watch -n 10 du -sh /root</span><br></pre></td></tr></table></figure></li><li><p>统计目录(包括子目录)下面文件个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ find ./ -<span class="built_in">type</span> f | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用find命令查找当前目录下是文件类型的文件，然后用wc来计数</span></span><br><span class="line">$ ls -lR|grep <span class="string">"^-"</span>|wc -l</span><br><span class="line"><span class="comment"># ls命令加R参数，列出下级子目录，使用grep命令过滤以“-”开头的，如果是目录就改成“^d”，后面用wc计数。</span></span><br><span class="line"></span><br><span class="line">$ find ./ -name <span class="string">"*.*"</span> |xargs cat|grep -v ^$|wc -l</span><br><span class="line">$ find . \( ! -name <span class="string">'*.png'</span> ! -name <span class="string">'*.gif'</span> ! -name <span class="string">'*.jpg'</span> ! -name <span class="string">'*.swf'</span> \) -<span class="built_in">type</span> f |wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目录下所有文件的的行数，去掉空行</span></span><br><span class="line">$ find ./ -name <span class="string">"*.*"</span> |xargs cat|wc -l   </span><br><span class="line">$ find . \( ! -name <span class="string">'*.png'</span> ! -name <span class="string">'*.gif'</span> ! -name <span class="string">'*.jpg'</span> ! -name <span class="string">'*.swf'</span> \) -<span class="built_in">type</span> f |xargs cat|wc -l</span><br></pre></td></tr></table></figure></li><li><p>查看系统tcp连接中各个状态的连接数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netstat -an | awk '/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出每个IP的连接数，以及总的各个状态的连接数</span></span><br><span class="line">$ netstat -n | awk <span class="string">'/^tcp/ &#123;n=split($(NF-1),array,":");if(n&lt;=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N&#125; END &#123;for(a in S)&#123;printf("%-20s %s\n", a, S[a]);++I&#125;printf("%-20s %s\n","TOTAL_IP",I);for(a in s) printf("%-20s %s\n",a, s[a]);printf("%-20s %s\n","TOTAL_LINK",N);&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计当前tcp/ip链接数排名前10的IP</span></span><br><span class="line">$ netstat -n|awk <span class="string">'/^tcp/ &#123;print $5&#125;'</span>|awk -F<span class="string">':'</span> <span class="string">'&#123;print $1&#125;'</span>|sort|uniq -c|sort -n -k 1 -r|head -n 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用grep统计当前文件里面所有的IP地址</span></span><br><span class="line">$ grep -E -o <span class="string">"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"</span> nginx_access.log</span><br></pre></td></tr></table></figure></li></ul><p>查看系统当前进程打开的文件句柄数，按照最大的进行排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -n | awk <span class="string">'&#123;print $2&#125;'</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure><ul><li>ping命令显示时间以及日期<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ping www.sina.com.cn -i 3 | awk <span class="string">'&#123; print $0"\t" strftime("%Y-%m-%d %H:%M:%S",systime()) &#125; '</span> &gt; /opt/sina.log &amp;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;查找文件使用命令&quot;&gt;&lt;a href=&quot;#查找文件使用命令&quot; class=&quot;headerlink&quot; title=&quot;查找文件使用命令&quot;&gt;&lt;/a&gt;查找文件使用命令&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查找目录下面大小超过5M的文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ find /home/ -size +5M&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查找目录下100天之前修改过的文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ find /home/ -mtime +100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查找目录下60天未被访问过的文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ find /home/ \! atime -60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="linux" scheme="https://xxlaila.github.io//categories/linux/"/>
    
    
      <category term="shell" scheme="https://xxlaila.github.io//tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>iptables</title>
    <link href="https://xxlaila.github.io/2019/09/25/iptables/"/>
    <id>https://xxlaila.github.io/2019/09/25/iptables/</id>
    <published>2019-09-25T02:19:11.000Z</published>
    <updated>2019-09-25T03:34:08.113Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Iptables"><a href="#Iptables" class="headerlink" title="Iptables"></a>Iptables</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iptalbes 是用来设置、维护和检查Linux内核的IP包过滤规则的。可以定义不同的表，每个表都包含几个内部的链，也能包含用户定义的链。每个链都是一个规则列表，对对应的包进行匹配：每条规则指定应当如何处理与之相匹配的包。这被称作’target’（目标），也可以跳向同一个表内的用户定义的链。</p><a id="more"></a><h4 id="iptables限制IP访问特定端口"><a href="#iptables限制IP访问特定端口" class="headerlink" title="iptables限制IP访问特定端口"></a>iptables限制IP访问特定端口</h4><ul><li><p>允许某个IP （192.168.6.100）的机器进行SSH连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -A INPUT -s 192.168.6.100 -p tcp --dport 22 -j ACCEPT</span><br><span class="line">$ iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">ACCEPT tcp -- 192.168.6.100 0.0.0.0/0 tcp dpt:22</span><br></pre></td></tr></table></figure></li><li><p>允许某一段的IP 访问SSH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -A INPUT -s 192.168.6.0/24 -p tcp --dport 22 -j ACCEPT</span><br><span class="line">$ iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">ACCEPT tcp -- 192.168.6.0/24 0.0.0.0/0 tcp dpt:22</span><br></pre></td></tr></table></figure></li><li><p>限制某一IP 访问SSH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -A INPUT -p tcp -s ! 192.168.6.100 --dport 22 -j ACCEPT --注意！号有个空格</span><br><span class="line">$ iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">ACCEPT tcp -- 192.168.6.0/24 0.0.0.0/0 tcp dpt:22</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置一个NAT表放火墙"><a href="#配置一个NAT表放火墙" class="headerlink" title="配置一个NAT表放火墙"></a>配置一个NAT表放火墙</h3><ul><li><p>防止外网用内网IP欺骗</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -s 10.0.0.0/8 -j DROP</span><br><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -s 172.16.0.0/12 -j DROP</span><br><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -s 192.168.0.0/16 -j DROP</span><br></pre></td></tr></table></figure></li><li><p>禁止与211.101.46.253的所有连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -d 211.101.46.253 -j DROP</span><br></pre></td></tr></table></figure></li><li><p>禁用FTP(21)端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 21 -j DROP</span><br><span class="line"><span class="comment"># 这样写范围太大了,我们可以更精确的定义.</span></span><br><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 21 -d 211.101.46.253 -j DROP</span><br><span class="line"><span class="comment"># 这样只禁用211.101.46.253地址的FTP连接,其他连接还可以.如web(80端口)连接.</span></span><br></pre></td></tr></table></figure></li><li><p>iptables白名单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -A INPUT -s 0.0.0.0/0 -p tcp --dport 80 -j DROP</span><br><span class="line"><span class="comment"># 拒绝所有IP链接80端口</span></span><br><span class="line"></span><br><span class="line">$ iptables -A INPUT -s 58.17.245.222 -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="comment"># 允许指定IP访问80端口</span></span><br></pre></td></tr></table></figure></li><li><p>允许所有已经建立的和相关的连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">$ iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>drop非法连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -A INPUT -m state --state INVALID -j DROP</span><br><span class="line">$ iptables -A OUTPUT -m state --state INVALID -j DROP</span><br><span class="line">$ iptables -A FORWARD -m state --state INVALID -j DROP</span><br></pre></td></tr></table></figure></li></ul><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><ul><li>这里使用的是FTP服务(36542)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 36542 -j DNAT --to 192.168.50.2:36542</span><br><span class="line">$ iptables -t nat -A POSTROUTING -p tcp --dport 36542 -j MASQUERADE</span><br><span class="line"><span class="comment"># 因为FTP使用了两个端口21和20，21只是用于连接，20是执行命令的。20没办法修改，这里使用了被动模式连接。</span></span><br><span class="line"></span><br><span class="line">$ iptables -t nat -I PREROUTING -p tcp --dport 60000:65000 -j DNAT --to 192.168.50.2</span><br><span class="line"><span class="comment"># 被动连接端口60000-65000全部转发给50.2</span></span><br><span class="line"></span><br><span class="line">$ iptables -t nat -I POSTROUTING -p tcp --dport 60000:65000 -j MASQUERADE</span><br><span class="line"><span class="comment"># 需要开放60000:65000端口，</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;公司有一台服务器连接外网，其他的服务器都不能上外网，我们可以通过这个外网服务器用作网关服务器，做端口转发，连接到内网服务器</p><ul><li><p>这里使用数据库的3306映射到外网的的36544</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING  -m tcp -p tcp --dport 36544 -j DNAT --to-destination 172.16.1.11:3306</span><br><span class="line">$ iptables -t nat -A POSTROUTING -m tcp -p tcp --dport 3306 -d 172.16.1.11 -j SNAT --to-source 172.16.1.1</span><br></pre></td></tr></table></figure></li><li><p>添加连续端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -A INPUT -p tcp --dport 60000:65000 -j ACCEPT</span><br><span class="line"><span class="comment"># 冒号表示添加一个连续的端口</span></span><br><span class="line"></span><br><span class="line">$ iptables -A INPUT -p tcp -m multiport –dport 21:25,135:139 -j DROP</span><br><span class="line"><span class="comment">#使用multiport参数配置不连续端口和多个端口</span></span><br></pre></td></tr></table></figure></li><li><p>代理上网<br>内网机子无法上网，通过一台可以上网的电脑，在可以访问外网的server上iptables让其一个网段内的机子访问外网，这里是阿里云环境来做的，开启IP转发功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">'s/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/g'</span> /etc/sysctl.conf</span><br><span class="line">$ iptables -t nat -I POSTROUTING -s 172.16.3.0/24 -j SNAT --to-source 172.16.3.2</span><br></pre></td></tr></table></figure></li></ul><h4 id="操作iptables的nat规则"><a href="#操作iptables的nat规则" class="headerlink" title="操作iptables的nat规则"></a>操作iptables的nat规则</h4><ul><li><p>查看规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -nvL -t nat</span><br><span class="line">$ iptables -t nat -L -n --line-numbers</span><br></pre></td></tr></table></figure></li><li><p>删除规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -D POSTROUTING 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># iptables的规则号</span></span><br><span class="line">$ iptables -nL --line-number</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改/替换规则</span></span><br><span class="line">$ iptbales -R INPUT &#123;1&#125; -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除规则</span></span><br><span class="line">$ iptables -D INPUT &#123;1&#125;</span><br></pre></td></tr></table></figure></li><li><p>iptales端口通过一张网卡出去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -A INPUT -i eth0 -p tcp -s 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLESHED -j ACCEPT</span><br><span class="line">$ iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>本机端口，映射到本机端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 25 -j REDIRECT --to-port 2525</span><br><span class="line">$ iptables -t nat -I PREROUTING --src 0/0 --dst 192.168.1.5 -p tcp --dport 80 -j REDIRECT --to-ports 8123</span><br><span class="line">$ iptables -t nat -I OUTPUT --src 0/0 --dst 192.168.1.5 -p tcp --dport 80 -j REDIRECT --to-ports 8123</span><br></pre></td></tr></table></figure></li><li><p>保存防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /usr/libexec/iptables/iptables.init save</span><br></pre></td></tr></table></figure></li><li><p>奇葩需求，开放ssh端口指定的IP地址访问，其他端口太多不想添加能对外访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample configuration for iptables service</span></span><br><span class="line"><span class="comment"># you can edit this manually or use system-config-firewall</span></span><br><span class="line"><span class="comment"># please do not ask us to add additional ports/services to this default configuration</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -s 192.168.10.1/32 -p tcp -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 22 -j  REJECT --reject-with icmp-port-unreachable</span><br><span class="line"><span class="comment">#-A INPUT -j REJECT --reject-with icmp-host-prohibited</span></span><br><span class="line"><span class="comment">#-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Iptables&quot;&gt;&lt;a href=&quot;#Iptables&quot; class=&quot;headerlink&quot; title=&quot;Iptables&quot;&gt;&lt;/a&gt;Iptables&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Iptalbes 是用来设置、维护和检查Linux内核的IP包过滤规则的。可以定义不同的表，每个表都包含几个内部的链，也能包含用户定义的链。每个链都是一个规则列表，对对应的包进行匹配：每条规则指定应当如何处理与之相匹配的包。这被称作’target’（目标），也可以跳向同一个表内的用户定义的链。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://xxlaila.github.io//categories/linux/"/>
    
    
      <category term="iptables" scheme="https://xxlaila.github.io//tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>交换机做端口聚合</title>
    <link href="https://xxlaila.github.io/2019/09/25/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%81%9A%E7%AB%AF%E5%8F%A3%E8%81%9A%E5%90%88/"/>
    <id>https://xxlaila.github.io/2019/09/25/交换机做端口聚合/</id>
    <published>2019-09-25T02:09:47.000Z</published>
    <updated>2019-09-26T03:13:12.855Z</updated>
    
    <content type="html"><![CDATA[<p><strong>应用场景</strong>：h3c s5500 (Switch A)。huawei s5720S-SI-AC（Switch B）</p><p>Switch A 作为上行交换机，Switch B作为下行交换机</p><p><strong>组网</strong>：两个交换机的id、vlan号这里使用的是相同</p><a id="more"></a><p><img src="http://img.xxlaila.cn/2846sjdhausiy84yhks.png" alt="img"></p><h3 id="Switch-A配置"><a href="#Switch-A配置" class="headerlink" title="Switch A配置"></a>Switch A配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Switch A-SW]vlan 50</span><br><span class="line">[Switch A-SW-vlan50]quit</span><br><span class="line">[Switch A-SW]interface Bridge-Aggregation 50</span><br><span class="line">[Switch A-SW-Bridge-Aggregation50]port access vlan 50</span><br><span class="line">[Switch A-SW]interface GigabitEthernet 1/0/19</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/19]port link-aggregation group 50</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/19] port access vlan 50</span><br><span class="line">[Switch A-SW]interface GigabitEthernet 1/0/20</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/20]port link-aggregation group 50</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/20]port access vlan 50</span><br><span class="line">[Switch A-SW]link-aggregation load-sharing mode <span class="built_in">source</span>-mac destination-mac</span><br></pre></td></tr></table></figure><ul><li>查看端口聚合<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Switch A-SW]dis link-aggregation verbose</span><br></pre></td></tr></table></figure></li></ul><h3 id="Switch-B配置"><a href="#Switch-B配置" class="headerlink" title="Switch B配置"></a>Switch B配置</h3><h4 id="1、创建eth-trunk接口并加入成员"><a href="#1、创建eth-trunk接口并加入成员" class="headerlink" title="1、创建eth-trunk接口并加入成员"></a>1、创建eth-trunk接口并加入成员</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Switch B] interface eth-trunk 50</span><br><span class="line">[Switch B-Eth-Trunk1] trunkport gigabitethernet 0/0/1 to 0/0/3</span><br><span class="line">[Switch B-Eth-Trunk1] quit</span><br></pre></td></tr></table></figure><h4 id="2、创建vlan并吧串行加入vlan"><a href="#2、创建vlan并吧串行加入vlan" class="headerlink" title="2、创建vlan并吧串行加入vlan"></a>2、创建vlan并吧串行加入vlan</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Switch B] vlan batch 50</span><br><span class="line">[Switch B] interface eth-trunk 50</span><br><span class="line">[Switch B-Eth-Trunk1] port link-type trunk</span><br><span class="line">[Switch B-Eth-Trunk1] port trunk allow-pass vlan 50</span><br><span class="line">[Switch B-Eth-Trunk1] quit</span><br></pre></td></tr></table></figure><h4 id="3、配置eth-trunk的负载分担方式"><a href="#3、配置eth-trunk的负载分担方式" class="headerlink" title="3、配置eth-trunk的负载分担方式"></a>3、配置eth-trunk的负载分担方式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Switch B] interface eth-trunk 1</span><br><span class="line">[Switch B-Eth-Trunk1] load-balance src-dst-mac</span><br><span class="line">[Switch B-Eth-Trunk1] quit</span><br></pre></td></tr></table></figure><h3 id="Switch-A配置地址段"><a href="#Switch-A配置地址段" class="headerlink" title="Switch A配置地址段"></a>Switch A配置地址段</h3><p>在vlan里面起一个网络，但不启用dhcp服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Switch A-SW]int vlan 50</span><br><span class="line">[Switch A-SW-Vlan-interface50]ip ad 172.21.16.1 20</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;应用场景&lt;/strong&gt;：h3c s5500 (Switch A)。huawei s5720S-SI-AC（Switch B）&lt;/p&gt;
&lt;p&gt;Switch A 作为上行交换机，Switch B作为下行交换机&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;组网&lt;/strong&gt;：两个交换机的id、vlan号这里使用的是相同&lt;/p&gt;
    
    </summary>
    
      <category term="网络设备" scheme="https://xxlaila.github.io//categories/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/"/>
    
    
      <category term="交换机" scheme="https://xxlaila.github.io//tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>pv pvc</title>
    <link href="https://xxlaila.github.io/2019/09/25/pv-pvc/"/>
    <id>https://xxlaila.github.io/2019/09/25/pv-pvc/</id>
    <published>2019-09-25T01:46:10.000Z</published>
    <updated>2019-09-25T01:59:18.795Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PersistentVolume（pv）和PersistentVolumeClaim（pvc）是k8s提供的两种API资源，用于抽象存储细节。管理员关注于如何通过pv提供存储功能而无需关注用户如何使用，同样的用户只需要挂载pvc到容器中而不需要关注存储卷采用何种技术实现。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvc和pv的关系与pod和node关系类似，前者消耗后者的资源。pvc可以向pv申请指定大小的存储资源并设置访问模式,这就可以通过Provision -&gt; Claim 的方式，来对存储资源进行控制。</p><a id="more"></a><h3 id="2、生命周期"><a href="#2、生命周期" class="headerlink" title="2、生命周期"></a>2、生命周期</h3><p>pv和pvc遵循以下生命周期:</p><ul><li>供应准备。通过集群外的存储系统或者云平台来提供存储持久化支持。<ul><li><strong>静态提供</strong>: 管理员手动创建多个PV，供PVC使用。</li><li><strong>动态提供</strong>: 动态创建PVC特定的PV，并绑定。</li></ul></li><li>绑定。用户创建pvc并指定需要的资源和访问模式。在找到可用pv之前，pvc会保持未绑定状态。</li><li>使用。用户可在pod中像volume一样使用pvc。</li><li>释放。用户删除pvc来回收存储资源，pv将变成“released”状态。由于还保留着之前的数据，这些数据需要根据不同的策略来处理，否则这些存储资源无法被其他pvc使用。</li><li>回收(Reclaiming)。pv可以设置三种回收策略：保留（Retain），回收（Recycle）和删除（Delete）。</li></ul><ul><li><strong>保留策略</strong>: 允许人工处理保留的数据。</li><li><strong>删除策略</strong>: 将删除pv和外部关联的存储资源，需要插件支持。</li><li><strong>回收策略</strong>: 将执行清除操作，之后可以被新的pvc使用，需要插件支持。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前只有NFS和HostPath类型卷支持回收策略，AWS EBS,GCE PD,Azure Disk和Cinder支持删除(Delete)策略。</p><h4 id="2-1、Provisioning"><a href="#2-1、Provisioning" class="headerlink" title="2.1、Provisioning"></a>2.1、Provisioning</h4><p>两种方式提供的PV资源供给：</p><ul><li><p>static:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过集群管理者创建多个PV，为集群“使用者”提供存储能力而隐藏真实存储的细节。并且存在于kubenretes api中，可被直接使用。</p></li><li><p>dynamic:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;动态卷供给是kubernetes独有的功能，这一功能允许按需创建存储建。在此之前，集群管理员需要事先在集群外由存储提供者或者云提供商创建<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储卷，成功之后再创建PersistentVolume对象，才能够在kubernetes中使用。动态卷供给能让集群管理员不必进行预先创建存储卷，而是随着用户需求进行创建。在1.5版本提高了动态卷的弹性和可用性。</p></li></ul><h3 id="PV类型"><a href="#PV类型" class="headerlink" title="PV类型"></a>PV类型</h3><p>pv支持以下类型:</p><ul><li>GCEPersistentDisk</li><li>AWSElasticBlockStore</li><li>NFS</li><li>iSCSI</li><li>RBD (Ceph Block Device)</li><li>Glusterfs</li><li>AzureFile</li><li>AzureDisk</li><li>CephFS</li><li>cinder</li><li>FC</li><li>FlexVolume</li><li>Flocker</li><li>PhotonPersistentDisk</li><li>Quobyte</li><li>VsphereVolume</li><li>HostPath (single node testing only – local storage is not supported in any way and WILL NOT WORK in a multi-node cluster)</li></ul><h4 id="3-1、PV属性"><a href="#3-1、PV属性" class="headerlink" title="3.1、PV属性"></a>3.1、PV属性</h4><ul><li>访问模式,与pv的语义相同。在请求资源时使用特定模式。</li><li>资源,申请的存储资源数额。</li></ul><h4 id="3-2、PV卷阶段状态"><a href="#3-2、PV卷阶段状态" class="headerlink" title="3.2、PV卷阶段状态"></a>3.2、PV卷阶段状态</h4><ul><li>Available – 资源尚未被claim使用</li><li>Bound – 卷已经被绑定到claim了</li><li>Released – claim被删除，卷处于释放状态，但未被集群回收。</li><li>Failed – 卷自动回收失败</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、介绍&quot;&gt;&lt;a href=&quot;#1、介绍&quot; class=&quot;headerlink&quot; title=&quot;1、介绍&quot;&gt;&lt;/a&gt;1、介绍&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PersistentVolume（pv）和PersistentVolumeClaim（pvc）是k8s提供的两种API资源，用于抽象存储细节。管理员关注于如何通过pv提供存储功能而无需关注用户如何使用，同样的用户只需要挂载pvc到容器中而不需要关注存储卷采用何种技术实现。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pvc和pv的关系与pod和node关系类似，前者消耗后者的资源。pvc可以向pv申请指定大小的存储资源并设置访问模式,这就可以通过Provision -&amp;gt; Claim 的方式，来对存储资源进行控制。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://xxlaila.github.io//categories/kubernetes/"/>
    
    
      <category term="pv, pvc" scheme="https://xxlaila.github.io//tags/pv-pvc/"/>
    
  </entry>
  
  <entry>
    <title>利用NFS动态提供Kubernetes后端存储卷</title>
    <link href="https://xxlaila.github.io/2019/09/24/%E5%88%A9%E7%94%A8NFS%E5%8A%A8%E6%80%81%E6%8F%90%E4%BE%9BKubernetes%E5%90%8E%E7%AB%AF%E5%AD%98%E5%82%A8%E5%8D%B7/"/>
    <id>https://xxlaila.github.io/2019/09/24/利用NFS动态提供Kubernetes后端存储卷/</id>
    <published>2019-09-24T09:53:32.000Z</published>
    <updated>2019-09-25T04:32:59.526Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nfs-client-provisioner是一个automatic provisioner，使用NFS作为存储，自动创建PV和对应的PVC，本身不提供NFS存储，需要外部先有一套NFS存储服务。</p><ul><li>PV以 ${namespace}-${pvcName}-${pvName}的命名格式提供（在NFS服务器上）</li><li>PV回收的时候以 archieved-${namespace}-${pvcName}-${pvName} 的命名格式（在NFS服务器上）</li></ul><p><a href="https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client" target="_blank" rel="noopener">官方访问地址</a></p><a id="more"></a><h3 id="1、权限体系构建"><a href="#1、权限体系构建" class="headerlink" title="1、权限体系构建"></a>1、权限体系构建</h3><h4 id="1-1、创建serviceaccount"><a href="#1-1、创建serviceaccount" class="headerlink" title="1.1、创建serviceaccount"></a>1.1、创建serviceaccount</h4><p>ServiceAccount也是一种账号, 供运行在pod中的进程使用, 为pod中的进程提供必要的身份证明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; serviceaccount.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="1-2、创建role"><a href="#1-2、创建role" class="headerlink" title="1.2、创建role"></a>1.2、创建role</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt;clusterrole.yaml&lt;&lt;EOF</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumes"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"delete"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumeclaims"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"storage.k8s.io"</span>]</span><br><span class="line">    resources: [<span class="string">"storageclasses"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"events"</span>]</span><br><span class="line">    verbs: [<span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"services"</span>, <span class="string">"endpoints"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"create"</span>,<span class="string">"list"</span>, <span class="string">"watch"</span>,<span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"extensions"</span>]</span><br><span class="line">    resources: [<span class="string">"podsecuritypolicies"</span>]</span><br><span class="line">    resourceNames: [<span class="string">"nfs-client-provisioner"</span>]</span><br><span class="line">    verbs: [<span class="string">"use"</span>]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="1-3、账户和角色绑定"><a href="#1-3、账户和角色绑定" class="headerlink" title="1.3、账户和角色绑定"></a>1.3、账户和角色绑定</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt;clusterrolebinding.yaml &lt;&lt;EOF</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  name: run-nfs-client-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nfs-client-provisioner</span><br><span class="line">    namespace: kube-ops</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="1-4、执行创建"><a href="#1-4、执行创建" class="headerlink" title="1.4、执行创建"></a>1.4、执行创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f serviceaccount.yaml -f clusterrole.yaml -f clusterrolebinding.yaml</span><br><span class="line">serviceaccount/nfs-client-provisioner created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/nfs-client-provisioner-runner created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/run-nfs-client-provisioner created</span><br></pre></td></tr></table></figure><h3 id="2、安装部署"><a href="#2、安装部署" class="headerlink" title="2、安装部署"></a>2、安装部署</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载deployment.yaml文件,需要修改NFS服务器所在的IP地址（10.10.10.60），以及NFS服务器共享的路径（/ifs/kubernetes），两处都需要修改为你实际的NFS服务器和共享目录</p><h4 id="2-1、部署存储供应卷"><a href="#2-1、部署存储供应卷" class="headerlink" title="2.1、部署存储供应卷"></a>2.1、部署存储供应卷</h4><p>根据PVC的请求, 动态创建PV存储.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; deployment.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">---</span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nfs-client-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nfs-client-provisioner</span><br><span class="line">      containers:</span><br><span class="line">        - name: nfs-client-provisioner</span><br><span class="line">          image: quay.io/external_storage/nfs-client-provisioner:latest</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: nfs-client-root</span><br><span class="line">              mountPath: /persistentvolumes</span><br><span class="line">          env:</span><br><span class="line">            - name: PROVISIONER_NAME</span><br><span class="line">              value: fuseim.pri/ifs</span><br><span class="line">            - name: NFS_SERVER</span><br><span class="line">              value: 172.21.17.39</span><br><span class="line">            - name: NFS_PATH</span><br><span class="line">              value: /opt</span><br><span class="line">      volumes:</span><br><span class="line">        - name: nfs-client-root</span><br><span class="line">          nfs:</span><br><span class="line">            server: /opt</span><br><span class="line">            path: 172.21.17.39</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>修改StorageClass文件并部署class.yaml</li></ul><p>此处可以不修改，或者修改provisioner的名字，需要与上面的deployment的PROVISIONER_NAME名字一致</p><h4 id="2-2、创建storageclass"><a href="#2-2、创建storageclass" class="headerlink" title="2.2、创建storageclass"></a>2.2、创建storageclass</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; class.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: managed-nfs-storage</span><br><span class="line">provisioner: fuseim.pri/ifs <span class="comment"># or choose another name, must match deployment's env PROVISIONER_NAME'</span></span><br><span class="line">parameters:</span><br><span class="line">  archiveOnDelete: <span class="string">"false"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="2-3、执行创建"><a href="#2-3、执行创建" class="headerlink" title="2.3、执行创建"></a>2.3、执行创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f deployment.yaml </span><br><span class="line">serviceaccount/nfs-client-provisioner created</span><br><span class="line">deployment.extensions/nfs-client-provisioner created</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f class.yaml </span><br><span class="line">storageclass.storage.k8s.io/managed-nfs-storage created</span><br></pre></td></tr></table></figure><h5 id="2-3-1、查看StorageClass"><a href="#2-3-1、查看StorageClass" class="headerlink" title="2.3.1、查看StorageClass"></a>2.3.1、查看StorageClass</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get storageclass</span><br><span class="line">NAME                  PROVISIONER      AGE</span><br><span class="line">managed-nfs-storage   fuseim.pri/ifs   18s</span><br></pre></td></tr></table></figure><h5 id="2-3-2、设置默认后端存储"><a href="#2-3-2、设置默认后端存储" class="headerlink" title="2.3.2、设置默认后端存储"></a>2.3.2、设置默认后端存储</h5><p>设置这个default名字的SC为Kubernetes的默认存储后端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl patch storageclass managed-nfs-storage -p <span class="string">'&#123;"metadata": &#123;"annotations":&#123;"storageclass.kubernetes.io/is-default-class":"true"&#125;&#125;&#125;'</span></span><br><span class="line">storageclass.storage.k8s.io/managed-nfs-storage patched</span><br></pre></td></tr></table></figure><ul><li>storage.yaml (和上面一样)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; storage.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: managed-nfs-storage</span><br><span class="line">  annotations:</span><br><span class="line">    storageclass.kubernetes.io/is-default-class: <span class="string">"true"</span></span><br><span class="line">provisioner: fuseim.pri/ifs</span><br><span class="line">parameters:</span><br><span class="line">  archiveOnDelete: <span class="string">"false"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-3、查看验证"><a href="#2-3-3、查看验证" class="headerlink" title="2.3.3、查看验证"></a>2.3.3、查看验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get all -n kube-ops</span><br><span class="line">NAME                                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/nfs-client-provisioner-77f678858b-8d2d6   1/1     Running   0          26m</span><br><span class="line"></span><br><span class="line">NAME                                     READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/nfs-client-provisioner   1/1     1            1           29m</span><br><span class="line"></span><br><span class="line">NAME                                                DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/nfs-client-provisioner-77f678858b   1         1         1       26m</span><br></pre></td></tr></table></figure><h3 id="3、验证测试"><a href="#3、验证测试" class="headerlink" title="3、验证测试"></a>3、验证测试</h3><h4 id="3-1、创建一个测试存储"><a href="#3-1、创建一个测试存储" class="headerlink" title="3.1、创建一个测试存储"></a>3.1、创建一个测试存储</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; <span class="built_in">test</span>-claim.yaml &lt;&lt;EOF</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-claim</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"managed-nfs-storage"</span></span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Mi</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="3-2、启动测试POD"><a href="#3-2、启动测试POD" class="headerlink" title="3.2、启动测试POD"></a>3.2、启动测试POD</h4><p>POD文件如下，作用就是在test-claim的PV里touch一个SUCCESS文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ cat  &gt; <span class="built_in">test</span>-pod.yaml &lt;&lt;EOF</span><br><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-pod</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: <span class="built_in">test</span>-pod</span><br><span class="line">    image: docker.io/busybox:1.24</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - <span class="string">"/bin/sh"</span></span><br><span class="line">    args:</span><br><span class="line">      - <span class="string">"-c"</span></span><br><span class="line">      - <span class="string">"touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1"</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">      - name: nfs-pvc</span><br><span class="line">        mountPath: <span class="string">"/mnt"</span></span><br><span class="line">  restartPolicy: <span class="string">"Never"</span></span><br><span class="line">  volumes:</span><br><span class="line">    - name: nfs-pvc</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: <span class="built_in">test</span>-claim</span><br></pre></td></tr></table></figure><h4 id="3-3、执行创建"><a href="#3-3、执行创建" class="headerlink" title="3.3、执行创建"></a>3.3、执行创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f ./</span><br><span class="line">persistentvolumeclaim/<span class="built_in">test</span>-claim created</span><br><span class="line">pod/<span class="built_in">test</span>-pod created</span><br></pre></td></tr></table></figure><h4 id="3-4、查看验证"><a href="#3-4、查看验证" class="headerlink" title="3.4、查看验证"></a>3.4、查看验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod,pv -n kube-ops</span><br><span class="line">NAME                                          READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod/nfs-client-provisioner-77f678858b-8d2d6   1/1     Running     0          3h26m</span><br><span class="line">pod/<span class="built_in">test</span>-pod                                  0/1     Completed   0          172m</span><br><span class="line"></span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS          REASON   AGE</span><br><span class="line">persistentvolume/pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8   1Mi        RWX            Retain           Bound    kube-ops/<span class="built_in">test</span>-claim   managed-nfs-storage            172m</span><br></pre></td></tr></table></figure><ul><li>登录nfs服务器查看是否成功的创建目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls /opt/</span><br><span class="line">kube-ops-test-claim-pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-5、更改PersistentVolumes-中的一个回收策略"><a href="#3-5、更改PersistentVolumes-中的一个回收策略" class="headerlink" title="3.5、更改PersistentVolumes 中的一个回收策略"></a>3.5、更改PersistentVolumes 中的一个回收策略</h4><ul><li><p>查看集群中PersistentVolumes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pv -n kube-ops</span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS          REASON   AGE</span><br><span class="line">pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8   1Mi        RWX            Delete           Bound    kube-ops/<span class="built_in">test</span>-claim   managed-nfs-storage            3m6s</span><br></pre></td></tr></table></figure></li><li><p>更改PersistentVolumes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl patch pv pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8  -p <span class="string">'&#123;"spec":&#123;"persistentVolumeReclaimPolicy":"Retain"&#125;&#125;'</span></span><br><span class="line">persistentvolume/pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8 patched</span><br><span class="line"></span><br><span class="line">$ kubectl get pv -n kube-ops</span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS          REASON   AGE</span><br><span class="line">pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8   1Mi        RWX            Retain           Bound    kube-ops/<span class="built_in">test</span>-claim   managed-nfs-storage            3m54s</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nfs-client-provisioner是一个automatic provisioner，使用NFS作为存储，自动创建PV和对应的PVC，本身不提供NFS存储，需要外部先有一套NFS存储服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PV以 ${namespace}-${pvcName}-${pvName}的命名格式提供（在NFS服务器上）&lt;/li&gt;
&lt;li&gt;PV回收的时候以 archieved-${namespace}-${pvcName}-${pvName} 的命名格式（在NFS服务器上）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方访问地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="https://xxlaila.github.io//categories/kubernetes/"/>
    
    
      <category term="pvc,pv" scheme="https://xxlaila.github.io//tags/pvc-pv/"/>
    
  </entry>
  
</feed>
