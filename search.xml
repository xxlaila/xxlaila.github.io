<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>flannel cni容器部署</title>
    <url>/2019/11/29/flannel-cni%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="flannel-cni-配置"><a href="#flannel-cni-配置" class="headerlink" title="flannel cni 配置"></a>flannel cni 配置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除原有的网络组件，采用容器方式进行部署。</p><h3 id="kube-controller-manager修改"><a href="#kube-controller-manager修改" class="headerlink" title="kube-controller-manager修改"></a>kube-controller-manager修改</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;启动参数增加如下两项<a id="more"></a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--allocate-node-cidrs=<span class="literal">true</span></span><br><span class="line">--cluster-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><p><strong>参数</strong>:</p><ul><li>1.是否应在云提供商上分配和设置Pod的CIDR</li><li>2.集群中Pod的CIDR范围。要求–allocate-node-cidrs为true</li></ul><p>kube-controller-manager参数<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/" target="_blank" rel="noopener">详细说明</a></p><h3 id="kubelet-修改"><a href="#kubelet-修改" class="headerlink" title="kubelet 修改"></a>kubelet 修改</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet修改两个配置文件，kubelet-config.yaml 文件已更新</p><h4 id="kubelet-service启动文件"><a href="#kubelet-service启动文件" class="headerlink" title="kubelet.service启动文件"></a>kubelet.service启动文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--network-plugin=cni</span><br><span class="line">--cni-conf-dir=/etc/cni/net.d</span><br><span class="line">--cni-bin-dir=/opt/cni/bin</span><br></pre></td></tr></table></figure><p>kubele参数<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/" target="_blank" rel="noopener">详细说明</a></p><h4 id="kube-proxy-修改子网"><a href="#kube-proxy-修改子网" class="headerlink" title="kube-proxy 修改子网"></a>kube-proxy 修改子网</h4><ul><li>kube-proxy-config.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clusterCIDR: 10.244.0.0/16</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k8s<a href="https://www.xxlaila.cn/2019/09/11/kubernetes-v1-14%E5%AE%89%E8%A3%85/">集群安装文档</a>已经更新，node<a href="https://www.xxlaila.cn/2019/09/16/kubernetes-v1-14-node%E5%AE%89%E8%A3%85/">节点安装文档</a>已经更新。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先停止node 的flananel、 kubelet、kube-proxy。在删除/etc/cni/net.d/、/run/flannel/subnet.env、/var/lib/cni/flannel 的历史文件，重启网卡，除了flannel不启动，其他均启动。全新安装不需要这么操作，flannel证书也不需要复制。<a href="https://github.com/containernetworking/cni" target="_blank" rel="noopener">二进制安装参考</a></p><h3 id="下载cni插件"><a href="#下载cni插件" class="headerlink" title="下载cni插件"></a>下载cni插件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cni <a href="https://github.com/containernetworking/plugins/releases" target="_blank" rel="noopener">插件下载</a>，解压后，放在各个节点的 /opt/cni/bin 下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /opt/cni/bin/</span><br><span class="line">total 70144</span><br><span class="line">-rwxr-xr-x 1 root root  4159253 Nov 26 16:32 bandwidth</span><br><span class="line">-rwxr-xr-x 1 root root  4628074 Nov 26 16:32 bridge</span><br><span class="line">-rwxr-xr-x 1 root root 12124236 Nov 26 16:32 dhcp</span><br><span class="line">-rwxr-xr-x 1 root root  5894275 Nov 26 16:32 firewall</span><br><span class="line">-rwxr-xr-x 1 root root  3069556 Nov 26 16:32 flannel</span><br><span class="line">-rwxr-xr-x 1 root root  4113837 Nov 26 16:32 host-device</span><br><span class="line">-rwxr-xr-x 1 root root  3614305 Nov 26 16:32 host-local</span><br><span class="line">-rwxr-xr-x 1 root root  4275320 Nov 26 16:32 ipvlan</span><br><span class="line">-rwxr-xr-x 1 root root  3209373 Nov 26 16:32 loopback</span><br><span class="line">-rwxr-xr-x 1 root root  4346248 Nov 26 16:32 macvlan</span><br><span class="line">-rwxr-xr-x 1 root root  3895553 Nov 26 16:32 portmap</span><br><span class="line">-rwxr-xr-x 1 root root  4546828 Nov 26 16:32 ptp</span><br><span class="line">-rwxr-xr-x 1 root root  3392736 Nov 26 16:32 sbr</span><br><span class="line">-rwxr-xr-x 1 root root  2885430 Nov 26 16:32 static</span><br><span class="line">-rwxr-xr-x 1 root root  3356497 Nov 26 16:32 tuning</span><br><span class="line">-rwxr-xr-x 1 root root  4275168 Nov 26 16:32 vlan</span><br></pre></td></tr></table></figure><h3 id="flannel-部署"><a href="#flannel-部署" class="headerlink" title="flannel 部署"></a>flannel 部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/v0.11.0/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line">kubectl apply -f ./kube-flannel.yml</span><br></pre></td></tr></table></figure><h3 id="查看flannel安装情况"><a href="#查看flannel安装情况" class="headerlink" title="查看flannel安装情况"></a>查看flannel安装情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get po,svc -o wide</span></span><br><span class="line">NAME                 READY   STATUS    RESTARTS   AGE   IP           NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">pod/nginx-ds-b9wgm   1/1     Running   0          43h   10.244.6.2   172.21.17.41    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx-ds-dd9mb   1/1     Running   0          43h   10.244.1.3   172.21.17.34    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx-ds-lcrn5   1/1     Running   0          43h   10.244.4.2   172.21.16.231   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx-ds-n52vr   1/1     Running   0          43h   10.244.2.2   172.21.17.40    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx-ds-twdxm   1/1     Running   0          43h   10.244.5.2   172.21.16.204   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx-ds-z72mx   1/1     Running   0          43h   10.244.3.2   172.21.17.38    &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE   SELECTOR</span><br><span class="line">service/kubernetes   ClusterIP   10.254.0.1      &lt;none&gt;        443/TCP        44h   &lt;none&gt;</span><br><span class="line">service/nginx-ds     NodePort    10.254.230.34   &lt;none&gt;        80:31286/TCP   43h   app=nginx-ds</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get po,svc -o wide -n kube-system</span></span><br><span class="line">NAME                                              READY   STATUS    RESTARTS   AGE     IP              NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">pod/coredns-5579b8778b-dlk4c                      1/1     Running   4          43h     10.244.1.2      172.21.17.34    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-2t8rn                   1/1     Running   0          44h     172.21.17.41    172.21.17.41    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-9sb8v                   1/1     Running   0          44h     172.21.16.231   172.21.16.231   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-npl5k                   1/1     Running   0          44h     172.21.17.34    172.21.17.34    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-r5n8r                   1/1     Running   0          44h     172.21.16.204   172.21.16.204   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-wpfxw                   1/1     Running   0          44h     172.21.17.40    172.21.17.40    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-x2v8z                   1/1     Running   0          44h     172.21.17.38    172.21.17.38    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kubernetes-dashboard-65dfbf6f4f-sc92h         1/1     Running   0          21h     10.244.6.10     172.21.17.41    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/metrics-server-v0.3.4-5cd6d6b55f-psq2z        2/2     Running   0          3h20m   172.21.17.34    172.21.17.34    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/traefik-ingress-controller-56b6d5b864-srnmm   1/1     Running   0          155m    172.21.17.41    172.21.17.41    &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE     SELECTOR</span><br><span class="line">service/kube-dns                  ClusterIP   10.254.0.2       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   43h     k8s-app=kube-dns</span><br><span class="line">service/kubernetes-dashboard      NodePort    10.254.139.196   &lt;none&gt;        443:31417/TCP            21h     k8s-app=kubernetes-dashboard</span><br><span class="line">service/metrics-server            ClusterIP   10.254.201.191   &lt;none&gt;        443/TCP                  3h56m   k8s-app=metrics-server</span><br><span class="line">service/traefik-ingress-service   ClusterIP   None             &lt;none&gt;        80/TCP,8080/TCP          154m    k8s-app=traefik-ingress-lb</span><br><span class="line">service/traefik-web-ui            ClusterIP   10.254.78.17     &lt;none&gt;        80/TCP                   23h     k8s-app=traefik-ingress-lb</span><br></pre></td></tr></table></figure><h3 id="查看节点的网络"><a href="#查看节点的网络" class="headerlink" title="查看节点的网络"></a>查看节点的网络</h3><ul><li><p>node-01</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ifconfig</span></span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.6.1  netmask 255.255.255.0  broadcast 10.244.6.255</span><br><span class="line">        ether 42:56:73:73:c5:69  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 121976  bytes 48185929 (45.9 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 143012  bytes 112170228 (106.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.21.17.41  netmask 255.255.240.0  broadcast 172.21.31.255</span><br><span class="line">        ether fa:16:3e:a0:b1:af  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1878425  bytes 997129342 (950.9 MiB)</span><br><span class="line">        RX errors 0  dropped 29  overruns 0  frame 0</span><br><span class="line">        TX packets 1014950  bytes 378435170 (360.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.6.0  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        ether 32:83:f7:e6:de:77  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 207502  bytes 36217464 (34.5 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 242424  bytes 246992876 (235.5 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 15889  bytes 7196484 (6.8 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 15889  bytes 7196484 (6.8 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">vethb26f5960: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        ether a6:a8:18:c3:f0:16  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 23  bytes 2075 (2.0 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 49  bytes 4330 (4.2 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></li><li><p>node-02</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ifconfig</span></span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.4.1  netmask 255.255.255.0  broadcast 10.244.4.255</span><br><span class="line">        ether 82:14:33:5c:b0:b7  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 150228  bytes 747318135 (712.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 214837  bytes 209342880 (199.6 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.21.16.231  netmask 255.255.240.0  broadcast 172.21.31.255</span><br><span class="line">        ether fa:16:3e:d8:23:fe  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 10290258  bytes 3436274673 (3.2 GiB)</span><br><span class="line">        RX errors 0  dropped 19  overruns 0  frame 0</span><br><span class="line">        TX packets 9490095  bytes 3777352983 (3.5 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.4.0  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        ether ee:a3:ff:37:3a:61  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 280851  bytes 31096456 (29.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262931  bytes 968429571 (923.5 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 653134  bytes 200562497 (191.2 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 653134  bytes 200562497 (191.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">veth8aa15f82: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        ether fa:23:1e:b0:65:20  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 49191  bytes 4622232 (4.4 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 53647  bytes 19011709 (18.1 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>flannel</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-dashboard v2.0.0部署</title>
    <url>/2019/11/28/k8s-dashboard-v2-0-0%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes Dashboard 从v2.0.0-beta1版本开始，集成了一个metrics-scraper的组件，可以通过 Kubernetes 的 Metrics API 收集一些基础资源的监控信息，并在web页面展示</p><a id="more"></a><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta6/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><h3 id="使用-openssl-签发证书"><a href="#使用-openssl-签发证书" class="headerlink" title="使用 openssl 签发证书"></a>使用 openssl 签发证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir certs</span><br><span class="line">openssl req -nodes -newkey rsa:2048 -keyout certs/dashboard.key -out certs/dashboard.csr -subj <span class="string">"/C=/ST=/L=/O=/OU=/CN=kubernetes-dashboard"</span></span><br><span class="line">openssl x509 -req -sha256 -days 10000 -<span class="keyword">in</span> certs/dashboard.csr -signkey certs/dashboard.key -out certs/dashboard.crt</span><br></pre></td></tr></table></figure><h3 id="安装-Dashboard"><a href="#安装-Dashboard" class="headerlink" title="安装 Dashboard"></a>安装 Dashboard</h3><h4 id="创建namespace"><a href="#创建namespace" class="headerlink" title="创建namespace"></a>创建namespace</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create namespace kubernetes-dashboard</span><br></pre></td></tr></table></figure><h4 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic kubernetes-dashboard-certs --from-file=certs -n kubernetes-dashboard</span><br></pre></td></tr></table></figure><h4 id="修改recommended-yaml"><a href="#修改recommended-yaml" class="headerlink" title="修改recommended.yaml"></a>修改recommended.yaml</h4><ul><li><p>注释namespace</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br></pre></td></tr></table></figure></li><li><p>使用自签发的证书<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用自签发的证书,注释掉 kubernetes-dashboard-certs 的 Secret 定义</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-certs</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create -f recommended.yaml</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用-NodePort-暴露服务"><a href="#使用-NodePort-暴露服务" class="headerlink" title="使用 NodePort 暴露服务"></a>使用 NodePort 暴露服务</h4><ul><li><p>新建 external-https-svc.yml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;external-https-svc.yaml&lt;&lt;EOF</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-external</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create -f external-https-svc.yaml</span><br></pre></td></tr></table></figure></li><li><p>查看验证</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># kubectl <span class="keyword">get</span> svc,pods -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">NAME                                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">service/dashboard-metrics-scraper       ClusterIP   <span class="number">10.254</span><span class="number">.199</span><span class="number">.169</span>   &lt;none&gt;        <span class="number">8000</span>/TCP        <span class="number">9</span>m50s</span><br><span class="line">service/kubernetes-dashboard            ClusterIP   <span class="number">10.254</span><span class="number">.73</span><span class="number">.119</span>    &lt;none&gt;        <span class="number">443</span>/TCP         <span class="number">9</span>m51s</span><br><span class="line">service/kubernetes-dashboard-<span class="keyword">external</span>   NodePort    <span class="number">10.254</span><span class="number">.169</span><span class="number">.250</span>   &lt;none&gt;        <span class="number">443</span>:<span class="number">32318</span>/TCP   <span class="number">11</span>m</span><br><span class="line"></span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/dashboard-metrics-scraper<span class="number">-69f</span>cc6d9df<span class="number">-4</span>lctd   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">9</span>m49s</span><br><span class="line">pod/kubernetes-dashboard<span class="number">-77</span>d4694b5f-vkgfz        <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">9</span>m49s</span><br></pre></td></tr></table></figure></li></ul><p>使用之前的密钥认证登录，未出图，查了一下，说的是兼容问题，v1.15.0以上就没问题<br><img src="https://img.xxlaila.cn/1574927727171.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>dashboard v2.0.0</tag>
      </tags>
  </entry>
  <entry>
    <title>logstash详解</title>
    <url>/2019/11/21/logstash%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前篇文件<a href="http://www.xxlaila.cn/2019/11/15/elk%E9%83%A8%E7%BD%B2/">elk部署</a>粗略的完成了部署，但是真正是批量使用的时候发现还是有很多不足，优化的点还是非常的多。<a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用ElasticSearch时一般需要自己创建ElasticSearch的索引的Mapping，当索引非常多的时候，可能需要配置一个索引模板Template来对类似的索引做统一配置，让索引模板Template中配置匹配索引的规则，来确定该Template会被应用到哪些索引上。</p><h3 id="Template配置方式"><a href="#Template配置方式" class="headerlink" title="Template配置方式"></a>Template配置方式</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logstash在整合ElasticSearch的时候，有三种方式可以来进行Template的配置。</p><h4 id="使用ElasticSearch默认自带的索引模板"><a href="#使用ElasticSearch默认自带的索引模板" class="headerlink" title="使用ElasticSearch默认自带的索引模板"></a>使用ElasticSearch默认自带的索引模板</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ElasticSearch默认自带了一个名字为”logstash”的模板，默认应用于Logstash写入数据到ElasticSearch使用，我们可以在通过es的api接口、或者在kibana dev tools窗口通过GET /_template/来进行查看</p><ul><li><p>api 查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET http://127.0.0.1:9200/_template  -s | python -m json.tool</span><br><span class="line"></span><br><span class="line">$ curl -XGET http://127.0.0.1:9200/_template?pretty</span><br></pre></td></tr></table></figure></li><li><p>kibana 查看<br><img src="https://img.xxlaila.cn/1574314182454.jpg" alt="img"></p></li><li><p>优点: 最简单，无须任何配置</p></li><li><p>缺点: 无法自定义一些配置，例如：分词方式</p></li></ul><h4 id="在Logstash-Indexer端自定义配置索引模板"><a href="#在Logstash-Indexer端自定义配置索引模板" class="headerlink" title="在Logstash Indexer端自定义配置索引模板"></a>在Logstash Indexer端自定义配置索引模板</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logstash的output插件中使用template指定本机器上的一个模板json文件路径，可以在json文件中设置对应的Template模板信息。前面的章节就使用的这种方式。</p><ul><li>优点：配置简单</li><li>缺点：因为分散在Logstash Indexer机器上，维护起来比较麻烦</li></ul><h4 id="在ElasticSearch服务端自定义配置索引模板"><a href="#在ElasticSearch服务端自定义配置索引模板" class="headerlink" title="在ElasticSearch服务端自定义配置索引模板"></a>在ElasticSearch服务端自定义配置索引模板</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由ElasticSearch负责加载模板。这种方式需要在ElasticSearch的集群中的config/templates路径下配置模板json。而且ElasticSearch提供了Restful API接口维护索引模板信息。</p><ul><li>优点：维护比较容易，可动态更改，全局生效。</li><li>缺点：需要注意模板的命名规则，比较容易通过看Template名字就能够确定模板应用到哪些索引</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;三种索引方式都有优缺点；但是使用第三种方式是最好的，就像之前<a href="http://www.xxlaila.cn/2019/11/15/elk%E9%83%A8%E7%BD%B2/">elk部署</a>就使用的是第二种方式，然后是在用的时候发现，logstash是多台服务器，维护起来非常非常的麻烦。如果logstash 和ElasticSearch只有一台服务器，可以使用第二种方式，在Logstash Indexer端维护Template文件即可。</p><h3 id="模版类型"><a href="#模版类型" class="headerlink" title="模版类型"></a>模版类型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ElasticSearch的模板类型主要由两种：静态模板和动态模板</p><h4 id="静态模板"><a href="#静态模板" class="headerlink" title="静态模板"></a>静态模板</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;适合索引字段数据固定的场景，一旦配置完成，不能向里面加入多余的字段，否则会报错</p><ul><li>优点：scheam已知，业务场景明确，不容易出现因字段随便映射从而造成元数据撑爆es内存，从而导致es集群全部宕机</li><li>缺点：字段数多的情况下配置稍繁琐，针对于每个索引可能需要的模板都不同，很有可能需要配置很多个模板</li></ul><h4 id="动态模板"><a href="#动态模板" class="headerlink" title="动态模板"></a>动态模板</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;适合字段数不明确，大量字段的配置类型相同的场景，可以按照类型规则动态添加新字段，新加字段不会报错。主要需要配置 <code>dynamic_templates</code>。</p><ul><li>优点：可动态添加任意字段，无须改动schema</li><li>缺点：无标准schema导致数据不规则，如果添加的字段非常多，有可能造成ES集群宕机</li></ul><p><strong>注</strong>: 模板在设置生效后，仅对ES集群中新建立的索引生效，而对已存在的索引及时索引名满足模板的匹配规则，也不会生效，因此如果需要改变现有索引的Mapping信息，仍需要在正确的Mapping基础上建立新的索引，并将数据从原索引拷贝至新索引，变更新索引别名为原索引这种方式来实现。</p><h3 id="模板结构"><a href="#模板结构" class="headerlink" title="模板结构"></a>模板结构</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模版的结构如<a href="http://www.xxlaila.cn/2019/11/15/elk%E9%83%A8%E7%BD%B2/">elk部署</a>里面所提到的。分四部分</p><ul><li>通用设置: 主要是模板匹配索引的过滤规则，影响该模板对哪些索引生效；</li><li>settings: 配置索引的公共参数，比如索引的replicas，以及分片数shards等参数；</li><li>mappings: 最重要的一部分，在这部分中配置每个type下的每个field的相关属性，比如field类型（string,long,date等等），是否分词，是否在内存中缓存等等属性都在这部分配置；</li><li>aliases: 索引别名，索引别名可用在索引数据迁移等用途上。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我们在定制索引模版的时候，这时候我们需要参考研发给的日志标准和需要的日志标准格式，以及日志样本等，给出一些运维的见解。否则做出来的东西不一定满足需求，又要重新来做。着重参考如下:</p><ul><li>是否存储</li><li>是否分词</li><li>以什么来建立索引</li><li>字段类型是什么</li><li>如何排序</li><li>字段数是否固定</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结合这些，我们还可以参考词库的维护，ElasticSearch后期结构的变化调整，如果这些不考虑，在后期量起来以后，改动任何一项都需要去重新建立索引。是非常蛋疼的。</p><h3 id="创建模版"><a href="#创建模版" class="headerlink" title="创建模版"></a>创建模版</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里采用第三种三种方式建立模版，登录kibana，在dev tools栏下面，删除默认的logstash-<em>模版，然后创建一个logstash-</em>的模版，这样当新的索引来了以后，就会加载这个模版。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>logstash监控</title>
    <url>/2019/11/19/logstash%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="logstash-api-监控"><a href="#logstash-api-监控" class="headerlink" title="logstash api 监控"></a>logstash api 监控</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logstash 5.0 开始，提供了输出自身进程的指标和状态监控的 API。这大大降低了我们监控 Logstash 的难度。<a id="more"></a>可以使用Logstash提供的监视API来检索这些指标。默认情况下api可用，不需任何额外的配置，或者可以配置X-Pack监视以将数据发送到监视群集。这个直接在kibana页面进行配置。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logstash收集的指标包括:</p><ul><li>节点信息: 接口目前支持三种类型：pipeline、os、jvm。</li><li>插件信息: 包括已安装插件的列表。</li><li>节点统计指标: JVM统计信息，进程统计信息，与事件相关的统计信息和管道运行时统计信息。</li><li>热线程统计</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;检索常规信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"build_date"</span> : <span class="string">"2018-08-18T00:25:22Z"</span>,</span><br><span class="line">  <span class="string">"build_sha"</span> : <span class="string">"f8014ac54e6c8ff6c071c0960ca1b00e9735f43a"</span>,</span><br><span class="line">  <span class="string">"build_snapshot"</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pipeline-指标"><a href="#pipeline-指标" class="headerlink" title="pipeline 指标"></a>pipeline 指标</h3><h4 id="工作程序数量，批处理大小和批处理延迟"><a href="#工作程序数量，批处理大小和批处理延迟" class="headerlink" title="工作程序数量，批处理大小和批处理延迟"></a>工作程序数量，批处理大小和批处理延迟</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/pipelines?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"pipelines"</span> : &#123;</span><br><span class="line">    <span class="string">"main"</span> : &#123;</span><br><span class="line">      <span class="string">"workers"</span> : 4,</span><br><span class="line">      <span class="string">"batch_size"</span> : 125,</span><br><span class="line">      <span class="string">"batch_delay"</span> : 50,</span><br><span class="line">      <span class="string">"config_reload_automatic"</span> : <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"config_reload_interval"</span> : 3000000000,</span><br><span class="line">      <span class="string">"dead_letter_queue_enabled"</span> : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特定管道的信息"><a href="#特定管道的信息" class="headerlink" title="特定管道的信息"></a>特定管道的信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/pipelines/main?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"pipelines"</span> : &#123;</span><br><span class="line">    <span class="string">"main"</span> : &#123;</span><br><span class="line">      <span class="string">"workers"</span> : 4,</span><br><span class="line">      <span class="string">"batch_size"</span> : 125,</span><br><span class="line">      <span class="string">"batch_delay"</span> : 50,</span><br><span class="line">      <span class="string">"config_reload_automatic"</span> : <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"config_reload_interval"</span> : 3000000000,</span><br><span class="line">      <span class="string">"dead_letter_queue_enabled"</span> : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OS-信息"><a href="#OS-信息" class="headerlink" title="OS 信息"></a>OS 信息</h3><h4 id="显示了操作系统名称，体系结构，版本和可用处理器"><a href="#显示了操作系统名称，体系结构，版本和可用处理器" class="headerlink" title="显示了操作系统名称，体系结构，版本和可用处理器"></a>显示了操作系统名称，体系结构，版本和可用处理器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/os?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"os"</span> : &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"Linux"</span>,</span><br><span class="line">    <span class="string">"arch"</span> : <span class="string">"amd64"</span>,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"3.10.0-693.11.1.el7.x86_64"</span>,</span><br><span class="line">    <span class="string">"available_processors"</span> : 4</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jvm-信息"><a href="#jvm-信息" class="headerlink" title="jvm 信息"></a>jvm 信息</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显示节点级别的JVM统计信息，例如JVM进程ID，版本，VM信息，内存使用情况以及有关垃圾收集器的信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/jvm?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"jvm"</span> : &#123;</span><br><span class="line">    <span class="string">"pid"</span> : 20827,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"1.8.0_144"</span>,</span><br><span class="line">    <span class="string">"vm_version"</span> : <span class="string">"1.8.0_144"</span>,</span><br><span class="line">    <span class="string">"vm_vendor"</span> : <span class="string">"Oracle Corporation"</span>,</span><br><span class="line">    <span class="string">"vm_name"</span> : <span class="string">"Java HotSpot(TM) 64-Bit Server VM"</span>,</span><br><span class="line">    <span class="string">"start_time_in_millis"</span> : 1574066157917,</span><br><span class="line">    <span class="string">"mem"</span> : &#123;</span><br><span class="line">      <span class="string">"heap_init_in_bytes"</span> : 3221225472,</span><br><span class="line">      <span class="string">"heap_max_in_bytes"</span> : 3186360320,</span><br><span class="line">      <span class="string">"non_heap_init_in_bytes"</span> : 2555904,</span><br><span class="line">      <span class="string">"non_heap_max_in_bytes"</span> : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"gc_collectors"</span> : [ <span class="string">"ParNew"</span>, <span class="string">"ConcurrentMarkSweep"</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件信息"><a href="#插件信息" class="headerlink" title="插件信息"></a>插件信息</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;插件信息API获取有关当前安装的所有Logstash插件的信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/plugins?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"total"</span> : 98,</span><br><span class="line">  <span class="string">"plugins"</span> : [ &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"logstash-codec-cef"</span>,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"5.0.3"</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"logstash-codec-collectd"</span>,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"3.0.8"</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"logstash-codec-dots"</span>,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"3.0.6"</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"logstash-codec-edn"</span>,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"3.0.6"</span></span><br><span class="line">  &#125;,……………………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节点统计指表"><a href="#节点统计指表" class="headerlink" title="节点统计指表"></a>节点统计指表</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;节点统计信息API检索有关Logstash的运行时统计信息。</p><h4 id="jvm统计"><a href="#jvm统计" class="headerlink" title="jvm统计"></a>jvm统计</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/jvm?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"jvm"</span> : &#123;</span><br><span class="line">    <span class="string">"threads"</span> : &#123;</span><br><span class="line">      <span class="string">"count"</span> : 55,</span><br><span class="line">      <span class="string">"peak_count"</span> : 56</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"mem"</span> : &#123;</span><br><span class="line">      <span class="string">"heap_used_percent"</span> : 10,</span><br><span class="line">      <span class="string">"heap_committed_in_bytes"</span> : 3186360320,</span><br><span class="line">      <span class="string">"heap_max_in_bytes"</span> : 3186360320,</span><br><span class="line">      <span class="string">"heap_used_in_bytes"</span> : 348033216,</span><br><span class="line">      <span class="string">"non_heap_used_in_bytes"</span> : 170512848,</span><br><span class="line">      <span class="string">"non_heap_committed_in_bytes"</span> : 201850880,</span><br><span class="line">      <span class="string">"pools"</span> : &#123;</span><br><span class="line">        <span class="string">"survivor"</span> : &#123;</span><br><span class="line">          <span class="string">"peak_used_in_bytes"</span> : 34865152,</span><br><span class="line">          <span class="string">"used_in_bytes"</span> : 1629704,</span><br><span class="line">          <span class="string">"peak_max_in_bytes"</span> : 34865152,</span><br><span class="line">          <span class="string">"max_in_bytes"</span> : 34865152,</span><br><span class="line">          <span class="string">"committed_in_bytes"</span> : 34865152</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"old"</span> : &#123;</span><br><span class="line">          <span class="string">"peak_used_in_bytes"</span> : 230612312,</span><br><span class="line">          <span class="string">"used_in_bytes"</span> : 230612312,</span><br><span class="line">          <span class="string">"peak_max_in_bytes"</span> : 2872311808,</span><br><span class="line">          <span class="string">"max_in_bytes"</span> : 2872311808,</span><br><span class="line">          <span class="string">"committed_in_bytes"</span> : 2872311808</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"young"</span> : &#123;</span><br><span class="line">          <span class="string">"peak_used_in_bytes"</span> : 279183360,</span><br><span class="line">          <span class="string">"used_in_bytes"</span> : 115791200,</span><br><span class="line">          <span class="string">"peak_max_in_bytes"</span> : 279183360,</span><br><span class="line">          <span class="string">"max_in_bytes"</span> : 279183360,</span><br><span class="line">          <span class="string">"committed_in_bytes"</span> : 279183360</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"gc"</span> : &#123;</span><br><span class="line">      <span class="string">"collectors"</span> : &#123;</span><br><span class="line">        <span class="string">"old"</span> : &#123;</span><br><span class="line">          <span class="string">"collection_time_in_millis"</span> : 301,</span><br><span class="line">          <span class="string">"collection_count"</span> : 2</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"young"</span> : &#123;</span><br><span class="line">          <span class="string">"collection_time_in_millis"</span> : 2536,</span><br><span class="line">          <span class="string">"collection_count"</span> : 98</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"uptime_in_millis"</span> : 66149287</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进程统计"><a href="#进程统计" class="headerlink" title="进程统计"></a>进程统计</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/process?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"process"</span> : &#123;</span><br><span class="line">    <span class="string">"open_file_descriptors"</span> : 169,</span><br><span class="line">    <span class="string">"peak_open_file_descriptors"</span> : 170,</span><br><span class="line">    <span class="string">"max_file_descriptors"</span> : 16384,</span><br><span class="line">    <span class="string">"mem"</span> : &#123;</span><br><span class="line">      <span class="string">"total_virtual_in_bytes"</span> : 7337734144</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"cpu"</span> : &#123;</span><br><span class="line">      <span class="string">"total_in_millis"</span> : 593350,</span><br><span class="line">      <span class="string">"percent"</span> : 0,</span><br><span class="line">      <span class="string">"load_average"</span> : &#123;</span><br><span class="line">        <span class="string">"1m"</span> : 0.01,</span><br><span class="line">        <span class="string">"5m"</span> : 0.07,</span><br><span class="line">        <span class="string">"15m"</span> : 0.1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="events"><a href="#events" class="headerlink" title="events"></a>events</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s localhost:9600/_node/stats/events?pretty=<span class="literal">true</span></span><br><span class="line">&#123; </span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"events"</span> : &#123;</span><br><span class="line">    <span class="string">"in"</span> : 103628,</span><br><span class="line">    <span class="string">"filtered"</span> : 103628,</span><br><span class="line">    <span class="string">"out"</span> : 103628,</span><br><span class="line">    <span class="string">"duration_in_millis"</span> : 96810,</span><br><span class="line">    <span class="string">"queue_push_duration_in_millis"</span> : 5104</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="管道统计"><a href="#管道统计" class="headerlink" title="管道统计"></a>管道统计</h3><ul><li>每个管道输入，过滤或输出的事件数</li><li>每个已配置的滤波器或输出级的统计信息</li><li>有关配置重新加载成功和失败的信息（启用配置重新加载时）</li><li>关于持久性队列信息（当 永久队列被启用）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/pipelines?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">………………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过包含管道ID来查看特定管道的统计信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/pipelines/main?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">………………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="刷新统计"><a href="#刷新统计" class="headerlink" title="刷新统计"></a>刷新统计</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显示有关配置重新加载成功和失败的信息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/reloads?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"reloads"</span> : &#123;</span><br><span class="line">    <span class="string">"successes"</span> : 0,</span><br><span class="line">    <span class="string">"failures"</span> : 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="os-统计"><a href="#os-统计" class="headerlink" title="os 统计"></a>os 统计</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当Logstash在容器中运行时，请求将返回一个包含cgroup信息的JSON文档，提供CPU负载的更准确视图，包括是否对容器进行了限制。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/os?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"os"</span> : &#123;</span><br><span class="line">    <span class="string">"cgroup"</span> : &#123;</span><br><span class="line">      <span class="string">"cpuacct"</span> : &#123;</span><br><span class="line">        <span class="string">"usage_nanos"</span> : 20928023701495776,</span><br><span class="line">        <span class="string">"control_group"</span> : <span class="string">"/"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"cpu"</span> : &#123;</span><br><span class="line">        <span class="string">"cfs_quota_micros"</span> : -1,</span><br><span class="line">        <span class="string">"control_group"</span> : <span class="string">"/"</span>,</span><br><span class="line">        <span class="string">"stat"</span> : &#123;</span><br><span class="line">          <span class="string">"number_of_times_throttled"</span> : 0,</span><br><span class="line">          <span class="string">"time_throttled_nanos"</span> : 0,</span><br><span class="line">          <span class="string">"number_of_elapsed_periods"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"cfs_period_micros"</span> : 100000</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="热线程api"><a href="#热线程api" class="headerlink" title="热线程api"></a>热线程api</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;热线程API获取Logstash的当前热线程。热线程是Java线程，具有很高的CPU使用率，并且执行时间比正常时间长。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/hot_threads?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"hot_threads"</span> : &#123;</span><br><span class="line">    <span class="string">"time"</span> : <span class="string">"2019-11-19T11:07:05+08:00"</span>,</span><br><span class="line">    <span class="string">"busiest_threads"</span> : 3,</span><br><span class="line">    <span class="string">"threads"</span> : [ &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"Ruby-0-Thread-23@[main]&gt;worker1"</span>,</span><br><span class="line">      <span class="string">"thread_id"</span> : 42,</span><br><span class="line">      <span class="string">"percent_of_cpu_time"</span> : 0.1,</span><br><span class="line">      <span class="string">"state"</span> : <span class="string">"timed_waiting"</span>,</span><br><span class="line">      <span class="string">"path"</span> : <span class="string">":1"</span>,</span><br><span class="line">      <span class="string">"traces"</span> : [ <span class="string">"sun.misc.Unsafe.park(Native Method)"</span>, <span class="string">"java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)"</span>, <span class="string">"java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)"</span> ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"Ruby-0-Thread-24@[main]&gt;worker2"</span>,</span><br><span class="line">      <span class="string">"thread_id"</span> : 43,</span><br><span class="line">      <span class="string">"percent_of_cpu_time"</span> : 0.06,</span><br><span class="line">      <span class="string">"state"</span> : <span class="string">"timed_waiting"</span>,</span><br><span class="line">      <span class="string">"path"</span> : <span class="string">":1"</span>,</span><br><span class="line">      <span class="string">"traces"</span> : [ <span class="string">"sun.misc.Unsafe.park(Native Method)"</span>, <span class="string">"java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)"</span>, <span class="string">"java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)"</span> ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"Ruby-0-Thread-22@[main]&gt;worker0"</span>,</span><br><span class="line">      <span class="string">"thread_id"</span> : 41,</span><br><span class="line">      <span class="string">"percent_of_cpu_time"</span> : 0.06,</span><br><span class="line">      <span class="string">"state"</span> : <span class="string">"timed_waiting"</span>,</span><br><span class="line">      <span class="string">"path"</span> : <span class="string">":1"</span>,</span><br><span class="line">      <span class="string">"traces"</span> : [ <span class="string">"sun.misc.Unsafe.park(Native Method)"</span>, <span class="string">"java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)"</span>, <span class="string">"java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)"</span> ]</span><br><span class="line">    &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可执行的参数:</p><ul><li>threads: 返回的热线程数。预设值为10。</li><li>stacktrace_size: 要为每个线程报告的堆栈跟踪的深度。默认值为50。</li><li>human: 如果为true，则返回纯文本而不是JSON格式。默认为false。</li><li>ignore_idle_threads: 如果为true，则不返回空闲线程。默认值为true。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/hot_threads?human=true'</span></span><br><span class="line">Hot threads at 2019-11-19T11:07:43+08:00, busiestThreads=3:</span><br><span class="line">================================================================================</span><br><span class="line">0.1 % of cpu usage, state: timed_waiting, thread name: <span class="string">'Ruby-0-Thread-23@[main]&gt;worker1'</span>, thread id: 42</span><br><span class="line">:1</span><br><span class="line">        sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)</span><br><span class="line">        java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0.06 % of cpu usage, state: timed_waiting, thread name: <span class="string">'Ruby-0-Thread-24@[main]&gt;worker2'</span>, thread id: 43</span><br><span class="line">:1</span><br><span class="line">        sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)</span><br><span class="line">        java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0.06 % of cpu usage, state: timed_waiting, thread name: <span class="string">'Ruby-0-Thread-22@[main]&gt;worker0'</span>, thread id: 41</span><br><span class="line">:1</span><br><span class="line">        sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)</span><br><span class="line">        java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)</span><br><span class="line">--------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的一些api监控，可以写成脚本的形式，使用zabbix来进行监控。除了使用zabbix来监控logstash外，我们还可以使用自带的x-pack来进行监控，<a href="https://www.elastic.co/guide/en/logstash/6.6/logstash-monitoring-overview.html" target="_blank" rel="noopener">介绍可以参考官方</a>。</p><h3 id="X-Pack监视概述"><a href="#X-Pack监视概述" class="headerlink" title="X-Pack监视概述"></a>X-Pack监视概述</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改logstash.yml配置文件，在配置文件里面只需要修改两个参数即可 <code>xpack.monitoring.enabled</code> 、<code>xpack.monitoring.elasticsearch.url</code>。监控Elasticsearch的是启用 <code>xpack.monitoring.collection.enabled</code></p><h4 id="修改logstash-yml"><a href="#修改logstash-yml" class="headerlink" title="修改logstash.yml"></a>修改logstash.yml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat logstash.yml</span><br><span class="line">xpack.monitoring.enabled: <span class="literal">true</span></span><br><span class="line">xpack.monitoring.elasticsearch.url: [<span class="string">"http://es1:9200"</span>,<span class="string">"http://es2:9200"</span>,<span class="string">"http://es3:9200"</span>]</span><br></pre></td></tr></table></figure><h4 id="重启logstash"><a href="#重启logstash" class="headerlink" title="重启logstash"></a>重启logstash</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo  systemctl  restart logstash</span><br></pre></td></tr></table></figure><h4 id="kibana-查看"><a href="#kibana-查看" class="headerlink" title="kibana 查看"></a>kibana 查看</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录kibana进行查看<br><img src="https://img.xxlaila.cn/1574146864906.jpg" alt="img"></p><p>点击node查看<br><img src="https://img.xxlaila.cn/1574146937095.jpg" alt="img"></p><p>这里顺道点考kibana<br><img src="https://img.xxlaila.cn/1574147026997.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>elk部署</title>
    <url>/2019/11/15/elk%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;公司重新设定了日志的标准格式，日志打印格式均为json格式，之前是用filebeat进行收集的，没任何问题，但是这次的这个标准日志推的时候出现了，在日志显示和多行收集的时候出现了问题。<a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java应用在报错的时候一般会提示一个很长的错误信息，如果在日志标准里面加入堆内存的错误，那信息就更长，一条日志就更大了，所以这里就得考量这个堆内存错误要打印多少问题。在显示的时候也遇到一个问题就是内容没有被索引，google一下查询是<code>not_analyzed</code>字符串默认设置导致的。查询得知对超过ignore_above的字符串，analyzer 不会进行处理。所以就不会索引，导致的结果就是最终搜索引擎搜索不到。这个选项主要对 not_analyzed 字段有用，这些字段通常用来进行过滤、聚合和排序。而且这些字段都是结构化的，所以一般不会允许在这些字段中索引过长的项。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对这些问题，和研发达成如协议，研发限制一条日志的message输出的长度，日志格式采用json，里面的字段不管。与似乎就要重置一下filebeat的参数，以及需要单独的建立自定义es模版，在logstash建立索引的时候需要用我们自定义的模版来建立索引。</p><h3 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filebeat安装不阐述</p><h4 id="filebeat配置文件"><a href="#filebeat配置文件" class="headerlink" title="filebeat配置文件"></a>filebeat配置文件</h4><ul><li>filebeat.yml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat filebeat.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">  - <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">    paths:</span><br><span class="line">      - /opt/logs/*/*.<span class="built_in">log</span></span><br><span class="line">  tags: [<span class="string">"system"</span>]</span><br><span class="line">  exclude_files: [<span class="string">'.gz$'</span>]</span><br><span class="line">  fields:</span><br><span class="line">    env: dev</span><br><span class="line">    logtype: system-java</span><br><span class="line">  queue_size: 3000</span><br><span class="line">  multiline.pattern: <span class="string">'^[[:space:]]'</span></span><br><span class="line">  multiline.negate: <span class="literal">false</span></span><br><span class="line">  multiline.match: after</span><br><span class="line">  multiline.max_lines: 500</span><br><span class="line">  multiline.timeout: 5s</span><br><span class="line">  registry_file: /var/lib/filebeat/registry</span><br><span class="line">  harvester_buffer_sizeedit: 16384</span><br><span class="line">  max_bytes: 10485760</span><br><span class="line">  max_message_bytes: 1000000</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class="line">  reload.enabled: <span class="literal">false</span></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"logstash:5555"</span>,<span class="string">"logstash:5556"</span>]</span><br><span class="line">  loadbalance: <span class="literal">true</span></span><br><span class="line">  worker: 1</span><br></pre></td></tr></table></figure></li></ul><h5 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h5><ul><li>input.type: 默认log，从日志文件读取每一行。stdin，从标准输入读取</li><li>paths: 日志文件路径列表，可用通配符，不递归</li><li>tags: 标记tag，可用于分组</li><li>exclude_files: 排除文件，后接一个正则表达式的列表，默认无</li><li>fields: 添加附件字段，可以使values，arrays，dictionaries或者任何嵌套数据<ul><li>env: 设置环境环境</li><li>logtype: 设置类别，在logstash里面判断，可用于建设不通的索引或者到不通的es集群里面</li></ul></li><li>queue_size: 处理管道中单个事件内的队列大小，默认1000</li><li>multiline.pattern: 多行匹配模式，后接正则表达式，默认无</li><li>multiline.negate: 多行匹配模式后配置的模式是否取反，默认false</li><li>multiline.match: 定义多行内容被添加到模式匹配行之后还是之前，默认无，可以被设置为after或者before</li><li>multiline.max_lines: 单一多行匹配聚合的最大行数，超过定义行数后的行会被丢弃，默认500</li><li>multiline.timeout: 多行匹配超时时间，超过超时时间后的当前多行匹配事件将停止并发送，然后开始一个新的多行匹配事件，默认5秒</li><li>registry_file: 指定 注册表文件，用于记录上次读取的位置，默认位于filebeat下的data目录</li><li>harvester_buffer_sizeedit: 每个采集器在获取文件时使用的缓冲区的大小（以字节为单位）。默认是16384</li><li>max_bytes: 单个日志消息可以拥有的最大字节数。之后的所有字节max_bytes被丢弃并且不被发送。此设置对于可能变大的多行日志消息特别有用。默认值是10MB（10485760）</li><li>max_message_bytes: 允许的最大json消息大小，默认为1000000，超出的会被丢弃，应该小于broker的  message.max.bytes（broker能接收消息的最大字节数）</li><li>output.logstash: 输出到logstash，从节点列表中选取不同的节点发送数据，达到 Round-Robin 负载均衡的效果。<ul><li>worker: 配置每个主机发布事件的worker数量。在负载均衡模式下最好启用。</li></ul></li></ul><h3 id="logstash-部署"><a href="#logstash-部署" class="headerlink" title="logstash 部署"></a>logstash 部署</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装不阐述，这里使用的自定义elasticsearch模版，可参考</p><h4 id="elasticsearch-模版"><a href="#elasticsearch-模版" class="headerlink" title="elasticsearch 模版"></a>elasticsearch 模版</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Json日志文件中的KEY的位置不固定、或字段数不明确时使用动态映射模板。这里创建一个动态模版，模版是拷贝默认的 <code>logstash-*</code>模版来进行稍加修改的，<code>index_patterns</code> 该模版参数指定任意索引名称，并且指定允许添加新字段，匹配所有string类型的新字段会创建一个raw的嵌套字段，raw嵌套字段类型text，使用 <code>ignore_above</code>改变默认的长度。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat dev-java-template.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"order"</span>: 5,</span><br><span class="line">  <span class="string">"index_patterns"</span>: [</span><br><span class="line">    <span class="string">"*"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"settings"</span>: &#123;</span><br><span class="line">    <span class="string">"index"</span>: &#123;</span><br><span class="line">      <span class="string">"number_of_shards"</span>: <span class="string">"5"</span>,</span><br><span class="line">      <span class="string">"number_of_replicas"</span>: <span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"refresh_interval"</span>: <span class="string">"10s"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"_default_"</span>: &#123;</span><br><span class="line">      <span class="string">"dynamic_templates"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"message_field"</span>: &#123;</span><br><span class="line">            <span class="string">"match"</span>: <span class="string">"message"</span>,</span><br><span class="line">            <span class="string">"match_mapping_type"</span>: <span class="string">"string"</span>,</span><br><span class="line">            <span class="string">"mapping"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">              <span class="string">"norms"</span> : <span class="literal">false</span>,</span><br><span class="line">              <span class="string">"fields"</span>: &#123;</span><br><span class="line">                <span class="string">"raw"</span>: &#123;</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                  <span class="string">"ignore_above"</span>: 10922</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"strings_fields"</span>: &#123;</span><br><span class="line">            <span class="string">"match"</span>: <span class="string">"*"</span>,</span><br><span class="line">            <span class="string">"match_mapping_type"</span>: <span class="string">"string"</span>,</span><br><span class="line">            <span class="string">"mapping"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">              <span class="string">"norms"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="string">"fields"</span>: &#123;</span><br><span class="line">                <span class="string">"raw"</span>: &#123;</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                  <span class="string">"ignore_above"</span>: 10922</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"properties"</span>:&#123;</span><br><span class="line">        <span class="string">"@timestamp"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"date"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"@version"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"geoip"</span>: &#123;</span><br><span class="line">          <span class="string">"dynamic"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">"properties"</span>: &#123;</span><br><span class="line">            <span class="string">"ip"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"ip"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"location"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"geo_point"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"latitude"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"half_float"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"longitude"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"half_float"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"aliases"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>:</p><ul><li>dynamic_templates: 配置具体的动态模板匹配项</li><li>match_mapping_type: “string” 是匹配固定的类型</li><li>match: message 匹配字段名为message的数据</li><li>mapping: 将匹配的数据项映射为定义的数据类型</li></ul><h4 id="logstash-配置文件"><a href="#logstash-配置文件" class="headerlink" title="logstash 配置文件"></a>logstash 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat java.conf</span><br><span class="line">input  &#123;</span><br><span class="line">        beats &#123;</span><br><span class="line">                port =&gt; 5555</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">        <span class="comment"># application system logs</span></span><br><span class="line">        <span class="keyword">if</span> [fields][logtype] == <span class="string">"system-java"</span> &#123;</span><br><span class="line">                json &#123;</span><br><span class="line">                    <span class="built_in">source</span> =&gt; <span class="string">"message"</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="comment"># application business logs</span></span><br><span class="line">        <span class="keyword">if</span> [fileds][logtype] == <span class="string">"business-java"</span> &#123;</span><br><span class="line">		json &#123;</span><br><span class="line">			<span class="built_in">source</span> =&gt; <span class="string">"message"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">        <span class="comment"># application system logs</span></span><br><span class="line">        <span class="keyword">if</span> [fields][logtype] == <span class="string">"system-java"</span> &#123;</span><br><span class="line">                elasticsearch &#123;</span><br><span class="line">			codec =&gt; <span class="string">"json"</span></span><br><span class="line">                        hosts =&gt; [<span class="string">"es1:9200"</span>,<span class="string">"es2:9200"</span>,<span class="string">"es3:9200"</span>]</span><br><span class="line">                        index =&gt; <span class="string">"%&#123;[fields][kxlenv]&#125;-%&#123;[projectName]&#125;-%&#123;[logType]&#125;-%&#123;+YYYY-MM&#125;"</span></span><br><span class="line">                        template_overwrite =&gt; <span class="literal">true</span></span><br><span class="line">                        template_name =&gt; <span class="string">"system-java"</span></span><br><span class="line">                        template =&gt; <span class="string">"/opt/templates/java.template"</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="comment"># applicatio business logs</span></span><br><span class="line">	<span class="keyword">if</span> [fields][logtype] == <span class="string">"business-java"</span> &#123;</span><br><span class="line">		elasticsearch &#123;</span><br><span class="line">                        action =&gt; <span class="string">"index"</span></span><br><span class="line">			hosts =&gt; [<span class="string">"es1:9200"</span>,<span class="string">"es2:9200"</span>,<span class="string">"es3:9200"</span>]</span><br><span class="line">			index =&gt; <span class="string">"%&#123;[fields][kxlenv]&#125;-%&#123;[projectName]&#125;-%&#123;[logType]&#125;-%&#123;+YYYY-MM&#125;"</span></span><br><span class="line">			template_overwrite =&gt; <span class="literal">true</span></span><br><span class="line">                        template =&gt; <span class="string">"/opt/templates/dev-java-template.json"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>** 注 **:</p><ul><li>template : 指定template模板文件</li><li>template_overwrite : 是否覆盖ES中的template，默认是false</li><li>index: 是提取变量来进行创建索引，对应动态模版的里面 <code>index_patterns</code></li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="重启logstash"><a href="#重启logstash" class="headerlink" title="重启logstash"></a>重启logstash</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart logstash</span><br></pre></td></tr></table></figure><h4 id="重启filebeat"><a href="#重启filebeat" class="headerlink" title="重启filebeat"></a>重启filebeat</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart filebeat</span><br></pre></td></tr></table></figure><h4 id="打开kibana验证"><a href="#打开kibana验证" class="headerlink" title="打开kibana验证"></a>打开kibana验证</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里我们打开kibana进行验证，看看自动创建的索引是否引用了自定义模版</p><ul><li><p>自定义模版<br><img src="https://img.xxlaila.cn/1574308152194.jpg" alt="img"></p></li><li><p>默认模版<br><img src="https://img.xxlaila.cn/1574308234494.jpg" alt="img"></p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb语法实践</title>
    <url>/2019/11/14/mongodb%E8%AF%AD%E6%B3%95%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="Days-11-14"><a href="#Days-11-14" class="headerlink" title="Days(11.14)"></a>Days(11.14)</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mongodb之前都是负责搭建、维护、备份、监控等操作。闲时来总结一下语法。<a id="more"></a></p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="根据条件查询数据量"><a href="#根据条件查询数据量" class="headerlink" title="根据条件查询数据量"></a>根据条件查询数据量</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录数据库操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.getCollection(<span class="string">'Tables'</span>).find(&#123;<span class="string">"字段"</span>:<span class="string">"条件"</span>,<span class="string">"字段"</span>:<span class="string">"条件"</span>&#125;).count();</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看数据库表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; show collections</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看mongodb的连接数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.serverStatus().connections</span><br></pre></td></tr></table></figure><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="创建用户、数据库"><a href="#创建用户、数据库" class="headerlink" title="创建用户、数据库"></a>创建用户、数据库</h4><ul><li><p>创建数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; use xxx</span><br></pre></td></tr></table></figure></li><li><p>创建一个用户，拥有基本的读写权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.createUser(&#123;user:<span class="string">"xxx"</span>,<span class="built_in">pwd</span>:<span class="string">"xxx"</span>,roles:[&#123;role:<span class="string">"readWrite"</span>,db:<span class="string">"xxx"</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure></li><li><p>创建用户需要赋予dbAdmin权限</p></li></ul><p><strong>dbAdmin</strong>: 允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.createUser(&#123;user:<span class="string">"demo"</span>,<span class="built_in">pwd</span>:<span class="string">"demo"</span>,roles:[&#123;role:<span class="string">"readWrite"</span>,db:<span class="string">"kxlChannel"</span>&#125;,&#123;role:<span class="string">"dbAdmin"</span>,db:<span class="string">"kxlChannel"</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure><p><strong>注</strong>: role 权限要是readWrite,不能赋予dbadmin，否则不能操作数据库</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="删除账户和数据库"><a href="#删除账户和数据库" class="headerlink" title="删除账户和数据库"></a>删除账户和数据库</h4><ul><li><p>删除账户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.dropUser(<span class="string">"xxx"</span>)</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.dropDatabase(<span class="string">"xxx"</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.表.ensureIndex(&#123;<span class="string">"字段"</span>:1&#125;,&#123;<span class="string">"unique"</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">&gt; db.表.ensureIndex(&#123;<span class="string">"字段"</span>:1&#125;,&#123;<span class="string">"unique"</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.表.getIndexes()</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看表数据是否引用了索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.表.find(&#123;<span class="string">"字段"</span>:<span class="string">"值"</span>&#125;).explain()</span><br></pre></td></tr></table></figure><h4 id="删除指定索引"><a href="#删除指定索引" class="headerlink" title="删除指定索引"></a>删除指定索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.表.dropIndex(<span class="string">"索引"</span>)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除表全部索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.表.dropIndexes()</span><br></pre></td></tr></table></figure><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><h4 id="根据条件导出部分数据"><a href="#根据条件导出部分数据" class="headerlink" title="根据条件导出部分数据"></a>根据条件导出部分数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  mongoexport --db=数据库 --collection=表 --username=账户 --password=密码 --authenticationDatabase=认证的数据库  --query=<span class="string">'&#123;"条件","条件"&#125;'</span> --fields=<span class="string">"导出的字段"</span> --<span class="built_in">type</span>=csv --out=/home/ll</span><br></pre></td></tr></table></figure><ul><li>参数介绍:<br>–db: 数据库<br>–collection: 表<br>–username: 账户<br>–password: 密码<br>–authenticationDatabase: 需要认证的数据库<br>–query: 条件<br>–fields: 导出的字段<br>–type: 导出的格式，默认是json，这里导出为csv，支持两种json和csv格式<br>–out: 导出路径文件</li></ul><p>更多参数参考 –help</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">general options:</span><br><span class="line">      --<span class="built_in">help</span>                                      <span class="built_in">print</span> usage</span><br><span class="line">      --version                                   <span class="built_in">print</span> the tool version and <span class="built_in">exit</span></span><br><span class="line">verbosity options:</span><br><span class="line">  -v, --verbose=&lt;level&gt;                           more detailed <span class="built_in">log</span> output (include multiple <span class="built_in">times</span> <span class="keyword">for</span> more verbosity, e.g. -vvvvv, or specify a numeric value, e.g. --verbose=N)</span><br><span class="line">      --quiet                                     hide all <span class="built_in">log</span> output</span><br><span class="line">connection options:</span><br><span class="line">  -h, --host=&lt;hostname&gt;                           mongodb host to connect to (setname/host1,host2 <span class="keyword">for</span> replica sets)</span><br><span class="line">      --port=&lt;port&gt;                               server port (can also use --host hostname:port)</span><br><span class="line">kerberos options:</span><br><span class="line">      --gssapiServiceName=&lt;service-name&gt;          service name to use when authenticating using GSSAPI/Kerberos (<span class="string">'mongodb'</span> by default)</span><br><span class="line">      --gssapiHostName=&lt;host-name&gt;                hostname to use when authenticating using GSSAPI/Kerberos (remote server<span class="string">'s address by default)</span></span><br><span class="line"><span class="string">ssl options:</span></span><br><span class="line"><span class="string">      --ssl                                       connect to a mongod or mongos that has ssl enabled</span></span><br><span class="line"><span class="string">      --sslCAFile=&lt;filename&gt;                      the .pem file containing the root certificate chain from the certificate authority</span></span><br><span class="line"><span class="string">      --sslPEMKeyFile=&lt;filename&gt;                  the .pem file containing the certificate and key</span></span><br><span class="line"><span class="string">      --sslPEMKeyPassword=&lt;password&gt;              the password to decrypt the sslPEMKeyFile, if necessary</span></span><br><span class="line"><span class="string">      --sslCRLFile=&lt;filename&gt;                     the .pem file containing the certificate revocation list</span></span><br><span class="line"><span class="string">      --sslAllowInvalidCertificates               bypass the validation for server certificates</span></span><br><span class="line"><span class="string">      --sslAllowInvalidHostnames                  bypass the validation for server name</span></span><br><span class="line"><span class="string">      --sslFIPSMode                               use FIPS mode of the installed openssl library</span></span><br><span class="line"><span class="string">authentication options:</span></span><br><span class="line"><span class="string">  -u, --username=&lt;username&gt;                       username for authentication</span></span><br><span class="line"><span class="string">  -p, --password=&lt;password&gt;                       password for authentication</span></span><br><span class="line"><span class="string">      --authenticationDatabase=&lt;database-name&gt;    database that holds the user'</span>s credentials</span><br><span class="line">      --authenticationMechanism=&lt;mechanism&gt;       authentication mechanism to use</span><br><span class="line">namespace options:</span><br><span class="line">  -d, --db=&lt;database-name&gt;                        database to use</span><br><span class="line">  -c, --collection=&lt;collection-name&gt;              collection to use</span><br><span class="line">uri options:</span><br><span class="line">      --uri=mongodb-uri                           mongodb uri connection string</span><br><span class="line">output options:</span><br><span class="line">  -f, --fields=&lt;field&gt;[,&lt;field&gt;]*                 comma separated list of field names (required <span class="keyword">for</span> exporting CSV) e.g. -f <span class="string">"name,age"</span></span><br><span class="line">      --fieldFile=&lt;filename&gt;                      file with field names - 1 per line</span><br><span class="line">      --<span class="built_in">type</span>=&lt;<span class="built_in">type</span>&gt;                               the output format, either json or csv (defaults to <span class="string">'json'</span>) (default: json)</span><br><span class="line">  -o, --out=&lt;filename&gt;                            output file; <span class="keyword">if</span> not specified, stdout is used</span><br><span class="line">      --jsonArray                                 output to a JSON array rather than one object per line</span><br><span class="line">      --pretty                                    output JSON formatted to be human-readable</span><br><span class="line">      --noHeaderLine                              <span class="built_in">export</span> CSV data without a list of field names at the first line</span><br><span class="line">querying options:</span><br><span class="line">  -q, --query=&lt;json&gt;                              query filter, as a JSON string, e.g., <span class="string">'&#123;x:&#123;$gt:1&#125;&#125;'</span></span><br><span class="line">      --queryFile=&lt;filename&gt;                      path to a file containing a query filter (JSON)</span><br><span class="line">  -k, --slaveOk                                   allow secondary reads <span class="keyword">if</span> available (default <span class="literal">true</span>) (default: <span class="literal">false</span>)</span><br><span class="line">      --readPreference=&lt;string&gt;|&lt;json&gt;            specify either a preference name or a preference json object</span><br><span class="line">      --forceTableScan                            force a table scan (<span class="keyword">do</span> not use <span class="variable">$snapshot</span>)</span><br><span class="line">      --skip=&lt;count&gt;                              number of documents to skip</span><br><span class="line">      --<span class="built_in">limit</span>=&lt;count&gt;                             <span class="built_in">limit</span> the number of documents to <span class="built_in">export</span></span><br><span class="line">      --sort=&lt;json&gt;                               sort order, as a JSON string, e.g. <span class="string">'&#123;x:1&#125;'</span></span><br><span class="line">      --assertExists                              <span class="keyword">if</span> specified, <span class="built_in">export</span> fails <span class="keyword">if</span> the collection does not exist (default: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>mongodb 备份脚本可以<a href="https://github.com/xxlaila/backup-monitoring/tree/master/backup" target="_blank" rel="noopener">参考</a>本人写的</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>istio部署(二)</title>
    <url>/2019/11/08/istio%E9%83%A8%E7%BD%B2-%E4%BA%8C/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在前面的一篇文章中我做了简单的部署，但是在疏忽bookinfo的时候出现了错误；然后研究了和学习了三天怎么来结局这个错误，这个错误不解决，没办法进行下一步。后学的路由规则完全没办法学习和测试。<a id="more"></a></p><h3 id="istio错误解决"><a href="#istio错误解决" class="headerlink" title="istio错误解决"></a>istio错误解决</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;istio的错误查看<a href="https://www.xxlaila.cn/2019/08/30/k8s%E9%83%A8%E7%BD%B2istio/">istio的部署</a>，本次根据这个错误来进行解决。</p><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><ul><li>apiserver日志</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个错误访问k8s的apiserver 问题，应该是超时。我们可以查看apiserver的日志，利用 journalctl 命令来筛选apiserver的日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># journalctl  -u  kube-apiserver  -f</span></span><br><span class="line"></span><br><span class="line">Nov 08 09:59:33 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 09:59:33.659161   31393 trace.go:81] Trace[40457478]: <span class="string">"Create /apis/networking.istio.io/v1alpha3/namespaces/istio-system/gateways"</span> (started: 2019-11-08 09:59:03.657132211 +0800 CST m=+328870.679516549) (total time: 30.001964129s):</span><br><span class="line">Nov 08 09:59:33 k8s-master-01-3.kxl kube-apiserver[31393]: Trace[40457478]: [30.001964129s] [30.001043358s] END</span><br><span class="line">Nov 08 09:59:33 k8s-master-01-3.kxl kube-apiserver[31393]: W1108 09:59:33.659790   31393 dispatcher.go:73] Failed calling webhook, failing closed pilot.validation.istio.io: failed calling webhook <span class="string">"pilot.validation.istio.io"</span>: Post https://istio-galley.istio-system.svc:443/admitpilot?timeout=30s: net/http: request canceled <span class="keyword">while</span> waiting <span class="keyword">for</span> connection (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">Nov 08 09:59:39 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 09:59:39.979543   31393 controller.go:107] OpenAPI AggregationController: Processing item v1beta1.metrics.k8s.io</span><br><span class="line">Nov 08 10:00:03 k8s-master-01-3.kxl kube-apiserver[31393]: W1108 10:00:03.764977   31393 dispatcher.go:73] Failed calling webhook, failing closed pilot.validation.istio.io: failed calling webhook <span class="string">"pilot.validation.istio.io"</span>: Post https://istio-galley.istio-system.svc:443/admitpilot?timeout=30s: context deadline exceeded (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">Nov 08 10:00:03 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 10:00:03.765401   31393 trace.go:81] Trace[1649710078]: <span class="string">"Create /apis/networking.istio.io/v1alpha3/namespaces/default/destinationrules"</span> (started: 2019-11-08 09:59:33.763211641 +0800 CST m=+328900.785596022) (total time: 30.00209862s):</span><br><span class="line">Nov 08 10:00:03 k8s-master-01-3.kxl kube-apiserver[31393]: Trace[1649710078]: [30.00209862s] [30.001534667s] END</span><br><span class="line">Nov 08 10:00:33 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 10:00:33.840606   31393 trace.go:81] Trace[970347589]: <span class="string">"Create /apis/networking.istio.io/v1alpha3/namespaces/weather/virtualservices"</span> (started: 2019-11-08 10:00:03.83792882 +0800 CST m=+328930.860313362) (total time: 30.002612137s):</span><br><span class="line">Nov 08 10:00:33 k8s-master-01-3.kxl kube-apiserver[31393]: Trace[970347589]: [30.002612137s] [30.001075132s] END</span><br><span class="line">Nov 08 10:00:33 k8s-master-01-3.kxl kube-apiserver[31393]: W1108 10:00:33.841663   31393 dispatcher.go:73] Failed calling webhook, failing closed pilot.validation.istio.io: failed calling webhook <span class="string">"pilot.validation.istio.io"</span>: Post https://istio-galley.istio-system.svc:443/admitpilot?timeout=30s: context deadline exceeded (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">Nov 08 10:00:38 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 10:00:38.260710   31393 trace.go:81] Trace[460935607]: <span class="string">"GuaranteedUpdate etcd3: *v1.Endpoints"</span> (started: 2019-11-08 10:00:37.644096515 +0800 CST m=+328964.666480867) (total time: 616.515599ms):</span><br><span class="line">Nov 08 10:00:38 k8s-master-01-3.kxl kube-apiserver[31393]: Trace[460935607]: [533.664848ms] [449.34458ms] Transaction prepared</span><br><span class="line">Nov 08 10:00:39 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 10:00:39.986622   31393 controller.go:107] OpenAPI AggregationController: Processing item v1beta1.metrics.k8s.io</span><br><span class="line">Nov 08 10:01:38 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 10:01:38.780611   31393 trace.go:81] Trace[269873276]: <span class="string">"Get /api/v1/namespaces/default"</span> (started: 2019-11-08 10:01:37.631910347 +0800 CST m=+329024.654294682) (total time: 1.148554735s):</span><br><span class="line">Nov 08 10:01:38 k8s-master-01-3.kxl kube-apiserver[31393]: Trace[269873276]: [1.148211464s] [1.148180236s] About to write a response</span><br></pre></td></tr></table></figure><ul><li><p>istio-pilot日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl logs istio-pilot-569499d666-rfjsh  -n istio-system discovery</span></span><br><span class="line">2019-11-08T07:26:14.097765Z	info	Handling event update <span class="keyword">for</span> pod istio-security-post-install-1.2.8-c52np <span class="keyword">in</span> namespace istio-system -&gt; 172.30.112.9</span><br><span class="line">2019-11-08T07:26:27.395268Z	info	Handling event update <span class="keyword">for</span> pod istio-security-post-install-1.2.8-c52np <span class="keyword">in</span> namespace istio-system -&gt; 172.30.112.9</span><br><span class="line">2019-11-08T07:26:38.227484Z	info	Client received GoAway with http2.ErrCodeEnhanceYourCalm.</span><br><span class="line">2019-11-08T07:26:38.227760Z	info	pickfirstBalancer: HandleSubConnStateChange: 0xc0001fbaa0, CONNECTING</span><br><span class="line">2019-11-08T07:26:38.228913Z	info	transport: loopyWriter.run returning. connection error: desc = <span class="string">"transport is closing"</span></span><br><span class="line">2019-11-08T07:26:38.230352Z	error	mcp	Error receiving MCP resource: rpc error: code = Unavailable desc = transport is closing</span><br><span class="line">2019-11-08T07:26:38.230387Z	error	mcp	Error receiving MCP response: rpc error: code = Unavailable desc = transport is closing</span><br><span class="line">2019-11-08T07:26:38.235755Z	info	pickfirstBalancer: HandleSubConnStateChange: 0xc0001fbaa0, READY</span><br><span class="line">2019-11-08T07:26:39.230701Z	info	mcp	(re)trying to establish new MCP sink stream</span><br></pre></td></tr></table></figure></li><li><p>istio-galley日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl logs istio-galley-64f7d8cc97-8nbpc  -n istio-system</span></span><br><span class="line">2019-11-08T07:23:38.860184Z	info	mcp	MCP: connection &#123;addr=172.30.104.7:57190 id=3&#125; ACK collection=istio/rbac/v1alpha1/serviceroles with version=<span class="string">"0"</span> nonce=<span class="string">"16"</span> inc=<span class="literal">false</span></span><br><span class="line">2019-11-08T07:23:38.860197Z	info	mcp	Watch(): created watch 28 <span class="keyword">for</span> istio/rbac/v1alpha1/serviceroles from group <span class="string">"default"</span>, version <span class="string">"0"</span></span><br><span class="line">2019-11-08T07:23:38.860217Z	info	mcp	MCP: connection &#123;addr=172.30.104.7:57190 id=3&#125; ACK collection=istio/networking/v1alpha3/gateways with version=<span class="string">"0"</span> nonce=<span class="string">"17"</span> inc=<span class="literal">false</span></span><br><span class="line">2019-11-08T07:23:38.860268Z	info	mcp	Watch(): created watch 29 <span class="keyword">for</span> istio/networking/v1alpha3/gateways from group <span class="string">"default"</span>, version <span class="string">"0"</span></span><br><span class="line">2019-11-08T07:26:38.227268Z	info	transport: Got too many pings from the client, closing the connection.</span><br><span class="line">2019-11-08T07:26:38.227414Z	info	transport: loopyWriter.run returning. Err: transport: Connection closing</span><br><span class="line">2019-11-08T07:26:38.228857Z	info	transport: http2Server.HandleStreams failed to <span class="built_in">read</span> frame: <span class="built_in">read</span> tcp 172.30.104.4:9901-&gt;172.30.104.7:57190: use of closed network connection</span><br><span class="line">2019-11-08T07:26:38.229130Z	error	mcp	MCP: connection &#123;addr=172.30.104.7:57190 id=3&#125;: TERMINATED with errors: rpc error: code = Canceled desc = context canceled</span><br><span class="line">2019-11-08T07:26:38.229162Z	info	mcp	MCP: connection &#123;addr=172.30.104.7:57190 id=3&#125;: CLOSED</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面其实有一个错误，忘记记录了，是一个tls的证书问题。根据上面的错误在google上找了好久，各种文档都查看了好久。就是安装的时候去验证tls证书，还有什么webhook问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决办法是；需要在apiserver里面需要配置 enable-admission-plugins，由于在安装的时候指定了某一个插件，导致这个未启用，如果没有配置该插件，默认其实是启用的。两个插件分别是：ValidatingAdmissionWebhook、MutatingAdmissionWebhook。安装文档里面已经修改，可以<a href="https://www.xxlaila.cn/2019/09/11/kubernetes-v1-14%E5%AE%89%E8%A3%85/">参考配置</a>，修改以后需要重启kube-apiserver。修改了这里还是不行。还需要重新安装istio。</p><ul><li><p>验证api-resources</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl api-resources | grep admissionregistration</span></span><br><span class="line">mutatingwebhookconfigurations                  admissionregistration.k8s.io   <span class="literal">false</span>        MutatingWebhookConfiguration</span><br><span class="line">validatingwebhookconfigurations                admissionregistration.k8s.io   <span class="literal">false</span>        ValidatingWebhookConfiguration</span><br></pre></td></tr></table></figure></li><li><p>启用 admissionregistration.k8s.io/v1alpha1 API</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl api-versions | grep admissionregistration.k8s.io</span></span><br><span class="line">admissionregistration.k8s.io/v1beta1</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用上面命令可以检查当前是否以启用，admissionregistration.k8s.io/v1alpha1 API，若不存在则需要在 apiserver 的配置中添加–runtime-config=admissionregistration.k8s.io/v1alpha1。</p><h3 id="重新安装istio"><a href="#重新安装istio" class="headerlink" title="重新安装istio"></a>重新安装istio</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install install/kubernetes/helm/istio --<span class="built_in">wait</span> \</span><br><span class="line">    --name istio \</span><br><span class="line">    --namespace istio-system \</span><br><span class="line">    --<span class="built_in">set</span> global.mtls.enabled=<span class="literal">false</span> \</span><br><span class="line">    --<span class="built_in">set</span> kiali.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> tracing.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> tracing.jaeger.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> tracing.provider=zipkin \</span><br><span class="line">    --<span class="built_in">set</span> grafana.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> servicegraph.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> global.k8sIngress.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> global.k8sIngress.gatewayName=ingressgateway \</span><br><span class="line">    --<span class="built_in">set</span> <span class="string">"kiali.dashboard.jaegerURL=http://jaeger-query:16686"</span> \</span><br><span class="line">    --<span class="built_in">set</span> <span class="string">"kiali.dashboard.grafanaURL=http://grafana:3000"</span> \</span><br><span class="line">    --<span class="built_in">set</span> gateways.istio-ingressgateway.type=NodePort \</span><br><span class="line">    --<span class="built_in">set</span> gateways.istio-egressgateway.type=NodePort \</span><br><span class="line">    --<span class="built_in">set</span> ingress.service.type=NodePort \</span><br><span class="line">    --<span class="built_in">set</span> global.configValidation=<span class="literal">false</span> \</span><br><span class="line">    --<span class="built_in">set</span> ingress.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> gateways.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> mixer.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> prometheus.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> sidecarInjectorWebhook.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> pilot.env.PILOT_DISABLE_XDS_MARSHALING_TO_ANY=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>参数介绍<ul><li>global.mtls.enabled: 开启Mtls认证</li><li>kiali.enabled: 安装kiali</li><li>tracing.enabled: 启用tracing</li><li>grafana.enabled: 安装granfana</li><li>servicegraph.enabled: 启用servicegraph</li><li>global.k8sIngress.enabled: 启用k8sIngress</li><li>global.configValidation: 禁用参数校验</li><li>ingress.enabled: 否启用Ingress</li><li>gateways.enabled: 启用gateway</li><li>mixer.enabled: 启用mixer</li><li>prometheus.enabled: 启用prometheus</li><li>sidecarInjectorWebhook.enabled: 启用sidecarinjector<br><a href="https://www.cnblogs.com/CCE-SWR/p/9990291.html" target="_blank" rel="noopener">更多参数</a>介绍参考</li></ul></li></ul><h4 id="配置验证webhook"><a href="#配置验证webhook" class="headerlink" title="配置验证webhook"></a>配置验证webhook</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;完成以后我们需要配置和验证webhook</p><ul><li>admissionregistration.k8s.io/v1beta1 应是启用状态<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl api-versions | grep admissionregistration.k8s.io/v1beta1</span></span><br><span class="line">admissionregistration.k8s.io/v1beta1</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql8.0 错误</title>
    <url>/2019/11/07/mysql8.0%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h4 id="mysql-8-0-倒入数据报错"><a href="#mysql-8-0-倒入数据报错" class="headerlink" title="mysql 8.0 倒入数据报错"></a>mysql 8.0 倒入数据报错</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天数据库从5.6切换到8.0测试的时候，倒入数据到8.0版本报错，错误提示：2006 mysql server has gone away。<a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过查询得知，导入SQL数据库结构+数据时，如果sql操作时间过长；或者是传送的数据太大（咧如使用insert…values的语句过长）；就会报这个错误。登录服务器查看了数据库连接超时的时间默认是8小时，问题应该不是出现在这里。登录老版本数据查看该数据库表的数据，发现该表存放是json的数据格式数据，而且很大，很长。根据这点消息，可以简单的知道问题</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种情况可以通过修改max_allowed_packed的配置参数来避免，修改my.cnf加大max_allowed_packet的值即可。</p><ul><li>解决办法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;找到mysql目录下的my.ini配置文件，加入以下配置或者修改以下配置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">max_allowed_packet=300M</span><br></pre></td></tr></table></figure></li></ul><h4 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h4><ul><li><strong>max_allowed_packet</strong>: mysql根据配置文件会限制server接受的数据包大小。如果一次插入数据库中的数据太大的话就会失败，<a href="https://dev.mysql.com/doc/refman/8.0/en/packet-too-large.html" target="_blank" rel="noopener">官方介绍</a>，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里我刚开始修改的是200M，还是出现这个错误，然后我看了一下sql文件大小是在260多M，索性我就把这个参数调整为300M，在执行倒入数据ok。这个参数调大不会影响服务器的性能，可以参考官方说明。</li></ul><h4 id="mysql-1067-Invalid-default-value-for"><a href="#mysql-1067-Invalid-default-value-for" class="headerlink" title="mysql 1067 - Invalid default value for"></a>mysql 1067 - Invalid default value for</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysql 8.0 在倒入数据的时候提示: 1067 - Invalid default value for ‘xxx_date’。查询结果得知跨版本升级引起的默认值不兼容问题，登录老服务器查看该字段是一个时间字段，是一个datetime类型，而且默认是0，然后看了一下导出的数据数据格式居然是0000-00-00，该类型可能是默认值被限制了，查看 sql_mode。</p><h5 id="查看-sql-mode"><a href="#查看-sql-mode" class="headerlink" title="查看 sql_mode"></a>查看 sql_mode</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">'sql_mode'</span>;</span><br><span class="line">+---------------+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Variable_name | Value                                                                                                                 |</span><br><span class="line">+---------------+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| sql_mode      | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |</span><br><span class="line">+---------------+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NO_ZERO_IN_DATE,NO_ZERO_DATE这两个参数限制时间不能为0</p><h5 id="临时修改"><a href="#临时修改" class="headerlink" title="临时修改"></a>临时修改</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> session sql_mode=<span class="string">'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'</span>;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>这个我操作了，没成功，我用的永久修改成功导入的。不知道为啥，可能是姿势不对</p><h5 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以直接修改my.cnf文件，在[mysqld]下面添加如下列：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>istio部署</title>
    <url>/2019/10/29/istio%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="Istio介绍"><a href="#Istio介绍" class="headerlink" title="Istio介绍"></a>Istio介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;istio代表的是Service Mesh的方案实现，Istio 有助于降低这些部署的复杂性，并减轻开发团队的压力。提供一种简单的方式来为已部署的服务建立网络，且提供具有负载均衡、服务间认证、监控、流量管理等功能。</p><a id="more"></a><h3 id="服务网格（Service-Mesh）"><a href="#服务网格（Service-Mesh）" class="headerlink" title="服务网格（Service Mesh）"></a>服务网格（Service Mesh）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务网格（Service Mesh）用于描述构成这些应用程序的微服务网络以及应用之间的交互。随着规模和复杂性的增长，服务网格越来越难以理解和管理。它的需求包括服务发现、负载均衡、故障恢复、指标收集和监控以及通常更加复杂的运维需求，例如 A/B 测试、金丝雀发布、限流、访问控制和端到端认证等。而istio刚好提供了一套完整的解决方案，通过控制整个服务器网格提供行为洞察和操作控制来满足微服务应用的多样化</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Istio 服务网格逻辑上分为数据平面和控制平面。</p><ul><li>数据平面由一组以 sidecar 方式部署的智能代理（Envoy）组成。这些代理可以调节和控制微服务及 Mixer 之间所有的网络通信。</li><li>控制平面负责管理和配置代理来路由流量。此外控制平面配置 Mixer 以实施策略和收集遥测数据。</li></ul><p>构成每个面板的不同组件:<br><img src="https://img.xxlaila.cn/1567136153850.jpg" alt="img"></p><h4 id="istio-组件"><a href="#istio-组件" class="headerlink" title="istio 组件"></a>istio 组件</h4><ul><li>Envoy: Istio 使用 Envoy 代理的扩展版本，用于调解服务网格中所有服务的所有入站和出站流量，属于数据层面。Istio利用Envoy的内置功能实现如下指标:<ul><li>动态服务发现</li><li>负载均衡</li><li>TLS终止</li><li>HTTP/2和gRPC代理</li><li>断路器</li><li>健康检查</li><li>分阶段推出，按百分比分配流量</li><li>故障注入</li><li>丰富的指标</li></ul></li><li>Mixer: 是一个独立于平台的组件，负责在服务网格上执行访问控制和使用策略，并从 Envoy 代理和其他服务收集遥测数据</li><li>Pilot: 为 Envoy sidecar 提供服务发现功能，为智能路由（例如 A/B 测试、金丝雀部署等）和弹性（超时、重试、熔断器等）提供流量管理功能</li><li>Citadel: 通过内置身份和凭证管理赋能强大的服务间和最终用户身份验证。可用于升级服务网格中未加密的流量，并为运维人员提供基于服务标识而不是网络控制的强制执行策略的能力</li><li>Galley: 代表其他的 Istio 控制平面组件，用来验证用户编写的 Istio API 配置。随着时间的推移，Galley 将接管 Istio 获取配置、 处理和分配组件的顶级责任</li></ul><h3 id="Istion-安装"><a href="#Istion-安装" class="headerlink" title="Istion 安装"></a>Istion 安装</h3><h4 id="下载istio包"><a href="#下载istio包" class="headerlink" title="下载istio包"></a>下载istio包</h4><p>执行下载和自动解压缩</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -L https://git.io/getLatestIstio | ISTIO_VERSION=1.2.8 sh -</span></span><br><span class="line"><span class="comment"># cd istio-1.2.8/bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cp istioctl /usr/bin/</span></span><br></pre></td></tr></table></figure><p>安装目录中包含：</p><ul><li><code>在 install/</code>: 目录中包含了 Kubernetes 安装所需的 .yaml 文件</li><li><code>samples/</code>: 目录中是示例应用</li><li><code>istioctl</code>: istioctl客户端二进制文件。手动将Envoy作为Sidecar代理注入并创建路由规则和策略时，将使用此工具。</li><li><code>istio.VERSION</code>: 配置文件</li></ul><h3 id="在kubernetes-集群中安装"><a href="#在kubernetes-集群中安装" class="headerlink" title="在kubernetes 集群中安装"></a>在kubernetes 集群中安装</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Istio 会被安装到自己的 istio-system 命名空间，并且能够对所有其他命名空间的服务进行管理。这里采用helm进行安装，<a href="https://xxlaila.github.io/2019/09/04/k8s-helm/" target="_blank" rel="noopener">helm安装参考</a>，我们需要为Kiali设置身份验证凭据（监视）。用于后面的登录认证</p><h4 id="设置用户名和密码的环境变量"><a href="#设置用户名和密码的环境变量" class="headerlink" title="设置用户名和密码的环境变量"></a>设置用户名和密码的环境变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># KIALI_USERNAME=$(read -p 'Kiali Username: ' uval &amp;&amp; echo -n $uval | base64)</span></span><br><span class="line"><span class="comment"># KIALI_PASSPHRASE=$(read -sp 'Kiali Passphrase: ' pval &amp;&amp; echo -n $pval | base64)</span></span><br></pre></td></tr></table></figure><h4 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NAMESPACE=istio-system</span></span><br><span class="line"><span class="comment"># kubectl create namespace $NAMESPACE</span></span><br></pre></td></tr></table></figure><ul><li>创建用于存储上面设置的用户名/密码的机密<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: kiali</span><br><span class="line">  namespace: <span class="variable">$NAMESPACE</span></span><br><span class="line">  labels:</span><br><span class="line">    app: kiali</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br><span class="line">data:</span><br><span class="line">  username: <span class="variable">$KIALI_USERNAME</span></span><br><span class="line">  passphrase: <span class="variable">$KIALI_PASSPHRASE</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用helm安装istio-CRD"><a href="#使用helm安装istio-CRD" class="headerlink" title="使用helm安装istio CRD"></a>使用helm安装istio CRD</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm install install/kubernetes/helm/istio-init --name istio-init --namespace istio-system</span></span><br><span class="line">NAME:   istio-init</span><br><span class="line">LAST DEPLOYED: Fri Nov  1 10:13:22 2019</span><br><span class="line">NAMESPACE: istio-system</span><br><span class="line">STATUS: DEPLOYED</span><br><span class="line"></span><br><span class="line">RESOURCES:</span><br><span class="line">==&gt; v1/ClusterRole</span><br><span class="line">NAME                     AGE</span><br><span class="line">istio-init-istio-system  0s</span><br><span class="line"></span><br><span class="line">==&gt; v1/ClusterRoleBinding</span><br><span class="line">NAME                                        AGE</span><br><span class="line">istio-init-admin-role-binding-istio-system  0s</span><br><span class="line"></span><br><span class="line">==&gt; v1/ConfigMap</span><br><span class="line">NAME          DATA  AGE</span><br><span class="line">istio-crd-10  1     0s</span><br><span class="line">istio-crd-11  1     0s</span><br><span class="line">istio-crd-12  1     0s</span><br><span class="line"></span><br><span class="line">==&gt; v1/Job</span><br><span class="line">NAME                     COMPLETIONS  DURATION  AGE</span><br><span class="line">istio-init-crd-10-1.2.8  0/1          0s</span><br><span class="line">istio-init-crd-11-1.2.8  0/1          0s</span><br><span class="line">istio-init-crd-12-1.2.8  0/1          0s</span><br><span class="line"></span><br><span class="line">==&gt; v1/ServiceAccount</span><br><span class="line">NAME                        SECRETS  AGE</span><br><span class="line">istio-init-service-account  0        0s</span><br></pre></td></tr></table></figure><h5 id="查看安装的CRD和pod"><a href="#查看安装的CRD和pod" class="headerlink" title="查看安装的CRD和pod"></a>查看安装的CRD和pod</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述安装会把istio的23个crd都提交给kubernetes api 服务器。如果启用了证书管理，crd计数器为28个。我这里未启用证书管理，只有23个。还生成三个pod</p><ul><li><p>CRD</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get CustomResourceDefinition</span></span><br><span class="line">NAME                                   CREATED AT</span><br><span class="line">adapters.config.istio.io               2019-10-29T08:41:31Z</span><br><span class="line">attributemanifests.config.istio.io     2019-10-29T08:41:30Z</span><br><span class="line">authorizationpolicies.rbac.istio.io    2019-10-29T08:41:36Z</span><br><span class="line">certificates.certmanager.k8s.io        2019-10-29T08:41:38Z</span><br><span class="line">challenges.certmanager.k8s.io          2019-10-29T08:41:40Z</span><br><span class="line">clusterissuers.certmanager.k8s.io      2019-10-29T08:41:37Z</span><br><span class="line">clusterrbacconfigs.rbac.istio.io       2019-10-29T08:41:26Z</span><br><span class="line">destinationrules.networking.istio.io   2019-10-29T08:41:25Z</span><br><span class="line">envoyfilters.networking.istio.io       2019-10-29T08:41:26Z</span><br><span class="line">gateways.networking.istio.io           2019-10-29T08:41:26Z</span><br><span class="line">handlers.config.istio.io               2019-10-29T08:41:33Z</span><br><span class="line">httpapispecbindings.config.istio.io    2019-10-29T08:41:27Z</span><br><span class="line">httpapispecs.config.istio.io           2019-10-29T08:41:28Z</span><br><span class="line">instances.config.istio.io              2019-10-29T08:41:32Z</span><br><span class="line">issuers.certmanager.k8s.io             2019-10-29T08:41:37Z</span><br><span class="line">meshpolicies.authentication.istio.io   2019-10-29T08:41:27Z</span><br><span class="line">orders.certmanager.k8s.io              2019-10-29T08:41:40Z</span><br><span class="line">policies.authentication.istio.io       2019-10-29T08:41:27Z</span><br><span class="line">quotaspecbindings.config.istio.io      2019-10-29T08:41:28Z</span><br><span class="line">quotaspecs.config.istio.io             2019-10-29T08:41:29Z</span><br><span class="line">rbacconfigs.rbac.istio.io              2019-10-29T08:41:31Z</span><br><span class="line">rules.config.istio.io                  2019-10-29T08:41:30Z</span><br><span class="line">serviceentries.networking.istio.io     2019-10-29T08:41:25Z</span><br><span class="line">servicerolebindings.rbac.istio.io      2019-10-29T08:41:31Z</span><br><span class="line">serviceroles.rbac.istio.io             2019-10-29T08:41:31Z</span><br><span class="line">sidecars.networking.istio.io           2019-10-29T08:41:34Z</span><br><span class="line">templates.config.istio.io              2019-10-29T08:41:32Z</span><br><span class="line">virtualservices.networking.istio.io    2019-10-29T08:41:25Z</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get crds | grep 'istio.io\|certmanager.k8s.io' | wc -l</span></span><br><span class="line">23</span><br></pre></td></tr></table></figure></li><li><p>pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n istio-system</span></span><br><span class="line">NAME                                      READY   STATUS      RESTARTS   AGE</span><br><span class="line">NAME                            READY   STATUS      RESTARTS   AGE</span><br><span class="line">istio-init-crd-10-1.2.8-pbtb8   0/1     Completed   0          47s</span><br><span class="line">istio-init-crd-11-1.2.8-shx6q   0/1     Completed   0          47s</span><br><span class="line">istio-init-crd-12-1.2.8-zmh2w   0/1     Completed   0          47s</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用helm安装各个组件"><a href="#使用helm安装各个组件" class="headerlink" title="使用helm安装各个组件"></a>使用helm安装各个组件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install install/kubernetes/helm/istio --<span class="built_in">wait</span> \</span><br><span class="line">    --name istio \</span><br><span class="line">    --namespace istio-system \</span><br><span class="line">    --<span class="built_in">set</span> global.mtls.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> kiali.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> tracing.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> grafana.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> servicegraph.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> global.k8sIngress.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> global.k8sIngress.gatewayName=ingressgateway \</span><br><span class="line">    --<span class="built_in">set</span> grafana.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> kiali.createDemoSecret=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> kiali.contextPath=/ \</span><br><span class="line">    --<span class="built_in">set</span> <span class="string">"kiali.dashboard.jaegerURL=http://jaeger-query:16686"</span> \</span><br><span class="line">    --<span class="built_in">set</span> <span class="string">"kiali.dashboard.grafanaURL=http://grafana:3000"</span> \</span><br><span class="line">    --<span class="built_in">set</span> gateways.istio-ingressgateway.type=NodePort \</span><br><span class="line">    --<span class="built_in">set</span> gateways.istio-egressgateway.type=NodePort \</span><br><span class="line">    --<span class="built_in">set</span> sidecarInjectorWebhook.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;验证文件里面的服务是否都部署在kubernetes 服务中。确保部署的pod 在对应的kubernetes namespace 里面，并正常启动。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这期间将创建所需的RBAC权限，并部署Istio-Pilot，Istio-Mixer，Istio-Ingress，Istio-Egress和Istio-CA（证书颁发机构）。</p><h5 id="服务器验证"><a href="#服务器验证" class="headerlink" title="服务器验证"></a>服务器验证</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;确保部署了以下Kubernetes服务：istio-pilot，istio-mixer，istio-ingress。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc -n istio-system</span></span><br><span class="line">NAME                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                                                                                      AGE</span><br><span class="line">grafana                  ClusterIP   10.254.113.150   &lt;none&gt;        3000/TCP                                                                                                                                     3h22m</span><br><span class="line">istio-citadel            ClusterIP   10.254.27.143    &lt;none&gt;        8060/TCP,15014/TCP                                                                                                                           3h22m</span><br><span class="line">istio-galley             ClusterIP   10.254.155.177   &lt;none&gt;        443/TCP,15014/TCP,9901/TCP                                                                                                                   3h22m</span><br><span class="line">istio-ingressgateway     NodePort    10.254.170.109   &lt;none&gt;        15020:31952/TCP,80:31380/TCP,443:31390/TCP,31400:31400/TCP,15029:32532/TCP,15030:31518/TCP,15031:31525/TCP,15032:30404/TCP,15443:30309/TCP   3h22m</span><br><span class="line">istio-pilot              ClusterIP   10.254.228.182   &lt;none&gt;        15010/TCP,15011/TCP,8080/TCP,15014/TCP                                                                                                       3h22m</span><br><span class="line">istio-policy             ClusterIP   10.254.13.184    &lt;none&gt;        9091/TCP,15004/TCP,15014/TCP                                                                                                                 3h22m</span><br><span class="line">istio-sidecar-injector   ClusterIP   10.254.154.169   &lt;none&gt;        443/TCP                                                                                                                                      3h22m</span><br><span class="line">istio-telemetry          ClusterIP   10.254.71.72     &lt;none&gt;        9091/TCP,15004/TCP,15014/TCP,42422/TCP                                                                                                       3h22m</span><br><span class="line">jaeger-agent             ClusterIP   None             &lt;none&gt;        5775/UDP,6831/UDP,6832/UDP                                                                                                                   3h22m</span><br><span class="line">jaeger-collector         ClusterIP   10.254.100.29    &lt;none&gt;        14267/TCP,14268/TCP                                                                                                                          3h22m</span><br><span class="line">jaeger-query             ClusterIP   10.254.18.117    &lt;none&gt;        16686/TCP                                                                                                                                    3h22m</span><br><span class="line">kiali                    ClusterIP   10.254.156.117   &lt;none&gt;        20001/TCP                                                                                                                                    3h22m</span><br><span class="line">prometheus               ClusterIP   10.254.145.181   &lt;none&gt;        9090/TCP                                                                                                                                     3h22m</span><br><span class="line">tracing                  ClusterIP   10.254.87.72     &lt;none&gt;        80/TCP                                                                                                                                       3h22m</span><br><span class="line">zipkin                   ClusterIP   10.254.39.22     &lt;none&gt;        9411/TCP                                                                                                                                     3h22m</span><br></pre></td></tr></table></figure><h5 id="pod-验证"><a href="#pod-验证" class="headerlink" title="pod 验证"></a>pod 验证</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;确保已部署相应的Kubernetes Pod，并且所有容器都已启动并正在运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n istio-system</span></span><br><span class="line">NAME                                      READY   STATUS      RESTARTS   AGE</span><br><span class="line">grafana-6fb9f8c5c7-n2plk                  1/1     Running     0          3h19m</span><br><span class="line">istio-citadel-7c9b84ddb6-n5h2n            1/1     Running     0          3h19m</span><br><span class="line">istio-galley-64f7d8cc97-zdbb6             1/1     Running     0          3h19m</span><br><span class="line">istio-grafana-post-install-1.2.8-98grv    0/1     Completed   0          3h19m</span><br><span class="line">istio-ingressgateway-65c7498b78-dfmfp     1/1     Running     0          3h19m</span><br><span class="line">istio-init-crd-10-1.2.8-wxxjn             0/1     Completed   0          3h20m</span><br><span class="line">istio-init-crd-11-1.2.8-brjhh             0/1     Completed   0          3h20m</span><br><span class="line">istio-init-crd-12-1.2.8-w8wnc             0/1     Completed   0          3h20m</span><br><span class="line">istio-pilot-569499d666-vhgn5              2/2     Running     0          3h19m</span><br><span class="line">istio-policy-5dbbc56db5-dmr4p             2/2     Running     3          3h19m</span><br><span class="line">istio-sidecar-injector-747cf74498-99drh   1/1     Running     0          3h19m</span><br><span class="line">istio-telemetry-7db5dd4c57-zngq7          2/2     Running     4          3h19m</span><br><span class="line">istio-tracing-5d8f57c8ff-vt2kn            1/1     Running     0          3h19m</span><br><span class="line">kiali-7d749f9dcb-68tlt                    1/1     Running     0          3h19m</span><br><span class="line">prometheus-776fdf7479-zbrxl               1/1     Running     0          3h19m</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Istio 以一个项目的形式部署到 Kubernetes 集群中。我们可以看到，部署好的 pods 中，除了有 istio-citadel、、istio-ingressgateway、istio-pilot 等 Istio 本身的功能组件，还集成了微服务相关的监控工具，，如：grafana、jaeger-query、kiali、prometheus。这些功能丰富且强大的监控工具，帮助 Istio实现了微服务的可视化管理。</p><h3 id="部署BookInfo用程序"><a href="#部署BookInfo用程序" class="headerlink" title="部署BookInfo用程序"></a>部署BookInfo用程序</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在开始部署 Bookinfo 示例程序。部署Bookinfo条件是集群中至少有4个节点，而且每个节点的内存不得低于4G。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以部署安装随附的示例应用程序之一-BookInfo。这是一个简单的模拟书店应用程序，由四个服务组成，这些服务提供一个Web产品页面，书籍详细信息，评论（带有多个版本的评论服务）和评分-所有这些都使用Istio进行管理。</p><ul><li><p>BookInfo应用程序分为四个单独的微服务:</p><ul><li>productpage ：productpage 微服务会调用 details 和 reviews 两个微服务，用来生成页面。</li><li>details ：这个微服务包含了书籍的信息。</li><li>reviews ：这个微服务包含了书籍相关的评论。它还会调用 ratings 微服务。</li><li>ratings ：ratings 微服务中包含了由书籍评价组成的评级信息。</li></ul></li><li><p>reviews 微服务有 3 个版本：</p><ul><li>v1 版本不会调用 ratings 服务.</li><li>v2 版本会调用 ratings 服务，并使用 1 到 5 个黑色星形图标来显示评分信息</li><li>v3 版本会调用 ratings 服务，并使用 1 到 5 个红色星形图标来显示评分信息</li></ul></li><li><p>下图展示了这个应用的端到端架构<br><img src="https://img.xxlaila.cn/1572576628250.jpg" alt="img"></p></li></ul><h4 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为 default 命名空间打上标签 istio-injection=enabled，实现 Sidecar 自动注入。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl label namespace default istio-injection=enabled</span></span><br><span class="line">namespace/default labeled</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get namespace --show-labels</span></span><br><span class="line">NAME              STATUS   AGE   LABELS</span><br><span class="line">default           Active   43d   istio-injection=enabled</span><br><span class="line">istio-system      Active   29m   &lt;none&gt;</span><br><span class="line">kube-node-lease   Active   43d   &lt;none&gt;</span><br><span class="line">kube-public       Active   43d   &lt;none&gt;</span><br><span class="line">kube-system       Active   43d   &lt;none&gt;</span><br><span class="line">monitoring        Active   35d   &lt;none&gt;</span><br><span class="line">weave             Active   35d   &lt;none&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>注意:</strong> 此步骤先不执行，如果这这个执行了，在后面部署Bookinfo的时候会提示如下错误<code>Error creating: Internal error occurred: failed calling webhook &quot;sidecar-injector.istio.io&quot;: Post https://istio-sidecar-injector.istio-system.svc:443/inject?timeout=30s: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</code>这一步有执行的可以执行以下命令进行删除</li></ul><ul><li>删除ns的label<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get ns --show-labels</span></span><br><span class="line">NAME              STATUS   AGE    LABELS</span><br><span class="line">default           Active   2d4h   istio-injection=enabled</span><br><span class="line">istio-system      Active   174m   &lt;none&gt;</span><br><span class="line">kube-node-lease   Active   2d4h   &lt;none&gt;</span><br><span class="line">kube-public       Active   2d4h   &lt;none&gt;</span><br><span class="line">kube-system       Active   2d4h   &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl label namespace default istio-injection-</span></span><br><span class="line">namespace/default labeled</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get ns --show-labels</span></span><br><span class="line">NAME              STATUS   AGE    LABELS</span><br><span class="line">default           Active   2d4h   &lt;none&gt;</span><br><span class="line">istio-system      Active   175m   &lt;none&gt;</span><br><span class="line">kube-node-lease   Active   2d4h   &lt;none&gt;</span><br><span class="line">kube-public       Active   2d4h   &lt;none&gt;</span><br><span class="line">kube-system       Active   2d4h   &lt;none&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="部署Bookinfo"><a href="#部署Bookinfo" class="headerlink" title="部署Bookinfo"></a>部署Bookinfo</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接使用kubectl create其常规的YAML部署文件来部署我们的应用程序。将使用istioctl将Envoy容器注入到应用程序容器中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f &lt;(istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml)</span></span><br><span class="line">service/details created</span><br><span class="line">serviceaccount/bookinfo-details created</span><br><span class="line">deployment.apps/details-v1 created</span><br><span class="line">service/ratings created</span><br><span class="line">serviceaccount/bookinfo-ratings created</span><br><span class="line">deployment.apps/ratings-v1 created</span><br><span class="line">service/reviews created</span><br><span class="line">serviceaccount/bookinfo-reviews created</span><br><span class="line">deployment.apps/reviews-v1 created</span><br><span class="line">deployment.apps/reviews-v2 created</span><br><span class="line">deployment.apps/reviews-v3 created</span><br><span class="line">service/productpage created</span><br><span class="line">serviceaccount/bookinfo-productpage created</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该命令将启动bookinfo应用程序体系结构图中显示的所有四个服务。已启动评论服务的所有3个版本，即v1，v2和v3。而在实际部署中，随着时间的推移会部署新版本的微服务，而不是同时部署所有版本。</p><h4 id="检查部署"><a href="#检查部署" class="headerlink" title="检查部署"></a>检查部署</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;确认所有服务和Pod均已正确定义并正在运行。</p><ul><li><p>检查 services</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get services</span></span><br><span class="line">NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">details       ClusterIP   10.254.61.113    &lt;none&gt;        9080/TCP   2m27s</span><br><span class="line">kubernetes    ClusterIP   10.254.0.1       &lt;none&gt;        443/TCP    43d</span><br><span class="line">productpage   ClusterIP   10.254.130.5     &lt;none&gt;        9080/TCP   2m23s</span><br><span class="line">ratings       ClusterIP   10.254.186.181   &lt;none&gt;        9080/TCP   2m26s</span><br><span class="line">reviews       ClusterIP   10.254.200.107   &lt;none&gt;        9080/TCP   2m25s</span><br></pre></td></tr></table></figure></li><li><p>检查 pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">details-v1-c5b5f496d-lphgd        1/1     Running   0          15h</span><br><span class="line">load-generator-7fbcc7489f-vbpnx   1/1     Running   2          20d</span><br><span class="line">nginx-deploy-d494b9564-vx97s      1/1     Running   1          20d</span><br><span class="line">productpage-v1-c7765c886-97spj    1/1     Running   0          15h</span><br><span class="line">ratings-v1-f745cf57b-mdgxr        1/1     Running   0          15h</span><br><span class="line">reviews-v1-75b979578c-ghqqm       1/1     Running   0          15h</span><br><span class="line">reviews-v2-597bf96c8f-r659w       1/1     Running   0          15h</span><br><span class="line">reviews-v3-54c6c64795-tvsmq       1/1     Running   0          15h</span><br></pre></td></tr></table></figure></li><li><p>确认Bookinfo应用程序正在运行，请通过curl某个pod中的命令向其发送请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath='&#123;.items[0].metadata.name&#125;') -c ratings -- curl productpage:9080/productpage | grep -o "&lt;title&gt;.*&lt;/title&gt;"</span></span><br><span class="line">&lt;title&gt;Simple Bookstore App&lt;/title&gt;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在每个服务旁边都注入了Envoy，架构将如下<br><img src="https://img.xxlaila.cn/1572577460804.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bookinfo服务已启动并正在运行，您需要使该应用程序可以从Kubernetes集群外部访问，例如，从浏览器访问。Istio网关用于此目的。但是我在部署 bookinfo-gateway 的时候出现错误，错误如下；然后看了一下 bookinfo-gateway就是提供一个web访问的程序，既然是提供的一个web访问，我就使用了Traefix来提供这个服务。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">Error</span> <span class="keyword">from</span><span class="built_in"> server </span>(Timeout): <span class="builtin-name">error</span> when creating <span class="string">"samples/bookinfo/networking/bookinfo-gateway.yaml"</span>: Timeout: request did <span class="keyword">not</span> complete within requested timeout 30s</span><br><span class="line"><span class="builtin-name">Error</span> <span class="keyword">from</span><span class="built_in"> server </span>(Timeout): <span class="builtin-name">error</span> when creating <span class="string">"samples/bookinfo/networking/bookinfo-gateway.yaml"</span>: Timeout: request did <span class="keyword">not</span> complete within requested timeout 30s</span><br></pre></td></tr></table></figure><h4 id="创建-bookinfo-gateway"><a href="#创建-bookinfo-gateway" class="headerlink" title="创建 bookinfo-gateway"></a>创建 bookinfo-gateway</h4><ul><li>istio-Ingress.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;istio-Ingress.yaml &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: istio-web-ui</span><br><span class="line">  namespace: </span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: istio.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: productpage</span><br><span class="line">          servicePort: 9080</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在浏览器输入<code>http://istio.xxlaila.cn</code> 来访问。用 productpage以查看BookInfo网页。如果您多次刷新页面，您应该会看到产品页面上显示的评论版本不同，并以循环方式显示（红色星星，黑色星星，无星星），因为我们尚未使用Istio来控制版本路由<br><img src="https://img.xxlaila.cn/1572578398765.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1572578189667.jpg" alt="img"></p><p>基本道这里，动态更改请求路由学习中，😂😂😂</p><h3 id="监控方式"><a href="#监控方式" class="headerlink" title="监控方式"></a>监控方式</h3><h4 id="生成服务图"><a href="#生成服务图" class="headerlink" title="生成服务图"></a>生成服务图</h4><p>要验证Kiali是否在您的集群中运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -n istio-system get svc kiali</span></span><br><span class="line">NAME    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)     AGE</span><br><span class="line">kiali   ClusterIP   10.254.156.117   &lt;none&gt;        20001/TCP   4h38m</span><br></pre></td></tr></table></figure><p>流量发送到网格，有三种选择:<br>1.在网络浏览器中访问<a href="http://istio.xxlaila.cn/productpage" target="_blank" rel="noopener">http://istio.xxlaila.cn/productpage</a><br>2.多次使用以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl http://istio.xxlaila.cn/productpage</span></span><br></pre></td></tr></table></figure><p>3.使用以下watch命令连续发送请求：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># watch -n 1 curl -o /dev/null -s -w %&#123;http_code&#125; http://istio.xxlaila.cn/productpage</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里需要配置Kiali UI，我们同样适用Traefix来进行配置</p><ul><li>kiali–Ingress.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; kiali--Ingress.yaml &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: kiali-web-ui</span><br><span class="line">  namespace: istio-system </span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: istio-kiali.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: kiali</span><br><span class="line">          servicePort: 20001</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在浏览器打开<a href="http://istio-kiali.xxlaila.cn" target="_blank" rel="noopener">http://istio-kiali.xxlaila.cn</a> ， 要登录Kiali UI，请转到Kiali登录屏幕，然后输入存储在Kiali机密中的用户名和密码。账户密码是前面我们设置的</p><h4 id="1-网格概述"><a href="#1-网格概述" class="headerlink" title="1.网格概述"></a>1.网格概述</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录后立即显示的“概述”页面中查看网格的概述。“概述”页面显示了网格中具有服务的所有名称空间。以下屏幕截图显示了类似的页面<br><img src="https://img.xxlaila.cn/1572578943386.jpg" alt="img"></p><h4 id="2-空间图"><a href="#2-空间图" class="headerlink" title="2.空间图"></a>2.空间图</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要查看名称空间图，请在bookinfoBookinfo名称空间卡中单击图图标。图形图标位于名称空间卡的左下方，看起来像是一组相连的圈子。该页面类似于<br><img src="https://img.xxlaila.cn/1572579048298.jpg" alt="img"></p><h3 id="分布式跟踪系统"><a href="#分布式跟踪系统" class="headerlink" title="分布式跟踪系统"></a>分布式跟踪系统</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;启用Istio的应用程序可以配置为使用流行的Jaeger分布式跟踪系统来收集跟踪范围。分布式跟踪使您可以查看用户在系统中发出的请求流，而Istio的模型则允许这样做，而与构建应用程序所使用的语言/框架/平台无关。使用Traefix来提供这个服务。</p><ul><li><p>Jaeger-Ingress.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; Jaeger-Ingress.yaml  &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: jaeger-web-ui</span><br><span class="line">  namespace: istio-system </span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: jaeger.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: jaeger-query</span><br><span class="line">          servicePort: 16686</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f Jaeger-Ingress.yaml </span></span><br><span class="line">ingress.extensions/jaeger-web-ui unchanged</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在浏览器打开<a href="http://jaeger.xxlaila.cn" target="_blank" rel="noopener">http://jaeger.xxlaila.cn</a> ， 使用Bookinfo示例生成跟踪，要查看跟踪数据，必须将请求发送到服务。请求数量取决于Istio的采样率。您在安装Istio时设置此速率。默认采样率为1％。您需要至少发送100个请求，才能显示第一条跟踪。要将100个请求发送到productpage服务，请使用以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for i in `seq 1 100`; do curl -s -o /dev/null http://istio.xxlaila.cn/productpage; done</span></span><br></pre></td></tr></table></figure><ul><li><p>在仪表板的左侧窗格中，从“服务”下拉列表中选择productpage.default，然后单击“查找跟踪”<br><img src="https://img.xxlaila.cn/1572592255728.jpg" alt="img"></p></li><li><p>单击顶部的最新跟踪以查看与对/ productpage的最新请求相对应的详细信息<br><img src="https://img.xxlaila.cn/1572592385675.jpg" alt="img"></p></li></ul><h3 id="监视Istio"><a href="#监视Istio" class="headerlink" title="监视Istio"></a>监视Istio</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何设置和使用Istio仪表板监视网格流量。作为监控的一部分，需要将安装Grafana Istio插件，并使用基于Web的界面查看服务网格流量数据。Grafana将用于可视化普罗米修斯数据。在执行部署的时候也部署了这两个服务。</p><h4 id="创建grafana-Ingress"><a href="#创建grafana-Ingress" class="headerlink" title="创建grafana Ingress"></a>创建grafana Ingress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;grafana-istio-Ingress.yaml &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana-istio-web-ui</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: grafana-istio.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: grafana</span><br><span class="line">          servicePort: 3000</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>执行创建，这里我们可以在以前的grafana里面添加数据库源，就不用在新起一个域名来进行访问<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再次加载Bookinfo应用程序（<a href="http://istio.xxlaila.cn/productpage）" target="_blank" rel="noopener">http://istio.xxlaila.cn/productpage）</a> ， 刷新页面几次（或发送命令几次）以产生少量流量。再次查看Istio仪表板。它应该反映所产生的流量。<br><img src="https://img.xxlaila.cn/1572593852626.jpg" alt="img"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;istio 还提供了网格的全局视图以及网格中的服务和工作负载。您可以通过导航到特定的仪表板来获取有关服务和工作负载的更多详细信息。<br><img src="https://img.xxlaila.cn/1572594150893.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提供了有关服务指标的详细信息，然后是该服务的客户端工作负载（正在调用此服务的工作负载）和服务工作负载（正在提供该服务的工作负载）。<br><img src="https://img.xxlaila.cn/1572594261333.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Istio 在grafana 提供了很多的监控指标，可以分别点击看看<br><img src="https://img.xxlaila.cn/1572594330246.jpg" alt="img"></p><h3 id="查询Istio指标"><a href="#查询Istio指标" class="headerlink" title="查询Istio指标"></a>查询Istio指标</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Istio的数据是存储在prometheus里面的，这里我们通过prometheus进行直接数据的查询</p><h4 id="查看prometheus服务"><a href="#查看prometheus服务" class="headerlink" title="查看prometheus服务"></a>查看prometheus服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -n istio-system get svc prometheus</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">prometheus   ClusterIP   10.254.145.181   &lt;none&gt;        9090/TCP   5h35m</span><br></pre></td></tr></table></figure><h4 id="prometheus-traefix"><a href="#prometheus-traefix" class="headerlink" title="prometheus traefix"></a>prometheus traefix</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过traefix 来代理prometheus，然后我们将流量发送到网格。</p><ul><li><p>prometheus-istio.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; prometheus-istio-Ingress.yaml &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-istio-web-ui</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: prometheus-istio.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: prometheus</span><br><span class="line">          servicePort: 9090</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f prometheus-istio-Ingress.yaml </span></span><br><span class="line">ingress.extensions/prometheus-istio-web-ui created</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在浏览器打开<a href="http://prometheus-istio.xxlaila.cn" target="_blank" rel="noopener">http://prometheus-istio.xxlaila.cn</a> ，可以在输入框里面输入表达式来获取指，输入文本：istio_requests_total<br><img src="https://img.xxlaila.cn/1572594888435.jpg" alt="img"></p><ul><li><p>其他查询尝试：</p><ul><li><p>对productpage服务的所有请求总数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">istio_requests_total&#123;destination_service=<span class="string">"productpage.default.svc.cluster.local"</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>对v3版本的评论服务的所有请求总数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">istio_requests_total&#123;destination_service=<span class="string">"reviews.default.svc.cluster.local"</span>, destination_version=<span class="string">"v3"</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>该查询将所有请求的当前总数返回到评论服务的v3。</p><ul><li>过去5分钟内对productpage服务所有实例的请求率：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rate(istio_requests_total&#123;destination_service=~<span class="string">"productpage.*"</span>, response_code=<span class="string">"200"</span>&#125;[5m])</span><br></pre></td></tr></table></figure></li></ul></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>istio</tag>
      </tags>
  </entry>
  <entry>
    <title>pipeline核心高级篇</title>
    <url>/2019/10/26/pipeline%E9%AB%98%E7%BA%A7%E7%AF%87/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面的两篇文章介绍了pipeline的基本使用和一些实际使用的例子，看似很不错，但是在实际应用也会出现很多的不足和问题，随之系统的庞大、服务的增加、人员的参差不齐会导致很多的问题。<a id="more"></a>届时会带来很大的维护成本和一些改动，所以我们在做事情之前就要考虑进去，一些意外事件的发生、或者是在将来即将会发生和需要改变的事情我们都要想到或者是预留口子，这样才在今后扩展、修改、引入都能有很好可塑性。</p><h3 id="jenkins-job介绍"><a href="#jenkins-job介绍" class="headerlink" title="jenkins job介绍"></a>jenkins job介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大多数情况下我们都是使用jenkins的普通job，普通的job好处是配置简单，结构化可以复杂，也可以单一。在使用jenkins job的时候我们分为两种：一种是单一job，一种是具有耦合性的。下面对两种情况进行对比和比较。</p><h4 id="jenkins-单一job"><a href="#jenkins-单一job" class="headerlink" title="jenkins 单一job"></a>jenkins 单一job</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在jenkins的传统模式下，单一的的job可以让维护人员可以很好的查看里面的逻辑步骤，job里面所有的任务都在这个所属的空间里面执行，它里面包含了：代码pull、编译、打包、复制包、发布包（使用内置的shell模块来写shell，这种应该不存在）。种单一job服务算得上是服务周到，不影响其他人，自己管理好自己的一亩三分地。好处是当出错以后影响范围小，容易控制。如下图：<br><img src="https://img.xxlaila.cn/1572064519037.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这中模式下，维护人员前期用看似比较轻松的工作建立起了整个发布流程。但是到了后期就不行了。之前我在的这家公司前期也是这么这么做的。开发完成后提交git，然后自动触发、构建、制品库、发布，在一个job里面就完成了。后来我们准备推行更好的devops方案的时候；发现以前的这个job建立有问题，一想到几百个微服务，几百个job需要去进行改造。顿时我们运维脸线一黑，虽然我们自己写了一个快速在jenkins上建立job，但是一想到几百个还是不好。为了解决这个问题，我们使用了job之间的任务关联，然后通过参数传递完成整个流程服务。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种模式下的弊端就如上面所说的一样，但什么时候好的服务呢？好的服务又是什么样子的呢？这里也可以嵌套一些微服务的概念理论。如果我们要做到什么时候好的服务，我们得了解了解一下: 低耦合和高内聚。了解这个东西有助于我们在接下来的pipeline 流水线的设计，包括在后期devops的设计以及撸码都有很大的帮助。</p><h3 id="耦合性"><a href="#耦合性" class="headerlink" title="耦合性"></a>耦合性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先我们来了解这一概念: “高内聚低耦合”。在软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。划分模块的一个准则是高内聚低耦合。从模块粒度来看，高内聚：尽可能类的每个成员方法只完成一件事（最大限度的聚合）；低耦合：减少类内部，一个成员方法调用另一个成员方法。从类角度来看，高内聚低耦合：减少类内部，对其他类的调用；从功能块来看，高内聚低耦合：减少模块之间的交互复杂度（接口数量，参数数据）即横向：类与类之间、模块与模块之间；纵向：层次之间；尽可能，内容内聚，数据耦合。</p><h4 id="低耦合"><a href="#低耦合" class="headerlink" title="低耦合"></a>低耦合</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不同模块相互依赖多少？模块应尽可能独立于其他模块，以使对模块的更改不会严重影响其他模块。</p><h4 id="高耦合"><a href="#高耦合" class="headerlink" title="高耦合"></a>高耦合</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;高耦合将意味着您的模块对其他模块的内部运作了解太多。对其他模块了解太多的模块会使更改难以协调，并使模块能力变弱。如果模块A对模块B的了解过多，则对模块B内部的更改可能会破坏模块A的功能。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过实现低耦合，可以轻松更改模块内部，不必担心它们对系统中其他模块的影响。低耦合还使我们的模块彼此之间不相互依赖，因此更易于设计，编写和测试代码。我们还获得了易于重用和可组合的模块的优势。问题也被隔离到小的，独立的代码单元中。</p><p><strong>好处:</strong></p><ul><li>可维护性: 更改限制在一个模块中</li><li>可测试性: 单元测试中涉及的模块可以限制在最低限度</li><li>可读性: 需要分析的类减少</li></ul><h4 id="高内聚"><a href="#高内聚" class="headerlink" title="高内聚"></a>高内聚</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内聚性通常是指模块的元素如何相互组合。相关代码应彼此接近，以使其具有高度的凝聚力。易于维护的代码通常具有很高的内聚性。模块中的元素与该模块要提供的功能直接相关。如果需要修改一个功能，最好是在一个地方进行修改，然后可以尽快的发布。如果很多不同的地方要进行修改，就有可能需要发布多个微服务才能交互这个功能。在很多地方进行修改，不仅修改速度很慢，同时部署多个微服务也提高了风险。所以在找到问题域的边界域后可以确保相关的行为能放在同一个地方，并且它们会和其它边界以尽量低耦合的形式进行通信。</p><p><strong>好处:</strong></p><ul><li>可读性: 功能包含在单个模块中</li><li>可维护性: 调试往往包含在单个模块中</li><li>可重用性: 具有集中功能不会被无用的干扰</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内聚性低意味着组成某些功能的代码会散布在您的整个代码库中。不仅很难发现与您的模块相关的代码，而且很难在不同的模块之间跳转并跟踪的所有代码。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通俗的来讲，内聚是从功能角度来度量模块内的联系，好的内聚模块应恰好做一件事。描述的是模块内的功能联系。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块点以及通过接口的数据。</p><h4 id="可维护的代码"><a href="#可维护的代码" class="headerlink" title="可维护的代码"></a>可维护的代码</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般在编写可维护的代码有助于提高开发人员的生产力。具有高度可维护的代码使设计新功能和编写代码变得更加容易。模块化，基于组件的分层代码可提高生产率并降低进行更改时的风险。通过使代码保持松散耦合，可以在一个模块内编写代码，而不会影响其他模块。通过保持代码的内聚性，我们可以更轻松地编写易于使用的DRY代码。</p><p><strong>问题</strong>: 当我们遇到问题时，请评估修复、修改程序的程度。是更改一个模块，还是更改分散在整个系统中？在进行更改时，它是否可以解决所有的问题，还是会产生其他一些不可预知的问题？</p><p>在编写和使用代码库时:</p><ul><li>我要修复和创建的此功能模块是多少？</li><li>此更改是要在几个不同的地方进行？</li><li>我能否独立测试代码，测试整个代码有多难？</li><li>我们是否可以使代码更松散地耦合来改善？可以使用高内聚来改善我们的代码吗？</li></ul><h3 id="Jenkins-设计"><a href="#Jenkins-设计" class="headerlink" title="Jenkins 设计"></a>Jenkins 设计</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有了上面的的理论与概念。根据这里理论和概念我们就可以设计出一套更好的devops流程。本文将kubernetes平台上来做这一套设计，并在实际的环境中应用。涉及的功能如下: 服务 Job、Code Job、Release、Notice四个功能任务。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每一个环境有错误，就会执行告警任务模块，告警目前使用的是<a href="https://github.com/xxlaila/jenkins-wechat-notice" target="_blank" rel="noopener">企业微信</a>。job之间需要传递JOB_NAME，env，version三个参数。在之前的devops设计里面整个job的调用设计还要多。形成了一个通用体系。在这个设计里面，当还需要增加一个任务流程，我们只需要修改pipeline，然后增加一个job，在下次构建的时候就会把我们新增加的流程给加进去，非常的方便。设计图如下：<br><img src="https://img.xxlaila.cn/1572081425995.jpg" alt="img"></p><h4 id="Project-Name"><a href="#Project-Name" class="headerlink" title="Project Name"></a>Project Name</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此job一般就是服务，job名称以服务的名称进行命名。里面包含了四个功能.</p><ul><li>Clone Code: clone 代码。</li><li>Build Code: 就是对开发提交的代码进行编译。</li><li>Env Version: 获取本次提交的hash，以hash为版本，结合环境来做一个版本记录，这里需要进行判断。uat/prod环境不需要env前缀。</li><li>Build Docker: 把编译完成后的二进制文件，打包成一个docker镜像。</li></ul><h4 id="Code-Test"><a href="#Code-Test" class="headerlink" title="Code Test"></a>Code Test</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于测试进行对代码的自动化测试；自动化流程、性能等测试</p><h4 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要是进行发布服务。当接受到上游job传递来的参数信息后，结合参数信息来进行对应的发布到kubernetes中namespace中，主要包含了以下功能</p><ul><li>Push Docker: 把前面打包的docker镜像推送到harbor</li><li>Edit Files: 修改发布的脚本</li><li>Release: 执行<code>kubectl</code>进行发布<ul><li>当发布到kubernetes中，kubernetes 会执行<a href="https://xxlaila.github.io/2019/09/27/k8s-pod%E5%81%A5%E5%BA%B7%E6%A3%80%E6%B5%8B/" target="_blank" rel="noopener">health检测</a>，如果启动失败，会进行通知</li></ul></li></ul><h4 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此job主要用于通知。当接受到规则的告警通知以后，就会进行触发通知相关的人员。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>pipeline多分支gitlab触发</title>
    <url>/2019/10/25/pipeline%E5%A4%9A%E5%88%86%E6%94%AFgitlab%E8%A7%A6%E5%8F%91/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="enter password to read." />
    <label for="hbePass">enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="b02379bf7b9f93aab585b1915a91c324857378c244bf5e5d31f56dcb869203d9">d69a90776b8106231e3f5503e1ddcc136afb98315a8b2d9c6a4dcefd483cd5274a1710bad077fa85f400723fd590844d521837b38b0695065505a497f7d505fc6a7adbd47799e86366c62167837e3d90f91bc0a8a46cfd0ec8c00e9c37281cc718e266af84d963ef63c65656b77c6c2cdc5324fa6e9a36b1f77ca15d4b8754a018e7835f1d02382ad6ce7df6c982eefc93748440b0194b91fb6aed414e6a2460c78cf2de73aaa47b03b50758f760bcc0aca33ed83ae6626033eac4cf39668ae0a9a49aadc5aa37639e2aae51e0f362a4836eaf93291344a3ae047ad8d81b094f60e7de0f2dd7826f98603539bf920f12d5771dc9d894bf45ebac18092aff3939f9c5347a232d839fe77cbdd601cf2571818325f053773faaf95a15b7e1acdfa68c685dccb6ebc491eec6f9736412510e10675ec3ded26a7e6be72ce99affb7b978ea3124751392b9259d75c6ed993db06f5f00518a9d4c749715fa6a2d11a1327d1c2e0d1e95506ebedbfa12473de9da7c6f29d4f9b263e02f45b63121a9c12876fa07f1505d023678c0d1ab1e5bbadc117693337c09068f91e919fe719f19c2826eaf7a72b7ccc15358d2202aa701e6e4668517415291893c7f9843851f393198d7071f896aa68648880e4a7599a83e0bd745f105c5db6b83bd33d80e580b4f695f7f0ed47d6ad688ee60839bc7a845eb512a026150387f2369f025ab30deba672b3bf4e5d373f5f0ba0b26a6e82635ec7c2ed618ebc527b48ae6a9f3bc47c448a65d3b09c91c01da72b0b1d1b8b919df539253fda72d4a0d323a277e315f7c0f255b1feb82c184bef51a5b2b38bfd9a20246cdfd51af2b8d9d36896b2fcdae086367af56f4ce72b6269bed1f4bd5e72b7edd2d052dca6ff69f07b918a9831e560e9c722f7421f6764af8a628918e34ff1478f4d6d81f6f966100a626e9861f982f6ab2bfcc90823299eee4a318063e36ca8c4402ee441f8178b90dfe5d6d362aa8c040e8ea920c9e77c259d0e0c10b04136b2691bb0a838239dd613ed187923e76daa05c768d9cd01c4253b48ca1fba12900138c1c945384d369c009555c21b41171069d025fc73d0d2dd16c63a050baeca5b54618b23198532e4db6ca8a77ae07739faef64728359e6122c0b39d5baa29f5ececcc76d02f5f17a58af480cbf5f06437f05a94468d4e3732dd38d65696f2687fdfddebc90bd9a49ec5e220d66471ca5a8cc3a349b33f741c6f2663cf19f4a9774f7c474b86c616c63a3bc27733e0abb37c8e62ac18a57e2a9fcbbd877929d6140174301a06b8043e04ed7b735ad20e87333a7831ac678368f6171f60113cf810a01dd4f205a8ff705cd71ed5722057e74249be2a9e273034c9d03c97f1da3b80be509c4feeb9b7668aeada9e25679ae390a567eecf48b8bced13e4bc6a6b0205b62ce8a9acb540d079cf79a0640d780dfcfa623279e5b30e5c6bbf299255e2c3ed1b26a42b6757f79e7750dae226523b421e4c28145d9fd11d4a7c65ba24769b4f0bee25f95e36dc9f919644b8bf63609076968aa93218004d50d5826153360bb66c07931636e39b590d7b4929799df0ca4bdd29013fae56717d1bf88e07c8984728ad8f3cc799d6bba3697e3ab5f9cd57c835a1c2d1459a257be97e7073cbb095469164db72c1d877b97276b56b563d66185add90b3f82cd33d8de162d5d836727403ce3fa8d1d41aa900ac213478ab40b738c2738ef5fd55c2ce509066332fe7736394f544c1f04f5c2ee63f13a07f7781b2103e1b145d65c6689568364231793ef271be54e6776a9c4214ee76e1f0cda7c45a37e1337247337f32c46f01ec93005bdf2b78caf33fc45c0ec8e7dc9bdc09296d6e33cf5784e324c3e433d9e66129d9c715db61481496894b536d4ae3fdbf20aa9760764b6c14be4dd8b989a774953710efa69db0b8f401dad6dea18f321778bd2b25547197bb0a1ba5f87f3c28bacf5a2adf7e6af8051e4a48225eed2c41850096cbedb6a74824f41a412a2dd4e01af015947a2a0cc021699f8d97c8e56215c4c353b551abfa2f99915b8d99c26e4e585c5e9a7edaff8cd6967cf3877b4b9d109d42287154c9af7071e793e0dc6595773e1cb3fcd890e7a8b1c8642486009753b9851af2e257a69e6807a87891f0a23bce1634dcf95e4b310db32d227ff4bfb3c31bc84c3df02bf6d51b35b469ecfc7fba8b61363fed951c0080147f8bddf6bced365df58fb7d8b76124cb735ec37b2c3ee9d331e98ae1992ff7aa3862a7cda37ba9e3481a7a1c46dc11e422d09915de961486198eb8c00fc3409c6b537eeebdc0e42adfd4e81db02d80e8e04b48e0de79a2dd5dff81ef36d1b05adac0b0cdc89f2e6753308f7057b881230f7b751d3ecbb22d6bdb7adc458f4c69f87276ca8813afa83e5449ce3973b9b43df9671bc1bcb3e45023444eee52da0530c29387dc9dedcaeee99045963dd71323250de65118aae09c5afbbea8024a3e5d1c5e80b3d71dda591044314ba7e2fc6f8e065307623298ad8ab04cc39db1c36d77fafd78bf34d9b7ce18e181775cd177701457bb33aedf50180a4092d2ec52a8cbf4d9b61753c799f1f1d56112c6364c53bb1e092f9b7a3efd2816b6f1231d05825ebca5e1a96d9cf8b2eae1bdb7b9245405672931baac9636063d5992f44e96b30413f01d81f3fbaaca9dc7d9189f2e0e29810dd42c41065b6e8c3a0e4e05c86b71569b4f2174b8c834f3425eb992f2ece12bf8c070bf6b0fb7c1b061adf4fc17e0cea8e3c66b0c6887b39241b64efd7671595ce1ca034236b3cc694a13c42054aaff1670a909ba236d3eb5fcb340a5c359e55fb5513b136f5af5a3ebd78573743b210cf403f82ca129ee1f9fc877681483249e7ed05c3438fb217e4dd1ddd9e889ef1cc5da168414c4f18d54904ede366a66f56a231c7d2d2c4189a201b984ae29af74c077e7be6c50b1935f45803e6190b8e80b17c3a074e2e2e5b060851526e803af3a95336ecd7ba34ac2bac2e6b7d9974bd3194d579270988b8d7e527febc6e1b9d2aab0e258c4f2462a1047f66a16bf1c3f38d21ce646c2c7c807d590c80e68521078ab2840c755b75571ae81fad41cec977ead326ddfe42f09b9f7cef79b5da1c428956db95e468a13a5d5656afeebef9b0dc50df7f1f531e789acd5d598ce25b42c76f1dce404fc6ba779d48642b467d3c45f78b90fa11f92b84d57ab01b757b80a368f2edc7644aa289a8069288cb95cd7dc259e98f05dd856db976daab8fa471df93da77045e447d8e8502d3261d80b9df8fab60fc52a0e124e1d851928c5209b554aab688bf7dae2e2e7ef4a67940803abd15c3277cfcd71440b2c34093ba243e158c0b5a0b43f9dd276f9c8a000f96aff2f1ebc6322f38b8eb36c2f9d9208d7743ff2276edf68c9bf7fd305df695d250e3f5b41d45b47b051782a07d991976a6c24e65ae929cb6634c07fdac20aa0cad4d1edefdae94a607a2d406e57d167823e6afee5b975fb5f03bd1c2d6d62e4f02216dde07966b2486c54422b516be5a25dc84715b99560150814d2ffd61c2d61b99a090f891695f2561aa83818b1340064e387e4fbd9c367861a705baf657209ad6be45289b5ab5298779053e183c293761afcbe0f6df5394202672821c9df7a05007f4512dda1385897108c4d97baa3b0e37481d39e7748e3c3d455d64d18a0ee793535526511b1d0fd6fc5ba698a2c1f819211a6ebacca30bc210583148621a43ebc380d68014e00272aaf15ee4110b03b10e7ad636cf49beb6be9a8c27e0038e70345541b4d7cfd1100d7781d6cc736d95ceb2700282fdb2a8a384bf5449fb51549e7f501477ac453e6eb573f5f3cc5750df6d436612121dae8bd9163142bca78351b7b1e4f5c3332d2f8fe2545450dadae9effecbbd790f92a9765aa16606ec87bffe17aac3d4245e318b45b40e983e480404e4b9481ed0492df91acf5a158cb39a1bbe82c8fa19a7d3c7332ad278a9c5e857d6f2f92901308ec57bb4c02d980d3738a7b1326501c19f8aa1491c3c7ddc1e6172fa3079e80afa2dac54f94bb6541f714833d5d38d91273f48f65c3f0fe769e998beae527e4317fe7578f45f478124c0020026ba91598a15389a1fcd5f144d868c6e1a8abd064985a30277521aaf75e75f65e5726b45382569aba9501a029a264445e3b73bf5a98d0d867e0bb36c94797ac41f7c1aa7848002c690e817dfd4e5bef465e12bde333980ae36348b29769057a145b1dd4786866d046da206f193cb841271dd118caad9d0886132795e1958aa74b14165c2718e9de07a03f499c0689f80a7041ff3a86d7a0f04bdd3a463b6d1d0336d3446f5b33270c6089612e394364e7007b6eacc1db0165e75288d3a7d3d584b83339bc549cd8db07f9c40f3c4353d7220f04e23fae28e7ca2f2f06b775ee876a002893ddb96fdb346bfba9dbae4bdbf4ab5d79cafb27056f1f3483ad4c152df4763697a1fed1bc19bf6d4aa4a5da0c5f73361ea6227a51a1c712dd549cd9161f6687471f0c097845bb1b15b1da8de2378cf0a892fabed0dfda671cf35b855d9405a8854788bdbc79d85802de0db614b3d6988e66d67dff1081acfcef1a1591a6efecd5b2bfbb54cbf14d8e27eb1e0f1e19f1ec1ada9039957f38176fc9b92f37cd4a6dfbffd4cb3d016fbd30bb0834b2cad6e676b2daaaab8e7298628c586e1c5a29d9252dc063fa16ad6ba16cc09d754f6fbf288bcfbc50c08f6423c26c2f4738303f33b0a0575c4f17c36bc5efa39bde05c4db17cf7fb534316519cad7b7c182699b5ffb1bafe35e10c8747ad923842cbeccd8d7c4fd713c01bf93ff22c2d097b3efacbc1ffb8fce7af74981e1c28fcdec0030d0c42df606284eaf7879fca091a469eed8c049de0b8bbad53f50a29c4b32b131256ca93fc26a9ac6915ad5fc1bcd030366fff772371718fd5c8961984d2f2986a1d5d2f01ff72d48aee3a597088765dc3319fb6305aeb1c6c9774c5557bd21d5ddd4046cd7bfc16de05a60fc08aff406a4c21ccee953891293faf08e12b470d8d5f01cc2baa720c208aadd7d8b747d975f61b7b36aea368af6fa80b3721423a6e4b35806e20281fc32dd01f13ff72e9591b0ec8f662cd9adc539314a6a0c665ac2561e5031790ce77c7cf38c73f2d48839095e29a67a0392b77428b0c0c77af84b7200b44c28533354e0aa2d7896c03cb76e9e536d04cc08b94b3795c8c3a3880170026a0cabfc7b5cf15a37a464fe777a6fa175dba1126c2e03a339f5c36bb6496ed3c75c1104c09e313f22e08bb144cbdd37cae8843c9d9ac82a4f06e857eb7653146af99e6a1e108224a3cdcd8ff5b42d31021c742876762331461a7fbeb7c1de1506e3c19d2b9671d68f0f925a3ecc855d613d4ef74c7ce34538518d070f42463edd50cc90fd1b4847a008f9297fba0deb29d1fae8dcb3789e3b630f250b9b5904c60f836b21c264f78757c3e6a481dc344cb442c8a6f06015001505d5a9f4b0cf16e26f8ab016579cac96b6cec3b7632cfc4a1bcab570764991d9ac6f2d7ef59631d3d5e3f0635c7279448432af5e5e408ec9f45e307eaab91d54f72f275cb0346e30731e1b3c6a32b220a40c3973930e5faa0aec9c2292356e161951504e37ad01d428a73c1fb103f037bb703d0ff0a82222900393e70887635f163494f85351794e438adb707301dfb1ba580e426422bcf1c476a1b457c01f27993515d336cea230090c43400b507633d41e331b67efaf8815e3d0d1ba19229d0a73c8839c24a4eae2f8546ce0b304c8c7e08366d4fa9ad9283fd86ca2e3cd153a21c9bfe099c1aacb486c8d916d6e22313aaa71d10d45c7ea926022e95f26e58a03818860d51f5ea55a0aa9a1407b5c4a858ffeeb7f49661069d02c5e1330abdb40c16524ba7d415b290808fe9a47d63a4bb8f79a4a7f9255e371de4fc5feba92131e464fd4f0ab558e140f5e8e9b0b5519120e5c1ff103ce17784e434b8a3c9f964637daddc277ecf6f7f7565cac52e146d1f0104523ca2dc0fc37cb16c8b935cca89e8c01a6eee0492fb1d6be26bb3046f20527bbd42a7580bd456febdede95912da01f04bdeb9e8055995733cda7a626ac4766444d8a8117778bb271abe17fe56651529dc1c1d0b8689c4514043b1529e1925d2aa0e70b480e73f5fc7bb8b275738a6a9c31122c9c14c27ba16ea96c4f9745844ef138ad81fed805db72d99d8db9eb9a2f769658a246443ae02e0395e0e14c26ff45f57b244b2c094163c4e86e169e5a7047c1a0e3d8f263803805861fa78db267b226303cb84970c4cb3e172957b12a2ca5c6ca7e3ce237a9f40f15e029b52d6cd5b2bdcf5b50303d6a0c160e27b900c54de3f71931ca9346cc2b926a6f5453d1afe0a89abeba635ed9e18379fdd8183f227fdc10bb8f165b88a43ee615f8d00b92cb301c36a280d3e5ff9356ce83592fb985a3dc659e2fbc43914951e78bba60a255c6a6e374088710c44a95dcb499afa8e39351df1d48d6f2a47dcbacbc24341044a4da3d09e823d481ab7133069cef736963568499a04bcfa561f3094ed633dbe725cea7b588a5443e8e7dd294fccb5cae271f26d83e079e969193227a5101a7ea34afb7d70d122103c80755388875a229734ae48bf6759c7e2f19d094b3159b642577f9d7b21993367e3f609366a0931a5c688503cf869a073661020382e7c9a25db9c533bfef4402c5bc9cc8c5e9619d271713c41ad891e612ab24736887195e5236ba4e0fe6debb80586a7e4de7b356ba5ff6d94d70e341b20a9aefe46897d37d9812d0715672d48a94f77a18210362703f5fe25a1efca6c6f24556e5294ff7fa4eba58176e539e5759b135420f4a2f282f292490cda5d4fc35987367d07ef75f48444b2ff8187aaa2c3438e866f2531732be7e1f6fc6da610402de03fa76bebe19921936aa08a3b097dd309ba2f7dc6bcafd65ac24160c12f7d5a7c730fe8712955ae86f8289a061bdad60bb8953be816c0f090f7ba1c55fe36c68752021b17e8f1cddbc26259d9364de25d7e8c745612e3b97509472935ef31d1dea0e56cc47c59a04787fb8ee8841d1e578ee4993a8a85ffaf96a5f5987958e4c5831f402b43119d4c40cf17692e5c8dd00bc5033aee1245bfb019c0bd9d6a244351809d7c79c44abf3570c68e25c0cc771e16074467431e708e25faaf6c71e5c5bf65d018de77b91b0a2405d54c587cfe441c474bf31ee0f8b3ce1e12e06635ba7a949553f830821450d0d1b79aa1c161f7d703ce16e9292206b2d87ab4a98cb26a87f050785247599211d10a918e29a315a6b8937138f19fe9d21f3dbfceec5f7c2734b9132d99a3cd2c0d64c7c5734ae8466795142a20cb1b650087f0d40c06c44643a268a98e58fdd74689ca2364cb1afd0cbe406c75132deafbb7f73ef74874241c659aa369d02a767513fe389afa46c3776a2175157f526e07498ed07df2426c4ab65f4a55b76a4f900c2211c588c9effe0406f0ae2e0770761bea1797d8f305f44dab235135336e9081f060d7f55147cc30c51d9af8db09c664b5bd59a16d388d1e9d4d18264bfd73cd397da7b66cabe69eae8cc2977f6aea8716243e5e1b8e7f31c33ffecafdd44b2ab1dceeb433904e641946e7e7fcc991b363f4970f6d57cac5bcabbab92b468c78cabc23736bf142440606fb562685507ce6a44b5220f1158dd1c8487bdcf06718e69d4eb439b01bfbc57c7a28363007cb0eea4325fd7be1d0e56a746ac0451f6f0cb6dbad5b1fd1fc3674fb8c0dae24f4edf986ab220562f710fcf0d1fc7d99ce09b3c7c66dcdfce10e0723038f400e775b536db90d2a5d65a60c8e1118056a58c65eeab65cc7e79292cb4b858e54c436fdc71e1daf00370f5b81df2199bd7eaaaf1e65d96d55d7754ab73424cfad1cd9f6624ce96f5e0804a0c6d44b213c12e7c66f56c5a7e5210fc41466fb45e76c3a5820068551ac2dec6c2140522f2c92d951e2b6d5fae24336f0f4114386541a8ea4e496cbac8edbd662f6983270a1adca7195a931fe7838d4e9e2241097fa46eb04132ecc13ccc070e933fc23aae7d5a1166dcaf2fd51daa881b0bd057971460bbfa4d2c8721dfd9c3e5b23e4ea0c222c18d27000fb30be0f1d14666327674a9c2957789153c2adf6a8267a391ae2c0b02f678135ea44b268efeb1072071c6847ab4c023f2aa274bf76ee191057759d30a9dcd9c0f5f521c9e8b1ae65a34f186e7ec6f485a8b4787a70a2f2812395b89a413f24663ab364bffad35afac7b4fe54fe1d87474a0380b3bbd91a1e24ab87ebd55c8682d48051bb1d57484c9aebb645a8c917a19decea695398d7a7d28bf4af1fa4d5c6058d578fd236e60c9dfeba36d0b1ea5f15fb7cd6cf9f352782c93ceb0aae296929dfec31a6fcf5b8358d6931ea3800e663dfe913a4077526b31206d799fe1e7d9cafa7151e6320bc838c8ccab1cd4afa54e6cb830605d2d792f43642343a3834df6699bbd57da83d55d299e6e060712601e40c7fea4f94e7acf7222c7dbbd4975e44d3a214626d0f6e1568d230bda84ee0ae645bf2b6167d59393ba9114306899f2c5729de011136377288a9cb1e904c9b1e0bee54d03906eb03dd1f98deceedd34285b4a21a54536f546c75e3a7132275721804d994fd8023652de30280677e5122dde7620d031f6a949eb7033b5cea49a329db481171ac7ce0e9198f7a3f9b19266b0ed61b12fd69cdf88186b7708de5229b0e221c617088ed798323b9b62bd1f53060ac5364c0706840839225f16e9074ce20f2eb44b2f518f395adaedcac418d671456a8122aeb0717ed3e6b5d7f471453a8f0d4f0dc38333ecef0f4a6d85810a420d589a6d6418dd5bcfab11d9009183c2d25146713188fc636580b8caa63126c1cedd6fdeb651db57e33d01f60e3b9fbf6b89d528b9e5d4e86a0f8cdb8a698903c28afef046050f163261932af7770dd87d8a558b14e66ef10505d68736b5083e94eb31fe20afd2a90e9240d734b0b7f83b89eb03ffb95d2e50612d7fda30b10dc4ac2e595897df7a8f517490c560426f31c7d7b1cdb9a5a1cd2b8346e3aca2918e4482a609398af73b0564dc1d49e6e82f4bd789a972c4755cb79068a7c916577c27346b217bf10c00a6c23e2cf6a96ca26e097ba88e7c5cc105889cc909428c9af000728a2836b728f936d50c2079d331d37855786c4725beff5bfb77525de64c11c253e8bb682dc5e38b9dd78f16c73f36540e8499a0ca9d7c526315039fd976f1ac70b04d68c4c951f7fb4cf47c0878111064f69932da40b84352d02f93ed011be51948fc6f127e253bd9d53ceaf34c6eafc2372fa12bb30bbab1040416536597a91f4b9b1e6e322f499604ccdebbf569d84ec655583da408f971e10c9f8b8de229d421d032799baf322a25c8cbfe8272f035055c94942751488b554fb5989ddcef0111d79343815d344c841cd1a14d057c9a349e3c0bbedfdd54da867ec51bc04aff2dbaf996dd36bdece946d61201b77d00c4fdc87fd812db3dc3a76ca61236231162e7e5aa517ce02d3b370e9f1d42e0d7e0a641001b7e918856ce4dad203ddc88795666816335f38509649ad54b49040a4e983e0348e3a31801c3308182c33e1bf956a1a7eec9b71e9f9c3446984ccbef39fbe70c60938c24538b1899fab1dc3a635bec4e4b0f0a8a2a72098f2731d5a1ff178319d40435c2f2d33b7fc1e77c0490df04c402ab37a1e4f3fe7b9d7c9ebdfac1e3e429384ef4b36204eff4676706274e555cfa658672824014e46083b80610e51608ef768d787d9c574faeb92d8106d85c92d211c4657f7b0f46b81eafe092349a9d26299162a72f3e1d1d2efb2ee6e45b480ebeaf5395fa41b3f1afd5efb891216bdd160065671ef617b823a315f4ca9f90855f6377479e454fc3a1b5d8266443389ffece1e504f4eab6a0a8cad6a7b18f4c44e2486e976eb11a6856704d5764051796d151784546c223a05ae79b4c7c4a68c8ed0f7aec4dd2582ebba21c19a8711a018487453f876adc76dba6afccdd2278c808497937f503bbd0e572637d51476439b2a9a8c122366845164eedd05585f5d4947d4a5fe29f1a823d28084e1bbd196ac4e5d4a0610d8dbc990253f7c6320ec40095e58588f3b8c5ba0576f0d9316af96a9d2003d0666005109386589c2a0aacd4a4e2940ae6a26884de8d04dd840780de04030bb2073793c60912029d061ef93661ca47d5255edafa7d7b41945273c9d46fc7b163845838d4e60da5a86c78d0325a7fa24f005ab756ae10747c566cb7ab28b5066f668caed2c50493bfb49090fdaab1aa721bec1cd40b474efa0689e4ce4be0f1f51a2445b1afab81502a87c441d312fa42195f41efb5051ded03cd76f355473f4423596f40eb014e758ae8e3da5400846b792fd512ff8a8ea8059547958bf3e2dfd70508ae81dc987dbe559fdf98e10f1bf07abfc321a0deab1cb98100ae540bd96189267d40bc42fc61f13cfad4a594b8c07f5415cb40c838d1bd9f5902df0decdeaee1c80b23bff994ed49be15bd29283ac8e38fea407550d2686e04d8b7e8433fde9d38edce3871ab9d229c31dc202146a545b4808d1faa081e77f467d9db9f479f266cc3b6c23256a136ac95108d6c0e6905e4a77c7e2827b11554c8b8cd4044fb2945e5045f555b71eb3b780b4fc1c47e84c53fe18b61ce4fb3d4c613d75bafb3d11314b993f627006ea324aa1cd079e7a362237142a4c9b3b1a8d392a3b8989e257a11de445201851ae779025d23cb6026c616319ae44da2f9ef81eb34bad4530bdcc0fc7b8754175a7454bd7d22c790bbdbe5410042b4c851238b2edb1f7673740b8f7b7b3890c273244db919ac8acb8e8d0d487f826765bf9b0a5519edabfd995755318024610f33972875dd3e336c84b5a7d48c498791cdf82a27672723e8dac426fc123334b13069423d114c15328ce3fc6f4d8947c1c741ddc9ba488a0925fc103d92ab8f108749b02fad75b20825fcf2b64fc2e83f79fe54a180cee03c0fd2d3b5b9fe28b119d297973d139d1e16876fe1cf55df8d01ab509848dc3ff4b3c01937c7b61a19287cc5cab9c428f8ca7e106ecefdef288e34ac54863bc7f081f7d19e3e810c3031e20082dbc6b013f9987391d8b8c8b224709500ef60986623f8a321f6db12d8db4e3a7a1bcb20a8d901481e615a42c4120801ed2efee1c77eba64811ca3580c47cc634b9f1465fa741a8c5a9dbbc13466123873094d8cfe2b9e45ca63e9e71c4f5a02c7900caad97926bfa1f9bc0fc77ec37d867f130c75410ae8e2ef2c3c5e97951ee7618c2a2ed55620a4a51984b98b2a74e6767d21ab00801398451be45279dfabe413bc022ca41a0e3868be19cb8f854be373c3f6b0641295fc0e029187327a70ae7d584d2791a49416f45c498acdab1fdb32f4dbff0c8ef6f8659998a3ab64212a560c7f36ef3984630eb21e55fe88feafc13d468f4944e9baa5f5126c8fb9bb199f1243e5a4e142e26d8bcafa05065d94bf9d00b385c10bd52206f7b87a3219ea9c282e27cffa78fd972068940bd68b0365e8dda229d9af25936512f41d3475e85e9dd5afb528e98823a1c624537391a0e125cd821eed84beb4902e42d00545393fc653cb2071b23acc7585bdb3f908e4dffe78c529e8bc27c912e9dbdfc4d18907908f34f2f87b4638e1069fc130bc34e7227014f81226da576e7bc465f81d54751775180e116fbaa9290ee71e3e36c316e389d1ccbcfe905fbafaf510e63d4311b386ff2e8d9c69916be52d38d9aaabf56b929bd001d3d7636d807fb55c59d7d6f1446c67b83ed739753ed678614ee07aa239544f1512b38d8375f519114ebda74b3dfec6cadb777c0ec911579fcdd71a739fdd53fd5d62c53af500895449ad8b276d7f1f9afccab47289d355f0febf86a8014b31214eaaec41d0d842d4dc5d1961c18d8dd0dd6899ecf0f7dca4f4854ac5c26ac2d5b8e62ef6ccf8e07bd6a1bf28f522dc134adbbf23e45f7963a809906eca41a2a8ae5e9c84506eb853a7248029be40cdde2e96690d8bcdb91ea81cb51c20f76634528551b99c0aac93cc0483eefe70d32f079b91aaa844a5cfcf9a2b67627c0a7b1625a8c0dcca7804a8a4f9277274619f99ab6ea9b68c223f0ef51a4d7be3a1a53d4fb79eca875c08bc3bdf477563872fa5082ded9d3156c4a177c35322da8057e4795258db92ed9d8c2046a895d404e9a15b49097620f5db4d3072ec68ef7401d774d2a5df84b180d5a9968af6234bbaf88328f432fbe6c0090940b76f7ff3cda380c32b287066ed57652d2ec2c06f16bd25532d1bdf81bebf192341f131facb007c00e9bf691e2db66d58e590738bcdaba7d7d9d2c02617837281f4e4243ec8fe5e603b0bc89c2b3d7a36a7a32a4cbbba347a42db361535494d4af879d120b278ffeb8a142cffa4d731a8a451fef000a5acec1ff7c0c792c082645940462fc5984f6691c65143f18d4931bcbbc8ccee75f6d8f959dd472dadf0dfa8e274465736eae6e050f08c74854a2bb4525c1b2c7d5847aec6eecfe4c3bf387b7e36bf10df2744fd7808c889385088be18492b0faa4f635c79667944b7c011496ab22c15b65d4abefb352f270dbf243d23aa52ddd87bb0eb4e2ecf784717b3ce8fa0c7d2c238291071e03c847d205b0cc053596a8117f467fdb1b75bb5c8bef4aa37244920bd68905461fbfa11b3c1142b6d52965f5680de5a664229d3480def4957bddd1e97113eb2708980fcfdc8e4ee9d0fb5516bf150787e3c1b1da811085fece292aaa641b7e39ab7d07e1ea53609a65f8222585789c19210cc53e6b674f7ae665f83c182365a8c3eadf532300cdb464f2dad19a6c9e178955e08bb3b8159ae7357b35a531453156faef957be7f0ad285fa1f99a3897b977ab170c2d840c200711e4f7f3c47940e5332e15dc4506a63c8fe3575b7d98021d807d13149cc394bf959ee9ab15d0ee9c6ff80ba305070faf9351a4f65ff867112482e2465c68c3022eb6bdb8443d53b710d8c7086db6cb4b9d765687a01b2389cbe69fbbf857e18515d587c701aeb10f825035134d421190ecfc23c24b03cbca0fca794e9be9cbb99120e5b3d12df4df88474a8993205f64a74541e478aa36314252ecf00d14bdf2f3184a181dab961a5f566802a7c02e5b1c45d5d6a9e12de2d1de2b713e314bf65a2b2f27f89e139d50fd4a98127fcdb0e85431aa4ac77b85d1b48adcc0fa0a42a08e2d664aa555b223a0a57dbbf3e1406406240b3d3d825cecfc6970057bc1d3fa34ae8ecaec6da232bc99dec39df30e8ba5cd95c970261c0fef66500d65f41180875dc26d2d1ba8dbba8c2774b6ca6a945e2d79b2b18165d25ea16d69dccd9c54762a85a2995c4ba3e705d6dff26e7b6433b5e8c786c4893fd8f0ad2765e610b2d15489b77096c65e345733978ee71e45a203075e1bfc1283b05d79a54634798d9352ee1108c98598b99ac9f1a7421eb4d61e1e1efb38bec3855d4dc3d62a4cd9d124987a7a65328558ab37e39ca7e8537741047827cae4cfcd4caf8d3b58d03a370e3f5045b8fb7c3f0d3aec74e9e19461628e19322549ac26d2144d46832ba838526d52dfbe8e516296224e4273a011bb03535cd0eb7d1524442612bdfef1d68b823b2d60d1410751e5cfb045418ebcd74863bbedbbb8b499e95f86e91b6b93a5c614728780c7c37f2ba4230168f23c27239a5b1692395f80af3dbef2a1b92d02d052ac1df12fbdedd5236fc502311edcd87f8a680f8ee25e592d192ee2dd881fb1d46065f688ec68bb4ddd6fea73b5d66254dc6aaa6f71053208928fefb4d4b491685d848660303b8dc8a305910b101081e3763004ec086fef5949e7c91e9c38aaa417cfa04311353177ab826413d2a2850775cbfdaecaa7688069bd6752eaa334da98a1c8670379c17c3c010670a06ce8f24715fa61e58a0a168c6db61c9daf74b321fa92b3ba41c584e1c71ccefe2110899bae34c2c46c03a54a02d8822995618222eea0dbc110559a284270c603cc55159bbf6b09a1143e25e1b41ec341479c16a52110654114b13e04b6b5312d3e339c9edd4becb2e5c580c9ec0de11e4d75dc32afacf82d05521d5e257c3d290b85ea99ee9915a77474c0b20f84a29611cb8f9d6821411b84146c3bb424ec9553adb7a3bfa372cd454c1d01cdbfe578b24c5a516491c11f3657960a5d44d9e9ac15ccc0b6c396621fd8811f5cbc96da359e6c54ec3ccd479b2f3bb710116b4578ed5654cd9b9133e1b47c7a7a416ad83c18894d9aaeeafff01b221ef195ed615a6f15d10ab5e9fc3e95d549b7556a6920dd803dac946605b8e88633ad7faeb98f25bdc2cdffb530a6a3ed7e2c5ecfeb36cc4052162e6d439a5341a51fc7704d5db0ac2762b2d312900df1bcb36391074d4ca1d4c4fc57ad7b1b47b026aa6c9777d2ab9eab0465b531ebf19b678b57a9c630146090b9d02c0165e4ff6d04575fd6b1ccb8e190aaa0a44aec05bd8b091efbd61ab6a31baecd96c5cddd7530ffc16ff92461cd44684be0c5e2cb5f81283c3dfea71ac40820fa848590f5171d05a31b815f5ac5487b478b93da3bcc1295d1b0a89cb9ede7f1def50dd078e3f70f79960fbdb2bd2ef59606d6e670bcee37e2e9c1341c3095db8fa23cad0df444a7ddfa4ea4b6c29f8a6f56a6bd90532700db4a1e9d89cd645419098c766706f6608838fb5c04e8efb30c8e0368994369323b1f701c445ed4d8541c1a98fc05a21488c3ba3e30ba7fb0242239d1d221b3a110c0286e6b26befc4a1bb90581b37cf064f29f789492c424c937a93f0da72eb8896e33a7a3923eda239fcdb87cf462da090fc8418c83525dd192bcd5eed51be1cf0bb813554966748518d3c5686c7b52d93db63b52ae95b4c926926b25ca29f8f1a2781ff8da5b3e7bd1671d262ac58555822e4665fb47350e5ccda16e6d41e07f9852816107c1f2e2ec78ac3f66bfd6de00adb0c2e61c35ea6ad54e5fa511f8df0f4cbcb18a830619ba8f2cdd87ec20ea8c53aadb30627dc75d9fd461bae954a1d10282d5ca9e12f0d790da23e4ea1e62e6efac0c4d139f2e66c2ca6434b41df293aa41fdfd195c21a9e8a2b6e008c3d6b842298d64485e9b4328978b7ffb6d0e7502ca67cc91c6c2f24be4d48d88d08b9b5c4ba0d9bb56929f0714217d594e068016113a45a1daf931af63f6f2ea19a8dd0490af401a2de66732add016e94b3e160b9de75ab5910728d7ea4c755f027ce4dc462dfa8f7b0d8e928f4bf30b7721ebd2fd209a198bf599371a78c7a769fc3ad04510ef058c163ed0b8851580d1686f42832a67c1a9fea320315bffbc6ad2e583305fbedc9aa54c092f7e76f7d37d53847f4ab74fd707339213b9ace877a1b4a3e37ff71a6837eee32dc057a7800e06232e7944dd48f17259bd1ea1be4ffd94cc54b89c25873b427d7d9140b484d2092bc1b2bff9e7bbeeef5ea861c88306f0eed0acf55cbef74ddbbb6ae2069ecc9d3a23c12525ffd3dd9fd370605f391ea0394ad0cad61f386ae69a7691e404eebd826f4d9a394451caf179cefed815783410c7afb6655df27064d7e3db94e594c7908985fbbdb046d13b8d8c57e4a47ce6e3d03bc001f66aa7d4ce99b7873b09e5f97ac1d649d83f6db0243805422c6b634c3afe8f14a46c3806738ab061490b7ef503697ddd2c3c93fe833ff852375832dc9f0bdd6cd424f0e5b561e048b7179b09966da6b69eca2a86057bbcc8273b732e179169899c8d75f3578cee1a4b32b8fa91565a4a788a68e1469f5a4f80ce74a9fcb5278eb8969bfe1ec235f76511d3b8838dabe8e6b3adc80ee60a928751cc5322c17942483c1b31416bb2409bfa9390e96b2ba2bc3e71c75f2a5d49ba2cb59d34bfd729d5f9b16d2449f363c3a4dd08a9dbdff66e58fc8e914945ccf9a8bac273a6e5394e9031b475acaff679f87b51350fe683db65617ef8083816ea61cefee361120e082c98d3cfde0b3c1baf60ed172e680e75f139c50cd47c6f9087480b8f7ddc60915c95d2f99f3fb26051f302d1b85a4907b8838027431e86e46d6b516a8071da0b58e6be1236d81e034c58d65f7d7d133105136dccc5f90291406d0a26836616caeda13365356a85d264682778d9ff2a69bab1289a5f0f622af5709cc8e1d79515622f650000d294d9c2de4805fe1c68953fc52409f7f9dde5bead9b43dd577ce3bc1c2cc2bd111340e21c325326fbbcf9c181fb31c425ad36d9686518aabb668d30e7a4466a5899b5f2230eef41f588998b87eeb97a3b91e499a9e62ecf581dda38fec528d6cb62da049d46f9c92590bd11ab04699eb98ded7d4f69679699f043dd9c530389cf606b64fa468ee5d65ed87c3028f9bedc0f88e806c8ef884e5583552bb215a9c61d49aa75b439a1e14ec4206399c40d9d8889d8ec2819e4b2e27db4a4be73bbe2a311ca4c90a95a4d94f0fae64af5a3513d72c45bae2a64b6a57048def3e050cc73fd0bea3fbc5307c9ed8985b09446f677f3b9bbbd327f42a8d2ce0198bdbf3691bfc29877a9725b1d7fd80d399245281dbfb1f88a6c0a747aab0cb68534013035fd9a0384b6ca8ec0d0bad071d27912bc1495be59b24c972bc7ae1f8b3daddc7c2b65d7625968136388b96620234211a0c5f70d2b3491e7a30ec0b2bf19a16160edbe58c6a171585720608e6f388f523980ccf6a1f4f2a69d94991b1dd79051fb85282323f5680da8049486b7f4cef01a4873b816b7664bd1e8be520a07bc1b7959c208ad4f85d21b21d2230b49467e7da1172fe869cbe9a4dbffee01a8836563ea75294c35f35596e65c5c9159706c6e72932b8f7f4ec152be3cfdeb614e91b815e630d1fd117a2ab355b64f102eac9203e8a8f8c8d0ea3e1ba66682edbc1ebad03458d89972bf8cffd9db8ba57bce8ac7846ca9047d8e1a6eaba4afe12adbf525b9cc21aa9c8a98ba4c2806311010851fe315522246ddd9215c33f0360385d5269f8b1325d2b11bcab90b1d394c8897a55c06258cf0f229a98f1c69f6130a188172436e10b4c8f27d4583a567d10efa6bdb10695e1584ac1f77892a374d527fe343e9721869c625ecb43a3d25aa7cf15452ee62fa7cea92065fdd8844c6d12d2e7b4a89c0dac4beca2ff1f443624361e9c1e7f3eafdf69ee2732cf57971dd9fa3b4d53cedca18419f80b301c40d1c880d0e0d825bde3c5a444b444bd343bed7526cc45480f4008d437379d06e4d2929b51a42a01ad561c794af14f69284f892e2ce3a497d578d063d7653e01c979d0e46eb01efec7e294997e4707891a493062d89f664c0bc242d4210338fe16df4f9821971020b9dc250087027bf782b86224bad869cc227d7aa6cfcd1aa8d3321aece87bffb34a4c65e108ee612a95b0f8a6f3f1075647cfc78007a5ee5393962816122f24b6c60f0680d2771e8023cf7cf747b5bea21e53cefa796e4a4caa720a7556b02e2a96fcd50b28f154ab42f21e5a80711122271e39cd548a90035bca680fca4c025816bfd0e244093ee52f8fd6da77cd0ca0984717ccad7523f8ab8b6b6bbe27c6b91a6de62cfd124f8bec03529052eb32205cdaeeade9937965c08adc2f07485125a154d9e8c227ae9ad9a79eb10f10b7aeea41bb6d878e5ba94cee8036a42655ca9f43b6b8d61add4058bf04d444d83364b3f603fe3094c9496589c5b12be934275e3582db595f80192fcc41e601313494544b3d0aa40aab91dc6f529f2956bba59c5aca1ed14ef96ccc4093c785cc01b4381ef10ed076786df3730fabfec7c4832e76c30f85b660295162527da57a9c9912e6be3d044a72e20a080bc34bc0e42231cb55cf2ad05690cf20568419880c6dc07eed3a1d5aa99423cf2f1aa1ad54f534a5e685392ba316884a2d34feb94d4aa272746d8bf339a11f3b15b1386a16116f7765297a48ca31493dc3a06b903064af1b1293e2c5aea1a5cfcc1ab04b3a88e3b071f99f36f8e0235733698e41e2c157ff44f617f6bc1fe613a0772ba879d5d82f209bac33ae64fd48f99c0860824ee4cd73d07dc42518cec4926b21f3b619c2cbba3c7f722eab911bae26c36a5895f17f600e58c18c34cca76fcf25a5368b5443e0e286064dad7b2b48d9de1760e5199db67679e9f73fa74d864869a0b14ef4e2f0e3757ea92cf884ced038fa3912849960fe81e9ed673cc3d4af723f046535d6d181941b66619e9a60bdae61404f1d88c0b4a60ebf9697e3a100003ac02bc80a5d1bf26e0337f1888475bcb9d7bb2ce3fc92ca794a26b7210c77bcd543c82126b10e4687e333972b3c1c29e4feb6b0a8d13ff7ffa09fbc4e7370fd48f1c4544a57bff00db36e724bfab12c2f31514ef005637b0d47dc39b8ceea2f26c9dd534e6edbf5d79c8fed6eb51ed2c17318964053aa3ee3510faa5bf58b9595670c465869ad64e094055cd22005d072b90909dc9f5d90e34ca11c6f9e1225ec1373c67e89f6e1b1e3bb637ea5d9628a133fa0bb70344ef0d19ee5ff827109e3ae0e12e0638c4951948815cbc83d171140e4c2d1b4ce77c31eb796ae79f798c70b0e1f96b528e1187627d6311205b6f9c56f07dcb93292bef6fb3017d7044acf429843a11f9f48c3f19071f4188595b691b58f8297608bc5698060eeaef15b5b4afc83b127a2edac76b6262028e57ad6ebd52f72d8c1586c78bf18035c556f89efc7a635506eef4262c0c6f85d069bf04b9e13013c61e45954809b4793ed7e03346d891f33f9b1378a93cc1af79636ea401a0e5cdf541811b2716a77675e79b4affcc8481eded2930d977edc1a7eb015c64c093d77d63a44f51d9c6772b655749361e92e8e1ba345b0b007d7f34fa06ea6338aee8a872706014605b45eca4ae471f2d1b966025e7c9c6db85254063abbacbfcdf020b8b76db5060ccb015806170aa509cb9fe0aeb19fa5dcd11f26dd36fb09414d15ae3836cf07d6d1b67d80be01f603bd0d9e2bdfa7e74e7d70433a407c3693590c970803d6f165dfd44f41bd7d781f1a144fb7cf63e30a11e0d84651cd2862262a410aac57347b1a32494d8852578072e0fbcfd88658b31decbd57c42274f57c46d4d8bb67dfa27cecd4d42442a006dc26dbeed9a8477c71b6b55fc534c9d522c6a4eb5616284d4be1b51d8e009a986f722527a147b0b0919baa394f046a6089b3258c8fce6d5a32f4adab947fb2aa4ce7b6fbe25a65a5fe0f2e32f7e04a9cf4d029bbe79a5400b7bfb15768cd0fdaed2e0e3663a7eb56d699ef5f9f5653a2f7a513606d4dcb6b72546b5962dfc09d29c8a2397d67ecdb3c3535e14c9174b09691495fc577d77a5a5916e0987b7d3e372b400e9a4609a535db0fed6ba3e6d7badd6d442c2da0ef572bdd8bb37c9ef50b448af3522976e47f1da023d10ec4e5b5d685e8341eb2ed43db210f8aa703b1f16aa9672b1156230c3543b376423c86d643d36dcf9f8f7d374ab9f0c642e5234343b41629431c559e79f78159858a698d9f78a2225d56965806c47fbccc7e45cb1b147f6c658c7dab747a584b4598a5a49c70544f698268bc8b376fbca3271e7c3050c26b392d94e86b0f05a6a82c5f061dbc5aa00de845dca7268a01af3bd039dd9ec3a2ec203ff8d55b6e348be2bd0e6b46eb8aa99fb50b19135d243f7693e0ffc4c65b95e34c7925e56cd4f4005180c06b575ec1fbbfde90524cdf5af407126985887ff5d74d96a4d657f2c4e6d70a58ebfd2767ef57ba25c7a073bf38629651ce61e494b0f441c731feb2f78a434235839195d526be496751a406333523917a2a80aff627f8418e63cb347f73602eabba5bfc483d151403c18ef97d540026137eaf5e6c5545abaa12c5c29bd94fea9bd8195968c89064b08e1c0637fe24b88044f6a2d3d7b1807b03de6c5f661ab90c223e1a0749f519b5f2448fd6f91bca86e668fcfd44e7fb0719c08511e12623abcd8445227eea43a5dc0114946ff53b23354b73538dc5fa6551e5569f9c3f639c288a3cf3756f5cdc9cbbf9f5c6cea05f1dfba23269057d003f60b487701deb1af155bdf50049446926b6536ca3132b7d16b70da4651cb89be339d57a7f5fd6ced47c2ebae840201610b912ef4232537b79ee49db6fbf64361e170f8f34321ace385ff0aaf0afe66956072bb987837199d76f492f794270cbc5fc320ee66d178c18e9f8e440f17450b6697471fe3dee1814b4a79a91a63a0cd522275d72f7fbc49a98c46616429255b88224c0516a3c1adeb4ef61bbe897baf51829e190467b3d431c9a28dacda595fa107c2494036ab9d685742bfa757ecff6a6ee5729e9dcd492a9a05e4f7e9926e01b5e6869a9e53f300c42256ce751d47117ae1c2766a9c6245d5547def3efa852ef7ec249d35f9fad602f95ff6464e77ccf5e5f11780222818be7e5a88821bedba5c242bf326461e758d84eaf210a2404e639945ca927f27ab25e08903c4c8dcf51dddb73de37677f52a1d0f1dbac93387f840b3845c424d056ab9507f1ea5c92fe54fff1fd50b6784a63086ed6dee69d447d4a547c34c7334caac8ccba203b203185f8310e496d0c78d2aa15b7d79e727548b6130ea9149e1dd12a815eaedb23db31749aca9de621efb9b72a94cc09abe0b3c541fbbbd37533aebab2d03ba2eb464f15e6ba2f74efdba8092ef3d1ed45cf1842a1b7238f3d0271afe90e098b3759bcc6e06c9a30c4bd1827f52ea7e4de0db75f97386d0be00699249361fec9428c88a01bf86b581fab5ecce1bdc0f8cedb640bf6e7eca843e8ec7d89cdad330fd0277bb774eea38130524e30d998fcb543e240f376f8d7a6274f9d6e51f44f75473aa76e0d7ca0d32e182f3222faf02bdb37678f26b972aef60a50fea29a87d39d28dc3a1ed6cfea16c2bb9de1562abb7fd3f0bc0b3ab492592d9b6863903ab9902be6bc604212174d551be7764bba4cb9e1f354c302c0fcd7f5292288006b3ad547c584dc4268d2c08ef593702e074a1b260137a086ba1bc5d83c6188cceb7085f22b327a7df13edff8ef5e79e09d4b4fb18c3d75d8fac2a283c4e4bc2ba2ea40fbcc8c3d574ddfb62cdba8014682cd004258a253743d09d42155ec354d83d37b7ebcd7a0ae5bba0150ce25cf9214750ec14e1c07b82b125badae84e4f7775b717ee3e144814975f5f3c0b07c9a6aa46cbc735878ce92ebd3049ad601bf3527add9ad61b8239516ee67e9b70fd382d77211a4134e5f7a392fb23cd265f5cff862bb2bbf3b112197ee7438829e01bd8021118de9026829aeb9dfdbc0ff34b3640363f462902a6cf4e7f9af05a5d9618ad7b296744cb861c0a44b8b4386ba3f1c71c870bc8425530da17f2d7b4284139b84ea9cedd03bf491aa48d7c93168f667f00151e45d00a1b631de8ba8e5df37f92a7cf42212afc3ec7c46e1b86a0316a4edaf260d2193a4c11e9a101c0d6fbe63c0bee763780e4473416b8f1704df2b7d472f9a49d9c04d220fe86c6e83d9619f4a63ebcec5fb5b9483639e97932461b66f76159f7afbb878a5819f962d2c9f8a914dc10d3cb888a027e19c42a4f5891c0f1723847f631fee91e48f3b9000967572b15b9da0d09ece9168e975ad19c393d4ec20de817b45ff870e1060cd0fc5a67d9d84633c24936c45d20a69163f1907a6059e6a0bbbaa509a1de61cbc90d29df886fa40ae5dda9571c586e8be08d6800fd3b3dd3cbc1534dcca85834a7b5a58bed7ea7db964aaa22d3b8935800f1d58dd3cde87eafaf760aa5ae7f6555368b6b947f522c1f0d02067ad661ab5f6f61605851f80db80ae802701143e6d57864841c7b2fcf535dba6cd1a0b68bad8a5675e61de349f1e156d81150c2ed74d12418179bb955dbd58eb380ebf501076339c909ea60c7d57e88476da59d6ef11a4b1e05dbb0d905f03015c1fec69c761fae905cabce048626bd3efe907ab33067bc65a7dde370da088b8c7f7b03cccc4cf233e858ac5c221f40d839fe360f4481d780433077224f70ae3d4a5159b459b29b309c26f66000351be8faea18885891938ba349367e3b8fb7021606c6b717befe9b45e5219a9413816129aa97fd12c3f70f364af49c3547026bbc513af1e3bedf035ecb78de5a0224982cfe948e85c970b924196f78befdda62fa8e3764f3090784350ebfa568d6344c46f26186f1133259979c8842d537b615d5663ac7e43cdb64838943ec2acbead035a3e90c4b3fa45f12d1690181b88e6fef7ca7e1a823bc416423086c0c413a0702186410014c04858513427874e9a2dee5c435f40c2b8df8b2f07b6b4ef09d0bc83cd45b7f84bacc28116f1b378a6e2f3df6b82da48992863f9f5359d5711a2baf81f056211de39639bdec993d88b94ec9c171bf320e46b246323551602a4c2b8e3531c92bae97ecd556f223c3b552a8efa788eb74ca4ea8c5f5d11fb21f6c871e77dd09a4c75a183cfc6406969786ec5eed269e2d328803c27464cc57b012b92b9f5e00e1dd9103a565526adbc28eafb87939c7d957e3965fbd258fe63aaefe1368957adee4857ba98faeccb3bdd2ba997820e76017511d147fcf0ff0713716db385230c714ea9883548c5646f83f96c15a5d974a689edd1a52eee3435763108cae73db7a9bf32a72b5aa08ccee39b24afb4d33ad9037651215a372bebe8ffb1754b496cca8fa1318bbbec55e30e4939e39f3ed8fcd7a9887173c4d2b31b333b7280eee3f640a5235f32b20ada70df39f8b9aeb7315cafe494f01a0a192de2e1f20234931f1db7eab2eb4989101457f36a8f2ffc25a49af4c5e4950c1c41d35243e46b136d5cee09bcfe2f4c0dc46a1b705d6979707fce25f4c76f221313cd2f2720a87062b0988e54027c7f9eac4564811c322a476ef960355d4050afbef7c2eeabcfe7d8c31e0a94e9b928cbae15e0267283d38ffcff8e1aa8eefe6ad1564cd736c7203d58930024433e3fa919e1f89fb01bfb78c725d620cf9e6c39adc6318a34ec2896c736837d520301a4435dcf4d304805198aa852c479818c16c248f2b0c669db331387113623c492df14a4cebdb8a831876a8c6f7e407ce725aecab95100b42e85b317dfedb18d0972aef972148f3fdd22f28433b5835e444e1bc06841811bd6184166633634e1fdf10af63b092fc88193bdf124bdf71fe749aff4a70f785cedf08339fb7a7bfb3a479bf47c67ae52ccd506de98b02f341dc0aaee35c6aa0911dcaf77cf91210822f631565f7780146f1e934a9cefff19a3c6e6a55a1a4258f3635dc1b5b52d17f044c47de6f5697178d1947539f1b643a3614d80b593fa8ca5bbe20a8cf833d22fc9b3425af064069b8b6b212a7c0890025af0a1ba3c10745d96ef0c12b5452951ee80c43901ad26f9f26097cd841fd0ac8115bdffad1e10162ddd760d85b5a514878b48b0e6768b7e5a8471e86ca9be5131347cbf58bd460ff00fc07f37a8aad1918b29c0075015d03107134bed3c41d9610708fb31972b2f3ceee38dfba4682ab776a035a0342b3b96f9e41c680be9f53827803e97b154416eb6b7409a7eb7a496549031438750c42a244e94e80e761210bf4d9e18da09f5e273743b723a517c3be85268f0515d9564c21a804946660dc04bffc3e0762560e0d93877a2b0d47c4f422075f3092a47aa50c33bff11aab2c19511d19beafb6afbee40f3579b5382efd08624f1346f683e609e0be69cfe663be59b3cd4cddbe3646821008deb796f64f9548f5ca28319b693d0316eac31134e9d20faac528f7bc84bfe0c73c8c643453910db8be9da1539a3588a860b81c5e49ec7069f6cc91612b660ec604d20fe39da68857163b2279d5f9a3d14e9288a648c51c9717de387fc1736e28a4bb73581dcb756104eb232eeed2033274e4f9dc911bcac28807f8e0bedaf990e28204fbb9104e8f842561072ea2352beb2f160406b6e152ac4d6b884cc7756565a9a595cd8333c76ad87b02877c21db1cec289838e0c7130444330f0331849b4b87853e957b4cad025bbfcfd60b0580257115c3082ea68db439694b841cc430ddb5055eb6313af2d053eb91478dda94b27a65f6220b6cd6cd39fba877cf4b90e6407f7f314fc1bf8e6cb1761a40fb4062d3c921d32dfd9ecb0de8f23da858ad47c00fd50336c46fcdf09ad4df69553dab70df625cf97000cc7860e54c1bc572318cb7347f2817b5f875bb3817b29b0e2e68f95a0776383a817ae9c441f196a62ea7bb6fa518285798c1247258ec0d82ce7fd43cfea91e091df61b6764a8da4d5195c4eca1b63a24aa4c112632cae07dd2a1632ff7b226162dde1eabe4f05066cd6cbbb7b99a13a56736aac3e8a59ec76d270ec548131ed6f4a34e696b7ca2c2716990f4c64d737c4bb9dfa98c2c3016018469c3c60a65d6240c8f3c326c0434e8df5c16b31ede82ec31a829c5752bfe0f447c295d66687335fbd768305c042115ff3b7730d764839dcd32df49c73655504fcfd483383894546f4e9785247422e7254f79de9a4fb52610b7abe57744c181268aa3cfe5c53eaefbdd2bed9cdf520655faefd47b1f090494a789a2acd2a6cadb026a8acddf9e005d00c7a52e528ac4162b366a9bc64d852c11fc1def6d7317cf4b0ece2525ce1914ed2475acd1b7878cae3f18c93645e470af0218f35030660c9073890cb572f378d5b826c397c743626064c1a01df75a2a1fa8a1e6eee5086d90d9ee592082ef08410a9648d950124164a2006894438d1732fb37be48876309c367647326abca412d3e2c11b76ad2f21ead910942d03c0177535d4b25b009ca512e3ebd468b918ac91f33bdb49c05ea6c94dfcc712264f0145cc0fff0b03a8efe72eca3b099194eecc1b07f7d5cb6aba4d87391eab2dc6055da823618a6cefc36ce15543decde9c0fd9759a80551dce2308fe1f75018677293d2082abe821bc80e5b817a8a2ce14c15117f70a84efdc47a0cc4d8dd12033d02cba251d8b493a3e0177185c1dd4fc07f37384a9f6dceb5496f528f2f6f0e6bbee456846f5f59c7d2964a09048e3dea37a9d9451bc20a5fd8017bc71518da2984c7babee99000df4faf00c0c94a02be9f85457ada2ebe983b317f782af9759b1ef5b49c43f2e69f1832036c277b70bbc33cd06c98832dae041bc5a64f7dda1a027fdf09a095e8bdac7989a529cd2101a360edefda68fcbcc2ee4b5d75cc1ef28736064f2da5b76e5b73287cdff8ce3cb88b36729c29066d287d037879ed6db40fc5b048f7ae0dcf281cf59e14e8d99bacbedf5223c85d0f8456a4de3a67f50396e71b1625eca1b122f46467cf7f94320dbec4b85361797d5363c545b3d0afe902c5419b70cf82fe262ffd5b80a97679fbc7e15df33fa6952b537d57536c3a78c99cb4f151f4721fc89138a85ed000074a5626849769db186867dd5dcf57c3fc364e14b0661f2180332193aaccd8300babe71db0350aa16f8a2e426887902b8b7d6a94dea6e111d2f8c6db5d5e5f62a36eab5ea2a11d46616fd50001e3c738c078c717b1e9058af1ce3b4acc82e8ca70fe1f3a4481a6a79a46730b2680839bb5a8978ab4c2537dbb5bf4066dae07f4e0ba0f5a8882ff20b0b9e75b47df00487550ea96b39400a2f9b7040efa4e811fbe0279e50424c515f1cf2d6a0eb4ecbb7a44b8a70d6e2866d9c4c13ce66724345204c90e5846ecf7869fd17173ea719bde16f5b7954614613a9351bc14839c16847aeb277687896ad43736cf2778cec9d5e5ce1b5f293bffed787a025a1465b803c369c204e1d07c59273fe5beb138d7d4e4cfaab63194c7e7bf74434ba19655c5c7eaaba7c3f8d1296698f7a6275813204e5f5ebbddc5188463b8c517f9d3a0f40d68c3a9aafdad3a33b4fd55889b316b8bcabca7f8ee890a5cc3e4420386a1994ffa643bbcd875b7c5d152d4b0ffa84e2125b47fa6945f8920888ca409b2035dca70c69a60fae052783ccd5c6eb7cb233d5e6e9e3007e1d2b3f793db93c5112f15f4cf1909a7ef7a61b18c4b5752adc61753e57f2dd4af14c4d5ef65e2703a4147019deb09dcf76bb9108b4dab2be5606e6524d243d2d64219e8f3eebebbebdf53143cd9bac6589649c47bc6202ed78c69d77979c19b685530d954de8a378d992c154873a5f02732ff76591437cfeaed96bdd28ab3ed17aa792ade8000775fa36ece5255a001df4065c56fa31cf9efba77f1be3832ac64bae700975690f234d0d4f0891d4c31ca3b567119bdcf5415ab491e08185c0b29578e95d983ea1688c323365a23a443e8a0ba23121afa2ac58cecdf348709b32e6ff5a64e2220afc9917e0878a1e46d2f8e31a88a0ee7865d22941c9458051f1e3e91c03d79511dbfef2c7d527346795ebe7c1d2c03c69e098a6463454a70cd2a60f4ed0cf6d1a416ebb9867445306f40db7fb3ccafdcc08d7b2ae1d8692e30695a2e72f38202fc47d46ac6eda944cb66cbc6eec1c4dcbe3a6086db879fa4bdd43d754c78df82a81ff1c020540a03b9a0f83ad4034ec3cd4d71f3b8b119c9db89808d4018228fe695f503ce975f015c8c9476173b7cf89ab9ad0d7b877679790d223ea86a86201fa2adaa45a3ca954b0a35d4beb54a9488e755ea5bf8dd4d0e840d49ef7cff810be0bb726d5dfbef417794c87e56d9155a5926cb225293b0cd7702f3b81bde4271d95235332d442ce005774d4a3b95f98333c41fb35355a507fc13885f432268aeab8f7acb7efdd1f1cfdea47b438ac68beda6b2e99d784174c48d3d211f1aad4022f108002191dc705a4fa3180792d69494de554cbe058a3926ea5ab85ae0119ddb92087aafe487df3a48f154c0cd0eb6a5da6857f37b35c6931c03a585a610cbf342c66baf90dec27156378820a5a2b91773df3f65b300ae0f4476f6a16bc6da5c458202ec855047390f51dc565f7456ed5478f462e4c27d32c1fd0c50262603cc7c7306576d12cdeee88d988e480a875043f451f4a119a7511b9a0010c34041860e4d08fb951a9b8af46abfb71751fb22b06e8ff40520559ac612d2295ad6f58d854a6a9f5656ca50a0facfce3dbac0ee69262725b5d4a987ca294cfb3b59ef747acd2a78c5e2fc15cae1813f47946a7aef3f8bbb88b7a3e6806d3082c56d88a6cf038f29cedfc98e1b9c010d6ccff460d204dab9e9c69e44c0b4e32d35019e3d06e958ed4c86300a5f2e9a3cdab9723050ac5dc0e816b315ef6f5513f9d730182d1fbb9700f273ada7152739c32ad18a0ddb77ca362826e72dea99dbc61ccb9c2f92f99078ba73b0087741fe7794132795a162263d574642ba084779c4087419de3c157d9bac2e571fca22c6f5368ac8654eac7ed684a0c449fc9866261f3284ade2179c91e1393c8f1632ca39ca4a432c72d882c98bdf6130437fb591622ba3cecf4cc0352764a7ebb7c8decb3b354c374c4880618842f0fbe504e9015b238e3d040f069a6955c99122b62019b29ac5c798ecf78c6b1ee64b7403b4bed72b2f47a99c91c717738f3de66b6dfcea1339811bee53f5f0e2aacd960831e699afd1af4ae8030821c8b35a81620a8b0778a2f90b987a6d76afc85a423e312b92082d03cb97f49f878a873064335c93846ae765a6237434046ac8bd5bf6d3a10950fde0042822c57003ac988d462df0d4581c7672206f3b0efb66783a4dd8711b463e916e78d5fef6ab053abf5278e453e5becdf7b7b93e47b66cefc49cb2a22250ff15fbbc7fcbf6d55509ee52a11d039c6a6c741834dcf9c4774d83f967bee4c9c1b9058869521f97581a7f14fbc28df400fcf37bae5fd534785a40fac98a68266166306506a1a35f5f501b66de77e30ae40bd588ceff31358197d2dfc120eebca63a1d6419941a73e3cd9de284b12054199068de5c5e4a2c381897a34f1305bbc04d547174ac0e8f903b5ade5729498c16eeab44460c6859ba17ccb4ee6fb6bdaf967a8da2e0be16cbe2a01fc31981754b8e571b00ed1742b63e4f6a95c12d7ac514e7c5484d5e236b7761f7b20929b9f2f01cab6ad6618e5fe87dc21bd5cffa5445a1cd6359b21d6d0375044e9aae6229e9bdb638dfe3f2e4e8af62ab78d8d738aea0eda95a563a144fcd8f2adbc7c213325672e6ba2b2f443a3b315c198dd0489cf9ab35aa5af2c959780346bfe7f83bcb5ab4c27a7bc363023089e789c4f9cc379a0788528d1c9187929527da0951db6f202a5d9f451826e9233124c3a99343d733a47cfeb76334322bd50004c636d62750cbf85ccdcb82590d974a32e9f5d077588a102e766ae264861889032d792c7c08fd4a5852655238e2ea3536ce45256e436fa216c9b8bae90032c86b7590f7ae57f5d71a11cd7716830baeb1eb7c926bdd3467aa56ef510d29327bb9ddbd741ba65fe81ceb9f309173d8a234efbc12d234efb5e5c9cdb4957d12d334ac5edab44bcc8986ddb2bee62e79ed925b01f42f5090ac91a48f4dd00a517dec29c3a9dad742bd6e1b020c929f7c2901d956e4bbbbceafabeb5809d1518485f93a5d796765d17b1e48b788131eb4a5993cb420f876340a742342c01fca81f5b0e723005de188cfe0394ed48ee097f037253c6e06e4131b414a6c39e936fd5514281d2a198bb06f598036aedeed32032483a147339d22146984fa26e20046bcf9243f205919231c632b6dc3f905cba5e34f40a5207ddba141f3720aa35e99ff8e8526b2d6d725ca3207f5e9d757db2c6b0a405b100b728d202b08cf2d7181cf7b3ec398958b7dc218c5309f0c3ac67a9a911b41677850883d9a3eac814325e26d4cfcb294588f0c3ef2fc6ee0f6a6394ce2486a55fd111ab76a0c3b6ba5671da6f5423f6f6be611e3086f740ced63d48d7aca90ac446d0a899794aede61de4a7ab3535d6245a39d5aa7ffea3052330bdbe1cea3a41228b8d6c240bbfdfb05c0f243fb7428d175f6b00949a8ca775960adcefe8fcc8b44350914d6281ece8563e43b37ec00cf5e8a601ef7362698e63c3f6c3707fee68abc24c4cfe1069162531d32922c02ae4acc81445d9cd9d790933b3b4545f814cb3a193af4de03bf66aceb274ae211871cc273c3362feaad1428b2f2af9b7fed4298732091787db58885950bd1a3bc9972eacf4500112b39c4ddb2d3d872ba28d147324dc4fa58559021bb6af99c6270cc5c61510ed9aff2c2b184791a4c34a280d2020598d281266d8a7cb22221b1aca3324fdb3d723bdf9ac3d73102fabfd24a66b458cae67d53defed657d090bce94f796b86337a9decfdbc63dfa32dcb20f0ebb87d9b3c1da0c90b60abe302ac991c1240e9b9a7788d9f3a895c3f5fff88e281cd6f6cfa02266e540cd0fafa0804666891c1affdc3c3a96ba1ae4b323cd4cf981bcb78081cf9fdd276d20dfc3527f9beab8b947b0b3612f7c08d1798a112626efcd33fe76872df7fa8221e8232905d4eca7d07c93a08319cfbeac39f75464ff665dad185a2eaa649a4a135b63498dd36b4aa46d3241e8e50e122e147c56fd67719cde520a4378083166ac217d85719e9a445207d43c8a90d9e52c4da94df7b81171aff6e3e96205fc763ebd118fff604524eae363a236606ac788cb6908592adb897b4a7f451500611a67efdb30cbab541a35305b2644a6118f93d3396cf6759f827d4a4c46848c767d42c3c95692eb7bdbed7050344065512261155383c656c23d15ec14af15005def0d0d53b2a322ae1319a56fe20e8a084c170cbd5b71654829e0bee0ccd0f44d2074accd0ad0aeee7c28c9bea54f6b21b17d6398ef47b610fa7b646a2fe6878da4543a2142e3782e07d589ac8530acbd99704c91b2c5416632d45cc985b3ec86aec2d576dc99b0444227d9056f8935483d00b90f1abbdbba3a3296802d7a97d50a1cc7927174d7ea754ea67a4df3611fcae4a4183fbcad125cd8317eaf35923f562ae1bdca2644636525636c49de29bb14f43487a55a2fd062773b76cb1efda48a13123c8b62ec7e3d29d19bb163efdcfcbe712956b35dd594b9b23157f3ba64cc77953dec37573fefd7e77ab6a00082d137b1a93042582614b0e6128db2a723c9cfc07431e2dac1c4adc434ce4d79e673f7d2b546395aca6291ffeeb4104457e19f8f7cecff6bc3080380e36b2fe18535d462095fac65b3c1152519fbb51923c44e5c5d7b08ce8a5c203c191ad9441a4d4d0739214dcc97a1d53079245febb75a4b8f5488381d5d8fa86f6f7343c47b4d57833d87ea0fafd40a4b8b5e1d24152702d06f7d53199eb78aa1eb62896a04f5a0b7dd01268032aade83f296b1aa9e5a0877cd93a7dc3c9d973c3278e35c75423d857dd295723aa8295c3a0b1b54d46ff55b18124f172d69a19e7895697c18636cb62953c7c20d44a51cc2e7e28f02826f02346fbe6eb077204d533d8074ba2162da533c4a56e58fb7309cd410bc6d1898c9e8675cf04dc12b407fc79b1eab3e609ee287dac2be96118f8921cdc14dd4346a3d7aa9d4197541ec06c4128d717f86de036ce7ac30a7d698f7fa25aa3d81859a05bc06845d24ace3b55e93adf6736354b1f309d073dcc9f087120ab59588c59f5faff5384f1ce16da43507f62a83211907e6e3dfa3bd8cab8975e7426ee03a3892512726d75035cefd23ac27d708ee5a5874ab633ad7e0005afa8db7c21259a55971266325b8b62f49ca107b48af9ee873dd703ed7808e721eb4b84480ced19bfd2ad70657342c85da8844f4955fdd273146031e1ce1872743b294eb8e8e6fbf1861812d5b49362188413579a3a72691c4a749a7f0b472655903d80b56d32c1f91a3064db084de1c8582b546ed2b9629431e052fe72f74cdeec048d727d3bfe0d17b54d88fd1e21b1022e47bf27caa316c630efd7c9de881d6dee9e347e053c703488982abddd9b4a8cc53c124ff1bef32abb75c0d6bdcb0cabee630ff54b1f2b714cc6920cbca000a53d1721d78a18cf2718070540e4e598b14b64efdcc8b8368b06d1b9b7d9334e8c02c060c68a4e7af2a4c263eb388972b5c1648529d5a3daeb03a6fc0aa4974ebb1b90bbea535cf187877ae13b6d6211ff537b42a22c84b16947a58cc1468bc3a939d3dbeff23ed86915853be45d0a71fafaf18a00f728e0cf7282cf2064734831e37fecd7296a961b7eadf93d89db6b753f8ab345271bd61e04b47d995ad277ec96753fc3f033c81c65eab128299aff79f035eed35e251467f169b92a486b17318248b6bee99beb188e69f5a4cd191a317780788dcaea742d086b9e22d2c6b9121b3b2d0c4c9ff8be28236e7d49eee687211e9617c6b260bf77b38f30e041fdd5782dd4b8031566a2c6d058f98b23187225aeb238459321d63d266ebf2baaa6066da375d22e57ea4b099ebb33c0d74180a328ce17b022a90e48801e2c8132ee6c95ec26b6a8e106a80f44f6d979fed8bf18a888ee3ddab01632a6754315f2c86eede8ffb9ee58f8a3818739f910e9694e424c6b38e70e3af9ae13199de2f98ac0311141e225284a3d087b62e8dbcdc83393e3b56a2b6cfe2e7c01895818df117611fbfb161b32ef3610430e46cc2aea470e04efe7199f7de7b3a7498cf6d48984fd2f2733d422a3ddc60c8d0c176ab39dccdd575852e1c3302025972b1c315f88da3cfea0a3400889861bf808231cc0b636ff753644d31e6a875727d733e5b065e6c152cc11c1b50f91d72e1b44ae56b1a301f079f5cd5d7c439c4aebf1a93c1f5f1c78302279ab0a8c82393a393c27ad53f8d7bebbdc76c8f72343a1812e5e03de3e2805bd6950ddc35569d4e98a8f5f69b64507415af8195b412d64f650cc16eb3b9bcce984470b7728dd9681f85028383f9c3777f271d3bbdbb9fa1823eeedfb4141f4c8eadd41e15c1163d76dd9bcfb3ab8d20740f25786f15942c5505482c2460304d2580aa31fd309bed47bca86b323bc3699846960402506fed7579a73505516f2c5d2c1dfe618a5b448825f09637df99b9c0ff528f13df01ebc6deb7c5e966289d8fccc803a4ec8cfa40fa20c473cae0a8d0637b87fc876725110faeec27f20c70c751511da969dcc75aa7ef9c2b9bce4356587a8856799b25e685df3e41182916427d38ce5a8bf288c2c5b098b35a6adf845e81dfe56f366a990b277bd12f0586bd30a249d053847539795dc870ee15a1d60cb21d42f207adcabf0f722f2f3789eacfddfa9a7c82722fc6339dbe26966b60f87d84750598fe827af0edf139aa6a795b002e848443416115827ac26e472a8916930986c16ecafed494a284cc523d6ecdc49715d5c519cb41d36fda296fe825c5444fae99f1e5fc00a2063118d39781b00a489470069b60898b80d84974e4717cae2a8430890b562fdf3bbedb1c9888df713e76a232a96fa4b98fa505c88436ff37ac9fc359ff1fa6625c74cbf89e6be38d500745390128d45d30831ca5f8ac59283d79367eb7fe7a4275c89cef7c903c425268505900df19f0318cca735fad4ab1d95554dee93e0ce683b0f0f34b56a5282cf129a06cf1d599e2ded0b3cadc8bc8f333a51c83e4f165c1def4dda0cd3b9857736dadf67ba99ca1cffc23fa3c884d0d4fbc06bd77993ef48f548d3c8cfdf8cf993aa5796afd5264d054a2f8c5983dc61c9c86674d6ccc5ff024c2433ee0d86f5558b03ab2144798b266c085ee73979fdd491e107355d29a55efb7dda4f30fad59fce328bcc7099308b62aee122b29d76505f7ca401de22cb345b5f1ea92eb1189a0f54920d557e5e0963e1d033e0db289e06be26266179c07d53468bb46d644cf6a731b8ccb693455da2c019196cf39d0556b0dd4736201712360603e11e694d7b0d051b2abbe47f874e611fd4e9e74691e4b64cd6e6ea897b45d22aa3409b730febd947da88159cdc7dc6d0557d8489a88218557760cdb70452d6d61ae6ccd8d526757576431034c15d9eb9bc2c075ccda27da4d45e1e563d3ac8eaeb0164917faac9e4ced5b01ebd3201f7f381635e06806068596ef290a763c3ebb41686d7008964ae1987dcca2b7de9df845063779d2ca85b985be3164bbc5f58a34a3472a8d90eeb6b01d3243622befb4bc94ce70c758ff382e2768bed5648b4410bc39cd2de04d25f6a71529bc3ccdf43124e0f7678aef0fcb7b6eadd70f82fbd0b5472d6abf36821017a6a581effb70a123f74a1360080a608746234db8bdc285d3d618ec6b6df1b4778b0ba7145277aeeea6b89a3b074ca48150938a7aec39514cddbfefc7046e3347e34d0b0346d683aff797ccb193100b87cf27f3e63651a505436472c2eff95d260363c9eb1ed073321b90ff1040415af8a14c3daafa298e871e0f8292d975b37008ad964433937aa9c1aa65d0711fa896ee63732667a092067173f693791fe76c619c246cc540506610ae7efbcd102d8815b3a539e827be281f80ff7b32c35afe845b1974ff5d2c21785f23f41ad56d8f09602209843e38cc3f53e8f27f07a31a868ef298b1c3d4f6a6ad99e9b8241a9d4665b0cf168e6894c8a99189b57a1b8407b350707b23eeaf5c7d0ac220f2fa15166d50c2ef6908d4ee7320caf075319c271ee7c313ff1397c9c156af1be3431515b3e6b024605ddf810706f3d0e5973ce43301222c6b7b271b037c2360feb834fa5be70f6107d16858c0966191012c04666f7da5811fd60c6e3695e824162b63b835ce1fbc56d436ae99e2a7e87fa1e8dfeb99d82b4ff811aefc8678581a9fc707154d7a8eaa093adae9cbc09b42f36c91fb31e43d38ccd9ba92d0ff3fc47f763e6b2816e98e2f3cdb11d7e04e81c7f695ac9c3d858c30b72f1b049e177363eed2517736b1e3949725b67b3a0b5d80164f66c9c285290d946c359b846865b3d48fd093d6d26760e1f175c33725932e8abffe6eeccad82bdd6c3b6d1306f601af738ab928cccbeade8a2bb41a3ddfdae2c93c3ab2a0116604c61960abb8724e9b7eb6515f08457d66da9ab7f2c6b1c970858fcdeed0ba0615ea42cca4e6e5b4e5b796ccae8c8a3c6784212f860da9c815bb5d17ce6cc21fba44b3356d085f7881239507361928f5a31c769e32242674fc6c1e6d71ea02154943b853c7fcf5e8b992171d6f5b3c2dbcadac6cd11b39c2b7b7da345d21e04dd692759a65f0c511ab225f724f5c36caa9411aeadfdfa7d40ef803c21555fc6200306972654e56d2088d2cdc6458a803ae88f2af6ce3f69f68092ce25798ed7d2a465020379e6ad5113c4c24979d673555021479d0d2d94b044fbcec193fc7175150d80ab6ec5609d5c2d6e247745715ee3aaffadd4dffbd12296bccf93c2f7da0dc67f8210b8c7bee8f8bc6c121f77f6a5ca58e430625fea5d4d3ef709fd617c72e7b7bc1bdfb7bbd326b07268fe9f62bed5e3b470f49fd902a0cb032e6c51636b79b90df3ad82586cd38a8062a01cc1b8825ccb37a1948b307beb02f0f12107980e9c3716e2bf9116f760031f8778d3a4d667989e5dc5e5ffc8f596685445c4db89992584b1ac1f8789761c2e239af2b6417df65dd13a3ff46cecc03d8647b0247d11765d2d562a621e4ba8f734e9d0a51ee758556027484e17e03a467561567db3109a7d483490d267146e7e27c2281f5b0b7a62a1935c7c33997ee05ea8f47d3d56b038ab20c9cb1b08a5b4b6e9f4ac401aa43a4c7b85ae0b9f0646faee631c247b24458af2356ef8747d3622a2ad78fa7fb1cc80286f82d821e8081bcd3cf2d02535e3e27c4206537d63a6e9f93bb74baad1146d3d740661878c29d55380c4468490aa62ecc2dfbd3e47f8de5055e0fdbece0badad723de52b696bb4c38d90f51f90338d318868455f6643f8d8fb47d0117e26ddf8618d09b4c591d1fe56398590c20c3b83f946d84a41324e7c4429713d3ff25114e1f766435033d3f68dc243e7c22a0d7b4a940054cc3e48ec04f677731fd10373ae2331623e6fbc692280ec5f610b7f172ddfb9388289c673bfa0c3708b5d022009c589a50932761e3e18a0b72bce18b20cbae918ee3a1acc3db9a08d991a5dcbda9a91137b33b59aab13dcc0f5f513dd5bc117a2edfc1c8fdddffba1069d138189f472a1befc049121c4a839a2e3b219d34ac63e8601335a28d33dafdf144f2a1b39e99563309eb631a19dbebc30cdca1a7267ff231df01d6ee61d40c9ed6aa198ec3416c516875b3e9e703ac1a269840f1253e55f1d1cf12e785fb38e9dd40766538a68ca0ffec287a6f6b3e5fcfc0f5e8ecb65575682732af2511d334919bded9bde9bbbcb411527eaa98e89515d05b0d06149134e6b45f0bc37a79cd153f7823a7949c1de709a6e4795d24c7f952c96f5eb8dfb8459d78d6755983aca1312ae326e4cbf701b37860b709b979c5264291a6f71c0627ce70d56ea9711e510a58ce24c4e832719ff1f7a7ce66164246c278051961c5716f1651639a58afd7864a01b18a57259f7546980e9f5f0db4e75be2f49204b27293d5a4f233bbe5bf09962ce0fbd1614e4486aafbd606c9b4a87256a6c0a37c159c65a807572d5041330ed475c215a0b770b294692dd4138e3822a886b3e198e2868fabccf017fcd8751e746f031573541ef4d5794a878a5c6efd753c39642a3c71a85d87474f9a94c3d67628800c03d4917087dfa060891688fca2ef7246d5c13ec03a20334cc78e2438f49b3d5803fdd03eee795565d62112c29d9deb7f94d5d72cedaebbcbaf2ebdf2e642028d67f2d80e01117ca75e0b8083b00e8bcc4d53266497fbe4ff2bf2920d45aab6812c34b05b132820bd2b4957688e36cf96cae416444ab12d7476a4dd2cd52acfe89f0ff98b18892424f2812d5fcdc3d7a2878d07ec013a9072509851bf5c0d3e48b504472203df7ecbdf266c97efdaa19095cb6860409d48c6ee0465021b3b34dfad8c6588643335e9bc18b68f64bbbbc560fcc597c33dfe1a706da9b421c06fdd4a7641f7533df3bb3ef0556830b9dfb438604412e15abded8dcea247af7b04ea0beb0b7d6a22d55fbc896d4bf850790fc46cb34f02faa61d5c1172b63fdb318334d0b90bcbcc102f508f8c874d7c8e3d20ef0922c41ac5f4874e0fa3ce0ea04e64ad3361aefbfe915c345ca7a84f27df2acc32fba6572f8b2189e0e8239ed528bb71d5ac3b0d72bd53fba9a51eae1e5514a8004ffb706b8abb4df62280d0062cefea035e24a52ea00fbe0714c61cedb4eb5c21c9d594b8b11aed03981f845061a0c6b7144081e03626335e4033aaf6cf816d58d8d71d32398be405906f853c06914f516991606a358700d803079d33bf09ad4de028612060e5a8eefd53d1abdf14fc201c8d7a2ec908db3b6c4b90000fccce28253e1b11c7b36bc307b1ba6aaec9167fa8ab2abe7251cbae13241bcdf33a223db95bbe626f73a5e004a061e372db0d2870254f19ac42a1809f09946eb3da3fc467e0101ddb7eef5510ed5c07958a47962d5e874982f9c179c5b00ab14848149e2c358dd163b85380e38074d54cce4f3f463dec880351a3bc407764c543253037b4ed82285f347a777e50fc813ac0c235e729d0fe8cf50fb7de252014aa9fdd38647b3daa89b8562e9ef98007109b20b0f01230543efe977f3a6f0ada03e34ae6cc112225333f601ed86f6470ba3c2b4795cfbbd46462fe28640189ab8e6aa9a516ca5318261c5dd1f039e7eb54f53495a1a4c5afae93d24200e18a216dae1e997bf3c602ad18ed43d91082318a582a6fb3e98607183fc9f86ccce2a5c0498d086483234a742a4154007b567a655aecab3574e8cd4e0bf4fa5e3040cdf0ddcb4740f508c27085f0159e404714658374c44dcb4faa545a0e67bf5ab3837ad4a7b6cd4d616b55285cb141237aee7d06eddf616057c22534e31e4ec391bd33acebe2de81cd8f98ca664357a059634258d69c51318ab417039c16ce5aa934aa6089b4fee8be59d3b3da37405e855fc31e17abbb78f897f56927ca4204566905411e5228d330348ce87b48faf5d6130c4e7801245752f15c5da788e97fe60ba4c62a67ce689f22e1b1c1f0aaad161c9c7f62835dd1a521ce28d789f8acb8616a3c946f9dbd200d30b9d987d1fea4bc877fa96dca2fca4bb3176ae3c1c92b492a236ea9b50ee487bedd4d233364e8e2823e710a9a34f5a37d189050679f935d24bd35ca165a0effa7e166e3de3644e33a22941149a09213e8e59f8f29be6e93931a2e61f9079aa844e436450aae38ac897eee6f29bec7772d2aa0f2ca1dc9c45815e2e936300687482ab5458d13730d0aef2ccff1b9e21872e078f78111de9022a98b0c6aa67739404aacd68e6bdbc18ff233f66c1799878564e62c84993e88c234367967917d72bef99d0cbc2a2ab1b4c149d825c40d4541cb551b1bded78f20da26680a36cc71c6c54b67116d0c68724265b3017c465b1ceb8de8edb42b1eafe645a0087e7846a29c511975a34b4f3a9813e962f85f685fa96b4441154add5341a955b52e2852ef4f7cc00a413ea88e9b82f06e8d6e79b957f0d06b1f441052273b184f9a76aae8467cf251e7e955fb014a79f9dcad87ae915cd19986bff771b84cd1df4a3cd910db942b42ec4ef48903787dead5b3a6ca43cbaa89fb26f6422fd357c5df8ad28ce4dc165d485a7435870adc8e3d95d51cc6af3d5a8cdb46c340ad933510a77d0ba1d96243c55c2ea8ab5912bfef6914272b40a10b90296ad90bbee6feaf66559d7883e5a23826d4ce75181fa4cbcee8350d13b04d71c34fb8bd5f8437f4500148fd2d73c5d28925ecaf434172b78672184b6e8e755e650da25be346d5c315d308fd238ad9c23baf8b2052a6a9e95bad1758593f39930c1ec2d193d8c576974cdc4a8db9b059844fb7f4df43747b76a813b758220f37e267e2f0d59aaed640f0eeeb92769e7b5494e02f50db547531f3673a6f75be412145c364a8f6812e1640d06ea45450dec432b06b58d633e1f9632fd6d23cce0c36eb617a2938faf0bc2af8e906f0c74ff85621d90c233aa9522a935c450e86d7b396215031eb4dcc5485108e03a8241aaca3e406dfaaf40536380f7cb18b30178895b3c2ab1cd96c608edda4ec144df138b7804d69c9cdcd009f20b5623eca1bbac7c89c3e84ec4968be4cb1e918ef80a789597da0b2af65a9f1173595a98289fe9bed45f2d231c5a448c0f94396aea7e9f3ad537e72c8b878fbe4fe7d6827e87f63b1df24f1098af41908ff3d48488faa4b14729eb35b2e15bf795f23d76fd5e5b864446b61827d28bfdb42ed1b46b15acd42945a5236238c9219d9caa62d048cefbd805b863da009049857beb94548c571390985d50117108d459e4ed807edd633c20898e578d358d5fcc19e45cf91c4d3bdea2e2ca2fdf4fffdb79de4deb9e7587666a61e19eae01c92beb5aabf38197293c9882806d563f4d1d75c5e6cf7c6ac351a5c28c44f7ae7861372b103d738e64cf94d3b70c537f16ac6feccf2677234a4f9d850b1f8b72f3ce05daaa4e15e92744364d4c3240f80481e890fd4c65cf525d2627f1c7baec4ea1fb553c63748231e23b071a33589db11d14667c21a5a3574ef43564a3a1fdc4746225e13d9426029e9fcd34106c6e4d18feb8e2d23937f3a71f085c6e5e9bb61e8446515bc7543b9fd13e9210f0ef26ba5f16014b5c0a59f3c9c7ded00059e0d3b9afa8ba70efa16fe1a493f3a6e6d50a62c1a5323dc447159635cb0d456a0120c29b5b734527d003858274d8dc6245c49551e5256a464344450ce4e245c63954e85a1cb3c12a3cb56760a3f97541bf593901904279a349da52a9ce62e4708f9ae950c8b1abf7b8b4b984ab1577147aec1e0c0ea9437b0c1ec62317936e1477cf1d67ec975843012f83a2c109a2de0d526724dd0b205d0f46d8b3f38fa2527bff4d12ced9cd794635103668a04f4458576c455426fd631c30a2216f8855c22ba110ea550f7ad7042ffc3c29d01a3bf75d6c5f4971282c53788da6674ccc504e455dbd50354551e016af46d4830a274eda904d26ad3500a9ce7d5d7967a69a567d180e8257d9901d01dc10b6e1c7a79ad24aadfbeba8c35186cc99e5618b945e18e2b8f5b150e81c0e65ebf54052f226d3b2b2f4df1a16d8b2c32ca57c1e89ed03da7670aaa594274eb3b0ec9a496c814e7b93e8827a70f31a9612f80c6c53ea5558ba00f7b85046ad237f192597a025125336fa7d3734d2892493799239355c6cc4881b16728638ce7bd1045154d9d1b69e2895120e6652f070032c0b37bba0a973cc0929c1e637cbd4aca05539b22d258c20a3c918970e7f07849d6e4777b279ee958d842aea1ae02dda7a439fd73c1c8b35973256a3f1c81ca7ba0f2195f66ee17d3f05ab20bef9c5ee414b16674697627ea4aefa52f6e69cad78bffea8cf7844fd2324ac716a6a5e3352e300cc92cab7e525fe391dca4cb927660ebcc1e6637a2f9775e0b0050aac788389213158a43dafc569e338ea66ac37c9e12117be7bdb2cb88ffc8897bdf4061423fd5cd43835d4fdddc731319043268816aeb66083efadea05028a867a234adda8b8b55875935bcba2ba75985afa63bb200fd51cb3c70719f57e7e1219c983b3dbed82ec82a26b1cfd90d1fbafbc48ada08c8918b4d98a8d8177092c3580eebe19e0e0499b6eb49325e0c8aeacbb709e5ef6c5373442a779d12b3cd5ddc660ac377b0af7b9d481d99e9f98dc9e4f51c5e9435bca1b4a95e895998c5a7155b1b466a882c037b0ec4a108a7371539a1538f5acc494de2bbd348d0513be4749eeb6be057cdee3597d9a326a7a49f96b11489588b86b10fba850a614e68643d984f85a015047b10f01aa0260e66430c21664970724bbd2575e76bec4270854b8bc12b0768fef5b4d7272bc99ae1beaf5d93da06747506fbea14186de96644dc0281f7e6754f5cb21004b85bd6c84c4c45ed0ca69e5e9920693ef0a14ec026a9010910fe2735215f533b39fc69c9270811dd8632486faa9c557a63b546d263a48c33f89c0d2af63fd7f84095cbbf245064a505b5060e341d9e802a0d2f207e506bcdb4b41b0bf1f6dd80934ae8108b30eca52867d8989504ad0a45c19325839eaa08b3833fdcf09f7047539a91fbafba0aad27af46c739d235ed0a6cb044cbda309c72bda153e5141bba7cd7647117ce0a6489ff7cc30c8f806dee9360b7dd8ba8fc8315869fbdd1fde09f3630aa02a728bf6c28efbd7b6e1418b3350e7a1508a142b9c73cc13da87d153d0df1f8a0535a2604e64d81ac20d1a05b7440ea57d8a0fc42bd3a5b52519cb29c6032f564bc3ab2a20c8d9b92aebd547f3dedb6e962640d7ea1b51ea7e29b308d3776f5cd824b5293deb2bc593be2b0ecc9eff6173528d1467a60171c4649416c112583c243154f3f869be2d101f60d1574a59e36464ddcebf2640520cdef9833a431d6ed800c095f720a8259d49e7bc80c7ae937e20168a8ff14f3032d9cd79338834e808dc662ef620cddd681c96829babd0e16885e7c7f462589c1d1c9cb66059729144f77114097ba25592eb87366ace1d9f2e2199cb81dddfb65b1648d21d0edd2c1edc751757ecd7b3bcca6a7ef7669cf40ee33202b53efae8dc97735e979c42b80d47e1ac57b7130ba7bf2633c5e75d32c1f2afe52128a5670bb604f3dc49e135be0a42f801c6dd8fce0b2897aea8f4a584e7bb81b3eacee9909f65a307549892a204a46c9a0df871ae7848830e066c7c463098b7b117c2a7125ab8ca87df52d98a033031ba59ac3e9d9f6f79f71fdf947d6a000429ebfb2973cba54eb02f9aa4d44a4d0efe86fffab8b126b60436422a0fe6994cbb2ba059a7cf89d2d5648dff3d8b59ea89b4a48790fb7871c6b8333fb8753bb879882bd3a02abfeee8f259e68939eaceb82e7a0f1a04b5f54c90e7c0487e4cd10a94fedfbed1305208060a2f8d59fee03ca32a1452f269a3f554149fa91d334c13a0a349769ed69ac8b6aa54add852baf2cb8221921e25e87795f856dbcad869686fc0b54ee5ccae11382d5566ddf09e622155a865ae5629618d7a718e371933863af82166701e9007cc1efe2ce3ef68c3da4245be1445fb1bd110ff9ba4a494fce8d1d606497b70bfbd7eef0fb9fb65885fbd5384e2018473ca4bd1b16403e70240e8c812c12fad342d6038077584612b2131efd6588e9257af7176b51f7891740b8e7714240f83ddc81a40ba9e8211255bb8e0bbc175eb0fa1b1cad8c9ad32d01fe2f8de612720e94bad9daf37b8af3529ba43482caf080b443f1b3b1ce2615607e123beef7fdc977c8eeb39c7361029176b3e8287df4ffa626e0d1123f44281710112bdc4adbb9c75e500c73abb9fca3e6fe6a94227d00c7b989bc2f9922f16fcf3334260fd31961a612c0c49e48cd8918894271929e0930808ba12c5fa8a9ae91f4a4b5822394879ddb298be7e5eecd806b1162422435f246e806bfb72467482a2ab070330d95aeef113b3d474ced47f7ba35bfb736ea8ebfae4948649b75eef1ec6bcf7a246510e7db0de9f45d28a4f1400f1f577690d3a3c3c98d307ca669db3f478af2854c03f1352dc2e0781571542070be71cd06b20350c741e7e7ae12742190047124695ec18b3cc71a19d1deb20f44812a510223bb90af2aa4168c04ade79264be69fdb156209bd8b9bee5fbde449bb09504cbb40610f7969769c11b2a24e0580fd02a664d2e54ca13f80190fd7a4a99123013ba449dda18d8ca537690e1c3b456c8d22fedd28383700f62aa6c97a710a36fb7a8afacbc36d52131119dee4298e805ea4f5f5667f5ad6f3b186b9701e7f3217954e3ae336cea33a532a000ec9d993641645b7b932fcd2a2d8caed91633a748fda5ede4349e40da6153f643c07aa9ffe8bfd03fc991821c505233ef0324a1993f222b811fe3137574d2ce83595d9e3db92559568ac7eba6da953b5cfb058367cc08612cf95fb38862585ff4ecdb7ac0951c676677cc2f5b7f3da726942c0f6e36c68a4a742f7d159533d731c250175b92d970db7023cd54fae94242644fdf85d48b5cf275f71ecbcf291504b900a72cb06bd34da64299b6c830f5295691f77b7b9dafb8b0acc0d72892c2ed6438e8e0bea50daaab58453e36a326d2438373942e53948dda9ba324094b4c0ca3674b12b1c7fc4a3d01ffde43520646fa70fa6c723180581d0775ec252d3ba19b4801d5d8171f7d24aee4801dd835f2a0371b038aca697873721e0a898aadd48d8ea3169c41151d8eab082acce5e562498ae0c6a12fa522f4ab9d09014ac9283fc8eb5cd05e61f1d589ef5a65998c998d13838fde3e6b9439ab3b6556ff4f85d28bbc414b39548e231c400f8280368abe105f3e0a261d68b4e09dd17341156f614a4bfe6be487d25fcc55ad0cf8c4cf6b8025995a9c6140b01c753aa61976b764f643525c3ea53f8ea81d35b13c0677b720df9f1bedf8f14bfab3578d3c0b0d1180523ad276267ecd81506e372cd0d362cbb1e3548c717d3d6969609e97ec49f7cc13c83dff607f93fd9e386df571c92fe73852c729dee4099bcf5b88cbc91a66bd50c592110fb4b753e1903fcc46ad75badb0f6468ac22ca3d1cd031d8cc532b7f876719b67795200eb9406f79abfedc023283fb313e94fbb8c1677da42a78d581e0072686ac2bfe959564e9e19bb94f2d8187166ea284dfbc780c69d4084a629688e66e1e4100c3d05797a5d65cef624496e5bb1606cdf47855f43e520fedc9e3d68a86dda193f34ca4af6048c9be6557f6142529364ff263e5398711cd4fc6d552325bcb0854850bf4c0cae445e33a1d9b33832ba39e4917ba3a0fce8c09874a68f9481c0a2ae66798ca36dd3a04f40eee2dbc49b8bcb5d744e4de84daf2d941a2535aacbb5fa56e26c17d612c90418786fc0dab688bb0c385049936dc053f61ebe7a279e80fa4b31adf046656e34da84dbd9de1a7a7a626663f56dbdb0e330af7990857555cc87d62d257a07b40469f9f487f1c8f70a1a721684ed5679937a007e36f6a81ce8f05923cae1bff707fa5f3a67b078249fb664a15a76eff7cb1d29be23e38b109d96775e461990a244926ce429b948170077b61e6e070c074d0ecee93d4e153bce4e0ce95a53022c12883932e40a02b67d9fdd5ab6c5a74d388db22042ca7c1315518cff86276d9e7f0c67c4d89dcd4f12e175ff7dc3f7391cd51a5276a0074fec54832cf3e18509469e4db7b291e892dfeceba7f520d730db7c01cc7340a2178629aa38b10023496eeadf234014cbd2afad7e8e5dfb25aca2a714ba79481a0b6c599299a95939373d8164b77d1298df0f56a8098d764c620534673f83973f4c69d5dba7dc9fd9f57915bcc05bec03502c53c6e834a271a122951e8ae90f67eece23e507c21b19f0fffd402d0ac9823689ae415de3fcbe586779f5e32adf177fc0bdcb845f3889d59226a0c3450531790ec3154c9b0ccab5c896b376b6705b665da51c214910d3471d133465a53881f34930f2c1c1798f037345567d984a0a4bf6d2abf7a2208ed1949774d39f36c240ebcfcdd1b6686b360f1ce436433caa521264b0f1f40ac4b07c6def5ebfd426fe710365e6e5529f8fda3d8e4e719e663bdd8e6d2ff0e5eb6662e297d27dd2be86d746fe494192a2fc5a241c16ef452c16018e16926cf0b324e3ec1619041728a8efe25f45518cd15540a6dae870dd94ba674fe997bdb5d68714c9e418d17c9f675a7e2d17aa18f4e1c43ec4573b2701812f473965e730939fdfcf1fcc7205bb34e0187d4e389aed554fa887131f506b64df53f41e6a9fa2a722e04b962d64a2afd0aaf4b1920756696b5c619ef8f5a0dc0c06a6b3b88aa995f0f96227e11993175aff2115a9fa262408cce59a98a9713cf0ab7e5d22aedeb43ca1d1052da8fbc49e27ca75395b576c6a3b50dbafd795530358a9a597102ab5d14c5d9b91b6bfc52565eeddd9c8d54f0b84d0697333b6e6665d6fc800a9c503ca335e0cc563d4e01a9a19a49395904804f519fad15180dc8587e09f2e014fac7108f3790c390b4ed9b7a3259a1eeba625dc3ea80d677d87310008bc5911b0bb1ca5fb81ce90916b52151cc8cccecbc907b9c951fd91b295141cd4e950bb6f51e0d67965e262e479a03ef36f0f7ec7919d7e48bf5b933dc1a262383e8fb88fc949d055d157a67ee0365964845a2ab696cbfc810622b2635c435622191fd189a5adc8b0fd9ada3e4bfa8afb5fa73ef0fd2ba8de76fae4b34e0dcc894c76d4d8c2d9617c308e02b57d1795fc821af3e88746caf6751899c178a55d5ea16048605bd3605193f316156d362329592435ec144ee916f30a55f95ddbfeed6a9240ea0a62e5ad92f33fbabdcbfa7f9fd0ee0d875baf7cd3001e6d8a38db31bf6db6536a8e69b6af2bc9e7407ac905327e875c70cb084450f3244813bb45e77b43a886dadb1204075880dfdd4ba76d943cfdc7db7a82b6bb2b6acaef1ace306ccf0f1f1eca14505c47a0bacf7489de6e339de362bdcde96bba1988d3fc1f7fb8e70bca068936964c5b16a570200e23a84d9f0e3753e6a1553a59e4666fdcff7acec3002f50895fc0139dda8f0836fb0bdc46116b80637d4d8f59a32783722be7cd60717395a39db1acbd96210675e01566d79ae273c58f7fc578edfbff2ee4ba8e3fc588ac28f3e9ba343e22c553f36cc45c90b306bb14ed772aa396c387063f397a33770565b4715c9651687ab9b3402f2de510be95ffbb5f820ad8e45a1545bd507914b4f377a7cb3e896dd55316ec1e3ec0a300b1e89521c959fee8bc2b31fa9640543ac54d208e221d14e864f2f751b2910ff7d0b5a662f21c1ccf5620e3e8056927e816c324dfa426ee89c312c6d381d94299e33d1e5c3b3838c83fc1c46665c3f75a6a0b3837618b1e53d48605627f598350c33477188b26b51d3a4f33377d6c802a3d65971c51904c7ee924a54b29987e0ff9b9cec587d29503523f8d21343ed658ea2cad76aea1202b94073ba4b77a221ec5958587f241430f6e1b43cb9e7e561c6dcbcda0673932bfd9c42c45e79345db88ef1ef90b5cab062df45d138d9a555f7d9bea677523142cc7209e261c286c30f4320eab14e765231fd7c10f0823aed1c1e51a009b7a6a55c696cc1d908a8256358305a3a73337fd8b5a83b55fda80ef1dfc6d569f3c715ff4b4e0c4e2dd8ff9955a47a3dc0e53c571b365f358fffb801404986380ecf70eca7eda7ea1ab539883c3e42885b07788d3c3a72079c26de94b33223a1355149bcce2cfb442aa3647961ecd44dea691484b6c3cceb3a3a6470d5150849d5fd4d5223a8f7193f09c7d3b311957632fdf9535c91ddcf6860ee7ff483275ea291620ac5aa4f51511899c6114a62f24b29a802a17869b2d259418f8830f0ad88099253357c31d54c19a5c007f43dc3718088e0d506ed5132497a77829f3102782d63ac684fddb62fcc909df7494911500e5ed9ba8402b96118c6577261f6f1454e9c8bba19fa60661776ffe54f1113a1c88460633f1390602475e71f2f0fe5f8f73704f445da799f4c921997e1026293a1f84b5153ac90dc35f14193219472fea32e3b221fe268deda603d54858d10d6c77321a4ffff58016268c457938a5257c703fa86ef85eb819c59f1a421111d51b3c1fdb1cf281ee20066df30686e1987ec0199d19064ef9699ee65192bfb4c1723e8d806556ec8a9897d46dd17ac267606e314a89a533301d0168ee4118435743752af37f659e05c3df8be681eb3b0f065d3fffa42894444239f6eb3a06b80bc410aa5ef99a60d376b254ddb9721e9518c4cda86dd3316e97ad88c1d90478eb94beffef11ca9eaad0b8cbac383cc94822bebdc09d25c1243112b6db89597f60f770c85a3437e881ba10ec309b7579f82f983cf1f1b3b33b746be6b709a81453c0245e93399f8a3144bc498452c780dd25ab6f33ba147a2216579a46dc222c23536e63b9a65449168eb308213764b0d8a895b23c05b5c53cb5c2e3c9c09e4beb8a8e210ea7178324b955afd03eb9602870a03161f25d3af91ae1dcbb9ea43481b6d3161c5d3a8e3d81a814fc0abd5586bb9939dc16320651cf4ec3c89eab2a8ce0deeae5ab62d9ebddf70a95425bf2838d2c4ad2b927f6cd6062abe24ae26e01d9cd064722c1578c641d99b87f7259cc07588d33273aeced622ad116a25c86ab1294d08a18b0ea0c6df4ed14bb70f0cd66331a0445d823376863fcda03cbd76a411f4ec8df297e285edb8000345c29f4f01aacc1c0e6e7aff94ba2e1fa962efe584b28c03fa2553cc0db93bfa793a0f61239d80127fa84d3cba6e1323a0986f98c21653244054ef53430745112344aff6b449fa124992a46e463921bce5c0c41d861b38426bf8a45356e70adccd88a0a27985b499e2213f94d16cd1ea0caf4448492bc720b83c6cbf1b4dbbafa47b1c1a7bfdc2a09c85e74c59e27385289eb5d523063c2dab3778ccd57aabdab8053c47fa8ac682d247750eac9abbf7dc85e0c46e4acdb13f6c7a32759570bfa20f0c24d7f663dc3a9474bbed44e10a347980295bf320839f430b38e6bd654bfaa22135d6d7b33ec8cbf2964305eb19104b8d42173a3ad3fae63e2450d37389f7a240772adc5672f367e94e54cfa64c954f90efa690b67d0e76da255600300377af327309d8e116397941c769bdb8db1760f988403ccdb7316bf633a4825cba47302c377bbbf0927ec9b70c217141d359f6e9cf46b497a9e5b5e7eba7b1ce0d020b2be22423b9d4988bdd618c7519ea9ad0fb44d9f3897a6dfd070de2c137f7f2cb1c38da7d23c21e98bbffc8dbef84202a91c98cd8499fa20ddafce53943d2e385d16c47aa7d9a63e53c04166588c8f3c608bc8cafc3fa133a9b5f83cb087d94e7735399042844393c0544f2ca122087eadd13ce39ffd5412cb31518955911dfada087138b0d8625229f814f191296350ce8f500ad6a6c2aecf89740fcb1f6b3bd80afca96d56d38749c2b37466573d51c0bdbcdf8ae74bbf8d266a0d99741ba40a913243f34a32134b7868a00ba5a555552911bf1da1114f8cee3dca2f3e536fad37c1391b2effdca78a54c398b3a812d59afd0b02331b54cecae2de0d78132859135f68b55d8a0d9cb2923aff34bbd6a034e13a515312aa3bcc8d2fe051ce873e5f38ef19cbfca8f219183e91811269206b95deb9cf7742aaaf3879436a4d679d9b0c62596b6f95f85f2357f21b1480fc82e18b9248049246a18af530850475abb31e17638512be5ac5cd52edce2d608a4f324773533c0015a30027e26cede52148a37f82f14fc67a893f3dfd67593921dae12ed667212d0651afab4669052eca45ec70da0981d5df39b5c8c131c2d0c46dfc18d88a3cb80a7c9753b569517ff17fa98cdc96611b76d016500e5a542a1906104ab0196aaff428e4828b9946745d137e79a12bc26d380410292b0eb2982535fdba6cafd97d3f0daa6fefa7f6a82a4e50cdf70566481921c070fe666b9d96d74573df0247b7b481044bcd3d9b63b28a89ceab4645ac3b9a4dd55c6055fd2f9a03c3a803d51f85c968e23ce932e79ed5b75e1a10a71fdf24c16f410d9b68ac5076e1c064f9a0e756a2ab50315c3fc62e894160195b7736cac33e5327e9a457e5d7ce50dde182e6f1df9be6026df81cb6032112b4e51768eca38d149bff1e1c02532e0c5c6cca80756d331c3c49973aa01e83dae56f11d590965033ad7a5dbcf9bcbfc6d512b830f9b325448f33079cac1f16d6def8448cbd40e3e11c972c4b46b7e7e12be4463d5e0b93405d54f7e0cb53389155fce069f3d1300a8d63a221c35f076ab488abe8ca6090b8ce04b0bee1c62f8e5e6843a35048d6052f16b7902abec40f43d8891409e3216518a6e371ee8f9b17246647d72c03084c7ecdc7ba2a689a49e889205faeea81465d5d9edfd4bb605d62db36cea66007301fd2987cafe9e0f18f3f40e7f202290526e023d07108bec2f2532bfd6a7838d16ce6123fd063be531625b135556b92dcbe8fb7c17bdc01122d8099e9cbb9358b403239be8feac8a2e3cce7507d39111daadd9d186775617010caa587a5f49eeca65cb626f0eca6f8e5adf8e90b1ce8702dc1026d590441ced52c623c876584d523f6d8af8215cb81ebfc29956922b818bf81a0c30f003dc8306c8e3afe7cf1712771635a1994fefa9c38b270a56acb7d7a63e6035a9ea82f2985a5af435a2257c9183cff82e4d5d07c5fa149d51029e2fd975190008b95c1b1b5164e58733f658e216499b78aae42dd1612cc9a6da77466e192693511975a59c2d0613f29b7c47ba2f013b4d4016d21b1d6855e6827c41ccd63eebbb80839f8d783ec27ff465e0e854c1d15ff3a8a53bd9508b1ef12a17826ef643b5e2b92230cc3eae71dbad255a1d33cd8a0ea97724c4411675e3d5f59f96e1fed6ef3b36545659b8e10c684ce19a52db5ef0fbea6497d8c9aab9c2b6b71dc8eff4c0dedd4becf081b5bf1fbadf4644622f8dd88fc144068e5039aa33ed0ea2d40ff03ea02eb27f6ed6e490a3750bfa7a7378d9438b9a31417fff71651ef21050e9ede4f32407339d76e5bb6561175b7cb17ecec7767393e5069e489e2ef41ae77f2f44e96acca0d4fa96b27ec70979002747ca56858b8adddaadbef255b25168219f2385966d384fcf4214fc34eb312c562ed56cfadb92192194939f8f749f912344840a3187afebea9d8fdf891aec05d5a6efc77888844a2602fa378cd2e3ceab2e511db1dbe42ce64b2a0c3f3988e66e3fe2b1f495b07f42ed5284449ef37169c89902474d67ee71653791db643f0802e1ab04746882af653895e79dfb95038fbf67c9dbaae44e6f514f361444a0f25f221e7e6449998e271079c021a78615c5c233b735e2e6d2e615ca47d436ad71c9320cd5be9bcfe3e4c0a601f874563abd5275e9f355bf6d22444b6713064244895ca7d09f12e95d230fc846d166714b89161366df650f0c57944fd9722d63efe25bafd4689e6e53413d6745f135e5c16eb89b8ed75c92c1f495463f3c467b218ae2d782d448f8e1c7bd7b82aef1b72cd83a6fc235f6e2373309514cc395e2475e17c0cb1072bc3b5080048efeb267cfcda3fb0b695679437c4f43cc86e962ade5ba69abfb7e3f2257bd9b177ada023844e86dab4c21cfa666d8784c831365ab7054b0907b848f3e6e059f04d68a5b0d4f0fa38bc928e92ada19fcdf7ac0aaf66a5550fc8d6440b997543007bfa6afe171b0afd54964efc9cf2933f169e556df936fa1db4fedf9db4d89a9a84ab4670ed23725929305de64dc38e4cbdf688de012056fec3b68b6d02220399c800d99f1552ee4f9f0b461fe36b75ad99015755f53e9bb26eef2e71d302efb57fa4784488648017592ebf370111fc9cbbf9a1f9b082ee2db263d5ff3d651db1aa6ae81871f4f501daf503c382c488e92185275eb83ba7235373a41c22e6c689f1f573d9945f9897b7b0ddc02623626938ce3f5f3d844d840fd454765ca1f25e1d45017636f23473fab9017ce9ef18dbdb01ea429f759b1ebcf5e51220c2ed1103aedde18073c0c984bcf07c59538abfc854550f05a2e5e84f042b4725a9accbe9a98409d29e3b400a359a127b5d638a0225239e460e2600e9c4dc1da8d5df54b999b090f8bc613ac89589b6e1745e015c2859b2ee15c00cae6e0145f6879bf7b04a60dcc7ab12b34776e53d42c8f2e2af0edfc9f3588b3b4bdf0c76dfa311cf02f3875797d990cfdb50d852649d97d67da9e0b7749dce83d56cbe4431ae2adc9fdb9b9cd7b780bb2539eb554aa6fc5790609c52f886c4753a7a9364d736428c2b3a851f3d097cdd1eb7a5f6016042e0854a6c4c2d8d9a868b49d5ee6e0ccd8df77240263f02151b2cfc01ed48d3d242f7876fb90e569c038e682a75d38d6c6b8418b2daa683eeba9b06a7603a7bdcc59acf6a600953749a94e82cd71efb41ec5d0f0695c3f8ef28de51f708df5cfb491ac76718ed7279850748b361ca0ec9aedc059f286520c95dca1d338297fa3cffb4aa014a8908e5b61089bcb90295e02a7296b249f7b3eaca33c1b044858ac72412c109464784cf9e38061ba59163195c37260a2b055f81b2c481c8598dd308febf1e308ee0544ecaffb32ba7b875a649d94fcd78305af6cd4cabb8351bcb94cf5cf2ffb7714b34ebea5533208150cfdb05d8e5a49a07289e989cfbb6541889d0f2aef6f7d721517f5de5e808f4bf7fbfc90aa485411d52d42626166616142d7b6f334f7f23fbf6966577eb36a10fee3453df97b810f6a23f9283d9d0a002178300e0dd5005b49f758796fc5f0b28325ec2cf625ac7e21e29129c11d907b690eedc31ff9d1e2a91d4f60f833c82eeb53dd9e0ee4e8e7b9e031b2d0ee9ad6d6d7e1fe0d00682cb010102675d18239eaa328a052673b464ec285cfa2c8beebf50f6a3225886194c8bf5d2ad4b684109ee4c40c99a72b121f66f76cc2d596eb3d5e10f09dfe5523e6d9dec898a68fc3a574a7b20104d5745938732e6ee03a6e17968d34bb74b24a2e159a172dfab1e5b33226d9d31fce282da1f4af90eec0fa173801e1ec706e72a44b06fa5e4d103d24c02d8ad65a7ef6edfce50d21bab6328cff971b3c230d16cacab62279c51ad1fa8bb24e24159ef0f8f07a151b0810f445e33e91e5ce680b1e7d495e26aac2d02888779b24fbfb6e568c988408dd838669556f9f5f7a9fa15683442c20dbfb438d4aed90edc82cf99f257c000ae88ca7f6a277375e3b4ef783084965e8d98b4bc725bcfb1bdf44501a5ab2eee396de6ad6af3b7ea0b048d8e13d62aff6bee93a018c1fff0ead09a4def1dfc9ea9352d2a3efde1b4e56466de77ca726c74cc4c796c7a36f16f3626ac94366f2fcab33aa0eab8ebcec01e7e30de1690752ec7646533b872367e027298ca77c64187188dfdaf8fc6ef37b3dc52b4b211d5335d0c02e0b7939fa8fd43e902e35a44ce88a067c48f0fb29e8bbd1c69273c02adbd8238437c06f0f57728a9de7ab2f25c84d012606b6a5a259873f1ed827aecaf7d1e1b327b39c046ed7dce2f494c331fadf6ea32f9eb3cbb2176e881a6a35f3353faf0a0a0bcea6e7d7a05b7a8e306ffa2ff4f0962e72fc58f12f391e93347f4f730a0980ec0d4aaf8d79e387ccfdc53d532081da0971ce2e131df7445c653d623b9db5bb3b9c059ffd451082d366e4206d20605190e7ea334d2ca4c1c78369eaed34302e4305223ac88da115cd7817b5fe61219b517a773d34ae9dc8fb7bc09dc49abac269ff099ec1c7761afaaddd42d105ad7a71d415118fbb4bc06ef11efaaa98c65e46de1726610de1c4fe9e450b0bed6795db946f224e5c010ad2ec1c019a4dca6bfb03f039975c68066b1f432a00402611cdfdfc370a76b764f65a326c8b01ac6a857baa53055f82235c507b4cdf7a4b47ff06a9ec3a726243d02d77ce824bc63bb284e97157da2f03c032a2214422763ad7910e73ee129f3b2a9ce1ddac2e3111e7f3b93713d59a4c7a8c2ddefd0454eed9458338b3fda8d32ae154e1e290de1af4833e02ebbe273eaa69748ae417f027bc72b31c2d68fd4fdef141f5c566d626171b9da60d980f0b1b56e575d294df25bf6bdc7d84ceca6294eb73f9d146ef74a3449b3752b64a03d17f1732b200bb9790a5b144b07f74277cfd2a561adf07eae2db66bf63bf4d95cebcbb99649cd77bb46dc3f0954d8e07b620595a777c29fd99d220668dbfcf60826547d60af9d7b0a0901f9937b20a864b8fe8b953199ce39e1398707e6f706f2c00fca44ae40a17b5f0ad54c529a1d27f33b312bcbfca348bff08afd668f6ec8747ef604fa569ac6a288fe7fc1156217fd0fdf4cd3aed255bb3edca44048967eac6c7bff716f85c24bb424393c54f35e1cea2aaedb21c14582688dad52180afbfacaf3b3afa3d03a6ae162baee2466140a99bc9d9d3fb6b282130c861c11b49b46d445f5b08fb0a593a5156f3f6fd62f9c41c695ca6575a31781806f5e56e787b9170703bab9f4a68feca9521891003dc0b90fa2f3b8fac12328a384554abc74999a04a32f0825b3f0404975fac82338828cdef17c30f828052119439c0c30cb5e0167185fc21086c04ca8249392046b4c38a0cac3864269852c669786f2745f69168f263cca21223965109443dcef21749d91934eacb17b07357dd7907c21e2d4c2c3a097de72f8dc5125fa5fd2dfeec94bf489302d38ecaa5f296408879f4ec96a8706425b8a80ed1b50e5235bc2d3ab1e7c62848da8dc003cbde008cd6312a5e9131073ae276cfda910bcf58a5d1fb8304a863c8ef648efc37146916bdd871f12d709f58da654bffe8b4768aa0807839824f65328e489509d57f72348ce9e564f95644776d3056120187190ce45c1d2b58bdbc6c09c0930918b3c11cbcaa18f211115469066466873f8ac9bc09e1628172fca877df5d4d7be5f19a3ef04b50ba51afc177dcabebaf37df3a804d05bb26408afeb77eb21cebf2708e32f5f45d4a81b8fcdeefa7eedb655a685198ce22c55a946fc9bc8bae950d7938168059930c0b14cdd6b35898e8f6b90fe0245373f6d062f578a4eee42145e3639501337278bd27842fcd3ec2f4640a3a040209079ed951da617429ab5549cf88b20ae2862f274905f350e039d2be05f365d170a6fbef5bf81e519db2bb18a02c248a3d0eb48ab5b7d8fd27842940c741a50c1d3e340c178f1eedddbe294db21b7cc3efc204c47189f6d5161a9af4d97371e24c924e2856109c5eae4a85c054161ae90bc7ddef2fba122bbfb13f32d4216c3b456f132549f9ce305ab6cbdae7633ec7cb9ad1b4e07f49a353fd624969b3452d5d3c280b21f49ff06e7f79743fdca36fd721c3c3a5d3873b4656bb2fe76f0b357017a461d260ca287dfff2bc4f663b8159ebaa8e5313aeb50127651f0ffa7f3e3bd3401b1fcfe49c3380e2cff4e9ce0c8430df838560e9a312b0f2306feffaffc4a815b0a809a15bc1cf1b1251aa64afb2cc30e3d50365b58ff0eef2e924b65a389ee6886843f60be23d1c5b399b5c7a01e2d2b39e8a576ff7900ff6e52d69cb1fdd75bbcea84ee11019592c08fd096b0f061e64ba2be00e7a7c97ac34f04fe22d13b1de7721dc3c4f9b109688ed63e68a712cc58787b1210ab6904b84e81955a1165357b0896077e3da65dc5c26fe49c0fe76e7ae8c506087b7f0ea308e170a13f7fd39b34586c358406044ce45c17a974a134eff1c7327dcc517e865b112768deab10c405bed2be1ea8d47b8b5170818965a91779396a88fd6e7d18b21062896230cff6b645ef6bc7a500a6e4f4aa26535a67ab20366f244d0caeae0cb41eeb8b0be16f0b7704077c6938ac1c6c85f7aeece54b38ed4cdc53c68e7c28df74f9900838b717dbf8ce6d188bce809908c99331aae43fa5171b7c4fabb8ca3bb02a860e1295fcac0205b9e9c5172d6a417ee36a9d6fa2bb3cb4e17824a26816f9f8ddca9a07d61269ed54492dc21837a5cb503ff0ab93a6d42cf99d9de51defa208d699b975706630a6b29a7f3a8c9e0df8c3e24feb405ee3fe9974a04a8a8e48019669c78ba3bf2b10df999138f458bfffffbfece18bf6b5d942b8b1e745f7e35d963c4d83f1ef8e60afb2f914b4fb6434cb8826cceb4589460c03554fd5da77e28d61e439031c0e1db5a4100ebdf9c93acfb9216c33bc808199e39e86de76d6056b5cb62c8b16b9a834c362916cee28820f643696a0a6c20632a97246496630e59d2f38f8d09d089ed4615856f10d9832e7725930b1c36fc4522db72b9c3694ccb00e83ab0591945699f235228cb79454061df893a3f38c894f0aab5245af87d45cf3510bb3bb367170554ae826385e9190b47c89dd6ba38a2479ebe83ab593752da5a9f058d3cab21a92c8af6b389da0ddfe33e45d2e0b93d50d38e198ce46adffb14586884794ba773d06765f432e08c07633dc26e34f6e773f6e29a0c5d0eb53854e7b07bc8291a4c68a827e472bc1f37294c6fb8d71122698a10ff87a0d5ac98c6107fde9a048fd6d3b2ba261007a45ddd8e61b238156fc915dc9aa4c59df9e4c9fc9f7c59b35cdef2d3f570a5caccf259d92be0e68d1b6c0393ec7a7cbb9c0de7d7f06d09756589553ba85c7145b54731073dca1613470129debe229dc67b0b431419840daca28a0dd85c2bb1c545fe4ec9524bf63920be46e95cf9ec84c20d025cdca620cb0939961d38b8dbab1d2b8558b704061e745430b8127f25b79abc8df2f0bad113db3bde6969fd79292cd33c37189ca4e708f142eb6fb9b7a8d423f501e97d8733cbfa6494ab7869bd63657ad86b3dd2fae0214a23ca87f111c899d92551d9f675e5102ea54441542cb73b120e144d779e02bc0f809ff4aadb71d74f001bdcee6472f83a8f5b49e389109ee401f54ee54b21febbeb5378aa8df96d7af170d217ffd3b4586bbb4351e4ce0a3847bef19f1814e60cd42063f31f672f916c0dd2f60022e02ba4aded1a9be3399d84a838b30713554a7dad34600eceee2f9565894086730e5e0ef0a3ada009ae5c27466a14938e12a0e0733fd02293a12eeee7f6d3448635e1559662ef5af4c204049a28f08a47e274757964cd799898c1286ddba1951fce684e978e17072afe299e4bc11a31fe223ff69bb1fcad62efc01d2631d2acf3954bd6eb666bd9946f60815ba6642ac8927b816178467f612266f797b92334556abdf56fc4eacb0503a664b23ed47451aad4fde2b6b43d5f6aa5d4dcf71b3ddc44b3be647035ee28063debfd445bcb412e839b7df323c24f90b050780693faae76cf142f461822e39ea6665d73e484f3ba08c24ad6a3735c7eda374ab9ad8a97a88b2ccb378980fd417b162b8d1061e44e01b9e71326efc9c7fd706840dfa19653f123be3b39fa9506ac38903b407b81d004d578825a410aef3d0b6dc5ee2aeeaa330aece64a661a19dcb8b14a9e72eed74657fd1cb2b9350ac65936a546a21cb75b30057f7b37416e10e3443603b66f305c6ff548e4abd8bc19f63030e96f7c70ab71715ffb6ec25dad3b65be335651ae565324d165e7507be93e25812602a74b785c039fb054c5fbafa6c6bbe77da8e84232f89d1e9b7ea24f4217a8426ec6ad1831c4bce8560fb5899ee355128f46e89ca3ddd9b0f84d0b2a74d235fabc2ddd1673f8e0e04be9e6dbf00667839fa75ad15747f59fe02e6ee934d565dee5148fd2314967b966d027bd1c1accb506c342b66f0ce2d419f9c6221e284f7e9e4d3b231fabd7bdc2d9d9406161192232cd17678510c94c8c0b9a4d7fd891720250034714024054bf57e2680f4f6ae782a755dac071586ab10845b04984618721d624ab5618e6732435aeae9f98aa9a9871fdf713b0ad6665ec75b1d49df466d5cb2fb473390bb1067e69d13ada8afb16d3e6b47aa03f2af1fb6b56f08ca92afbb3c4d5601a62e9479fb7fce7c07e001b86c2f0c775fb84ecf5e6cf60fdccf0b5504749c4fbd1ce34123fac76c4d67489525665e72cd4e037415f1162baed08b0ddc9c56ec872a322b7bc21e8cd401ec6692bd658f7b08a6337a77c1caea375e6fe2497015a82210f3c138b28f12bc052c1d73c74f7eb34334f4c49bf2149012e0da062617499fd5b780d6f4508c0d1e1c4f3698f22890893f544a2744dee4f8338c2536602e37e5f0bc12b41405a72eec8b0d87342f05d4984565beb10171a70618db26341bddfbb678666988c66d69d7e4cd5221475b90ffde582748de658eb68d74b53e166d4a01746633b8947e8e0bec3841ef667de8087c0d9ef3d4971e71dc746c85f159c2474d575276e7263c66e65ec12d831b90e64a3006446b86208008957396c7192cecf8e8b297f27b5611ba0dba6bac9de729b964b3f35a332573ee788ceb16ecb2902c5df6432389a7c467591f5517861727234f47c8e641d35f9061b3935fb56bd7c20e794280dd35609431c3c31fa659da0454a8427750fc838b70bfd532211b90caf6638331b900b1a1dea0e4a7ab893b936d9f3baa868fe253a10fb0d2bcac5d397e3e7ef63fd9e630ff63443de72f8d8eb4508cc39737b43bb2ddd20e54825025055f04a101ba047513e9c785db8230ae8e0211fbbfb46bd2da981e33e857e5698d6cfb96b7955ce5ce75ae963902c6856cd67a29177b37e03a165b52af02eb2f3a5d6d5d42c297121c7066abda8fd8ab6e58cc6283cee421d6cb93a7fa8fdb500971d30d5cfed7ff4811f760e27344d452f9f34983576748987b902ff58676350447db3d8dd042195b8c3bcdca8cb9723f806112473460e977251ce255a3eaca5ab1036922d0eee35ad4b43c1e0bc92b7d4f7cb747df5e0001414a2eef00aac11a5f3aea08ebec09dae98df0f5019d3fd18ed9db02c0b23ff45e241dae45dd2d728fdaa9f052e20d43d82abf9888039399d60888e98c58e3e4eead13408c643894ac6990dc4183de531ccf41a4e85f253ed9622e6fadc459c77230d450f8fa7b2411ae19387ebe867519cdced62fa60c2a245edb717e52a6903ae59f9256797bf4314c020addf3615418b7d2749c10832fff7b9459e7f28a3e1d2fe7b846deebb6916a08b4ee18fa5540cf29d64ee2c377bf0800451d8bbadd9fdfb7587632d743e35721f5767c762f74979c10d00a5c7ce77768a507169ff2331fb3cfee9fddee105d92a4b4427bae1fbfca27833aa42918abf18ff05bf9a651e2fd60e22669d0b72143a2f2e951bd1ec52c4806b3069b592f6543fd69ea11c92a1bfedaa5e813cc766c3c4d1e235392a9134ced4e212de0a884b8901712046a0f612d1ac614df1d7f6c72e486565cef8c8e76893f6bf0cff61596a74a41bf96c784b4da3372b7ee361b6d31e7670a220d83226a9fcbe2ed61ef4811a2ea374f91903d3f3379a917917b95fdfac83f8d1c0e65949d063c8c2216ad6ddf6d41e73df99d10ad21ac909a5dce122f6629c3ecc151f3a0b943463139490024f94df427f4d5578d9b712321365705528564630db15bebcc9115bc8d1dcdcd94c937bb4112614f116693565beffb4bf59374e1c5ffc7902455e3a6d66018f3b553828c81b25762bedea640631559ccbbcb251df45e4e14cb62a2e927b7734508546be8f8aa88cbc505f5cca1c56459f25d33759be6d01a06b0757d1b10f96ad51079ed3ad47be237c81c2179d7eee64c169583594a3d6d3cd970ff41e6ae86d80fa4def5ff2cd5d6018d2d03bb409a2407b40e37264a67fcc91bfb8c28e34cbfcbecc8702a33b87fd67c6da122f949847aa9416a0e232d3bd8a2f3f523db34ad6c29a759083cd482e0f06db9f321372446c56a8ed5b410c8e976ad99b902daae9bcf56c26b3bd5a6506515fdecc8fee45679043712777448a0481d402402dd569cfdc95bf570f18cc600fb74a310d96822532b25bf7dfee552f5746e795f5cfe22cbaf1fb4181eb182c549580e7b226aade8d23a5e3e1814978a0f56f15b6fb7f14ab3b6dd1176a55f50480e5f7483ce79cccd82d0f8e7e46a69dd159f73787c0b54a182a8e192e9cfb080109a8ed548dea52c9a561d2e8c7823f7cd06e3658f42b82466f6c9fe79d0ca512238bd3c469678af3900139dfb60fa02242a6ce341d5ca10048c5ae1325043e0170ad6d148fdc71b2272be2ef486f0f2c6c6184732ceb57c5fe54ae5b635413f5f28241ffd2eafc8627ee076bd484d5a7f55975042db5a8656b86ca2e763d045f994355ada069d2bd9aed786525476adb7a0dfb2d0413421659330315f41d9fb1081c5163941a8f2ea32413ad7505deaa601c0837fb89bf953ad9a439b24edb66d0d06c22e1d6c0b9279419c9c7d09e493881354bc70c3ba123ba0bb4d28fcdc770862d0e7a620649923a8f90dfbaf9e120f0920c4a2cfec001c2a4023a97a6812750f44fcab7175d3393b012f07c4039b775346f04c6e3e0160ea41d8ae62188800a462ff6332496f7c76e5a813ddf3bd3c7e5a8c36f5fac7a239fc7cea2758e6091927c01d3e2fa5c7151356ecb508ef0dc37d973f783dc3df0771c0a85352dc7d2ea70d066977401a9a81d2abd460e51ab125c60eef9daef4c18e54b5a39035a98cbd87679719ad8fa944a25c9676aaee2dcc1d3f324b939a440b5bdad72cfefdd0d957295d7b71a5d3facb9dd0e06498fcc5e864f010d580b4026284fd34c17b4839df690a10fcfad7cfbc7c46528a91c37f3bcd8186976eaab3c016af6aaff201037c4c68f9568449d1935e924782d02c327ac0fc00c176236bc2131ead6be5993291cd48ad608c50ee8cdb82ccb75c4ae5fe5016a59be9a27fdc738c3cf71c25d13df9d391434cfb16bdc53a12875967c2787c33157ed17a130c61bfc1fb0e58ac9a4daa31b74a5716db5653cc60f976a2c7dc4882b939a182a11dd48a9086614f10f1d5f2d45a2f443b18d65fffc703abeb68d0069daf87af811f98d599ebe4d81b4bf779da8f265594ca420cce94411aea2c3551dc5e40e7e67f9f1263c8343e2cbd22d3fdc2f9dd3b562947ec739e1baed692c3472a6fe0a0c891dc9309f0ef36c8d1ae8348f5e4454fecbfe4f9653d2853c65f59d4d11d2afdaf81f0c46ed52b78a4453e2ed77ec44f0a080382c8fccc46cd06004c8bd6dfef30bbd6f476c5c23896ae294ebf18bf4c551db258bf30a8f35775c1eb81abf8cb9b05a7524d44ebf336b12f803c28b03b1741a79f3b0a9e6bd5b8a624cd05fed76fdf2bb47f3fc21e8f1d7f57ac7e9c820a3cd258676e92042de43eb3b6068c86091c5469ff88bc4a6af1d24c9a9537c9afaed1066062bf5cdc2e464b3ddfc3cedf85e195d5ea22bae8ad7dfc1c7f848db8ebb14ccd15d6f19d98a27ffe2bcff4dc614270c32527d99bbb4f0f12f3c4f9454ebac026ce53b2756f19ababe397d5a341e3f6fb93f71a612e6c30de4a9d72e933b06cc2bc3b021e3c99ae830a3fd556076fafdeec4ae64b6024370f88eccac58bb2461ad3ce7c110c1806490e4e03c82745df2040a70c88afa82d87a00cce1cd588b54d0cc7c5a8912be83f3045ce9dc5fdb0fbd9b8488ad7c9f67f23ceed7bf26da7f1a76cb37676335434bc93fc2569a88bcdd640b2be057abba7cf3c1dd3b2f5eb0e6bd91db7e9896f5cb2e7e235ef615dfe2b4ff71de03cb8d033d2b94da2f7d724c83932e5f79c5f55a95e5e51cc7503eb88305a3b8d32c32653f89a38d2085d416411ca76361c785e5d9b581160f3ef32c290aa619556553dd214f87a1f657b630b6b6d9fbe87787bfad4c13d70644b6a280eadaa98ab9894c933702c2aab30cb97c1f6fd9b50c0c608c52bfa936579e2babe7fdb29c3ceeb80899a7b358e07362dd242af9f847c7f8cf3aac0c94b75baa0e6be80b64c79d63455839597100101cf29b9bc2b859439091384dd63eb11f11843444d9c6cce2a786d8dea4c1457585682446f87bc68ff614eb89e09468fe5a21284ca802ea20e43eb0cf2fa9236abdd755c75c1f6a8721809053dc7d93a207832683a550d44c041472963f1467817dd87b9ec25e68bf532b6fd5bc8396e5b516c70b0783ed44f685a29253324e6496994510d5e55d3c471c37772c6f48851465fcf973a35a7b49f7a59eb1d5ae271b11e273c438132926c5389199638bbed73f0d4b1deecced2fe601c355112efc38e4ad7efb3f05e758da5ad09e591f84f9e5f13aa5146894e72b85fc1ec8e24765105289efabc418c4bcc24540587b797573e76dd61f6a9730098643bbe577cd7e0e37ffadc7abb571057e4ffc708837c5379a32b999e0b959f05c93985d2932a0ab247c08ee91f6a666c78f4757c6849b03bcf91a4d207ac528ec209b38f4024549afbb5719c4dde47b1228b83d3f2666b3c6a5fb3477df1a4fbe0e8781825132ec433346c74fc96ae30a920d0cf6f8289e3aecf8438e6984a381572b7e38313cb58ce5f5cf211e4bc836a584db457b1b847c7a2038cec92076c83ad373c1c064fa79a58276e598b71c9c3cd7e35a163432251f40903e0eb0510556f728c3a96cb07fa862ecd069c9a30bcf5443bd2c327f71e9f8e7712788d7d4902036532cacf6925650bc09e0cfdf6931f3da7fc0f6bd298bcf42fc4ad66709b569e96831153306f72d3f7c29d42c429bc1d956370b4ba3d24878a196d93e0fd4c42436d717d8918ea1974ab350f2a44cc1d5511bcd0460b43c9147d6c7c6e7e121325575c7c0a83059b42c9abbcb307218d92008073b47750d235eb1260153a630d51566dc79fe3692ba1e1f3abdd4062e747f4914f0ea50ecbe340e0aa4d1c511a09c94b3f3e4204232ab83d618637266a958ee4c6d62a246c429d921a888b81e4a09ef08925dc42854367a20ab916ace6fb30aea8cc9faa0a4df022563c78092195d5fdcf7fa29578ecf976f9bd354b5181a8f149869d91d42a4b2342008d532e447c4ff412d93abe87b080f184941377aa0abd13ae90f3bb84f01ca81a52246a95db9be311767ad9da8b2392bd80a512b48c3bb6df99ae9aa4513d80dd4305545576887df358d1fcc5387a52978a8365c84e4dcef3cc6541e5d741040632ee0cf8aadc1a8ce050d9dcdb8147c7f02d43b68110db2598ab4e8acd54e299416eb607be6edf13d45f262c020604a9f679d9cf934baa3d6a432909be7a244187902c054b8a7d7abcc3db30b8d34cb7df3ff08bc001451825e50ff6939f7094f7c9b91e057a0612fe50c9d25839e1f98ca9b1b87d85ea54f457a8ff9f68801df0d5d32edcc574547fa932c328735770541c221fc475051383a6af6e2d8fc8b6304b0628955118baa2c8b00f0f4a0f315fded565485d379df03df8826e9504077b77a5264dbfaf3b6a4682f3bff3c7eafea1230121a7fdedf4ac65d76f13491709e7d7331f7deb0e8eeec782bc02c18558c9249f68494048813ea265229669d2d4bab70d874ef595dafb661f644a46a1ffd563b0fdf26c0ee863cd014b7b64c3db533f8ad466ba7e5c0ba09867a18f30470fd4ed04c472fd92806f1a576e9b630364e31624d5df49e121e7f60d2b1bafb26e2f0c0b7fe6683368897face735c784521c46633f02661d41b7a61d360e1b804d30da4ff2497cc9565d45ed42d40249112f2399d4bc0fb566dd9a3db342c48815e77084b0cd73a22f4bb44212c546854ec36bc832487ee4207fc3187baf06dbdb2d1e06668dcdcdeede81f8928963ea811b45bc62a404e5ec5b16e15a1874b73857efc5ec97a1c9b8bb285427efd822491284ade45e869d8e6c3cd17fd922719b6d53ac203e15e08ab4e7290f86bc033aecf958eb3929372e372b1e2b17a945fa344a889c51d6a17eaff245b2d448ae89c5e8101de23261accf17240fdb3d37687f131070ebdc4228db6701548c907620bf3bf7be41db295e37f6a2bf358bb53c11a333db6ed54989b5141401ee61b1bedf829fcfb66f19ee284610c7485f4cf0b640c4675fa4d7c9849300a07aa9458b8ac7f3436a500fcac44a5dce28dbbdf5baa17687267b82c66103d94a42f2e6632d4ca76aa714228c10697bbb06d4d34bb9adf22e861b52c35211a81c1a3dd7eb44393c147a562c8fab54a7adee90e8e66283576f202e73b1e404862b2c8d04d50ebf674d10203de4927968b25038150018f77d0d9e25be640dfd041cc2b2f1557a5ad4ca948b929cfc77664db687c9332684b741c0bc01693dc0ca78cd6c17a8a8a0c77c6def184afdbf6d37833bdd3e8e74f2b329ed8dbd59e50969f463c72d8ee87fca29be641357755e751277f4181fbb3a578c5a382e8e25bcbfa4742722676f8b8168445d564b83a6d563b5c3ed8db5cfd7ca76b9848866efbcd508b9bda4592d757b4247320eef7a0acc0d7574c88fdf47b15ae4139155c8595554eeaef0954b8c6ab14537e3b395e0dd1fcdf81ec8a9ed01f3af01bd025b75fe3474c6a68d4d1ecbcb8c2aaedfcdea9644d9317d31178aaf597882f08e02bdcabb87336b7c7889f96abbd0f2c93a5e03f8bf32e27766ff396fc3996bbefccebaa7415aa59e920b719beeca6a0756ad85295cd1cf5b9fc381fd9b38819c7703e8bdd79f2718ab0e2ef4b947cbea413a3085f5e49be5b530017b273878d5db1083f6903542451cfbf0d813a458bb854a9494c004585bf49332b44efdb64eead5aec5aafe6601683645bfad27f39db669ad7e16a0c6b6ec551bbd0f340aa74ddbcf0e587336ebc54b1a559fee47a4c0c6c146ceb43659a84d59f3511aaa623647cdd773c7cbdeb2649678d15a21061295be00f7bbac0ba142923a7b53c4b99bd184a6bc5f91696711a93c770201cb77b77f92640d2f4924b663ce010f124a807e7abfdce5cf754b3327b1992e18771205d72e25b98356e36d27a3bb216fec5e7e53b09ee18755d48bbecef1093d40928ecc5fe2cd2536e6c3689b0f92eb1c0738f9e33c2a76487ca6ef6ae89f228b39eefea955309b616d45170e2a51a20f731214043ff252fefd0e4580576f5b8943d14a4eb124616b8036a9d78db0beab0c1240a4fa8a03f5d29e464ec41f7b6b4b6bee0473937f8cf641d3c72141e365888c268ced5c6d3dce906756186d01efa0bce129dc90a068c575ca5b1ff406fd2bdebb80cb51118702fdf4a4bd6d75f5fa7ecfc4cb53e83c4d9f0f5428aa41a7b256640945ff3abdd9fbfd5043614256d1da599d47ce9d0ca7cdeda073fcb7bfbe60ad90e8ec13ff0f1ab6406747e1d5056ebeb1a9aff8e180d25b1c511b7e186fdf7d17c17d80818e2eeb06c81288518ab170203a1753c0f7a136c3bc6f4d523839aa0a9c768ba39ee877dd50d3db6e5c61cfa3f7fdc1d04e3f07902ed87295e2df93f5311087968555dc53866543e5b0b8572480e9ec7de45590fc470ccd670fb727994802b78ea14f303e080387e29546370c1ba0a03ec92d879284d75ab1662d05418b314eadf4d00194831945bc11203aec94926abdd689874f3e23b3ca80a14dc166be52c40c862805bceab87cfca68e2f91463419946f67434b4694680147765c9abd932972dc1d658da1d118dbafb9627ec9db93ce69b806e1bcfa577a21f1e80d338fbbc351d9ec14d88be286fa633d5af1730cd457d8a8efe1aaeec48612f90667f6df0c3fe11e9fefb4cdca2d257f3dd12269068953ee9d1d67126aa766d5d81ea504a58187c61f100904bae19488aa38acf3245776353d8ca89b3a5e5619bc79f1d529c65e00da84191a2d93c77077c5d16c51fb98810b76d766fa5fb97b7ef02dc686e9d76e4f90df16d81c888fa663be3e08e98504d6ca7fd2556257885d70c29582a8fe9c5d623bb3d59941c94e4910b7a6a0b08cfeeda3f2b9931a6a68c4b428f3d5b5ef2e861152bbc41c210756a2709f9e4294c98ae245e60b0f8c4712ecbce2556738c165cbf5a84b1ded2e4d9dea717fb8da885b3600446ac8d61ea9fb437b72f116d70a58aa4b34e74a130c06db2208878adb7f7a1bceff8dba0b7db0006ac5e97dca1d04f18f4e7ba85273cf835a0f895378a22a303d5f2dbfe67c52d44a66a5cea95be48183bc443a21b0ed91f0541c09d35c31ff912940db7ede6055731b1572590d12bbf5b0865b202447c9f2c17779de8825df6be91ece843884ef05c53e9f5d82f445e80d6c42e9a939260bef1cc66144eb754d9d92b88938c4a5511f50b16bcef59269080def590a0a630daaed0c7848445afead95eed624edd613ed68711e6abdc1de49242bc7784905ae7ac3916a2f3f39a18cdc7f766a227c0d39c76626b9a51d3fa9fa5b9ddcf44afc7b5535539b9ed99ee483690eb4a8f913257d9324b4f90e6f155ba90aa7ec5c4d25dc8ef08db7b854dfb43788971a62b9bf75206034128a23da8d36c5354fe2e31f4ed1d219c6cd0b604b2245c61facb0e0a1c3fb90a1880f82ffa3de70b302d2d7be27eff83f501c2e11b33aa3ddc24955228f062e6b50a737414f4ceb718bf6155b664b734af8707c5983655bd4a0c5807edea9813f15ad55ec97c6aed7f9cea2aaa7cebbd92f08a8b670da540dc8a77fd21fccc34075cf051cff132cb1e648fd0feec340dc260dd951da56eca21fd0abf86d0cce4f0ced39bedd42555ff36637c3ec4522793c769aff5bb4bc5d9b001bec55cd2084de8bdcc7d81d9f45bb946551c8f54a996ba85b7147287e4dd086e2ac2b5e8b01c3029d7813d2514b7dbe2a0db021f09e5b8429e77e98a6c47367e102cc5aa5014d6b0a9b300294b1062929cc1224125df1fcfb5d62128cb35fade4b88bc8deea11c7df40a59c4b10631b54ec86e82a853724b1f0913addc28f7049dc2f8b136600a5d2e7f6be6eb834e82d0f10e2b63c48ba5004c629d16bb58fce2654e638d8468746969bb0caff9ee6c5b9b7723c086b3638bc931ab24fc763fbcfd17382a25c1c6c4327bd9a4cd2ae408ec2d40d025878bbba4cb04492c570c426cdff997625cf363b8cac1354fd8e585b0fa3fcd4033d7805dd50c7d31dc595a0df07303b3c23497c1475897d665b4fd88dca5d0ab822c223d2eca2de94366a3dbe66ada3c87d2e2494f8b1ca396f10f0d342ea6f4e8ca130057ae916d8f3b048835f3cb290437ad1554314724c6efc0d61f95ed1993a6917ad415118924c92ac3765d2c2802f6d5f9b6eccb2f0e827e37a401e9983e3ea540bb89f7877d9789e84b709a773ab64abc614704b3fb1409634539338b2ab50a1aee4c1bbfeb6915e9dd4aa694ad1f90192722378cb4f6fb5d81d99f2e432049a087f9723ce79d7f369c820024079dd9ef7a588ef1ceec9e7324b0ef39c106eda1edeb739a4400b103e8a9969e5c96ea51d6b2c913537987ef0e35a741258e24d9abc83ffc4653c551eb352919b025a682291191d95ce723d5ebc2dedda8242a3d7498a7b5d785e2262e28fe689589192d6fad2c03d2b575715b2fd3d8a4427f5646ca8dd07a8d41b1b8ff6e6523d9c858b5aeec38afdc27b267ef1c096d4dcd824c82738b47042d0227640a379d6e2ec59d635fccd76034b808289e4c02adc260eab1231db385ec9fbe709bfbdec696f81579b7207fc53aa750cb4e86d37922c3b7596e5b8149473e79920640a9f67916c8fe55d4da1b67a67901e5c521d48e1574fb5c011a4c746a045473abf1c0b3ae1de1938908b026a529afe71be5ef1b58d439e02626c0932cb15ebe15b0af2d242f118d95f6d7f900bea0f4654fb46fdb8813781377fdc7e133f07fa3791f7325b26982c244c020eaa7a659a36f24f7b4324fb0c161818d57bcf77acb61bff0e18d1777cefe72fcc85792bbc20aab1c05b28db7b443761a60a725121efe0879cbf053f632ba05075ed5177b678c0556649540dcd5a358bcc796c9502f8dfd9310381f3a30ffa1b69a520918c0132cfb975fbe2d0f6d5ab5f1e8a91e7d492049e888c5fe79b30c3843fd2fdf804c070fa535724704e0e8c84cee2dbdadf594bffd12a1e161d79965cef35a41f2fa5eba768f8f9f8b6918c755aefafa11823cb71e4af0b91dca9d88d13faa58ae38d179b275c5ddc0470fb0c0b2698d019453513e1f93801fd33707ad864381b09638db4df486fba8bbea7d67376fb64bfc0ae09cc99e75242fbb9f7355d1520e1d7227ad381b98f4d67df4c7ad0764be41f80872e3cd85f54be8e1626df2157e2b4b87844b0c0b8ad5931c83dc400ee96c8b4e1747c125f2354fb0f476e2eedf643168949eb8c7061ad5b95e690c4d89c59759609221555f9751b3d5a8e9a805f33f3ff1dbfc34df40ae058342613fd17513f5d5fe4199029a352b112e3367ec7eadbb11d47708b6ff2389a1e8ddf2e72e26f931dee22c0cc599cd0c6f33393b16434daa645f113fe42a97fd644f64b43b97be1505e15ad99d64d8f4f83b3956b26cd210ae3edc2e94795f2a2c41feb7e7b4de44684ae8d7e1905e9ff2075c0a221a433eed33dfdb907ba1322d142cc1083633cd72defa93bb7fe95d236ee41b0d6dd0e708df42103b048b7fd7bd8b89217468f41c21c455ed5ed33b2dc98327eaaeb71b3a0737449f40827e945ce8b703094815a91db733a8627b20ce7fb805e3ca7c7d4e2e5ea8c6945bae083102f1a7aa059bd9f12c80a84f4e6660f8013ed2797f5463520497f86d6c17a13fce5ddfe78ebdad061f5f166a3addd1f4816db8f081edb5d1b1bb2b2f02ad936e96e60e920e955ea8484d43167033ab3bd3cd3e4a04d6f15c51d6dac18332c612f414f1c24eaeca9a86ad9b8e5d72f50f6a6ed3042aae91dcb7d99a056dfb606584e94ad37a1fca2c38a581c26539df74cfe89e7a038da61ef0bebdf1e0d0656e973d939903684ccaba99071b9b52a085b01afdbd63036474c4882d369ae0c71fccbf5921e079c42b25738f04d405b629005a03b14bd617df68bcf1332a4b5f4da13497ac6ef5aa236f8afea36a7b4eefacf14e09e0c079a4afd54835c929a28ef21aa28ca02f5dcc883e14fd2091611ce9e3a60c478dec8dd92221f689a9e22ac07688fc4114117e08051561c7466993f5e17976a6e5176590e3861be514225b595aa8cff398883fb3a79d723d2248b4357a9bbb530481e7f72a16dd605e1ae64db4e5de44e1df3d8d10d6498b5e9e79fd02ee60b6d22e1578eb68cb49701ce1e4f628ef38caa7b94c0d584b192b2e66e64d5c3cdec309e1ead84f03f17f2ce1b1f34f2e6966b4c934b8a26efc10f9f4682556a26cb9f98e0e924fc5496b65e1fac39a3d16bd4c5e11a97693d5da6c931ec42b33006728618c7fdf763003fa90702d7d939de8c41f6363a55b1d54e7ecdf6d3a691688eda69b40e9e6d678c9b248e2897cfed153d606df75e583f627aca50d6a72239461e089d0a0a2bab12c71bdf91eb0843454e642f369b82fd7e7ba6d96e1b7f9e4db514becd2bf9cea84675151b07eb862c02ce4639c879c1947c627c9e2c3c2359d5efb5d89f96f8e58cd2891d2882eb9183f6aa92b8ac087a0d2445a6f936859af651dd512784db8dae9624fbd12b1925e6f9071e1b0711f7daf384b8cb8807c00ac424c8f97e28cc388b2de0466b8e4d1e66fb1d7a2b15dcb7ce17e091d384954fd0d1c88c16d74bc110df4d1080f1e8574bee5cbf414e0f3a55cffc7aaa1347be7bea62a5f3c73dbaa76d19816aa07c84939a76bc9bd2ac54e7b0b59f01993fb166d2fce7a8fe74be7acca081c611f302d846613cd486211c45ab8265af908d95927e0a7c84992571d036f25bc6e35737ad3dbb23c0eb10c1a0721ccb981e43bb3259486e794229fd94a8184eee99d3db22601e3768510a306c873311b2431f857e07931586dd9b54a74854fcdf21527c0fbb37a9ebafdbe41612b909c4ee017bfcefae9e04c85081d6d50b7b76180eef2a8fd2cdb3d726396cb8332272f66ebbe0f8853107c230d853e26a31c7ac6f37f8b15eba55f09784bdaa2ea098da0122f118ac58f091bdbee623d64a89a1a25e2af2ae4e1dec880138f0fd07b66fa631c7454e2de959987d4deff5f55c7a44ebef2114bf22f60fdb032834787d8c041778a913237455452baab21158827cb3d4d2c1384cede030226e59cc34729a121a6784ffeb60ff90d7d36ba0a48b310e1a31c64abca2365f3c2434ac921fb22b6bcb50cadf1504754b07819a9bf16825aafccb2c2cc752d0ace495575fdb4fcefb5914d924075ff7f89bc699be21fbc1fca8a36a97e7a42b55c6dde0eb6d0122503e019aca4deb96554a5f5103deecf09aa76b9f9b32cf08d94740cd53aeaf66cd331c0ff6589f4376dd501a438a255ae874c45d8826a6fc0b6f8337ed38de4c532aba642f3b6809ad86060ca95e6bc9f8fa39993c1b93ae5ad971e38452c25f32662be6a10b53823a28526c4e6e9b050f4345c6ebc4241f3fcfacc976ecba50a3f9a43a22804dc3cf270ff2e224735f519b5e540d3682e0722dec3c33596fa96cb4df0c477c60b1d6d0e47a051d34cf813f488a80d01aefc185cf89301f64ace1dba6ccd6fc4c68467702312cc1e746de3ab53f94bae1ebdf1be2554adb7f11802b83bae8e32ba0843cde7108c97ddd48bb0c4b8282ca85b0ccee3cb6f6597d274746c33734457b7bb2b43942fd8b281df14ed38acfc03c417103724510bd38124397fe62193e8e6a4d3d93461f7a8d81a560dde73c1936b87a1a6d4b68131ad28ea95418bc8484f760ae726ca05bab1fa2a62966f7f5084404d2b8166af053d2e3ee6e88f98fc64d7a4a77ca85c51fbcc7ad419c9cc180ece937fabb5b776b9e5085286d2144ae4b02b64e5e54f2f0f123d49537e5d8a582a16007ef24f98ee601584af080ca15079f63adf96720a41bc1189ca509fab8c6a61c21646918dd7af7f4f73af0fa63a140ee047ed6734f024e3a638eb69aa5649f2d8cbd08e15e330d9417609a57ce1d470d993c7498ef90455d548aebdad5d84da8c4591d1e057dfa16d5b26f2898ddf3e76c81307b4e58827c581e0775d1f9c117f2a4f93be07f0bc734b7f374b7d5880f767fb33b197fecb4e114a1dcfe4c61493a5932aae7736ecb54fee5f7644a752fb159a56a8f21370b1ff035aae3204b568b4e53fcb1217d217983207c2b00493fb2f08d9c45f09316deb5164779ee669340c700abbaf5d00af410498167c5c4397396314767c576489872e276e790dbcb10370167b0ba07a1b7f452ec648be638109fcf89b77a84f4c99d59602c90e1334d098e285ecdb4defb133752dcc01a063cae632a5924fa012a2ec3c0c9d2f0317eec10a670e02237f8073a1ec06310d8d64202d25e8e45a799d13d215b132d885508e400473fbc52d11d3ba8d5a76de30dc094f915eef3ba63870aa1ad233bbddacccf751ffabbf74314648a761dee97f3c03e9a963b1e875440add1b36b331ab8b06efe667bd5f14bc9d2b8c8017a590927fcd4eb511929845a3a48ff79e70a70f95a89b82ace2195b93fb31a50a2222e849bc8ff559564a3242cf18f07ab281cbf0118e67e574fbd373f6e890edb924f64aee0aaf97da6cf20a97707c8466965cb5bbff46818c28a23b6d572afe20c67af3638d5a25cf8b428e311787cef59f73c1361bb1a3bbcf45fbe49333619ab345b090e73db649790c438cdfe97e04e0b9b18525179f07183a70aeef10ebd64ecf457084f5251e5aa09931373347394771db4119a216a56854931cfaf26603a08e5696d12ac7d709aa666741996f0cd0c345974bd6b21e67d83a056e1826301409b50616fa494a2afdc7f9d476815d3b7aa97c06e3c4f7862acb0affb7b7d2f4bf1cad22c9945679246c4fd378a6ee8aae808f21b6eab9ba65ba9040c2f0efd34397217cb306feec96b8b810b2f94f9844df48877ca0b4fe70cb3d2e15df71605c66d94e24182c6716cc68960ee4526ca473f98a5da2a0f29a27b695c46f69b148e27e15daeb1b367cce0a27257e32ad7f6248afc01bdfdd970cd68373dcadc98de75fb3c663b7e0398ebf28e30c36e8a9f00c9f77164a49773d34d89592b126169fb656eed0a38ac9cc135d65be192914731f57e24f6eeba27c855745d6f4d372af13f8102f25bac5076d46ccf57938b56dd654423114de77c95b757d5d4ab5f6c3874119f5eef81263c77ba602b45e689d43d2b275ca4669b36deba08541d0a4ccd84f3aaac0e3334fafd80e37b0820b0c9bfe6ef0e52fbb651fbff5ded76b1c2f5dca1d30555b5b0fa0714009f5231afc9dac7cfbf5d631fccdb90f45c054131f72c3c8f1473285f25465e1b5a6d6191d0b83d83723a61c6f35db0eba8016b1c8b3cad9dd5f6c65b4397b1ac8e5f6b6c26e69039de03539da5b6f077fca9499a5dbe4cbdc9301e64ba6331363fb7d50a1cf4ea0e034dd3c3ceb805b53b6278c637479f3f56a69b4f947c75e34b2dac484b87cbf452db5f81ec429011aece03817a8498ece2aff39a6c6bc5fa4ca767ca960f915da5d890de329c955e7c9870972ff62dd6127778e5a9d1396574948fac81a98e35c5807a9b79399e5bf311dec4a51f7daa1bec1338829b58c21d2f1b521fe027546e66d95c0e84ff2bdef1c724b9746996faf7925b2ba18f508a8b7cc34f71c0a0845d8542d40e9a7794107fbb68ce4fa8f358884690b3ae6d53419bcccfd50db0fbe3396f6ac5f16d7923329fda6d8635d5e44879bf292f0b907a512e37a2f53fac1c488794d44cf86360a6ac07c19a3bb6673a1eccfef860aad6e0c33c2b1e92cdd6997006b5b15495013995e5cc95f55889a98ce56f501719de91a04f7315785b31507d132e7f77fd53c65100e312a968f78033f51efa1f488d8a5a255ce03ad742a1c8848d9e6a4c3509ebcec655033d219e98427320e3f54f0aeaae304afa13b435ca56635a203485926b252892e7a09e7d9504e84656e0d8b89567491d1aef42409bf8bacb31a3fd42e13b7e1d02ba68d4d2418b10d2d4fa23a34673fa13e1ae3e5ac00d409665ebe00537fedab746cb51418ecf4ac6bd52affffe7f154c1ba4f260a4a7adea351ccf059f8ed0604c5ca13f83805655ca1019ed7e4c0acd52008dbe78bb0b43b85a4dded42dd5b974e979b50972cc66254963b96a398f2090cd114248c40533cbd27381b90af6365c1ba8dc0f94648de02b9d19e7b6c7ae00015afe1d845acef744acb5cfa3e8b782d308eb68497246cc089671d40b2b17021a068dd34fc68325db6b1d3f39444f2b8217aea833b79e94855e539c2ae206885f4b8aaecaa5f0ee348ead24654240b39d82fdcf3729931ceef070da75d8b65fff07665ee41c5cc0d476b965c0a36525ecfb33a125b3ebb943c7ddd1fbbacc98b5c8f4cf2640999ee2491193c8134e73f46953ceed0cdabeec94c4be360d384458991d84a190c18afca8b7e271bbe5b1fbcebb6605c2146138303a54c0b62cf49158770a6a2e5f119cc2fedf4f53df9ad848793969257d501403ae1795a83dcd87011e23ef927d4aa2c7f79c3556b371b683ad78bedb2663086b6173cfac30accad26b2f881f2315874a297d15e9c88a655bc798a0897cbadf2b9dd6e06e265311817c5ceec390278e479f76a45ba4c1d96c1d96a7c868ad035c7b5979d497ad9222c935d65d8872299cdf24d24d884ab2de9ad11aa4a7105210b1ba8183668a09b17bd4a8ace4325d821a13f0ff411b811c8acd68672ce64a00904a79bcf839759f8f4c7435c8c84d85b360f3aba997d100f6970aa72bdd86cc119aa592db958decd044bb0627feda7303cd2c7e65f029b8fd4573dcd4ba6c8888c8c5341f861db378632698326a94db0071e1939b7f14875170ac24ce063fd8c50d8454a4f2cc1b0c73158190f41947736c0687073d4b20439e283d24d191b9b1577b9a1c0e29c41c3e7c3d79cc4fea311af512dbfc9082b0b2ab2e41673db5dd7b0b189333b4e7adc7d1a5e13af73f6861fd7294fa2201b75818a20a268b73959b2fb575338e666cdef4875bd0d7586217a1040a51f9dc367d23f18516df1926cdd03e0a9c4a452f76ac58171b4252ed160487997bfa105a8c7af3acf908da20f319c55b3f6ff58be486bb2cf732f424d31465beb3c6eb313d64454bf79bb5b1f78a777d756b5aa3038ebc787a83fe32c14fb92d8e0d6bc8203ba13fcc2cbce4a73c4312cbc265face6ae8e1f0dd9be8d88715cc5d437ef3e17e7b7053e69ec82e7221d601cd61c52fb07e8a89a428e7db9b726bfdfe903e0a1d928eb1757f9ea07620fbe727227156f7136a2c4ee0fd088eac3111b2d65e5e74d34ae027c3c49107eb8a5c59c4c36ba0ca85b600ed1ad81f82e9cb4311671b0eacc99f0956164bedc3089640ad67550b50589a7d90522a8c6e31f15867506ce62b40e917ca6896de59431ff53bed93c369a8a02615193b3d67768510b4c76befd49e0c7563da98e49ca95ef85c38d47b8973a2c2e215f73dfe903380b0162ccb630a8211b23175f4fdac5e88033301bf5dba1024b58f649c1033dcee910ff81f7933c0cfd4e9a232c31350efd2d2c6bcc6ea3e4d81850cabdeb67244d9977e3c63b6d562bf1e3605cc8afc2ffe4db5fdddfa878990b6ca244824b1b400e100307bdce11b74ceee7daa0f640f005039528a11e2d99201529f0274300105facc00172c839e8b94b72e92bebb1dd4bee8dbec2fde8d4b055f3dc3a128f3119b8bd912aa112f6bddbe3d5abe90388c441f1dd9137bcfc439c68819c4a3cd6549611a2f937c69bc3333dc73aef005f69e94f25c9516b40ac162641c8a08e2ba11cd43a1560ef694789d6f821ec13e86a66dc2eabe373abf44b0ec595b984f6c3cb18b6ce575406850ebbaf7643ec615ea37371a0f99767039e942e98a2e07e8f0e71af47473c83f49e5119b8ffe6a3a235cae62c287fcda89abff604e99d2783526304b63d7620559cbc98105dcb2fa6367f059b9b5e2d5d7fb95a45a4be786fc94615c544fc52bb11c2076d61cbe2d4b0b069bf88eafc620260462ea0a8cbb810693b8a3d5bb6ef2d94bfa4802909910e72007ca9043c43da7cc532dc455eecdd340f8f842af6ee2d8bb37832714b31a0e7f80a307b1316cebc1625daa7ef049f3d93cade7dfe0ddfc70b106775544a7b35db9980a77a38a3d8067e316c76dfbc98a49fa9c7e1c7b36268db459682ef5b6571df37342b37c7d5ee924b0e6d808df4f2333441d07bd123804bf9f1789304b01e590fc9d9b432bacfdb881265c444a25751678973ba91a27300c7f2a533cf601cdcc4440f24037feb5187ee7573896889d03e3520dc60ec68849d00f68fe5ec8236fafdb83bdeaa93b39bd5bf556435aae6b7821b179fca391545a5c4e3c74ff46c02987b33362be1a659c1bee557b586092ec9a824fe562b64f87166d6101d3ab211a38624abb77b6fff3fef06446348a800253f260ef4a055353495be4171ac874509df468edfbedb8025750228aa116bdc888bae6d4481d77ce55a0b0dd76991779f3c6b52c951c8319a52339f6c09bc767b01e8b3ed630b018e477671efc8f632398e977c7427d6640b2eca696cd04f632063f914f4aacbe749cfbbf6ab80b1975bd058b987cb8b09a0e79b053dd5223139cd85a494eb88638b58864c1c20d56ad8a672c29ed3fb5e5759f7a0168d4f9a563a976b2019e34d852a8753deedb1dca23d97e30c3fab1887cd81ec12197f8739687b0e817062bc49705f96d3149ec492a6b5bb25d94bb8c04678468ca63a8270c0a74feaecf43d4d87c7150a6a16ab2738b627da81ed5cae76033fc3f4b0b49f9a8cb4a19d5e289d6816d5f583d934f7dd6507abf36bc520bdc2277502e5fe669e937852a2509f9a74410b75af9dd8b695dd501e9f1533a503e69263846f7e2b8ad5500412329f219f64c0a55c0ae491ed4adb5806fad48397ec07fef795f2b927318816f08da8505b9a70ca1c6f69333d1450ffa07448516c79e18024a5ba4ad9eecc85c29e19eb1a9fab433947405d151c7a290f6a3a4877df50848d6ad55ec4c442cc87400efa28f9fd12bb3bc0cf607f106905334b8a8f93872f32d5ec2bbbe2231e95955eff249578f83f556a65494e3e725dc7f5c0f9c15892761b01c14aab226373041d54b2b55b8007c38fe353bf2f92ff84a07008ba1575fe671d7b6289a237eb4eaf4a8aceba3aeb58c0200d95a9273036528bcffde9ea36e4fecf4e40badcf3972943377d52fad9de6f4c92d4b127c4971fc7b3bf1833dcd5c3734673706fa04f78728d82d9ea1509c8db0b93a5838d6ee6165fd466664e34fcfdee027ba70f1d6fe7cb1a627a9a08b20ee7433c8235d1c2a147f8952b4854aa34b2b7133fed432449a4972bdfa75389812fb107a821ed731d07e9d5ce950898e72c6238000e8582e274e64f8d04df7c85dd76cbbbdd0b0523de3867110ba9e1f350ac5f60a277d16eb69df9f53e6fbca69e99be74e8fb5b6860b6e18853a36367162080d0330f18fde6da8ed8955fac0318c3587eb7c61ff6dee4cc026eec3562ee58751d9a820e6f45d45f3363547218b8bf04cb910ac12c4ebe3bb0bac84c56831db2cb30cfca936c9684ddf2bc862801beacf06037502e724dac465cb77cf97debc6e5aa6dcae5ea5dde09f1cf037f1b4e329c485c01825c7884e2c9ea0a9e9ee1b4bfce5c9cbbce3e25de5db89621a9ad4749707fe2454fdb0cff39b2f2019feffb54752f4203aad47cdd3175775568605a2455efb3bb7a2d31e446e30d535aeca24dd2b1c00c5f55bb863acf7df7d41fbfd0efddd763dbfa4d628c2c54d605881e394bade8a6963da629de536cb021bca130509a1f8ecd44bc39992932ff69b4a768069a5eb0aac9ffc2418cb83d494b78ed17c308a012116044fc12a96ee27987ebd699d626be9c099c4e359fd1b098dab3078abc859c2fc22fd45cd66c8da31b356694be8845a0474a4c6ac2e68fcab2a474b122e489af95f1c7fd58e03f48f36df739112c9d2ffc8762036a130f0256015cd521314c793f26d1042084c0a8d0ce37f3751d284432cbd0b337d8279d227c38ecd8129c9de701d2314baa3b8a6875f1e74fe24c84d840e8206f8ffa2374771f27699741ed5091b5115bd99c08408ed952f5152757166f48c83eb3d3b8d53ec195eda26e88d19cdea91dd1936f054a9797f0da79623179d6e3415870fdea7a0ae5497d5d90557891b76279f846e08beb2c2a6276183271dcf168ef5b760ce8de56f742bf3681e6617105485571fe0ff5a9ab0108f3e9c4b756402ccf8fa94d9d4f6f809f95da69e6fffbe6d6dbc052f99d32e61fce53de38c5c51db0ea84084dd62cb53d240231719bc91b3efd39eddc4f674594b2a2931ff0d76eb4152f6482ed7ccff479ffac57ab4df91cf6e519fe0b120ff1e5626869d906d0a395b01ed951603ebc13ddf02a8e01dba6fa39eea1fd757fdacac4b7763c5b31362a80c22a5de3e76d6248ba1401907f4f3ce20153be02dccd2c13ed51858481f44dac5a69b87638a274c015d7c541ca0c91bb3692cfdd496bbfb5cec7c8cb9d47306b7af44982c0404ef99bee0b66b97b3051f1a5280738542b4e4377086f6066964ba8044d2f3b3dbb76545be1d298a7e1b6561478f91fca7126b367cf52ebb2228c8e6fa51579679e57607bf11f06e212016c570760859c2026193ea6536daeb2579b0dac0e3308896d9994be181e9964ace0c2b612213b09a5881d16fae0fecd6dbcbe2f99710efa5081a8ec6bf55ed4a4fa2544c54b8864aa9a217cd2838b538d2afa1e7b09b7a83a73e2d66496903ab693714f59a14fc37b2748aa625b3ff88cfeb54af01d331b7f3ae888e9da50944f61a547558b16cd9ee225a2b99adbad35323692a782e3c3e46d5219bccd204c7cec9123de11dc42d6806101eb01e17942009c433a086f11063731e1d1106677bca8615dfc4ce3b80ffdffc67e9032be7f80bf983d019d79b724806db95455860345aed3a687a72676371791d39c7179f37f3627e4442f7e304811f75bae0cb7944e01f22a8d11d6382b44333d27748d7ef11f7b47d71cc5042d31067f5a7649425d4a7d36b5ff9ee0e2d216ea56b6a9ee205b9e5d09e68d091e74808d02908e733a125b25223c1dd7c7d05f487f2496b3b2599a6e1b4482a7b359a742e7d6a05ad32b2c69a06454627c5d025da515b1184235db4a4b8cbdd7e986e9b04dbd5eb2287f50cc09ebf47be5d9d161ad6cb37c114af78e914400b5c976a132ad2c6e10db5e2f28430d27872b202f19a0ca8a419a1f7a60d1ae3a59f51236399d86027ac5415b6824ead20d6901615d772474b73418f03f2c9f29a3a1de295de991114f1060e31082d11022074ca93b2956b1af02ab94c2f31280803e13766eb256e1c69b035136167f8262b91d7f53e2c249461855bb5566fcd53df352f1ad82bc737994ca174cd6a9f8bf96582cdbda001c6ea64b07d9078c4e3356c284a02e549b4462b512210810d457756a84cc00086cb8a68102e20c5387985b1fec79da464e79f1a1f7815a144bb4ae0f27704930937aff66f2bf1a65483e8f92c1e75255828e7fffec15d04d5a6cda539898f7dc6969f21ce1453d80603b511d6f7126f9a78f624e1329536f0765c1bc45e4e45fa0b0ae1d3d748cd86f719c00693b66123569e2c7a594818d5142dc181466ddfa95f23ffc03041ded6bff63622b7c580b613fcc67919f8e6ad7314778d6235abc133b4978f8789abfc74738f4ffc35c10a1021ad5d1839a33a8be985b9b9a11f4456f46d3852adb835a30835bc38a60bed50835ac5f5de15eca2858f99a7bb8987d98480a8ed9ed1d4eb8e06221603e6b375bb60d4aaa7ca6c2f68196e1bf4cc7c0f2a8b49947ae0a4d3dc0cf49bee82091067c32b3f4bd4f17f2c6e5dbd8cda4f0cfbbd98dc138768d121147433d659c7444f84d6fc41f39bf61f8acba6546aaa15efe523691a053780630d66c83dc3f735c327c3e81801b979d69c1d55f66e60effa00721fc49638a201e3612760840e3b902326a479e93955845c20b98693442b2f2351bb0cce9ee40fde6c7219ff73f8285be6a7f67b8d5a041294e225c1515f7f1c6f052eece9aaf7f02d0d5ffe393ea2247db00b237a1954ba91f08b824c5492f6db18786f8356f81e7f1996af37be9b4064f62cd7eb9c5475edb8e506b5cb357c85ddbb4dea5f50e3083cf31a858a798214faa0446429d3ab01bd142dd6db4c6d0af2835e5ae004af98bf6557db72c750aba47ea3e21ea23737e57e8afb816818815c627bcd4551c28ab671502475d35acdd555199e52692c4ba154777254dcfed9efc63f7fe8ad7f2568fefe0ee8f36b417fb016d802a2682da7f59967834cfd02299ea39e5ad6981a563c4f1ca432b3929af563bbfabe2ec69686b0af53aa12255488116ff7f36777f057404eceddc8076798d5a2255087d83e9521e63a98339828e90d6a85082a2e90a3c1396b33270aaa367e1b42b991d2d10d84313d05c3d3548a06f3415e29162d1a6b15579d051d94633c7a2c5084881cc87764b6012241b9fe944a03f775631a84a0ab2cc719e8a090e2c299b194bb668d8887fff077f5f26681547aad267a7470ac1d191a6b5989e830a18cdbc3dff9419a2812fee52988152eedb893d4e852801cf833e96281ec8e4ab7f30e4af6dd9bd1aff38449d89622e8f2e58caca9d1372975d439ea4be6a7a95729fa1b1cd3dda91a1e9b46c43f14d76968ff191f9be8139ac7401c3d53e8bf9a30052c1c16154a5e12dfb86a94f2baeff8185308a9bd4fc0e52544290296acc931486125658dc5b1bdc75fa6e420af411613f764208fc6b8d1b0eba67e69011beeb9e3baabb049391bcdd724e5aa34628e3123db84daab6c81adbdf7c2be9cffdb4de788317068f64a421b308527f61a4ccc36652cee17fe82e320f971bd8a0bd8c3a6cc0f11ed38d3a7335badea61e6b42645504e27c49cb7fcea8c88ce8f077b1fd3ada8128ac6bc62c28a3897adc823ea20b2ca10e1692c8b09c705c9093e96a9a238bb2b57045b1002e04e521e7ccd1edb5e330a0662b1b1598253e6c8ce0258e6ecc2e1cb2af5c99998e457786a13a2f2e70846d9631916f32ea93dd02a526de4abd1b21da4a3a208a02bda796436c08504d09a78a5f964bac834503eb297b956978d7937849b4b860aa2924ed64bf2880023f656a5129c3cdf57c893c71322f8e7ca45cef938b8389a1be5a5fc6bf252b9aa73a8fd4dbedfd0a81c61c8ed0784f230f3a2694933d6f05bec0eac76873d2e69ffed7e34d846d2f30c69d5e937d1e892b431a1c68aa2632936c1c59d3cd8fd59bda7fe759148139396c4ae4363c82b5fbd2b20d0c9604834916acb1efcbe9e002ffaf73ab8acbbcc1441c032d9f6fe62fb765a6f09b4c32f58a0a372cbd4a9d7463fbd9b2b6e7b72e8b732872c9989aa7b760a2cd6b8470246c9101f0f1c2bf93d78c37cec5e4839e6c1525eb74012d3b643a86a2cf90c37e12bbd0e6dd13de6f725c7cd80674f2770c57969cb1b1c83b099c5e17dbb2ce2e990e0ecff6eb059a1e571d3be705b07ffdcf3db5b4d2d0adf5cbab4a7ecd81f5415b73d49f3ed46d44d3dd8df170c218bdfc1c62227dbb1e54dfe776a1887ae4dc43088be6e1f1d7a370719a5efe9e0d1ef41acce65d6d79d720e6d358d7fd02029559d0ce0b1703d770bc145f44ea1d9bd051b506f2fb00f3752d71800462494e4d3fc64d897251b2e4c27d3841f900c2d9e64b62f9ead0369f04895d981b948b873d53975564c72c641515c20841c838c6bc7eb495796ae24203a4ddfee2593b51040f5cf4fd84a641a5fcd8d70488282c51fd60f3e53fca24580ec4b5256de3e4efa622c4c6fe223252f67f51e29b7728e6cef41327e9bee2258419767f54c44b6bc7d79726445e6d3bbff551c239289d983620aa31b79d1f2c5209d3233ca7c254deb806e43fbafcb40e9de61e04ec5294b64d847146452fbd8f25cf2fcaac2a1258cbe8bf22c65283decc15b378f276a54eddf37e5690c0e85bc06b6395166a1cf2d7caa3beb049108509eafc3382fa14ab736f2c4e61a2b1fe1e4a941d269dfae7f6fc0de4458585ae2a7ebedeca965b6b9ca249777b335c046b96f370de95b5862e2e52eb7cecf248db7fe157b717c9178848803966912f431050577bc8193e20e2a7411fad9423049ace0a8200a0e8fc7aa1042c80b7980bbf8f913f0c2f6ee835a35251a8edf3ba5a0455d9752e23d975c6797a106de71901ac5f88a27a848827523fd3254de31bc6a4f6a25e835b7ee8dc9a440a32232d9ac35540c80550e01d3e9aa29ea8b7de51620ac0f186e05d44bdb88b73bfe26eada6fb08ff376c0a052675ec45093158a48172d74378367cf00440f621e11acfbcb8be9ec1107cee2e41092b6d8d39dd403fb74796c2179b622e38a0495edfdfd4f38a070c46dcabc671b6dac3dd5a5c56424800d27f9bca850954011a71ace40344aa8d0f243fa2e7b89e6cb1e46dedc7c4d73a8262f30d954ba75e99c6387a48686fa7925281b744ece686db00bd0ca112dc6949f2c3357fd34a36404eccfc86b5aa46736ce2c3fc3c3a930de8e81926b2feb8bc1e35782fbfeea76ba5f33817de3c5cd29eeee9023bd46ad611a2ed0af02e54f3c16e5ffefdd96cd03c6696f362b2ccab4ff7dadaf712267f819ae46400de3c26a205184987626db13b3aff1f52726d98afcd73d31ab0dc5631c7ffc3137765039e2e30105e6baa241b75f95427c31243802afc6bb69954ee2414e4c174c15cef4e6a7d37c18aa4d31d0762565146ef338009c51749e2391e4fae08968b360858a0722f81831a30792b13ebb681364b7f28e505081c9476e5ffd3b6b2e492ed345441e10f908c0f63d362980d3efd0bccef75188cac327200dbeee7eaa52a7f5b024c1c3a8de35f8cb4069d549417ff846bd8d59e2759d1836f63d984464ff9ee981d36cdfddb4f4ec2aea5c7d62d5b82a864d6fd56a05e88c8921c73f5825d0d99b6d59d4849dff21e32e3f8278b79885c6bc70016311c5c4062c02e06e0a73cf16cf5d49c27a866c6bd16bf1dabb309c8440fa4bf47f109eea2d9df080fdeb8387344295f00a5bd6bdb25ae194bf55e2b4f9ebcb1b2ad4724973648a5931b6dd57890616b923254871cb842c57e6620b13e9ab223598073d583e0fe67d18358454aafc76dcc926445da5f9884ebe3e10f7cc73ce29fc0249ef979578d6811867c4b3554d183f273bbf8f327d84f55a186afe5c7fc2113f021947188a0b52d2a299934b074d4cf435e571c08c3af0b54d4db5cd21731e96442145734cd803a7e97d9ca2f7b2e2b452c000eed6f7e004f5684b6b7114d87c176a30833df7282c244ae30534ffe6ec1af7d7bc1d4e6b1f0f14b3ca68124fa2d7bae81b24ced09d3d46c9a6238fd9f553a6a5e370453fef698a20acf21bd7cd8718993ccadb038e93048d4c9efbe5c17da1793d0d31007c4f963b37f3fdc0e884ff98140238bae7e64419b880b29851a85c3cdd4d5dadd717a8065d68c5870ad9c75ea75050b8f33ea1bf674c8e9488b36676a0aeeab0152ba728475ffdb6ec3727b15aa196fc0a5b622a5d561387291929c6a3edb2242b76c0a2a770d3e774d0407360cfc13cd9622a76e718be122f8f86b67b9c3e7941cfc263874f9a00494ca7a73687796900f9872ee6c42ebee5d119571c3ce0b5fed16fa6e3cc54cbea2c3f1f85f8aa436daaf4a8df66c73aded20cd2e181122fd3af26a03c07c9c2665aa90eae2ddf8e2e7def1a307254e71bbbcc84242332c588c71ac12e072b7761d35f8140b8dd5b26b35b887842d02ea074f54367fb1875918960f5dec7d9f4132a06d5350e7a058a0e34a67050bfeafd0ba832926bd7190fcd188438dcafb36126e1d6cd67e59d2ccbb760162228f270c7734946a0757b7dda948ffac5d11d364e5e18c250964d0cd6ba2f6179a8a2f03a82556e4cebcd969a38869daf3d1ed1cc716e588ccab3d558f3c86e9f8afacec4b4a424979ca8e68ba14d05d457aff8025d4dd2bca1de5a904a59ed77bf37ebe1a9df5b36f1568083091b710954f3447d5c2a5e301cfabe14a406772da51ad92e54ceb04f3396b5d9ae7afce001abae6e54215af1ba7735b006b01349b6ebddc4b666b27371433c24b3da2b77e87a41a53bd224e3f3df22fd177e50a0a9979cb23832ead222dc7b9dcb7875662c5f4ba36bbcde2f4ed7249e433dac19292f1b510ac4c278e95af32e26b47ba93e664d0ace1485cb1e37219770f2a24b44cbd62c14897afc7928f622c7bc29f78e18963d0907e7d27ce7e8c7c44faf90eebc820d0322a4b615378a1a58dbe1dbe199b7276e7c187306bad10bbeadecb69176660a59271d44f37cc2f04bc4354b84de2fb6bf89811290cdf8abb53469fdb1c49d5df68f57ffc97da7ccf3db14e16ee300a5c809b57cc4f57e0a4c97e399e1e78ebc38bddccf49c08e44c9b818de8b35d4fa14320c4efae5ff95e126eaac9c3139ec5034067c933ed7abbd15dd0cd8b0ad6487e72837bdd74d9d0e59e7f6fa6ff1e5368c74ae5280c38314eb79d81a25770716f119a8721bd2fd8440c863b0f7c0e742ca76a44c8a40638059c5419d9fdf0d7f0859b1dab60634c94fb7f53f05b4629155fe2e60fd1a68c9cc39428b13d395568778754cadabc420bcace2c281f84609baaec431b2b7d4ca120189b12d4ef63c6fa7fc4272558a695668c71b3cdc8081783003d403942d376d11ba86e119eb16e9f80267e7c4da4629b90d769b66028fcca28fddbf1d8500fbcfad007a0106b2074042a819b96dade6bf388c660f679acc73fdcaa2ba4098c6e5b3cddd0427b9ad19b50d783c8c28842d45a45580e4f96ba9c5bf9226326ec1d6fed0af4050742b74886f7f6ce16fc34105cbbf36386750fee834762344abe97d91fa226294bbe54c3c087d9c588de1e990e29a2edb8fcbd3a195c99b4965b7fc2e5c87efc5420f7c6c44471eb81c37520c7bfc8d1c2d41981d862122e28b10f583c7ee48f00c481b26b5a6e2bfc502dba241448fa510bba2c59fb93c8a611b0be73d1f4d7fb7ee3a07f0e0c1507b723a65a7c65cf6ba90e01529d65f8b195476e6de6f6b6770bd97fecf1a2b1d3c145fb252cb73c043c1134252fbc80d22c6e330484169411102a5707d62f5b4de68227ed470833978dbecff3dc0a3a633085e0bae5aa3b1320656c9d6a80de510720e78e0ba99845743786bcbf6acca9889666b97f98e083291bda8803a4a7f04a11a210ff24ef867d0a8d84847b99f2f9943d7168ed42fc1349794094f8b51d0b931158c837ff0e0e0972ff47d2c245e8b4fc549179405994655b7a155d0feb91b5de0519366fc94dfec1fe445bdee5775256ea7e701209416fdde06d49ee93ec79e0f3ebaf996cdd8a1d87613359535c4b9c40c5451cbcd2ac47b4d79c344c40930c867cf02da54fb950e2ccd0f5d8387fc52e4a005d7795374a521a3e5d7b49618757ceca171ae1638476e0bbbb0f354f519604e7b6fae3171a39cbb1cb5efdf5312689e83cbdd4b23c21b8a2a7149c9e96cdca4db07623d00cd01bc17ba4215625d73c5cc8031643763d1c1e6cd7551822588fa087668241c5d4ee95d2a6f827ad4c9828561ed531c9882bf7b01dceb86d3e9fa70eaaa5efdb3f19f5a6f8425809436193348b372bb4df4987cacff676da1daceaad3debd4efe7bfd106907026dc8196111cea1e8e1a67a0c78552c01ca9d4323d49917fe65b1af2853d95785c563fb8a7f353daa0c62a3146215b9eeede20618e6007c131e65ea3ae8065b259ad647b2b9ea361492997be319962d8d7be4ad4b1eb7fd7fb92365add610000db9da193d7d8ecd4fe23dd12209def71e8b5c3710b431b9a70187dc1d1831463548d61ce9eaaedcf8852939d8bc27baa06fad5247cd1f148d1f5fd2556a4d7707b08d47fd5097a647c3c705eeea8d67b3bf65b9d9d7eecda811e5a931f0fc2887f2165010c5fc8eff7fd2196f6bee2580eb9f0cabf741e722399b26db84b8c7fc08e440c2e1a52aa2c7e303a299b2393a04caf7c364ecb99a04517acce058e3cc4ea7c16276435b8d9838cc427c8f2ade1d976b4ae5bf88268dfc77e4f9954664f97f977a8a44b2678eb8294ce117c9208456bbbba8ad6bff0fcf46942a9352a6141ddfb145a938dcd699765ee334545651dd7c2a7e3e604b353edaf15abbb8fefc3af1b1d4ce1a00b69e45b85da35e99e46860e08443e7112492d2e99bca4d4cf2138588de97dd2eb2fed509807c3906c1b372574c87b6e847f2f3df4967389e7de506a1d0f22c8445a0c38687d60926a6f387bcee387889af9e6b9c964d81ca4193bd51d285464c803862891d5261101ccef987725cec609f7ec459416ed0b15eab5d2926f3cc12abcca7bd8ab309a1b9a0b3c9228b6dd7f3d847bb400ddf7c3345c3196da3068d4aa18158cc936a433d672fba20258fbf73cc7a401acf9d2857b39297a8c7f45e00614a847eac0c93be304ca06d8c31d11d557612bf9316d96fde8b0e7f8999660294247da5d04fedc5020f8d4683f6facb5ea6e281e49e713dd31c3554389052b69527a3c8ed7f6add682bcb61fda16459dd5ad022f358e6720d8a2da17c5af9f57484547d8b81fd52e49b3c1d80a2ad5eeb609c20fbad6fc4fbbb1e19cfe8549113bf0ef1df6a8dfa8ceacc4d14bb0ddd41e84bc4c6b6cf340721d088264f0939aa0e22d88a7318901a69b95af10cb8275f20f2a51c91a314eaa5f03ed01ead2b9a61fb05cff82016f252e5492163cea32516357ec247f09f27e63dc5057896d601e6abea491ebfdcd2bd73a3fc561c3ec78b5bd782bb6f8d9df5c36d561c2a355fa8858a6b9b484b6f5650b3296706ec45802d2b3d263bb8c25dda1165880e1d42be8ced2cc5acbc116e7031ff069301086fe6e7878b4fba8df384ca112fd68de965eca986c5ea461ead0611326eb34af75c114c75ee19751da0bd69b9daf97403e6114bc0f7b8756949cfe3a84eaf3058a2f4bc517b9205ce8eb3e90b4ac8615ab9c74cc8298b591ce23e4eb547dcc270304a0b1b9fbd7b8ada741f8defff47c567fc40ff196ab969b062f08930ef0e3a97219ea6692c57a980f963e54941e9e17b0febd29dfb0671a99e6afc0281def369ba98d1da70ae89b177907393a6f3d6965123621134681a89a0998a31c07df38b7afd79d7184af0aa3514130ea324b5c8725fb68085cd78b164c1056ad50129803c8d431d0eea456d050c5124d9b6998175903f0d55e1691498e54090bf030272eb4d5fb6bbce057abfc2107b07a3c41a1cc1462c11f797213f883e5feeca860ce920815aa0a6ad1de680de9f854e8ef10a0f2110683fdd157ed856133f7ac844c66763fb3796c59ffaf8b3fa9ba32cbc629a8069abdc46d7d7283e97740c6a5d32405f7611448688ff27a37c639fc2df8c79f7451baedf7f007b03029b2d81d521c8d6887cb24131d5af176297132c496d6854d2f03aea0ab587719f9c0067aa6c2bb1f2486f3b8bceb736cf69384e32161a4ad58188fbbd3a961920de98472df8ea6588d386ce694f35aa123f6034f8d00cfdcbf353c0bb857203a8318654f605bd11aeea9a4cbb3a8848a9be40ca2a77dac30eb9d8e51e6e3a7c5c0ecf3c350be6858373811ebac0768f0bdd82d71e58d109a9565b2a6809822ad19041830be40e0c5eac2205bc6c00d7340a577f5b5d841c70cb4518dcfb947711491529941ba49dc2b7de2b5a2799fa5d436102aa917582144ccab8bf772d24023ffc2052a3108be944f89319c3a66b159e0fb6ea3da9bbdbd78fc2893aa258609a31090877540bf6465ac65203525e2442207ba68cbf30c7ef371dd52bca1154226e889624fac6380b9f37a9006d6198b7459a5158a7d1c1986b36917e3c98258e0ee19e7963e116135b94b51945e9e6122296a30e710506d23e2a1667a920754a65764c208426f31a521e0ad92f83e0fd070ae6c535344552b117d2b3e13056118c6fdc4a7cfc03193bc766a3a8c547be416d1506edddbe41f0f5676d17121030eae6267d898a6ce9a7c37cbc46e09adeb8b598c90ecde8c359491a3d268cfb5c1f26a56ffc924fe3fadd7e31bdc7fc7da6266789c48cb7d88956933f01f13b9b8d930ffb2daab67169c8b55aeca83b96526226a46b0c2a6635db88971f52bfe3507ac7e14318b0a21bc68da5619f53ba4ddfe5acf7eaf16afc9f8089c0fdc1830efee953c36eb3df6ee95f515ee1d7511fd040183c44de860926dcec73e66120b2517a928c10bc20299a7a03b1d3c49494d7573999c1fcb5dd54d6e9a80e84466f5e8a7e19facd205314e8960bee7762a63e94f67a3ec030b535519b828e89c862a962f73491c1bfbac7c43edefb9deea2962b50525572daf7a3b98a58788fde22da1bcdb209de7aa64ee2391998730ff81ab0ae7298ed83de010db8db69259da0c1f9d43f3cdfd675929a43754ac3879ac87fdb49a4da5dbd85440be68fe049fa5717b8ae5da57babb9cfa3cead513fc263dcce65ade6f8f78d6f537b3a0a0c13228032eb224e8204921630a479856def443885fb69f32418432697064644c5425c184bdfc6d197465085faff5c7253ff3e025f28e0a2cf6df0ce4f1f40a1570799f23dc5452785aa7fea35796d1b6a24c2d33627b442a8a14f60ca3ebe7e4ae9392d0082fd364bd241e7d53dec6f357cf3ec4d94bfd0853534cb5bdf2bf5c69be11122a477931f99b25431c70b8556d1195fbb899eb689fd350795c6b2b7ad6b9227dcdf0001c4428dd3b49bbb118f17bb378d6118626570f911eb98b184438546d572aa79bd8d0278a67c5710abf08b1e28219731206abe9315d78ffdab0420efffc3472db07b7773fc0f25137008726c17f8fb3341104ca7cdd22f35b402174e59a8288c9a0b4ba9414be23d123474ee957389cb847574cdaddd08fd23784f90f8a51cd6818f6fd94e80bca261dc7fd427bcca2cc02e7596847bb3903b3da56ce9dedd0c2274483b59d002b58d7d6cbdfaf7ebf924dd148c5dbf3e2a593259be64ad47c8c75eb412d27e93eeaad2a5ead78143f46386e0ae235db1a75ab3d0d8501c84871bde54f49a33b8cf2159fdfd042a50c9ba0ba8238ec1b1f9bd16a0b193b91fe626606399c0860f5cd5893cb000b8fc29097c6b1aa7c304150832f154e6546b6aec09693923948d72df311cc79a1a38fb24acf7757ee386efe5e1d93bb29145b8844ed3dc113024e6d13294ca634907d1f32694bc3bb83a496a26e10d4141bdc5851bc5caafe2d8dcb63c178c426ff6e8464e1f6aad2455da114c8b7b675da299d72a93df0c909d47e6ee733b251491b8f0aadf6f1087ed4b0b91fb0cf97aa1f66c1e5a20b8d8adc7c3b2fddcc8b6946d6261f001ec5c76e61ecacd979f7789637b6c47d6a6062802ed25ed2429671f12980c68d806dfc260ab2866ffadb1260c5a77ef5fb74a8ff338e7926a6764d132a98b79e953df419478157c08528c5e4d0f7dfd2af3de377809b2957d3d39e1bed5d9e6d54e665500b14d9b815c1a93a3a8d651e4fe50cc92847aaf622ea96fb90c2964cfd2e65ec5871297efcbe4f4221664432801e00bc6e6073167043bb46325a967e77ceb0562337c253542db27fc1f51fdf998b7795bcfd439d6c0bd397022737c1a4812d0752b39df2f34b40228e3b9d4424fb653d8267fe9388c20134c3c35cda7fd1c4a47286ed9e81a0b58ea832d94c089e04f1c1be78a47b14f65b49524848a547f963d2d254de33c8675218e2128a5a3f68434dde33f20045a188582ad47f40f5e06cdf7ee489169b5f69d6d089d25789fd15fe37fd41eb85a71ebae70a2ff74fd8dfe5ae9165ce682e0b383b368d9a7e67f9efb1ec70ffe719630442a9d042913fb98f7092a641bc84e0f0354483a548f4720be492de48b39ce31e851ca1821b6d15cca22935fbd74b855cf49f66d666751052a557cba95821cb3e5a236cba6693cf6820f6775ce3b06a46af86dd14fe9f55154b06addf6336946b2f158b8c4c39d98aff4d7eda51428dd02933062c0feff8b48e8966fa2304e9cf8b5dc0fe81973b17bf7fdaa77707b909482129bf66e641974abbc732fcb26d4fdd11f37e3247a29d1c74e3b0ea0d6164a01d0a4a7aefc5721d2c859537a4bcb0bc9ce65c2ce852fe8bf6377a7a3f5dd99e284f300c6cb7b1dbc76f545f47e54e5591b50bea295286a5498e90b5d78c290fdcd7b90023375af3e7b9db13245726b90aef66aec2c07b718e5aa087fa57c8c7b3ef268424db9e15af390d8f6d0105e671592597f51e862cbafa140cf3cc69549ddc6dedb6c996292abb962fcbaf63773d18b21c61b0fe75f7af8f32c4e7d4150a18d5a92735fd64315b74a7bb60122c899deaf849d82fdafd2d9bae7a18191818eb7113619dfaf9d1fea45be7a1fa38667d5eb222c7af83814b416cd8585ad3b95654a0d7b9f94ee66fd03e271b81dc455edca342b376b0509dd5a92f1ef84df1c0f5653d95d9e72e9c222222151796dda757625a4fda2ebd8008e34fb47952cba52587afe14d0feb90c10ed5b5300f0c2bc593a1c6901787e6230b81727778e80a2ec8fb59a64f217b1dd3823e8789246f7fa4b3c371a470dc287db4753744ad8e082f97b772caf2af3377ac904b5d6117b5f6376908e6f83face88ea38e00c9147326fe350293cf19fb265bc99bab8458e4aee139402db4fc61d10d0a69472eaa0c444df760de975c47162bc38cdd6b7d5cc3e0b39dc49870646b19b22eea35e52144ce95c1ad47c4887ccbc9e07b517b46731ef4843990dfecf879ec8d7a1d2705564d5b86060504c9aa1ee595f4689602d609cd6c29d3747c4b4a82b145b6eabe9d7b50bfba7ca8377677a3b4a06dc3fa3d173517d9897d3e39e67e609c45930bbeeea4be816e5fba36ab8e42c1d46a86bd0887dec7f8b976b910d8fbb6e0736faf2e3053676d46c148c2055e6aa8e8bde78ea5f662cc50e0fd5d69a16452dfb48b35280a2c8629e70857302c7e7011e861489db6b83c3c1aa1eae98a9b6b80d83aead886ca50a283a70cfa8eaa4eeb6f78488dd1caf9503da53dcdcf89df9a045c1e378d3c200596291b2404873bfde860e30f38eeb45983263648a1a9cedc8bb7a2de626d2701df2f8b040ef08eb09766a286bb7680b4f6ec72a12bfe2497e42575d572dd8851046d1297327956b9b2645ba9fa74f2ff7464e88acba2341fbd3ad941b927ad019b16662d357ae9025b9ae969515c51ab0060e357f90f096f2041f8361e661e96adf164ee7654ccb9a8bfa9b720a8e31ac8d7436bb82a9519b62da478d1ed99f2d50f2fe640f7be578c56803597b3dc0860da830f39097d88c8ceac1c5cc2635c7be07458f16828cc3d252189d74bb4953f20e4494608714ac52407e4385e3743a0d5b9c3390244b6f3cdc4c047082db6808fe6d9e9e6233815946c43977806d1c175ce8ce5fa4a91365644aadbf92c0073459425cacc91f5737dfd92e87973496128c33f550a4a37a7a41397fb566deeb63506031132ea93fe66cc572bad331a5f3921f9459ceb10043325e4fa880ecd5b1cabc8257ee315fabb7cb5204ce61a4726240f7b65edd0d9177307ca43bbf53b9c68968bf24a6ad6571b22832d713d45c4818d2a037a545f21ac0027caecff86e8ef9b8c5395dd41e01a0bbb85fa27cc562b09d3e64144428e11f54a60d855d9cbbe85235c683e43066176bf022b28dfe0b30c6bafb5cba5074d66a24534c480b47a722a1d8c6bbdf21e06eec549838d2301719cc668f4268c32f9aaafebf6e7c1e4e77f0834f8070a28755e73f0fdd4c1ebee619a62f0ec620854ef0c4334023c87736c4ac2bd65ac2381c2258a384ac8869f58a9fb179c26f4550109ba5aca8f60c882c4e7ac91925757946c728cf23c8847962b20426416f45d7f460ba91fa53c986ee375a54b2fd88ff72baf7c7725cd86e6b7d8ebe965ed2e6a6abc7b88f0ec928d955b44575b47854ea2531d01a6ab79cf14a7f885d7705d6a5eef882c3189c613e9c05230133a6806c40abc485e503344c7bf4652db97ea955f5a89b40698dae0ad88b6666d8073a2147e1af8aba4f4df6d156893dca623c24c2417b8482aaa05f762d8aa9aaa321c36040005f3ab98dad43c1b6096b6782c7b1164c52991994546438d982e8fdf38da6a7d6bd3970e80da6cfdf2be3a6419c7b622d739a2911939e54988d8fa017d38014b7d830b6fd60c783b880e59587d3ae7ad7c244c8433cf437282facfeb3bf4fb53fd100c666044768f8d3b1b05128c28dd4a7c749051e585570634380fc566f7a43e172b8d12ede244b2e20586c6b21968834f94dbc7e7bd1819b85220ff5b1cd26c5e03e9253f2a5e4fce87de289dac7ce4108fb757656f263bed9848c3d67559130633bee534427db298cbb7f39b848f4c18244e6a651471ce4dd74f14aba26abd70865b2c2dfe59228f240af66383c19edfe8581a3b277f5ef972889b53545a05c092aee9619ea49b9ab652204dbbc78cb5de347990888afaf00e76b0e84a4777cf3926de4be47b00841fcd88b9a10b51e43e1b670b7dc4629cbbd25866ca750391790d65e9ca7207b5482e890c517da9cea919ce22645ad695eb92fda0281fea0d241c624df85ef205be9d9ba8105fced09858b3a42977c1c0f993a6e02c8e5a915e267fc4e6f94eddc1ad8ea5464efd865c68022f2596f467411a4076768e3b91170dad229df24024f821fd4e38bcac065b56691bbc7c32ae9e28a73d9b446d0fd2a700d970924a259e06597ddec8d59699f9ec63f78bdba7a81c0c1903d7b36dc4266b843cb0176ca65192f74633614ef36e9d83e48d25b500c9b90f4801a5b0c9714272eb67d262cced8d53576360866c5d0316a70c48269037364931a8c77830acf8aac1c1b27429bbe77358d09a8841c1ea7d3d1dee66bae5247527f2ba729fb1a138bef8b6bbf8a45f69211eb4359df3fb42fdc8f0acd13af2afc1c215f63cc56a8cdec0dcca1b3215dbaec9b35610b2fc95caa61fea0e8a4aa82902c054123abc5d84bd3bec0838f475b1893b</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins运维篇</title>
    <url>/2019/10/22/jenkins%E8%BF%90%E7%BB%B4%E7%AF%87/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="jenkins-可视化构建"><a href="#jenkins-可视化构建" class="headerlink" title="jenkins 可视化构建"></a>jenkins 可视化构建</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在之前遇到过开发提交代码后，完全不管提交的代码是否发布成功，及时后来加入了企业微信的告警机制，但是依然有人不会去关注这个。<a id="more"></a> 只有在测试人员在反馈xxx你的代码提交了没有，这时候研发人员才回去看，有时候一个触发构建失败了，摆在那里很久，如有下一个开发人员要对这个工程修改提交的时候发现过不了，这时候再来解决，成本就有点大。这里可以借助看板的形式让研发人员可以随时关注到自己的提交的工程，结合告警来做，效果还是不错的。</p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装Build Monitor View 插件，然后在主页面添加<code>+</code>一个视图<br><img src="https://img.xxlaila.cn/1571707794737.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以根据job的类型或者根据自己的条件进行<a href="https://xxlaila.github.io/2019/08/09/jenkins-job%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">过滤job</a>来生成看板。</p><ul><li>Build Monitor - View Settings: 根据job的一些状态来进行排序<br><img src="https://img.xxlaila.cn/1571708048469.jpg" alt="img"></li></ul><h3 id="jenkins-监控"><a href="#jenkins-监控" class="headerlink" title="jenkins 监控"></a>jenkins 监控</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有时候我们没有监控，但是有时候需要看看jenkins的一些监控信息，如：内存、cpu、系统负债、http响应时间、系统进程数、线程数等，有懒得安装监控，这时候我们可以借助jenkins自带的一个插件<code>Monitoring</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;插件安装完成后，我们可以在系统管理菜单下面看到<code>Monitoring of Jenkins master</code><br><img src="https://img.xxlaila.cn/1571708499625.jpg" alt="img"></p><p>点击进入以后我们可以看到<br><img src="https://img.xxlaila.cn/1571708561404.jpg" alt="img"><br>页面显示乱码，这个可以自己google解决</p><h3 id="Build-Trigger-Badge"><a href="#Build-Trigger-Badge" class="headerlink" title="Build Trigger Badge"></a>Build Trigger Badge</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此插件直接在构建历史记录中显示代表构建原因的图标。它可以让您快速知道是哪个原因触发了构建。如果没有此插件，您有时可能会想知道是什么触发了构建历史中显示的&gt;&gt;特定构建。要知道这一点，您必须单独打开每个链接，这可能很麻烦。<br><img src="https://img.xxlaila.cn/1572059619062.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>pipeline语法</title>
    <url>/2019/10/21/pipeline%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在测试k8s上的ci/cd，之前的ci/cd其实也能满足目前先业务的需求，但是想尝试改进一下，优化以前的job，希望在登录ci的时候更加的简洁，<a id="more"></a> 而且查找job的时候，点击一个job就能查看完整的信息，不需要job之间的来回切换，等等各种理由，😁😁。这里使用jenkins pipeline，起初测试的时候使用pipeline，没问题以后，使用jenkinsfile。</p><h3 id="pipeline-常用介绍"><a href="#pipeline-常用介绍" class="headerlink" title="pipeline 常用介绍"></a>pipeline 常用介绍</h3><h4 id="清理历史build"><a href="#清理历史build" class="headerlink" title="清理历史build"></a>清理历史build</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;普通job的时候清理和保留历史job的build 很简单，勾勾就可以啦，但是pipeline就的使用一下方式，而且还的写在最前面，不然识别不了，会报错的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">options &#123;</span><br><span class="line">        buildDiscarder(logRotar(numToKeepStr: <span class="string">'8'</span>))</span><br><span class="line">        disableConcurrentBuilds()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>buildDiscarder: 保持构建的最大个数</li><li>disableConcurrentBuilds: 禁止并发构建</li></ul><p>详细参数:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">buildDiscarder(logRotator(numToKeepStr: <span class="string">'8'</span>, artifactNumToKeepStr: <span class="string">'8'</span>, daysToKeepStr: <span class="string">'8'</span>, artifactDaysToKeepStr: <span class="string">'7'</span>))</span><br></pre></td></tr></table></figure><ul><li>artifactDaysToKeepStr: 发布包保留天数</li><li>artifactNumToKeepStr: 发布包最大保留#个构建</li><li>daysToKeepStr: 保持构建的天数</li><li>numToKeepStr: 保持构建的最大个数</li></ul><h4 id="gitlab事件触发"><a href="#gitlab事件触发" class="headerlink" title="gitlab事件触发"></a>gitlab事件触发</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前的我们的ci/cd都是开发提交到某一个分支，然后jenkins会自动触发编译、发布，而且配置这个步骤也需要好几步才能实现，但在pipeline中也可以通过代码形式最这种触发器(勾子)进行配置。这样让每个项目都和jenkins进行耦合；运维人员只需要专注的维护Jenkinsfile，创建对应的项目即可。gitlab触发jenkins的构建需要依赖Gitlab插件。这里需要自行安装</p><ul><li><p>接受固定的分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">        gitlab(triggersOnPush: <span class="literal">true</span>,</span><br><span class="line">              triggersOnMergeRequest: <span class="literal">true</span>,</span><br><span class="line">              branchFilterType: <span class="string">"NameBasedFilter"</span>,</span><br><span class="line">              includeBranchesSpec: <span class="string">"dev,test,master"</span>,</span><br><span class="line">              secretToken: <span class="string">"<span class="variable">$&#123;env.git_token&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>triggerOnPush: 当Gitlab触发push事件时，是否执行构建</p></li><li><p>triggerOnMergeRequest: 当Gitlab触发mergeRequest事件时，是否执行构建</p></li><li><p>branchFilterType: 只有符合条件的分支才会触发构建，必选，否则无法实现触发。</p><ul><li>All: 所有分支</li><li>NameBasedFilter: 基于分支名进行过滤，多个分支名使用逗号分隔<ul><li>includeBranchesSpec: 基于branchFilterType值，输入期望包括的分支的规则</li><li>excludeBranchesSpec: 基于branchFilterType值，输入期望排除的分支的规则</li></ul></li><li>RegexBasedFilter: 基于正则表达式对分支名进行过滤<ul><li>sourceBranchRegex: 定义期望的通过正则表达式限制的分支规则</li></ul></li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以分支不阐述，其他的两个选项是最实用的，我们在正式使用的时候一定会用到这个，上面的例子是一个接受固定的几个分支</p><ul><li>匹配的方式<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">        gitlab(triggersOnPush: <span class="literal">true</span>,</span><br><span class="line">              triggersOnMergeRequest: <span class="literal">true</span>,</span><br><span class="line">              branchFilterType: <span class="string">"RegexBasedFilter"</span>,</span><br><span class="line">              sourceBranchRegex: <span class="string">"dev.*"</span>,</span><br><span class="line">              secretToken: <span class="string">"<span class="variable">$&#123;env.git_token&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里的git_token需要在jenkins的全局变量里面添加一个<code>Environment variables</code>对应的一个键值即可。</p><p><strong>注</strong>: 所有的触发器都需要先手动执行一次，让jenkins家在其中的配置，对应的指令才会生效。</p><ul><li><p>jenkins 验证<br><img src="https://img.xxlaila.cn/1571644117201.jpg" alt="img"></p></li><li><p>gitlab验证<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要将项目回调地址写入到Gitlab钩子当中才可以。经过测试一个pipeline的job可以管理多个分支的触发，避免之前的每一个分支的job进行触发。</p></li></ul><h4 id="parameters-模块"><a href="#parameters-模块" class="headerlink" title="parameters 模块"></a>parameters 模块</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该模块需要安装，parameters指令提供用户在触发Pipeline时应提供的参数列表。这些用户指定的参数的值通过该params对象可用于Pipeline步骤。研发经常会有打出一个特性分支，这个分支用于hotfix，这个时候就要给研发提交一个可以选择的分支，然他们去部署到对应的环境。</p><ul><li><p>字符串参数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;定义一个字符串参数，用户可以在Jenkins UI上输入字符串，常见使用这个参数的场景有，用户名，收件人邮箱，文件网络路径，主机名称的或者url等</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    string(name: <span class="string">'DEPLOY_ENV'</span>, defaultValue: <span class="string">'staging'</span>, description: <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>布尔值参数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;定义一个布尔类型参数，用户可以在Jenkins UI上选择是还是否，选择是表示代码会执行这部分，如果选择否，会跳过这部分。一般需要使用布尔值的场景有，执行一些特定集成的脚本或则工作，或者事后清除环境，例如清楚Jenkins的workspace这样的动作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    booleanParam(name: <span class="string">'DEBUG_BUILD'</span>, defaultValue: <span class="literal">true</span>, description: <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择参数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择（choice）的参数就是支持用户从多个选择项中，选择一个值用来表示这个变量的值。工作中常用的场景，有选择服务器类型，选择版本号等。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    choice(name: <span class="string">'ENV_TYPE'</span>, choices: [<span class="string">'dev'</span>, <span class="string">'test'</span>, <span class="string">'product'</span>], description: <span class="string">'dev env test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当然parameters模块我们用的最多的是在手动的时候我们可以手动点击进行构建部署，至于其他的目前我暂时未用到</p><ul><li>选择分支部署<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;label <span class="string">'agent-node'</span>&#125;</span><br><span class="line">    parameters &#123;</span><br><span class="line">        gitParameter branchFilter: <span class="string">'origin/(.*)'</span>, defaultValue: <span class="string">'dev'</span>, name: <span class="string">'BRANCH'</span>, <span class="built_in">type</span>: <span class="string">'PT_BRANCH'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'gitlib code'</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                git branch:<span class="string">"<span class="variable">$&#123;params.BRANCH&#125;</span>"</span>, credentialsId:<span class="string">'gitlabUser'</span>, url: <span class="string">"http://gitlab.xxlaila.cn/xxx/kxl-eureka.git"</span></span><br><span class="line">                script &#123;</span><br><span class="line">                    build_tag = sh(returnStdout: <span class="literal">true</span>, script: <span class="string">'git rev-parse --short HEAD'</span>).trim()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>parameters<a href="https://wiki.jenkins.io/display/JENKINS/Git+Parameter+Plugin" target="_blank" rel="noopener">官方参考</a>，介绍得挺详细的，<a href="https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/136740885/Triggering+Jenkins+Based+on+New+Tags" target="_blank" rel="noopener">辅助参考</a><br><img src="https://img.xxlaila.cn/1571651950634.jpg" alt="img"></p><ul><li>还可以写成<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    gitParameter(</span><br><span class="line">        branch: <span class="string">''</span>,</span><br><span class="line">        branchFilter: <span class="string">'origin/(.*)'</span>,</span><br><span class="line">        defaultValue: <span class="string">'dev'</span>,</span><br><span class="line">        description: <span class="string">'test code'</span>,</span><br><span class="line">        name: <span class="string">'BRANCH'</span>,</span><br><span class="line">        quickFilterEnabled: <span class="literal">false</span>,</span><br><span class="line">        selectedValue: <span class="string">'NONE'</span>,</span><br><span class="line">        sortMode: <span class="string">'NONE'</span>,</span><br><span class="line">        tagFilter: <span class="string">'*'</span>,</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'PT_BRANCH'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里有一个问题：当这里设置了可以选择分支的时候，然后在之前的自动触发就会有问题，就是在去分支拉去代码的时候就一只是dev分支，而不是其他的分支，这里仍然在探索的测试中。<br>编辑job可以看到<br><img src="https://img.xxlaila.cn/1571903055002.jpg" alt="img"></p><h3 id="多分支pipeline"><a href="#多分支pipeline" class="headerlink" title="多分支pipeline"></a>多分支pipeline</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照上面的又要支持用户可以选择分支，又要适合自动触发功能。用单分支pipeline来管理项目，又要回到我们最初的模式，而在实际过程中，我们可以用到多分支同时进行开发。这样就满足了我们的实际需求。多分支任务这里不做过多的详细介绍，这里阐述两个功能点；分别是分支的扫描策略和孤儿项策略(Orphaned Item)。</p><h4 id="分支的扫描策略"><a href="#分支的扫描策略" class="headerlink" title="分支的扫描策略"></a>分支的扫描策略</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分支扫描是jenkins根据一定的策略去代码仓库扫描分支，如果有新分支就创建一个以新分支命名的任务，如果发现分支被删除，就删除对应的jenkins任务。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在”扫描多分支流水线触发器(Scan Multibranch Pipeline Triggers)”下有一个: Periodically if not otherwise run（没有手动触发，就定期扫描分支）。选择此项，设置一个扫描间隔时长。可以根据项目分支的频繁程度设置周期的长短，也可以在任务页面手动触发jenkins进行扫描。<br><img src="https://img.xxlaila.cn/1571973819297.jpg" alt="img"></p><h4 id="孤儿项策略-Orphaned-Item"><a href="#孤儿项策略-Orphaned-Item" class="headerlink" title="孤儿项策略(Orphaned Item)"></a>孤儿项策略(Orphaned Item)</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该功能是在代码仓库中删除了release分支，那么在多任务页面上，该分支在jenkins上的任务也应该对应删除。什么时候删除，取决于下次分支扫描时间。如果代码仓库中的分支被删除，而jenkins上响应的任务没有被删除，那么这个任务就是所说的孤儿任务。对于分支任务的历史记录，保存多长时间设置</p><ul><li><p>界面配置<br><img src="https://img.xxlaila.cn/1571974190710.jpg" alt="img"></p></li><li><p>pipeline 写法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">orphanedItemStrategy &#123;</span><br><span class="line">    discardolditems &#123;</span><br><span class="line">        daysTokeep(10)</span><br><span class="line">        numToKeep(5)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注</strong>: 这里孤儿策略pipeline 需要另外一种方式来支持，<a href="https://gitee.com/jenkins-zh/gitlab-branch-source-plugin" target="_blank" rel="noopener">Setting up GitLab Server Configuration on Jenkins</a>，这里没有用到这个，不做过多的阐述。<a href="https://github.com/jenkinsci/job-dsl-plugin/wiki/Migration" target="_blank" rel="noopener">github参考</a></p><h3 id="多分支的自动触发"><a href="#多分支的自动触发" class="headerlink" title="多分支的自动触发"></a>多分支的自动触发</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分支的触好处是多多的，自然在多分支面前自动触发肯定也少不了。多分支的触发有两种模式，分别是前面提到的Gitlab trigger和Generic Webhook Trigger。下面分别对两种模式进行阐述和实际的测试</p><h4 id="Generic-Webhook-Trigger"><a href="#Generic-Webhook-Trigger" class="headerlink" title="Generic Webhook Trigger"></a>Generic Webhook Trigger</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Generic Webhook Trigger 插件需要提前安装，GenericTrigger触发条件是由GWT插件提供，GenericTrigger触发的条件分为5个部分。<a href="https://wiki.jenkins.io/display/JENKINS/Generic+Webhook+Trigger+Plugin" target="_blank" rel="noopener">GenericTrigger官方参考</a></p><ul><li>从HTTP POST请求中提取参数</li><li>token，GWT插件用于标识jenkins项目的唯一性</li><li>根据请求参数值判断是否触发Jenkins项目执行</li><li>日志控制打印</li><li>webhook响应控制</li></ul><h4 id="GerenericTrigger-的写法"><a href="#GerenericTrigger-的写法" class="headerlink" title="GerenericTrigger 的写法"></a>GerenericTrigger 的写法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">    GenericTrigger(</span><br><span class="line">        genericVariables:[</span><br><span class="line">            [key: <span class="string">'ref'</span>, value: <span class="string">'$.ref'</span>]</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        token: env.JOB_NAME,</span><br><span class="line">        regexpFilterText: <span class="string">'$ref'</span>,</span><br><span class="line">        regexpFilterExpression: <span class="string">'refs/heads/'</span> + env.BRANCH_NAME</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;env.BRANCH_NAME 这里指的是分支名。当然这样修改以后是不行的，是达不到自动触发的，需要自行去gitlab上添加钩子，这里经过测试流程：用户修改dev分支，push到gitlab dev分支可以触发任务的dev分支自动构建；合并到test分支，也可以触发test分支自动构建；在合并到master分支也能自动触发任务的master分支自动构建。<br><img src="https://img.xxlaila.cn/1571984557618.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们要实现这块，要理解知道这个东西，首先要知道gitlab push 数据的格式，知道了gitlab push格式，我们才知道应该怎么操作，<a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#webhooks" target="_blank" rel="noopener">gitlab push数据的格式参考</a>，</p><ul><li>参考<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"object_kind"</span>: <span class="string">"push"</span>,</span><br><span class="line">  <span class="string">"before"</span>: <span class="string">"95790bf891e76fee5e1747ab589903a6a1f80f22"</span>,</span><br><span class="line">  <span class="string">"after"</span>: <span class="string">"da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">  <span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br><span class="line">  <span class="string">"checkout_sha"</span>: <span class="string">"da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">  <span class="string">"user_id"</span>: 4,</span><br><span class="line">  <span class="string">"user_name"</span>: <span class="string">"John Smith"</span>,</span><br><span class="line">  <span class="string">"user_username"</span>: <span class="string">"jsmith"</span>,</span><br><span class="line">  <span class="string">"user_email"</span>: <span class="string">"john@example.com"</span>,</span><br><span class="line">  <span class="string">"user_avatar"</span>: <span class="string">"https://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=8://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=80"</span>,</span><br><span class="line">  <span class="string">"project_id"</span>: 15,</span><br><span class="line">  <span class="string">"project"</span>:&#123;</span><br><span class="line">    <span class="string">"id"</span>: 15,</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"Diaspora"</span>,</span><br><span class="line">    <span class="string">"description"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="string">"web_url"</span>:<span class="string">"http://example.com/mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"avatar_url"</span>:null,</span><br><span class="line">    <span class="string">"git_ssh_url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"git_http_url"</span>:<span class="string">"http://example.com/mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"namespace"</span>:<span class="string">"Mike"</span>,</span><br><span class="line">    <span class="string">"visibility_level"</span>:0,</span><br><span class="line">    <span class="string">"path_with_namespace"</span>:<span class="string">"mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"default_branch"</span>:<span class="string">"master"</span>,</span><br><span class="line">    <span class="string">"homepage"</span>:<span class="string">"http://example.com/mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"ssh_url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"http_url"</span>:<span class="string">"http://example.com/mike/diaspora.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"repository"</span>:&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Diaspora"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"homepage"</span>: <span class="string">"http://example.com/mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"git_http_url"</span>:<span class="string">"http://example.com/mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"git_ssh_url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"visibility_level"</span>:0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"commits"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"b6568db1bc1dcd7f8b4d5a946b0b91f9dacd7327"</span>,</span><br><span class="line">      <span class="string">"message"</span>: <span class="string">"Update Catalan translation to e38cb41."</span>,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2011-12-12T14:27:31+02:00"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"http://example.com/mike/diaspora/commit/b6568db1bc1dcd7f8b4d5a946b0b91f9dacd7327"</span>,</span><br><span class="line">      <span class="string">"author"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Jordi Mallach"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"jordi@softcatala.org"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"added"</span>: [<span class="string">"CHANGELOG"</span>],</span><br><span class="line">      <span class="string">"modified"</span>: [<span class="string">"app/controller/application.rb"</span>],</span><br><span class="line">      <span class="string">"removed"</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">      <span class="string">"message"</span>: <span class="string">"fixed readme"</span>,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2012-01-03T23:36:29+02:00"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"http://example.com/mike/diaspora/commit/da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">      <span class="string">"author"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"GitLab dev user"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"gitlabdev@dv6700.(none)"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"added"</span>: [<span class="string">"CHANGELOG"</span>],</span><br><span class="line">      <span class="string">"modified"</span>: [<span class="string">"app/controller/application.rb"</span>],</span><br><span class="line">      <span class="string">"removed"</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"total_commits_count"</span>: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果我们想根据不同的分支提交来触发jenkins的构建，那就应该知道post数据哪一个属性代表了不同的分支，我们可以在第四行看到</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br></pre></td></tr></table></figure><p><strong>注释</strong>: 也可以通过IDEA工具提交的时候看到提交的选项。可以看到我们用ref可以很好的区分不同分支，这里就是为什么要填写ref的原因。我们可以通过pipeline代码的生成器来生成</p><ul><li>pipeline 代码生成器<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">  GenericTrigger causeString: <span class="string">'Generic Cause'</span>, genericVariables: [[defaultValue: <span class="string">''</span>, key: <span class="string">'ref'</span>, regexpFilter: <span class="string">''</span>, value: <span class="string">'$.ref'</span>]], printContributedVariables: <span class="literal">true</span>, printPostContent: <span class="literal">true</span>, regexpFilterExpression: <span class="string">'\'</span>refs/heads/\<span class="string">' + evn.BRANCH_NAME'</span>, regexpFilterText: <span class="string">'$ref'</span>, token: <span class="string">'env.JOB_NAME'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img.xxlaila.cn/1571982583457.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571982622070.jpg" alt="img"></p><p><strong>注</strong>: token参数的作用是标识一个pipeline在jenkins中的唯一性，这个参数的重要性就得提起GWT插件的原理。当jenkins收到generic-webhook-trgger/invoke接口的请求时，会将请求代理给GWT插件处理，GWT插件内容会从jenkins实例对象中取出所有的参数化jenkins项目，包括pipeline，然后进行遍历。如果我们在参数化项目中Generic Trigger配置token的值与webhook请求时的token一致，就会触发改项目。如果多个参数化项目的token一样，则都会进行触发，所以这里的token最好时JOB_NAME项目名，因为这个是在项目或者是在为服务领域他都是唯一的。</p><ul><li>参数介绍:<ul><li>regexpFilterText: 需要进行匹配的key，例子中，使用从post body中提取的ref变量值。</li><li>regexpFilterExpression: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" target="_blank" rel="noopener">正则表达式</a>；如果regexpFilterText参数符合regexpFilterExpression参数的正则表达式，则触发执行。</li><li>printPostContent: 布尔值，将webhook请求信息打印到日志上</li><li>printContributedVariables: 布尔值，将提取后的变量名及变量值打印出来</li><li>causeString: 字符串型，触发原因，可以直接应用提取后的变量，如 causeString: ‘Triggered on $msg’</li><li>Silent response: 布尔型，在正常情况下，当webhook请求成功后，GWT插件会返回HTTP 200状态码和触发结果给对方调用，但是当Silentresponse设置为true时，就只返回HTTP 200状态码，不反悔触发结果</li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的看的出来，我们只要是提交了分支都可以进行触发构建，但是呢，在实际生产中，我们定义了dev——&gt;test——master 分支，就是只想要这几个进行触发构建，其他的不进行触发，让开发自己去点击。</p><ul><li><p>指定分支构建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">  GenericTrigger causeString: <span class="string">'Triggered on $msg'</span>, genericVariables: [[defaultValue: <span class="string">''</span>, key: <span class="string">'ref'</span>, regexpFilter: <span class="string">''</span>, value: <span class="string">'$.ref'</span>]], printContributedVariables: <span class="literal">true</span>, printPostContent: <span class="literal">true</span>, regexpFilterExpression: <span class="string">'\'</span>refs/heads/(dev|<span class="built_in">test</span>|master)\<span class="string">''</span>, regexpFilterText: <span class="string">'$ref'</span>, token: <span class="string">'env.JOB_NAME'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多分支Gitlab trigger<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多分支的Gitlab trigger和我们前面介绍的gitlab事件触发一样的，没有任何区别，这里我测试了一个job，没有任何问题。同时新建了一个分支，jenkins会自动的扫描新建一个以分支为名的任务，进行自动触发。当我删除了某一个分支，就会触发自动扫描，然后查看分支为删除。</p></li><li><p>删除分支<br><img src="https://img.xxlaila.cn/1571996378764.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571996257688.jpg" alt="img"></p></li><li><p>整体效果图<br><img src="https://img.xxlaila.cn/1571990331005.jpg" alt="img"></p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里介绍一下部署这块，根据branch来进行判断，不同的branch部署到不同的环境，当设定的值不在branch范围内，就需要人为的制定部署环境。当人员三分钟内没有来进行环境部署的选择，系统就会断开，对该分支标记为结束。</p><p><a href="http://xxlaila.github.io/2019/10/25/pipeline%E5%A4%9A%E5%88%86%E6%94%AFgitlab%E8%A7%A6%E5%8F%91/" target="_blank" rel="noopener">完整文件</a><br><a href="https://jenkinsci.github.io/job-dsl-plugin/#path/buildPipelineView" target="_blank" rel="noopener">推荐学习参考地址</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticserch</title>
    <url>/2019/10/17/elasticserch%E6%97%A5%E5%B8%B8%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="days-1"><a href="#days-1" class="headerlink" title="days 1"></a>days 1</h3><a id="more"></a><h4 id="elasticserch-索引和数据操作"><a href="#elasticserch-索引和数据操作" class="headerlink" title="elasticserch 索引和数据操作"></a>elasticserch 索引和数据操作</h4><ul><li><p>查看索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -XGET 'http://127.0.0.1:9200/_cat/indices?v'</span></span><br></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -XGET 'http://127.0.0.1:9200/_cat/indices?v' |grep "red"|awk '&#123;print $3&#125;'|uniq &gt;l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in `cat a`;do  curl -XDELETE http://127.0.0.1:9200/$&#123;i&#125;;done</span></span><br></pre></td></tr></table></figure></li><li><p>查看shards</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -XGET http://127.0.0.1:9200/_cat/shards</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shards 有几种类型，这里说一下<code>UNASSIGNED</code>，es 集群里面的分片是分配在多台node上的，为的就是高可用，比如你的某台机器crash了，那么集群就会让其他副本顶上来，避免出现某个分片不能提供服务的情况，但是难免还是会出现 UNASSIGNED shards 的错误。</p><ul><li>删除shards UNASSIGNED<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -XGET 'http://127.0.0.1:9200/_cat/shards'|grep "UNASSIGNED"|awk '&#123;print $1&#125;'|uniq &gt;l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in `cat l`;do curl -XDELETE http://127.0.0.1:9200/$i;done</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="elasticserch验证集群"><a href="#elasticserch验证集群" class="headerlink" title="elasticserch验证集群"></a>elasticserch验证集群</h4><ul><li><p>集群相关API</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat</span><br><span class="line">=^.^=</span><br><span class="line">/_cat/allocation</span><br><span class="line">/_cat/shards</span><br><span class="line">/_cat/shards/&#123;index&#125;</span><br><span class="line">/_cat/master</span><br><span class="line">/_cat/nodes</span><br><span class="line">/_cat/tasks</span><br><span class="line">/_cat/indices</span><br><span class="line">/_cat/indices/&#123;index&#125;</span><br><span class="line">/_cat/segments</span><br><span class="line">/_cat/segments/&#123;index&#125;</span><br><span class="line">/_cat/count</span><br><span class="line">/_cat/count/&#123;index&#125;</span><br><span class="line">/_cat/recovery</span><br><span class="line">/_cat/recovery/&#123;index&#125;</span><br><span class="line">/_cat/health</span><br><span class="line">/_cat/pending_tasks</span><br><span class="line">/_cat/aliases</span><br><span class="line">/_cat/aliases/&#123;<span class="built_in">alias</span>&#125;</span><br><span class="line">/_cat/thread_pool</span><br><span class="line">/_cat/thread_pool/&#123;thread_pools&#125;</span><br><span class="line">/_cat/plugins</span><br><span class="line">/_cat/fielddata</span><br><span class="line">/_cat/fielddata/&#123;fields&#125;</span><br><span class="line">/_cat/nodeattrs</span><br><span class="line">/_cat/repositories</span><br><span class="line">/_cat/snapshots/&#123;repository&#125;</span><br><span class="line">/_cat/templates</span><br></pre></td></tr></table></figure></li><li><p>查看集群名称等信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"elk_elasticsearch_data_2"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elk_elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"T47wQwa6TT-6MHJVFM40Tw"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"rpm"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"595516e"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2018-08-17T23:18:47.308994Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"7.4.0"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"5.6.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"5.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看集群节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/nodes?v</span><br><span class="line">ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">172.21.16.198           29          85   0    0.10    0.04     0.05 mdi       -      elk_elasticsearch_data_2</span><br><span class="line">172.21.16.187           48          85   0    0.00    0.01     0.05 mdi       *      elk_elasticsearch_master</span><br><span class="line">172.21.16.206           25          86   0    0.08    0.03     0.05 mdi       -      elk_elasticsearch_data_3</span><br></pre></td></tr></table></figure></li><li><p>验证集群磁盘分配情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/allocation?v</span><br><span class="line">shards disk.indices disk.used disk.avail disk.total disk.percent host          ip            node</span><br><span class="line">    98          1gb     3.6gb     96.3gb     99.9gb            3 172.21.16.198 172.21.16.198 elk_elasticsearch_data_2</span><br><span class="line">    99      887.1mb     4.5gb     95.4gb     99.9gb            4 172.21.16.187 172.21.16.187 elk_elasticsearch_master</span><br><span class="line">    99        957mb     3.5gb     96.4gb     99.9gb            3 172.21.16.206 172.21.16.206 elk_elasticsearch_data_3</span><br></pre></td></tr></table></figure></li><li><p>验证集群健康状况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/health?v </span><br><span class="line">epoch      timestamp cluster           status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1571648406 17:00:06  elk_elasticsearch green           3         3    296 148    0    0        0             0                  -                100.0%</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure></li><li><p>查看每个数据节点上被fielddata所使用的堆内存大小。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/fielddata?v</span><br><span class="line">id                     host          ip            node                     field                    size</span><br><span class="line">VNcRqM30T3axzVjiPkDTmA 172.21.16.187 172.21.16.187 elk_elasticsearch_master event.resultCode.keyword 352b</span><br><span class="line">VNcRqM30T3axzVjiPkDTmA 172.21.16.187 172.21.16.187 elk_elasticsearch_master <span class="built_in">type</span>                     720b</span><br><span class="line">HNc5BrMWQcummBeAskQc4A 172.21.16.206 172.21.16.206 elk_elasticsearch_data_3 event.resultCode.keyword 704b</span><br><span class="line">z3zUA8KxTH6B7C8CmVRUIQ 172.21.16.198 172.21.16.198 elk_elasticsearch_data_2 <span class="built_in">type</span>                     720b</span><br><span class="line">z3zUA8KxTH6B7C8CmVRUIQ 172.21.16.198 172.21.16.198 elk_elasticsearch_data_2 event.resultCode.keyword 704b</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>elasticserch</category>
      </categories>
      <tags>
        <tag>elasticserch</tag>
      </tags>
  </entry>
  <entry>
    <title>nexus配置ldap</title>
    <url>/2019/10/15/nexus%E9%85%8D%E7%BD%AEldap/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="配置nexus"><a href="#配置nexus" class="headerlink" title="配置nexus"></a>配置nexus</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录nexus在设置页，点击ldap，</p><a id="more"></a><p><img src="https://img.xxlaila.cn/1571131890608.jpg" alt="img"><br>参数介绍:</p><ul><li>Name: 随便写</li><li>LDAP server address: 支持ldaps和ldap,而端口则取决于配置。 如果没有特殊配置，ldap默认端口是389</li><li>Search base: 只需要填DC即可，比如DC=example,DC=com。 其它内容，比如CN、OU等，不需要填写</li><li>Authentication method有以下选项:<ul><li>Simple Authentication</li><li>Anonymous Authentication</li><li>DIGEST-MD5</li><li>CRAM-MD5<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通常选择Simple Authentication即可。Username or DN、Password里填写账户、密码，而 Connection rules无需修改。填写完毕后，点击【Verify connection】按钮，可以验证信息。 如果成功，即可保存。</li></ul></li></ul><h4 id="Choose-Users-and-Groups"><a href="#Choose-Users-and-Groups" class="headerlink" title="Choose Users and Groups"></a>Choose Users and Groups</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这项故名思义就是配置用户和组的，在最开头的Configuration template中，有四种模板可选：</p><ul><li>Active Directory</li><li>Generic Ldap Server</li><li>Posix with Dynamic Groups</li><li>Posix with Static Groups</li></ul><p>这里选择<code>Generic Ldap Server</code></p><ul><li>Base DN 在LDAP中找到用户的基本位置。这是相对于搜索基础的（例如ou = people）。</li><li>User subtree通常需要勾选。 如果把LDAP的Tree比作目录的话，勾选以后相当于递归查找子目录。</li><li>User filter通过过滤规则，减少搜索信息，用于提升性能。 仅仅只是提升性能，所以，如果不懂它特殊的匹配规则，也可以不填。</li><li>之前选择了<code>Generic Ldap Server</code>模版后，User ID attribute默认为uid，Real name attribute默认为cn、Email attribute默认为mail、Password attribute为空。</li><li>Map LDAP groups as roles如果不勾选，就不会同步用户组信息。 如果勾选，则可以选择Group type和Group member of attribute。 若无必要，保持默认即可，默认是勾选的。<br><img src="https://img.xxlaila.cn/1571133103461.jpg" alt="img"></li><li>填写完成后，通过【Verify user mapping】可以验证查询结果<br><img src="https://img.xxlaila.cn/1571133221971.jpg" alt="img"><br>点击创建<br><img src="https://img.xxlaila.cn/1571133286829.jpg" alt="img"></li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新起一个窗口利用ldap里面的账号进行登录，可以登录，没有问题，但是登录之后用户没有任何权限，这对于研发来说又是一个不可接受的事情。接下来配置权限</p><h5 id="禁止匿名访问"><a href="#禁止匿名访问" class="headerlink" title="禁止匿名访问"></a>禁止匿名访问</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实际应用中，是不允许匿名用户不可以登录就能访问的，这样我们ldap就没有任何意义了<br><img src="https://img.xxlaila.cn/1571133691247.jpg" alt="img"></p><ul><li>禁止匿名用户<br><img src="https://img.xxlaila.cn/1571133811908.jpg" alt="img"></li></ul><h5 id="创建角色"><a href="#创建角色" class="headerlink" title="创建角色"></a>创建角色</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Security——&gt;Roles——&gt;Create role，这里创建角色有两种。一种是nexus relos本地角色，一种是External roles mapping外部映射的形式。为了满足我们ldap账户登录进来有浏览库的权限，研发又可以上传第三方依赖库的权限，但是不能删除和私下增加库Repositories。所以这里我们需要单独建立一个本地的relos，然后在映射外部的ldap到这个本地的roles，这样ldap账户登录进来就能实现日常的基本操作。</p><ul><li><p>创建nexus relos本地角色<br><img src="https://img.xxlaila.cn/1571296771150.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建完成后，我们需要对他赋予权限，对用户进行权限控制，没有权限控制，就没办法达成我们上面的目标。下面是我赋予的权限，可以结合实际需求来进行赋予。</p></li><li><p>权限介绍:</p><ul><li>ng-component-upload: 有上传的权限，比如java依赖的一些第三方库，研发可以自己进行上传</li><li>ng-repository-admin-<em>-</em>-browse: 浏览所有的repository</li><li>ng-repository-admin-<em>-</em>-read: 可以所有读取repository的配置信息</li><li>ng-repository-view-maven2-maven-central-browse: 具有浏览maven-central内容</li><li>ng-repository-view-maven2-maven-central-read: 读取maven-central内容，在maven编译的时候具有下载的权限，(后面不一一介绍)</li><li>ng-repository-view-maven2-maven-public-browse</li><li>ng-repository-view-maven2-maven-public-read</li><li>ng-repository-view-maven2-maven-releases-browse</li><li>ng-repository-view-maven2-maven-releases-read</li><li>ng-repository-view-maven2-maven-snapshots-browse</li><li>ng-repository-view-maven2-maven-snapshots-read</li><li>ng-repository-view-npm-npm-kxl-all-browse: 以下是自己做的npm代理缓存，可以参考之前的<a href="https://xxlaila.github.io/2019/08/23/nexus3搭建npm私服/" target="_blank" rel="noopener">nexus3搭建npm私服</a></li><li>ng-repository-view-npm-npm-kxl-all-read</li><li>ng-repository-view-npm-npm-external-browse</li><li>ng-repository-view-npm-npm-external-read</li><li>ng-repository-view-npm-npm-internal-browse</li><li>ng-repository-view-npm-npm-internal-read</li><li>ng-search-read: 让用户具有所有权限，没有此权限，研发查找一个包，估计会死</li></ul></li><li><p>创建是External roles mapping外部映射<br><img src="https://img.xxlaila.cn/1571134166780.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571297568491.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在进行Roles ID 这栏目，需要填写的是Users，这个Users会在ldap上同步Users的一个用户组。根据自己的ldap账户组设置来进行填写。下图是ldap的组设置<br><img src="https://img.xxlaila.cn/1571298567078.jpg" alt="img"></p></li></ul><p><strong>注</strong>: 其实在这里我们也可以进行Privileges的权限赋予，但是我选择的是先创建一个本地的nexus relos。然后我们在Roles栏关联之前创建的<code>Developer</code>，完成以后通过ldap账户登录进行测试</p><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里主要是从四个方面来测试ldap账户。分别是: 登录默认的权限、浏览所有库的权限、Browse的浏览、Browse库的上传</p><ul><li><p>登录默认的权限<br><img src="https://img.xxlaila.cn/1571297962563.jpg" alt="img"></p></li><li><p>浏览所有库的权限<br><img src="https://img.xxlaila.cn/1571298121188.jpg" alt="img"></p></li><li><p>Browse的浏<br><img src="https://img.xxlaila.cn/1571298018356.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571298167348.jpg" alt="img"></p></li><li><p>Browse库的上传<br><img src="https://img.xxlaila.cn/1571298224331.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571298260091.jpg" alt="img"></p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>nexus</category>
      </categories>
      <tags>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins配置备份</title>
    <url>/2019/10/15/jenkins%E9%85%8D%E7%BD%AE%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="jenkins-备份"><a href="#jenkins-备份" class="headerlink" title="jenkins 备份"></a>jenkins 备份</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当jenkins在用起来的时候，我们难保他不会出故障，但是出了故障我们怎么做到快速的恢复呢，这时备份就显得尤为重要了。但jenkins本身不提供备份的功能，<a id="more"></a> 所以这里就需要借助外力。备份可以多样化，一种是我们直接到jenkins的目录下面手动备份jenkins目录。一种是我们就jenkins自带的插件<code>thinBackup</code>和<code>Periodic Backup</code>进行备份恢复，下面进行分别介绍</p><h3 id="thinBackup备份"><a href="#thinBackup备份" class="headerlink" title="thinBackup备份"></a>thinBackup备份</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录jenkins——&gt;系统管理——&gt;插件管理<br><img src="https://img.xxlaila.cn/1571101180571.jpg" alt="img"><br>安装完成之后重启jenkins服务，登录jenkins在系统管理界面可以看到<br><img src="https://img.xxlaila.cn/1571101557754.jpg" alt="img"></p><h4 id="配置ThinBackup"><a href="#配置ThinBackup" class="headerlink" title="配置ThinBackup"></a>配置ThinBackup</h4><ul><li>点击ThinBackup<br><img src="https://img.xxlaila.cn/1571101640273.jpg" alt="img"><br>可以看到有三个选项:</li><li>Backup Now: 手动立即备份</li><li>Restore: 恢复备份</li><li>Settings: 备份参数的设置</li></ul><h5 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面是我的备份参数，可以根据自己的需要自己设定备份参数，设置好友save即可，<code>Backup schedule for full backups</code>意思是周一到周五每天凌晨两点进行备份<br><img src="https://img.xxlaila.cn/1571102057919.jpg" alt="img"></p><h5 id="Restore"><a href="#Restore" class="headerlink" title="Restore"></a>Restore</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;备份文件是以日期+时间节点组成的文件名，我们恢复什么时间段的，点击进行恢复，<br><img src="https://img.xxlaila.cn/1571102188007.jpg" alt="img"></p><h3 id="Periodic-Backup"><a href="#Periodic-Backup" class="headerlink" title="Periodic Backup"></a>Periodic Backup</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;备份除了上面提到的插件还有一个插件是<code>Periodic Backup</code>，安装<code>Periodic Backup</code>不阐述，安装完成后可以在系统管理菜单下面有一个<code>Periodic Backup Manager</code>菜单<br><img src="https://img.xxlaila.cn/1571709136813.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开<code>Periodic Backup Manager</code>，第一次打开是没有任何东西的，需要我们自己去建立一个规则，点击<code>Configure</code><br><img src="https://img.xxlaila.cn/1571709270639.jpg" alt="img"></p><p>配置项很简单:</p><ul><li>Temporary Directory: 临时目录</li><li>Backup schedule (cron): 进行备份cron的表达式，填写完成后点击<code>Validate cron syntax</code>进行验证</li><li>Maximum backups in location: 最大位置备份，保留多少个备份文件</li><li>Store no older than (days): 保留的时间</li><li>File Management Strategy: 备份策略<ul><li>ConfigOnly: 只备份配置文件</li><li>FullBackup: 进行全量备份，可以通过Excludes list中填入Ant风格表达式，排除不希望备份的文件，多个表达式使用分号分隔</li></ul></li><li>Storage Strategy: 存储策略，就是是否需要进行压缩存储</li><li>Backup Location: 备份的位置，都是本地目录<br><img src="https://img.xxlaila.cn/1571709879768.jpg" alt="img"></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins配置ldap</title>
    <url>/2019/10/14/jenkins%E9%85%8D%E7%BD%AEldap/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;公司研发人员和测试人员，还有运维人员有时候登录jenkins去查看一些job的状态或者是其他的东西，虽然有企业微信的通知，但是感觉还是不能满足，<a id="more"></a> 比如job错误了，企业微信虽然吧错误发给了研发人员，但是研发还是要登录jenkins上去看，就感觉要舒服一点，测试上做的一些自动化测试，有时候失败了他们也会去看或者是去建立一些自动化的job。之前建立了公共的账号，开发和测试人员都去登录，但是有时候他们误操作了，导致一些其他的东西失败或者错误，虽然做了权限控制，但是他们还是死不承认，所以这里介入ldap。谁动的就知道了，这样就不怕了。</p><h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录jenkins——&gt;系统管理——&gt;全局安全配置<br><img src="https://img.xxlaila.cn/1571025388007.jpg" alt="img"><br>访问控制——&gt;LDAP<br><img src="https://img.xxlaila.cn/1571027524602.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置完成以后我们需要测试一下连接是否正常，点击<code>Test LDAP setttings</code>，输入在ldap的其中一个账户来进行验证，没问题的结果如下:<br><img src="https://img.xxlaila.cn/1571027696951.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置完成并测试通过后就可以用LDAP直接登录了<br><strong>注</strong>: 启用了LDAP登录后将无法再用之前的登录方式（本地认证将无法在使用）登录，登录进来的任何一个账号都是管理员，都是管理着肯定来说不安全，权限配置请下看</p><p><a href="https://wiki.jenkins.io/display/JENKINS/LDAP+Plugin" target="_blank" rel="noopener">官方参考</a></p><h3 id="配置ldap的账户权限"><a href="#配置ldap的账户权限" class="headerlink" title="配置ldap的账户权限"></a>配置ldap的账户权限</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面我们虽然吧ldap配置完成，但是我们需要对用户进行权限的配置，不可能每个人登录都能对我们jenkins进行无限制的操作，这不符合我们之前的意图。安装<code>Role-based Authorization Strategy</code>插件</p><ul><li>在系统管理——&gt;全局安全配置,可以看到下面选项，每项介<a href="https://xxlaila.github.io/2019/08/09/jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">参考</a><br><img src="https://img.xxlaila.cn/1571034253089.jpg" alt="img"></li></ul><p>保存以后，返回系统管理界面就可以看到多处一个<code>Manage and Assign Roles</code><br><img src="https://img.xxlaila.cn/1571034433352.jpg" alt="img"><br>点击进去</p><p><img src="https://img.xxlaila.cn/1571034507945.jpg" alt="img"></p><ul><li><strong>Manage Roles</strong>: 角色分为Global和Project，可创建角色分组和添加项目。</li><li><strong>Assign Roles</strong>: 增加具体的用户，分配到角色组，指定项目权限。</li></ul><p><a href="https://xxlaila.github.io/2019/08/09/jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">权限设置</a></p><ul><li>下面我的配置，和之前的大同小异<br><img src="https://img.xxlaila.cn/1571038684383.jpg" alt="img"></li></ul><p><strong>注</strong>: 这里有一个小问题，这样配置以后，新用户登录进来以后就会提示没有权限，<code>Access Denied,xxxx没有全部/Read权限</code>，这是因为在打开jenkins后，没有创建用户前，先不要勾选系统设置中启用安全选项，如果勾选了，就会出现无法进入jenkins的现象<br><img src="https://img.xxlaila.cn/1571037187865.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在网上看到有这种的解决办法，有几种方案，一个是修改confing.xml的文件，修改config.xml文件的三种方式感觉都不太切合实际的业务；下面是我做的两种办法，推荐使用第二种</p><ul><li><p>Role-Based Strategy<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>Assign Roles</code>吧用户添加进来，然后勾选权限，<br>系统管理——&gt;Manage and Assign Roles——&gt;Assign Roles<br><img src="https://img.xxlaila.cn/1571037604678.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是这有一个弊端，就是每次新来一个用户就得去添加一次用户权限，虽然满足了业务需求，但是不科学</p></li><li><p>项目矩阵授权策略<br><img src="https://img.xxlaila.cn/1571041499340.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个全局的配置，特定组只能按照最小的权限授权，额外的权限可以在具体的项目权限矩阵里面在添加。 默认只有<code>Anonymous Users</code>和<code>Authenticated Users</code>，管理员组是需要添加的<code>admin</code></p></li><li><p>Anonymous Users: 匿名用户，显然不能</p></li><li><p>Authenticated Users: 认证用户，就是只要是认证的账号都可以拥有的权限</p></li><li><p>admin: 就是拥有所有的权限了，这个组一般只能运维人员和部门老大加入。</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加入admin组以后，他会自动去同步ldap的组用户，如果用户在ldap是admin组，那么在这里就会是管理员权限，如果用户是普通组，那么就是<code>Authenticated Users</code>组赋予的权限，使用这种方式只要用户是ldap里面的，就可以登录查看。这样就满足了业务场景需求</p><h3 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;记录用户日志需要单独的安装<code>Audit Trail</code>插件，该插件在Jenkins主配置页面中添加了一个配置部分，可以在此处配置日志位置和设置（文件大小和循环日志文件的数量），以及用于记录请求的URI模式。默认选项选择效果显着的大多数操作，例如创建/配置/删除作业和视图或永久删除/保存/开始构建。日志将按照配置写入磁盘，最近的条目也可以在“管理/系统日志”部分中查看。<br><img src="https://img.xxlaila.cn/1572057054289.jpg" alt="img"><br><a href="https://plugins.jenkins.io/audit-trail" target="_blank" rel="noopener">Audit Trail官方参考</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里配置以后还不能记录job的日志，需要对job进行记录需要另外的安装<a href="https://wiki.jenkins.io/display/JENKINS/JobConfigHistory+Plugin" target="_blank" rel="noopener">Job Configuration History插件</a>，根据官方的介绍，可用于查看所有作业配置历史记录或仅查看已删除的作业或所有类型的配置历史记录条目。同时，如果配置了安全策略，还可以查看哪个用户进行了哪些更改。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装完成后，我们在job里面可以看到一个<code>Job Config History</code>的菜单。最开始没有没有任何记录，只有当构建job或者修改过job以后才会有记录<br><img src="https://img.xxlaila.cn/1572057782047.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1572057958019.jpg" alt="img"></p><ul><li>点击Show Diffs 可以看到我们具体修改了什么东西<br><img src="https://img.xxlaila.cn/1572058118436.jpg" alt="img"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我们安装好这个插件以后，也测试可以使用，但是我们不能让所有的job日志记录保存历史过久，如果job过多，记录过多，这会对我们的磁盘空间来说，肯定是一个压力，所以这里我们就需要进行配置，保存多少次的记录，而且还可以设置排除的文件。<br><img src="https://img.xxlaila.cn/1572058857084.jpg" alt="img"></p><p><a href="https://wiki.jenkins.io/display/JENKINS/JobConfigHistory+Plugin" target="_blank" rel="noopener">Job Configuration History官方</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>java应用部署</title>
    <url>/2019/10/12/java%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="Welcome to my blog, enter password to read." />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="8b481f1191aa8272e6dfb192b30c56b78bb022704af630b893c7739128834075"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>harbor 使用</title>
    <url>/2019/10/10/harbor-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h4 id="days-2019-10-10"><a href="#days-2019-10-10" class="headerlink" title="days(2019-10-10)"></a>days(2019-10-10)</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面文章介绍了harbor的部署，今天第一次学习入门使用。</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务器安装docker以后，我们怎么吧镜像push到我们的私有仓库，和怎么吧镜像pull到本地，首先在服务器上装备docker环境</p><h5 id="连接harbor"><a href="#连接harbor" class="headerlink" title="连接harbor"></a>连接harbor</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker login reg.xxlaila.cn</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">Error response from daemon: Get https://172.21.16.90/v1/users/: dial tcp reg.xxlaila.cn:443: connect: connection refused</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里第一次连接报错，Docker自从1.3.X之后docker registry交互默认使用的是HTTPS，但是我们搭建私有镜像默认使用的是HTTP服务，所以与私有镜像交时出现以上错误。</p><h5 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h5><ul><li><p>方法一: 修改或添加配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/docker/daemon.json </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"insecure-registries"</span> : [<span class="string">"reg.xxlaila.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新启动docker，并重新登录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl restart docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  docker login reg.xxlaila.cn</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure></li><li><p>方法二：修改启动文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /usr/lib/systemd/system/docker.service  </span></span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry reg.xxlaila.cn <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="Harbor上创建新项目供上传使用"><a href="#Harbor上创建新项目供上传使用" class="headerlink" title="Harbor上创建新项目供上传使用"></a>Harbor上创建新项目供上传使用</h5><p><img src="https://img.xxlaila.cn/1570697850857.jpg" alt="img"></p><h5 id="Docker服务器给镜像打标签"><a href="#Docker服务器给镜像打标签" class="headerlink" title="Docker服务器给镜像打标签"></a>Docker服务器给镜像打标签</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/xxlaila/kxl-eureka   v2                  eb8cf7e3f24f        7 months ago        474 MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker tag docker.io/xxlaila/kxl-eureka:v2 reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/xxlaila/kxl-eureka    v2                  eb8cf7e3f24f        7 months ago        474 MB</span><br><span class="line">reg.xxlaila.cn/kxl/kxl-eureka   v2                  eb8cf7e3f24f        7 months ago        474 MB</span><br></pre></td></tr></table></figure><h5 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker push reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line">The push refers to a repository [reg.xxlaila.cn/kxl/kxl-eureka]</span><br><span class="line">f6026bf67b63: Pushed </span><br><span class="line">1489a4b0f1dd: Pushed </span><br><span class="line">2af6e035aa36: Pushed </span><br><span class="line">472cfce4528e: Pushed </span><br><span class="line">071d8bd76517: Pushed </span><br><span class="line">v2: digest: sha256:20d3bc74fdcb2fc4cdfc9066f742c828898c728f7e3f2114498ebe2848b71653 size: 1368</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/1570698233987.jpg" alt="img"></p><h5 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h5><ul><li><p>删除本地镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker rmi reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker rmi docker.io/xxlaila/kxl-eureka:v2</span></span><br></pre></td></tr></table></figure></li><li><p>下载harbor上的镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line">Trying to pull repository reg.xxlaila.cn/kxl/kxl-eureka ... </span><br><span class="line">v2: Pulling from reg.xxlaila.cn/kxl/kxl-eureka</span><br><span class="line">a02a4930cb5d: Pull complete </span><br><span class="line">6ea3dcbee0db: Extracting [==================================================&gt;]  81.4 MB/81.4 MB</span><br><span class="line">6ea3dcbee0db: Pull complete </span><br><span class="line">c423a7a79cc1: Pull complete </span><br><span class="line">7418081934c1: Pull complete </span><br><span class="line">f89b73853622: Pull complete </span><br><span class="line">Digest: sha256:20d3bc74fdcb2fc4cdfc9066f742c828898c728f7e3f2114498ebe2848b71653</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> reg.xxlaila.cn/kxl/kxl-eureka:v2</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img.xxlaila.cn/1570698681073.jpg" alt="img"></p><h4 id="days-2019-10-12"><a href="#days-2019-10-12" class="headerlink" title="days(2019-10-12)"></a>days(2019-10-12)</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于公司需求，开发人员比较多，又不想研发用一个账号，也不想给研发一个个的开账号，位置harbor支持了ldap。有了这么一个东西，我们就能很好的为研发创建账号支持研发随时查看docker的镜像。</p><h4 id="配置harbor-ldap"><a href="#配置harbor-ldap" class="headerlink" title="配置harbor ldap"></a>配置harbor ldap</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新版本的harbor很多东西都可以直接在界面配置，不需要去修改文件，省去了大量的工作，web界面配置更加方便快捷，登录harbor平台，点击配置管理——&gt;修改认证模式，认证模式支持很多类型，这里选择ldap。<br><img src="https://img.xxlaila.cn/1571019665079.jpg" alt="img"><br><strong>注</strong>: 在密码这栏填写需要填写管理员的密码，普通用户的密码是不行的，即使是在管理员的用户也是不行的。<br>点击测试ldap，提示连接成功后保存<br><img src="https://img.xxlaila.cn/1571019741060.jpg" alt="img"></p><h4 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在配置ldap页面旁边有一个邮箱配置，邮件服务器用于向请求重设密码的用户发送响应。<br><img src="https://img.xxlaila.cn/1570873497729.jpg" alt="img"><br>点击测试，测试没问题之后点击保存。</p><h4 id="测试ladp连接"><a href="#测试ladp连接" class="headerlink" title="测试ladp连接"></a>测试ladp连接</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新打开一个一个浏览器窗口，利用ladp账户进行登录。<br><img src="https://img.xxlaila.cn/1571019859287.jpg" alt="img"><br><strong>注释</strong>: 新版本的在登录界面没有什么选择ldap登录，直接使用ldap账号登录就ok</p><h4 id="将项目角色分配给LDAP-AD组"><a href="#将项目角色分配给LDAP-AD组" class="headerlink" title="将项目角色分配给LDAP / AD组"></a>将项目角色分配给LDAP / AD组</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改之前的ldap配置，增加组的配置<br><img src="https://img.xxlaila.cn/1571023069387.jpg" alt="img"><br>在项目-&gt;成员-&gt; +组中。<br><img src="https://img.xxlaila.cn/1571023177214.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571023223796.jpg" alt="img"></p><h4 id="设置ldap账户的权限"><a href="#设置ldap账户的权限" class="headerlink" title="设置ldap账户的权限"></a>设置ldap账户的权限</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当ldap配置以后，ldap账户登录没有管理员权限，我们管理harbor还的使用<code>harbor</code>的admin账户登录，这样无疑对运维人员维护带来了不便利。当ldap用户登录，harbor就会记录该用户，我们设置运维用户为超级管理员，这样就实现了一个账号登录，维护的时候也不用账号切换<br><img src="https://img.xxlaila.cn/1571023451423.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>HPA认识</title>
    <url>/2019/10/09/hpa/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="Pod-自动扩缩容"><a href="#Pod-自动扩缩容" class="headerlink" title="Pod 自动扩缩容"></a>Pod 自动扩缩容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes提供了这样一个资源对象: <code>Horizontal Pod Autoscaling</code> Pod水平自动伸缩），简称HPA。HAP通过监控分析RC或者Deployment控制的所有Pod的负载变化情况来确定是否需要调整Pod的副本数量，这是HPA最基本的原理。</p><a id="more"></a><p><img src="https://img.xxlaila.cn/1570605234009.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HPA在kubernetes集群中被设计成一个Kubernetes API资源和控制器，可以通过kubectl autoscale命令来创建一个HPA资源对象，HPA Controller默认15s轮询一次（可通过kube-controller-manager的标志–horizontal-pod-autoscaler-sync-period进行设置），查询指定的资源（RC或者Deployment）中Pod的资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。<br><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="noopener">详细介绍</a></p><h3 id="Pod水平自动伸缩练习"><a href="#Pod水平自动伸缩练习" class="headerlink" title="Pod水平自动伸缩练习"></a>Pod水平自动伸缩练习</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于Horizontal Pod Autoscaler使用此API收集指标，因此需要在群集中部署metrics-server监视以通过资源指标API提供指标,</p><h4 id="运行php-apache服务器"><a href="#运行php-apache服务器" class="headerlink" title="运行php-apache服务器"></a>运行php-apache服务器</h4><p>首先，我们将开始运行该映像的部署，并将其服务公开</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl run php-apache --image=0layfolk0/hpa-example --requests=cpu=200m --limits=cpu=500m --expose --port=80</span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">service/php-apache created</span><br><span class="line">deployment.apps/php-apache created</span><br></pre></td></tr></table></figure><h4 id="创建水平Pod自动缩放器"><a href="#创建水平Pod自动缩放器" class="headerlink" title="创建水平Pod自动缩放器"></a>创建水平Pod自动缩放器</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当服务运行以后。我们将使用kubectl autoscale创建自动 缩放器。以下命令将创建一个水平Pod自动缩放器，该缩放器将维护由我们在这些说明的第一步中创建的php-apache部署控制的Pod的1至10个副本。粗略地说，HPA将（通过部署）增加或减少副本数，以将所有Pod的平均CPU利用率维持在50％（因为每个pod通过kubectl运行请求200毫核，这意味着平均CPU利用率为100毫-核心）。<a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#algorithm-details" target="_blank" rel="noopener">算法更多信息</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10</span><br><span class="line">horizontalpodautoscaler.autoscaling/php-apache autoscaled</span><br></pre></td></tr></table></figure><p>我们可以通过运行以下命令检查自动定标器的当前状态:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   0%/50%    1         10        1          14s</span><br></pre></td></tr></table></figure><p><strong>注释</strong>: 由于我们没有向服务器发送任何请求，因此当前CPU消耗为0％（“ CURRENT”列显示了由相应部署控制的所有Pod的平均值）。</p><h4 id="增加压力测试"><a href="#增加压力测试" class="headerlink" title="增加压力测试"></a>增加压力测试</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们要对<code>php-apache</code>做压力测试来观看自动缩放如何对增加的负载做出反应，我们将启动一个容器，并将无限循环的查询发送到php-apache服务。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl run -i --tty load-generator --image=busybox /bin/sh</span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">If you don<span class="string">'t see a command prompt, try pressing enter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/ # while true; do wget -q -O- http://php-apache.default.svc.cluster.local; done</span></span><br><span class="line"><span class="string">OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!O</span></span><br></pre></td></tr></table></figure><p>在一分钟左右的时间内，我们应该通过执行以下命令来看到更高的CPU负载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME         REFERENCE               TARGETS    MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   250%/50%   1         10        1          9m12s</span><br><span class="line"></span><br><span class="line">$ kubectl get deployment php-apache</span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">php-apache   3/5     5            3           88m</span><br></pre></td></tr></table></figure><p>这里由于网络问题和pull 镜像太慢了，我就直接结束了测试</p><h4 id="停止压力测试"><a href="#停止压力测试" class="headerlink" title="停止压力测试"></a>停止压力测试</h4><p>我们在<code>busybox</code>容器的终端里面执行<code>&lt;Ctrl&gt; + C</code>来结束压力测试，然后我们在观察结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  kubectl get hpa</span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   91%/50%   1         10        5          10m</span><br><span class="line"></span><br><span class="line">$ kubectl get deployment php-apache</span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">php-apache   2/2     2            2           99m</span><br></pre></td></tr></table></figure><p><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/" target="_blank" rel="noopener">自动缩放多个指标和自定义指标</a></p><h3 id="nginx-测试"><a href="#nginx-测试" class="headerlink" title="nginx 测试"></a>nginx 测试</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用之前<a href="https://xxlaila.github.io/2019/10/09/Deployment%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">Deployment</a>里面的nginx做测试，我们只需要吧之前的yaml文件稍作修改即可</p><h4 id="修改nginx-deployment-yaml"><a href="#修改nginx-deployment-yaml" class="headerlink" title="修改nginx-deployment.yaml"></a>修改nginx-deployment.yaml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; nginx-deployment.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-deploy</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-deploy</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-deploy</span><br><span class="line">        image: nginx:1.13.3</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            memory: <span class="string">"200Mi"</span></span><br><span class="line">            cpu: <span class="string">"200m"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="新建立nginx-deploy-hpa-yaml"><a href="#新建立nginx-deploy-hpa-yaml" class="headerlink" title="新建立nginx-deploy-hpa.yaml"></a>新建立nginx-deploy-hpa.yaml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; nginx-deploy-hpa.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: autoscaling/v1</span><br><span class="line">kind: HorizontalPodAutoscaler</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  maxReplicas: 5</span><br><span class="line">  minReplicas: 1</span><br><span class="line">  scaleTargetRef:</span><br><span class="line">    apiVersion: extensions/v1beta1</span><br><span class="line">    kind: Deployment</span><br><span class="line">    name: nginx-deploy</span><br><span class="line">  targetCPUUtilizationPercentage: 10</span><br><span class="line">status:</span><br><span class="line">  currentCPUUtilizationPercentage: 8</span><br><span class="line">  currentReplicas: 1</span><br><span class="line">  desiredReplicas: 0</span><br></pre></td></tr></table></figure><ul><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f nginx-deployment.yaml</span><br><span class="line">$ kubectl apply -f kubectl apply -f nginx-deploy-hpa.yaml</span><br></pre></td></tr></table></figure></li><li><p>查看验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   0%/10%    1         5         2          45s</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                        DESIRED   CURRENT   READY   AGE</span><br><span class="line">load-generator-7fbcc7489f   1         1         1       8m28s</span><br><span class="line">nginx-deploy-d494b9564      2         2         2       13m</span><br></pre></td></tr></table></figure></li><li><p>执行压力测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl run -i --tty load-generator --image=busybox /bin/sh</span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">If you don<span class="string">'t see a command prompt, try pressing enter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/ # while true; do wget -q -O- http://172.30.224.5:80; done</span></span><br></pre></td></tr></table></figure></li><li><p>查看效果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   28%/10%   1         5         4          4m48s</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                        DESIRED   CURRENT   READY   AGE</span><br><span class="line">load-generator-7fbcc7489f   1         1         1       12m</span><br><span class="line">nginx-deploy-d494b9564      5         5         5       18m</span><br><span class="line"></span><br><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   16%/10%   1         5         5          5m39s</span><br></pre></td></tr></table></figure></li><li><p>结束压测<br>等待一会查看结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   0%/10%    1         5         1          12m</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                        DESIRED   CURRENT   READY   AGE</span><br><span class="line">load-generator-7fbcc7489f   1         1         1       19m</span><br><span class="line">nginx-deploy-d494b9564      1         1         1       25m</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>hpa</tag>
      </tags>
  </entry>
  <entry>
    <title>Deployment使用</title>
    <url>/2019/10/09/Deployment%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="Deployment和rc的对比"><a href="#Deployment和rc的对比" class="headerlink" title="Deployment和rc的对比"></a>Deployment和rc的对比</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先RC是Kubernetes的一个核心概念，当我们把应用部署到集群之后，需要保证应用能够持续稳定的运行，RC就是这个保证的关键，主要功能如:</p><ul><li>确保Pod数量: 它会确保Kubernetes中有指定数量的Pod在运行，如果少于指定数量的Pod，RC就会创建新的，反之这会删除多余的，保证Pod的副本数量不变。</li><li>确保Pod健康: 当Pod不健康，比如运行出错了，总之无法提供正常服务时，RC也会杀死不健康的Pod，重新创建新的。</li><li>弹性伸缩: 在业务高峰或者低峰的时候，可以用过RC来动态的调整Pod数量来提供资源的利用率，当然我们也提到过如果使用HPA这种资源对象的话可以做到自动伸缩。</li><li>滚动升级: 滚动升级是一种平滑的升级方式，通过逐步替换的策略，保证整体系统的稳定性</li></ul><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deployment同样也是Kubernetes系统的一个核心概念，主要职责和RC一样的都是保证Pod的数量和健康，二者大部分功能都是完全一致的，我们可以看成是一个升级版的RC控制器，Deployment具备的新特性</p><ul><li>RC的全部功能: Deployment具备上面描述的RC的全部功能</li><li>事件和状态查看: 可以查看Deployment的升级详细进度和状态</li><li>回滚: 当升级Pod的时候如果出现问题，可以使用回滚操作回滚到之前的任一版本</li><li>版本记录: 每一次对Deployment的操作，都能够保存下来，这也是保证可以回滚到任一版本的基础</li><li>暂停和启动: 对于每一次升级都能够随时暂停和启动</li></ul><p><strong>对比</strong>: Deployment作为新一代的RC，在功能上更为丰富，同时官方也是推荐使用Deployment来管理Pod，比如一些官方组件kube-dns、kube-proxy也都是使用的Deployment来管理的，所以最好使用Deployment来管理Pod。</p><h3 id="Deployment-介绍"><a href="#Deployment-介绍" class="headerlink" title="Deployment 介绍"></a>Deployment 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deployment拥有多个Replica Set，而一个Replica Set拥有一个或多个Pod。一个Deployment控制多个rs主要是为了支持回滚机制，每当Deployment操作时，Kubernetes会重新生成一个Replica Set并保留，以后有需要的话就可以回滚至之前的状态。</p><p><strong>实例</strong>: 创建一个Deployment，它创建了一个Replica Set来启动3个nginx pod，yaml文件如下:</p><ul><li><p>nginx-deployment.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; nginx-deployment.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f nginx-deployment.yaml</span><br><span class="line">deployment.apps/nginx-deploy created</span><br></pre></td></tr></table></figure></li><li><p>执行一下命令查看刚刚创建的Deployment</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get deployments</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deploy   0/3     3            0           12s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次执行上面命令</span></span><br><span class="line">$ kubectl get deployments</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deploy   1/3     3            1           35s</span><br></pre></td></tr></table></figure></li><li><p>可以看到Deployment已经创建了1个Replica Set了，执行下面的命令查看rs和pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get rs</span><br><span class="line">NAME                     DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d   3         3         2       70s</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">$ kubectl get pod --show-labels</span><br><span class="line">NAME                           READY   STATUS              RESTARTS   AGE   LABELS</span><br><span class="line">nginx-deploy-6dd86d77d-9n9vf   1/1     Running             0          99s   app=nginx,pod-template-hash=6dd86d77d</span><br><span class="line">nginx-deploy-6dd86d77d-bhrsk   0/1     ContainerCreating   0          99s   app=nginx,pod-template-hash=6dd86d77d</span><br><span class="line">nginx-deploy-6dd86d77d-jdnrh   1/1     Running             0          99s   app=nginx,pod-template-hash=6dd86d77d</span><br></pre></td></tr></table></figure></li></ul><p>上面的Deployment的yaml文件中的replicas:3将会保证我们始终有3个POD在运行。</p><h3 id="滚动升级"><a href="#滚动升级" class="headerlink" title="滚动升级"></a>滚动升级</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改之前使用的nginx-deployment.yaml文件中的nginx镜像修改为nginx:1.13.3，然后在spec下面添加滚动升级策略：</p><ul><li><p>nginx-deploments.yml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.3</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure></li><li><p>minReadySeconds:</p><ul><li>滚动升级时5s后认为该pod就绪</li><li>如果没有设置该值，Kubernetes会假设该容器启动起来后就提供服务了</li><li>如果没有设置该值，在某些极端情况下可能会造成服务不正常运行</li></ul></li><li><p>rollingUpdate:</p><ul><li>于replicas为3,则整个升级,pod个数在2-4个之间</li></ul></li><li><p>maxSurge:</p><ul><li>升级过程中最多可以比原先设置多出的POD数量</li><li>例如：maxSurage=1，replicas=3,则表示Kubernetes会先启动1一个新的Pod后才删掉一个旧的POD，整个升级过程中最多会有3+1个POD。</li></ul></li><li><p>maxUnavaible:</p><ul><li>升级过程中最多有多少个POD处于无法提供服务的状态</li><li>当maxSurge不为0时，该值也不能为0</li><li>例如：maxUnavaible=1，则表示Kubernetes整个升级过程中最多会有1个POD处于无法服务的状态。</li></ul></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f nginx-deployment.yaml</span><br><span class="line">deployment.apps/nginx-deploy configured</span><br></pre></td></tr></table></figure></li><li><p>查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用rollout命令</span></span><br><span class="line">$ kubectl rollout status deployment/nginx-deploy</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deploy"</span> rollout to finish: 2 out of 3 new replicas have been updated...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停升级</span></span><br><span class="line">$ kubectl rollout pause deployment deployment/nginx-deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续升级</span></span><br><span class="line">$ kubectl rollout resume deployment deployment/nginx-deploy</span><br></pre></td></tr></table></figure></li></ul><p>升级结束后，继续查看rs的状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get rs</span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d    0         0         0       21m</span><br><span class="line">nginx-deploy-799d666985   3         3         3       10m</span><br></pre></td></tr></table></figure><p>根据AGE我们可以看到离我们最近的当前状态是：3，和我们的yaml文件是一致的，证明升级成功了。用describe命令可以查看升级的全部信息:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe deploy nginx-deploy</span><br><span class="line">Name:                   nginx-deploy</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Wed, 09 Oct 2019 10:12:56 +0800</span><br><span class="line">Labels:                 k8s-app=nginx-demo</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 2</span><br><span class="line">                        kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                          &#123;<span class="string">"apiVersion"</span>:<span class="string">"apps/v1beta1"</span>,<span class="string">"kind"</span>:<span class="string">"Deployment"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"labels"</span>:&#123;<span class="string">"k8s-app"</span>:<span class="string">"nginx-demo"</span>&#125;,<span class="string">"name"</span>:<span class="string">"nginx-deploy"</span>,<span class="string">"nam...</span></span><br><span class="line"><span class="string">Selector:               app=nginx</span></span><br><span class="line"><span class="string">Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable</span></span><br><span class="line"><span class="string">StrategyType:           RollingUpdate</span></span><br><span class="line"><span class="string">MinReadySeconds:        5</span></span><br><span class="line"><span class="string">RollingUpdateStrategy:  1 max unavailable, 1 max surge</span></span><br><span class="line"><span class="string">Pod Template:</span></span><br><span class="line"><span class="string">  Labels:  app=nginx</span></span><br><span class="line"><span class="string">  Containers:</span></span><br><span class="line"><span class="string">   nginx:</span></span><br><span class="line"><span class="string">    Image:        nginx:1.13.3</span></span><br><span class="line"><span class="string">    Port:         80/TCP</span></span><br><span class="line"><span class="string">    Host Port:    0/TCP</span></span><br><span class="line"><span class="string">    Environment:  &lt;none&gt;</span></span><br><span class="line"><span class="string">    Mounts:       &lt;none&gt;</span></span><br><span class="line"><span class="string">  Volumes:        &lt;none&gt;</span></span><br><span class="line"><span class="string">Conditions:</span></span><br><span class="line"><span class="string">  Type           Status  Reason</span></span><br><span class="line"><span class="string">  ----           ------  ------</span></span><br><span class="line"><span class="string">  Available      True    MinimumReplicasAvailable</span></span><br><span class="line"><span class="string">  Progressing    True    NewReplicaSetAvailable</span></span><br><span class="line"><span class="string">OldReplicaSets:  &lt;none&gt;</span></span><br><span class="line"><span class="string">NewReplicaSet:   nginx-deploy-799d666985 (3/3 replicas created)</span></span><br><span class="line"><span class="string">Events:</span></span><br><span class="line"><span class="string">  Type    Reason             Age   From                   Message</span></span><br><span class="line"><span class="string">  ----    ------             ----  ----                   -------</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  23m   deployment-controller  Scaled up replica set nginx-deploy-6dd86d77d to 3</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  12m   deployment-controller  Scaled up replica set nginx-deploy-799d666985 to 1</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  12m   deployment-controller  Scaled down replica set nginx-deploy-6dd86d77d to 2</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  12m   deployment-controller  Scaled up replica set nginx-deploy-799d666985 to 2</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  11m   deployment-controller  Scaled down replica set nginx-deploy-6dd86d77d to 1</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  11m   deployment-controller  Scaled up replica set nginx-deploy-799d666985 to 3</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  10m   deployment-controller  Scaled down replica set nginx-deploy-6dd86d77d to 0</span></span><br></pre></td></tr></table></figure><h3 id="回滚Deployment"><a href="#回滚Deployment" class="headerlink" title="回滚Deployment"></a>回滚Deployment</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面已经滚动平滑的升级Deployment，但是如果升级后的POD出了问题该怎么办？我们能够想到的最好最快的方式当然是回退到上一次能够提供正常工作的版本，Deployment就为我们提供了回滚机制。</p><ul><li>首先，查看Deployment的升级历史:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout <span class="built_in">history</span> deployment nginx-deploy</span><br><span class="line">deployment.extensions/nginx-deploy </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         &lt;none&gt;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上面的结果可以看出在执行Deployment升级的时候最好带上record参数，便于我们查看历史版本信息。<code>kubectl apply --filename=nginx-deployment.yaml --record=true</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认情况下，所有通过kubectl xxxx –record都会被kubernetes记录到etcd进行持久化，这无疑会占用资源，最重要的是，时间久了，当你kubectl get rs时，会有成百上千的垃圾RS返回，这对于运维来说维护很不便利，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我们在上生产时，我们最好通过设置Deployment的.spec.revisionHistoryLimit来限制最大保留的revision number，比如15个版本，回滚的时候一般只会回滚到最近的几个版本就足够了。其实rollout history中记录的revision都和ReplicaSets一一对应。如果手动delete某个ReplicaSet，对应的rollout history就会被删除，也就是还说你无法回滚到这个revison。rollout history和ReplicaSet的对应关系，可以在kubectl describe rs $RSNAME返回的revision字段中得到，这里的revision就对应着rollout history返回的revison。</p><ul><li><p>yaml例子</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat nginx-deployment.yaml </span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.3</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure></li><li><p>可以使用下面的命令查看单个revison的信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout <span class="built_in">history</span> deployment nginx-deploy --revision=2</span><br><span class="line">deployment.extensions/nginx-deploy with revision <span class="comment">#2</span></span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:	app=nginx</span><br><span class="line">	pod-template-hash=799d666985</span><br><span class="line">  Annotations:	kubernetes.io/change-cause: kubectl apply --filename=nginx-deployment.yaml --record=<span class="literal">true</span></span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:	nginx:1.13.3</span><br><span class="line">    Port:	80/TCP</span><br><span class="line">    Host Port:	0/TCP</span><br><span class="line">    Environment:	&lt;none&gt;</span><br><span class="line">    Mounts:	&lt;none&gt;</span><br><span class="line">  Volumes:	&lt;none&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接回退到当前版本的前一个版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout undo deployment nginx-deploy</span><br><span class="line">deployment.extensions/nginx-deploy rolled back</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用revision回退到指定的版本</span></span><br><span class="line">$ kubectl rollout undo deployment nginx-deploy --to-revision=1</span><br><span class="line">deployment.extensions/nginx-deploy rolled back</span><br></pre></td></tr></table></figure></li><li><p>查看Deployment现在的状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get deployments</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deploy   2/3     3            2           56m</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d    1         1         1       56m</span><br><span class="line">nginx-deploy-799d666985   3         3         1       46m</span><br><span class="line"></span><br><span class="line">$ kubectl rollout status deployment/nginx-deploy</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deploy"</span> rollout to finish: 2 of 3 updated replicas are available...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deploy"</span> rollout to finish: 2 of 3 updated replicas are available...</span><br><span class="line">deployment <span class="string">"nginx-deploy"</span> successfully rolled out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成后查看</span></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d    0         0         0       57m</span><br><span class="line">nginx-deploy-799d666985   3         3         3       47m</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">官方参考</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>Deployment</tag>
      </tags>
  </entry>
  <entry>
    <title>harbor私有仓库部署</title>
    <url>/2019/09/30/harbor%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><a id="more"></a><h3 id="部署环境准备"><a href="#部署环境准备" class="headerlink" title="部署环境准备"></a>部署环境准备</h3><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><table><thead><tr><th>系统</th><th>配置</th><th>ip</th></tr></thead><tbody><tr><td>centos 7.4</td><td>4/8G/200G</td><td>172.21.16.90</td></tr></tbody></table><h4 id="下载所需文件"><a href="#下载所需文件" class="headerlink" title="下载所需文件"></a>下载所需文件</h4><h5 id="docker-compose-下载"><a href="#docker-compose-下载" class="headerlink" title="docker-compose 下载"></a>docker-compose 下载</h5><p>docker compose <a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">发布页面</a>下载最新的 docker-compose 二进制文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span></span><br><span class="line"><span class="comment"># mv ~/docker-compose-Linux-x86_64 /usr/bin/docker-compose </span></span><br><span class="line"><span class="comment"># chmod a+x  /ur/bin/docker-compose</span></span><br></pre></td></tr></table></figure><ul><li>官方的安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"># chmod +x /usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="harbor-下载"><a href="#harbor-下载" class="headerlink" title="harbor 下载"></a>harbor 下载</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;harbor 安装方式有两种，一种是在线安装，一种是离线安装，这里由于网络不好，使用的是离线安装，harbor<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">发布页面</a>下载最新的 harbor 离线安装包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://storage.googleapis.com/harbor-releases/release-1.9.0/harbor-offline-installer-v1.9.0.tgz</span></span><br><span class="line"><span class="comment"># tar -zxvf harbor-offline-installer-v1.9.0.tgz</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum-config-manager   --add-repo   https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># sudo yum -y install docker-ce-18.09.6-3.el7.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cat /etc/sysctl.d/k8s.conf &lt;&lt;EOF</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables: 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables: 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># sysctl -p /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="comment"># systemctl  start docker</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>: 不添加<code>/etc/sysctl.d/k8s.conf</code> 启动docker会提示<code>WARNING: bridge-nf-call-iptables is disabled WARNING: bridge-nf-call-ip6tables is disabled</code></p><h4 id="导入-docker-images"><a href="#导入-docker-images" class="headerlink" title="导入 docker images"></a>导入 docker images</h4><p>导入离线安装包中harbor相关的 docker images：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd harbor</span></span><br><span class="line"><span class="comment"># docker load -i harbor.v1.9.0.tar.gz </span></span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                      TAG                        IMAGE ID            CREATED             SIZE</span><br><span class="line">goharbor/chartmuseum-photon     v0.9.0-v1.9.0              00c12627cbd7        2 weeks ago         131MB</span><br><span class="line">goharbor/harbor-migrator        v1.9.0                     75d4de5e0f16        2 weeks ago         362MB</span><br><span class="line">goharbor/redis-photon           v1.9.0                     3249afaa9965        2 weeks ago         109MB</span><br><span class="line">goharbor/clair-photon           v2.0.9-v1.9.0              e54ad567c58f        2 weeks ago         165MB</span><br><span class="line">goharbor/notary-server-photon   v0.6.1-v1.9.0              2cdecba59f38        2 weeks ago         138MB</span><br><span class="line">goharbor/notary-signer-photon   v0.6.1-v1.9.0              973378593def        2 weeks ago         135MB</span><br><span class="line">goharbor/harbor-registryctl     v1.9.0                     30a01bf0f4df        2 weeks ago         99.6MB</span><br><span class="line">goharbor/registry-photon        v2.7.1-patch-2819-v1.9.0   32571099a9fe        2 weeks ago         82.3MB</span><br><span class="line">goharbor/nginx-photon           v1.9.0                     f933d62f9952        2 weeks ago         43.9MB</span><br><span class="line">goharbor/harbor-log             v1.9.0                     28e27d511335        2 weeks ago         82.6MB</span><br><span class="line">goharbor/harbor-jobservice      v1.9.0                     f3cd0b181a89        2 weeks ago         141MB</span><br><span class="line">goharbor/harbor-core            v1.9.0                     f2814ed8aadd        2 weeks ago         155MB</span><br><span class="line">goharbor/harbor-portal          v1.9.0                     0778d4c5d27e        2 weeks ago         51.3MB</span><br><span class="line">goharbor/harbor-db              v1.9.0                     a809e14d2d49        2 weeks ago         147MB</span><br><span class="line">goharbor/prepare                v1.9.0                     aa594772c1e8        2 weeks ago         147MB</span><br></pre></td></tr></table></figure><h4 id="修改-harbor-yml-文件"><a href="#修改-harbor-yml-文件" class="headerlink" title="修改 harbor.yml 文件"></a>修改 harbor.yml 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim harbor.yml</span></span><br><span class="line">hostname: reg.xxlaila.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># email configure</span></span><br><span class="line">email_server: smtp.exmail.qq.com</span><br><span class="line">email_server_port: 465</span><br><span class="line">email_username: admin@xxlaila.cn</span><br><span class="line">email_password: 123</span><br><span class="line">email_from: admin&lt;admin@xxlaila.cn&gt;</span><br><span class="line">email_ssl: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User registration is prohibited</span></span><br><span class="line">self_registration: off</span><br><span class="line"></span><br><span class="line"><span class="comment"># LDAP authentication configuration item</span></span><br><span class="line"><span class="comment">#ldap_url: ldaps://ldap.xxlaila.cn</span></span><br><span class="line"><span class="comment">#ldap_searchdn: uid=username,ou=people,dc=xxlaila,dc=com</span></span><br><span class="line"><span class="comment">#ldap_search_pwd: password</span></span><br><span class="line"><span class="comment">#ldap_basedn: ou=people,dc=xxlaila,dc=com</span></span><br><span class="line"><span class="comment">#ldap_filter: (objectClass=person)</span></span><br><span class="line"><span class="comment">#ldap_uid: uid </span></span><br><span class="line"><span class="comment">#ldap_scope: 3 </span></span><br><span class="line"><span class="comment">#ldap_timeout: 5</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>: 新版本的邮箱、ldap现在都不需要在配置文件里面来添加配置了，直接通过web界面来进行配置即可，这里我只是添加进来，保留，😁😁😁</p><h4 id="加载和启动-harbor-镜像"><a href="#加载和启动-harbor-镜像" class="headerlink" title="加载和启动 harbor 镜像"></a>加载和启动 harbor 镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir /data</span></span><br><span class="line"><span class="comment"># chmod 777 /var/run/docker.sock /data</span></span><br><span class="line"><span class="comment"># ./install.sh </span></span><br><span class="line"></span><br><span class="line">[Step 0]: checking installation environment ...</span><br><span class="line"></span><br><span class="line">Note: docker version: 19.03.2</span><br><span class="line"></span><br><span class="line">Note: docker-compose version: 1.24.1</span><br><span class="line"></span><br><span class="line">[Step 1]: loading Harbor images ...</span><br><span class="line">Loaded image: goharbor/harbor-portal:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-core:v1.9.0</span><br><span class="line">Loaded image: goharbor/nginx-photon:v1.9.0</span><br><span class="line">Loaded image: goharbor/notary-signer-photon:v0.6.1-v1.9.0</span><br><span class="line">Loaded image: goharbor/registry-photon:v2.7.1-patch-2819-v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-migrator:v1.9.0</span><br><span class="line">Loaded image: goharbor/chartmuseum-photon:v0.9.0-v1.9.0</span><br><span class="line">Loaded image: goharbor/prepare:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-log:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-db:v1.9.0</span><br><span class="line">Loaded image: goharbor/clair-photon:v2.0.9-v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-jobservice:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-registryctl:v1.9.0</span><br><span class="line">Loaded image: goharbor/redis-photon:v1.9.0</span><br><span class="line">Loaded image: goharbor/notary-server-photon:v0.6.1-v1.9.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Step 2]: preparing environment ...</span><br><span class="line">prepare base dir is <span class="built_in">set</span> to /opt/harbor</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: /config/core/env</span><br><span class="line">Generated configuration file: /config/core/app.conf</span><br><span class="line">Generated configuration file: /config/registry/config.yml</span><br><span class="line">Generated configuration file: /config/registryctl/env</span><br><span class="line">Generated configuration file: /config/db/env</span><br><span class="line">Generated configuration file: /config/jobservice/env</span><br><span class="line">Generated configuration file: /config/jobservice/config.yml</span><br><span class="line">Generated and saved secret to file: /secret/keys/secretkey</span><br><span class="line">Generated certificate, key file: /secret/core/private_key.pem, cert file: /secret/registry/root.crt</span><br><span class="line">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class="line">Clean up the input dir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Step 3]: starting Harbor ...</span><br><span class="line">Creating network <span class="string">"harbor_harbor"</span> with the default driver</span><br><span class="line">Creating harbor-log ... <span class="keyword">done</span></span><br><span class="line">Creating registryctl   ... <span class="keyword">done</span></span><br><span class="line">Creating redis         ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-portal ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-db     ... <span class="keyword">done</span></span><br><span class="line">Creating registry      ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-core   ... <span class="keyword">done</span></span><br><span class="line">Creating nginx             ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-jobservice ... <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should be able to visit the admin portal at http://reg.xxlaila.cn. </span><br><span class="line">For more details, please visit https://github.com/goharbor/harbor .</span><br></pre></td></tr></table></figure><h4 id="访问管理界面"><a href="#访问管理界面" class="headerlink" title="访问管理界面"></a>访问管理界面</h4><p>确认所有组件都工作正常：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose  ps</span></span><br><span class="line">      Name                     Command                       State                     Ports          </span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line">harbor-core         /harbor/harbor_core              Up (healthy)                                     </span><br><span class="line">harbor-db           /docker-entrypoint.sh            Up (healthy)            5432/tcp                 </span><br><span class="line">harbor-jobservice   /harbor/harbor_jobservice  ...   Up (health: starting)                            </span><br><span class="line">harbor-log          /bin/sh -c /usr/<span class="built_in">local</span>/bin/ ...   Up (healthy)            127.0.0.1:1514-&gt;10514/tcp</span><br><span class="line">harbor-portal       nginx -g daemon off;             Up (healthy)            8080/tcp                 </span><br><span class="line">nginx               nginx -g daemon off;             Up (healthy)            0.0.0.0:80-&gt;8080/tcp     </span><br><span class="line">redis               redis-server /etc/redis.conf     Up (healthy)            6379/tcp                 </span><br><span class="line">registry            /entrypoint.sh /etc/regist ...   Up (healthy)            5000/tcp                 </span><br><span class="line">registryctl         /harbor/start.sh                 Up (healthy)</span><br></pre></td></tr></table></figure><h5 id="harbor-组建介绍"><a href="#harbor-组建介绍" class="headerlink" title="harbor 组建介绍"></a>harbor 组建介绍</h5><ul><li>harbor-core: Harbor的核心功能，主要提供以下服务：<ul><li>UI：提供图形化界面，帮助用户管理registry上的镜像（image）, 并对用户进行授权。</li><li>webhook：为了及时获取registry 上image状态变化的情况， 在Registry上配置webhook，把状态变化传递给UI模块。</li><li>token 服务：负责根据用户权限给每个docker push/pull命令签发token. Docker 客户端向Regiøstry服务发起的请求,如果不包含token，会被重定向到这里，获得token后再重新向Registry进行请求。</li></ul></li><li>harbor-db: 为core services提供数据库服务，负责储存用户权限、审计日志、Docker image分组信息等数据。</li><li>harbor-jobservice: harbor-jobservice 是harbor的job管理模块，job在harbor里面主要是为了镜像仓库之前同步使用的;</li><li>harbor-log: 为了帮助监控Harbor运行，负责收集其他组件的log，供日后进行分析。</li><li>nginx: nginx负责流量转发和安全验证，对外提供的流量都是从nginx中转，所以开放https的443端口，它将流量分发到后端的ui和正在docker镜像存储的docker registry。</li><li>redis: 存储缓存信息</li><li>registry: 负责储存Docker镜像，并处理docker push/pull 命令。由于我们要对用户进行访问控制，即不同用户对Docker image有不同的读写权限，Registry会指向一个token服务，强制用户的每次docker pull/push请求都要携带一个合法的token, Registry会通过公钥对token 进行解密验证。</li><li>registryctl: 是harbor的管理员配置harbor的一些常用配置和高级配置</li></ul><p>在浏览器访问<a href="http://reg.xxlaila.cn，" target="_blank" rel="noopener">http://reg.xxlaila.cn，</a> 用账号 admin 和 harbor.yml 配置文件中的默认密码 Harbor12345 登陆系统<br><img src="https://img.xxlaila.cn/8095d05-b9b7-4bdc-b0fc-7810db649e23.png" alt="img"><br><img src="https://img.xxlaila.cn/4bfab8be-e5de-4165-9268-fa591c5f12f8.png" alt="img"></p><h4 id="harbor-运行时产生的文件、目录"><a href="#harbor-运行时产生的文件、目录" class="headerlink" title="harbor 运行时产生的文件、目录"></a>harbor 运行时产生的文件、目录</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;harbor 将日志打印到 /var/log/harbor 的相关目录下，传统的docker logs XXX 或 docker-compose logs XXX 看不到容器的日志。只有使用常用系统命令来进行日志的查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # 日志目录</span></span><br><span class="line"><span class="comment"># ls /var/log/harbor</span></span><br><span class="line">core.log  jobservice.log  portal.log  postgresql.log  proxy.log  redis.log  registryctl.log  registry.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 数据目录，包括数据库、镜像仓库</span></span><br><span class="line"><span class="comment"># ls /data/</span></span><br><span class="line">ca_download  database  job_logs  psc  redis  registry  secret</span><br></pre></td></tr></table></figure><h4 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h4><p>下列操作的工作目录均为解压离线安装文件后生成的 harbor 目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # 停止 harbor</span></span><br><span class="line"><span class="comment"># docker-compose down -v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 启动 harbor</span></span><br><span class="line"><span class="comment"># docker-compose up -d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 更修改的配置更新到 docker-compose.yml 文件</span></span><br><span class="line"><span class="comment"># ./prepare</span></span><br><span class="line">prepare base dir is <span class="built_in">set</span> to /opt/harbor</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Clearing the configuration file: /config/nginx/nginx.conf</span><br><span class="line">Clearing the configuration file: /config/core/env</span><br><span class="line">Clearing the configuration file: /config/core/app.conf</span><br><span class="line">Clearing the configuration file: /config/registry/config.yml</span><br><span class="line">Clearing the configuration file: /config/registry/root.crt</span><br><span class="line">Clearing the configuration file: /config/registryctl/env</span><br><span class="line">Clearing the configuration file: /config/registryctl/config.yml</span><br><span class="line">Clearing the configuration file: /config/db/env</span><br><span class="line">Clearing the configuration file: /config/jobservice/env</span><br><span class="line">Clearing the configuration file: /config/jobservice/config.yml</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: /config/core/env</span><br><span class="line">Generated configuration file: /config/core/app.conf</span><br><span class="line">Generated configuration file: /config/registry/config.yml</span><br><span class="line">Generated configuration file: /config/registryctl/env</span><br><span class="line">Generated configuration file: /config/db/env</span><br><span class="line">Generated configuration file: /config/jobservice/env</span><br><span class="line">Generated configuration file: /config/jobservice/config.yml</span><br><span class="line">loaded secret from file: /secret/keys/secretkey</span><br><span class="line">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class="line">Clean up the input dir</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s pod健康检测</title>
    <url>/2019/09/27/k8s-pod%E5%81%A5%E5%BA%B7%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="Pod健康检测机制"><a href="#Pod健康检测机制" class="headerlink" title="Pod健康检测机制"></a>Pod健康检测机制</h3><p>对于Pod的健康状态检测，kubernetes提供了两类探针(Probe)来执行对Pod的健康状态检测:</p><ul><li><strong>LivenessProbe探针</strong>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于判断容器是否存活，即Pod是否为running状态，如果LivenessProbe探针探测到容器不健康，则kubelet将kill掉容器，并根据容器的重启策略是否重启，如果一个容器不包含LivenessProbe探针，则Kubelet认为容器的LivenessProbe探针的返回值永远成功.</li></ul><a id="more"></a><ul><li><strong>ReadinessProbe探针</strong>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于判断容器是否启动完成，即容器的Ready是否为True，可以接收请求，如果ReadinessProbe探测失败，则容器的Ready将为False，控制器将此Pod的Endpoint从对应的service的Endpoint列表中移除，从此不再将任何请求调度此Pod上，直到下次探测成功。</li></ul><!--more--><p>每类探针都支持三种探测方法:</p><ul><li><strong>ExecAction</strong>: 通过执行命令来检查服务是否正常，针对复杂检测或无HTTP接口的服务，命令返回值为0则表示容器健康。</li><li><strong>HTTPGetAction</strong>: 通过发送http请求检查服务是否正常，返回200-399状态码则表明容器健康。</li><li><strong>TCPSocketAction</strong>: 通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康。</li></ul><p>探针探测的结果有以下三者之一:</p><ul><li><strong>Success</strong>: Container通过了检查</li><li><strong>Failure</strong>: Container未通过检查</li><li><strong>Unknown</strong>: 未能执行检查，因此不采取任何措施</li></ul><h3 id="LivenessProbe探针配置"><a href="#LivenessProbe探针配置" class="headerlink" title="LivenessProbe探针配置"></a>LivenessProbe探针配置</h3><h4 id="例一：通过exec方式做健康探测"><a href="#例一：通过exec方式做健康探测" class="headerlink" title="例一：通过exec方式做健康探测"></a>例一：通过exec方式做健康探测</h4><ul><li>exec-liveness.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; <span class="built_in">exec</span>-liveness.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">test</span>: liveness</span><br><span class="line">  name: liveness-exec</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600</span><br><span class="line">    livenessProbe:</span><br><span class="line">      <span class="built_in">exec</span>:</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - cat</span><br><span class="line">        - /tmp/healthy</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 5</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在该配置文件中，对容器执行livenessProbe检查，periodSeconds字段指定kubelet每5s执行一次检查，检查的命令为cat /tmp/healthy，initialDelaySeconds字段告诉kubelet应该在执行第一次检查之前等待5秒，如果命令执行成功，则返回0，那么kubelet就认为容器是健康的，如果为非0，则Kubelet会Kill掉容器并根据重启策略来决定是否需要重启。</p><ul><li>当容器启动时，它会执行以下命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh -c <span class="string">"touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600"</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于容器的前30秒，有一个/tmp/healthy文件。因此，在前30秒内，该命令cat /tmp/healthy返回成功代码。30秒后，cat /tmp/healthy返回失败代码。</p><ul><li><p>创建Pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  kubectl create -f  <span class="built_in">exec</span>-liveness.yaml </span><br><span class="line">pod/liveness-exec created</span><br></pre></td></tr></table></figure></li><li><p>在30秒内，查看Pod事件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe pod liveness-exec</span><br><span class="line">…………</span><br><span class="line">QoS Class:       BestEffort</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From                   Message</span><br><span class="line">  ----    ------     ----  ----                   -------</span><br><span class="line">  Normal  Scheduled  23s   default-scheduler      Successfully assigned default/liveness-exec to 172.21.17.34</span><br><span class="line">  Normal  Pulling    20s   kubelet, 172.21.17.34  Pulling image <span class="string">"busybox"</span></span><br><span class="line">  Normal  Pulled     2s    kubelet, 172.21.17.34  Successfully pulled image <span class="string">"busybox"</span></span><br><span class="line">  Normal  Created    2s    kubelet, 172.21.17.34  Created container liveness</span><br><span class="line">  Normal  Started    1s    kubelet, 172.21.17.34  Started container liveness</span><br></pre></td></tr></table></figure></li><li><p>35秒后，再次查看Pod事件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe pod liveness-exec</span><br><span class="line">…………</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age              From                   Message</span><br><span class="line">  ----     ------     ----             ----                   -------</span><br><span class="line">  Normal   Scheduled  58s              default-scheduler      Successfully assigned default/liveness-exec to 172.21.17.34</span><br><span class="line">  Normal   Pulling    55s              kubelet, 172.21.17.34  Pulling image <span class="string">"busybox"</span></span><br><span class="line">  Normal   Pulled     37s              kubelet, 172.21.17.34  Successfully pulled image <span class="string">"busybox"</span></span><br><span class="line">  Normal   Created    37s              kubelet, 172.21.17.34  Created container liveness</span><br><span class="line">  Normal   Started    36s              kubelet, 172.21.17.34  Started container liveness</span><br><span class="line">  Warning  Unhealthy  0s (x2 over 5s)  kubelet, 172.21.17.34  Liveness probe failed: cat: can<span class="string">'t open '</span>/tmp/healthy<span class="string">': No such file or directory</span></span><br></pre></td></tr></table></figure></li><li><p>再等30秒，确认Container已重新启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pod liveness-exec</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-exec   1/1     Running   1          115s</span><br><span class="line"></span><br><span class="line">$ kubectl describe pod liveness-exec</span><br><span class="line">………………</span><br><span class="line">QoS Class:       BestEffort</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age                 From                   Message</span><br><span class="line">  ----     ------     ----                ----                   -------</span><br><span class="line">  Normal   Scheduled  2m7s                default-scheduler      Successfully assigned default/liveness-exec to 172.21.17.34</span><br><span class="line">  Warning  Unhealthy  64s (x3 over 74s)   kubelet, 172.21.17.34  Liveness probe failed: cat: can<span class="string">'t open '</span>/tmp/healthy<span class="string">': No such file or directory</span></span><br><span class="line"><span class="string">  Normal   Killing    64s                 kubelet, 172.21.17.34  Container liveness failed liveness probe, will be restarted</span></span><br><span class="line"><span class="string">  Normal   Pulling    34s (x2 over 2m4s)  kubelet, 172.21.17.34  Pulling image "busybox"</span></span><br><span class="line"><span class="string">  Normal   Pulled     25s (x2 over 106s)  kubelet, 172.21.17.34  Successfully pulled image "busybox"</span></span><br><span class="line"><span class="string">  Normal   Created    25s (x2 over 106s)  kubelet, 172.21.17.34  Created container liveness</span></span><br><span class="line"><span class="string">  Normal   Started    25s (x2 over 105s)  kubelet, 172.21.17.34  Started container liveness</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="例二-通过HTTP方式做健康探测"><a href="#例二-通过HTTP方式做健康探测" class="headerlink" title="例二: 通过HTTP方式做健康探测"></a>例二: 通过HTTP方式做健康探测</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; http-liveness.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">test</span>: liveness</span><br><span class="line">  name: liveness-http</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: carlziess/liveness</span><br><span class="line">    args:</span><br><span class="line">    - /server</span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: /healthz</span><br><span class="line">        port: 8080</span><br><span class="line">        httpHeaders:</span><br><span class="line">        - name: X-Custom-Header</span><br><span class="line">          value: Awesome</span><br><span class="line">      initialDelaySeconds: 3</span><br><span class="line">      periodSeconds: 3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建一个Pod，其中periodSeconds字段指定kubelet每3秒执行一次探测，initialDelaySeconds字段告诉kubelet延迟等待3秒，探测方式为向容器中运行的服务发送HTTP GET请求，请求8080端口下的/healthz, 任何大于或等于200且小于400的代码表示成功。任何其他代码表示失败。</p><ul><li><p>创建pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f http-liveness.yaml </span><br><span class="line">pod/liveness-http created</span><br></pre></td></tr></table></figure></li><li><p>检查验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe pod liveness-http</span><br><span class="line">………………</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age                   From                   Message</span><br><span class="line">  ----     ------     ----                  ----                   -------</span><br><span class="line">  Normal   Scheduled  2m59s                 default-scheduler      Successfully assigned default/liveness-http to 172.21.17.34</span><br><span class="line">  Normal   Pulled     119s (x3 over 2m46s)  kubelet, 172.21.17.34  Successfully pulled image <span class="string">"carlziess/liveness"</span></span><br><span class="line">  Normal   Created    119s (x3 over 2m46s)  kubelet, 172.21.17.34  Created container liveness</span><br><span class="line">  Normal   Started    118s (x3 over 2m45s)  kubelet, 172.21.17.34  Started container liveness</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-http   1/1     Running   0          26s</span><br></pre></td></tr></table></figure></li><li><p><strong>httpGet</strong>探测方式有如下可选的控制字段</p><ul><li>host: 要连接的主机名，默认为Pod IP，可以在http request head中设置host头部。</li><li>scheme: 用于连接host的协议，默认为HTTP。</li><li>path: http服务器上的访问URL</li><li>httpHeaders: 自定义HTTP请求headers，HTTP允许重复headers</li><li>port: 容器上要访问端口号或名称</li></ul></li></ul><h4 id="例三-通过TCP方式做健康探测"><a href="#例三-通过TCP方式做健康探测" class="headerlink" title="例三: 通过TCP方式做健康探测"></a>例三: 通过TCP方式做健康探测</h4><p>Kubelet将尝试在指定的端口上打开容器上的套接字，如果能建立连接，则表明容器健康。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; tcp-liveness-readiness.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: goproxy</span><br><span class="line">  labels:</span><br><span class="line">    app: goproxy</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: goproxy</span><br><span class="line">    image: goproxy/goproxy</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 8080</span><br><span class="line">    readinessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 8080</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 10</span><br><span class="line">    livenessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 8080</span><br><span class="line">      initialDelaySeconds: 15</span><br><span class="line">      periodSeconds: 20</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TCP检查方式和HTTP检查方式非常相似，示例中两种探针都使用了，在容器启动5秒后，kubelet将发送第一个readinessProbe探针，这将连接到容器的8080端口，如果探测成功，则该Pod将被标识为ready，10秒后，kubelet将进行第二次连接。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此，配置还包含了livenessProbe探针，在容器启动15秒后，kubelet将发送第一个livenessProbe探针，仍然尝试连接容器的8080端口，如果连接失败则重启容器。</p><ul><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f tcp-liveness-readiness.yaml</span><br><span class="line">pod/goproxy created</span><br></pre></td></tr></table></figure></li><li><p>15秒后，查看Pod事件以验证活动探测</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe pod goproxy</span><br><span class="line">………………</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From                    Message</span><br><span class="line">  ----    ------     ----  ----                    -------</span><br><span class="line">  Normal  Scheduled  26s   default-scheduler       Successfully assigned default/goproxy to 172.21.16.231</span><br><span class="line">  Normal  Pulling    22s   kubelet, 172.21.16.231  Pulling image <span class="string">"goproxy/goproxy"</span></span><br></pre></td></tr></table></figure></li></ul><p>当容器有多个端口时，通常会给每个端口命名，所以在使用探针探测时，也可以直接写自定义的端口名称</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ports:</span><br><span class="line">- name: liveness-port</span><br><span class="line">  containerPort: 8080</span><br><span class="line">  hostPort: 8080</span><br><span class="line">livenessProbe:</span><br><span class="line">  httpGet:</span><br><span class="line">    path: /healthz</span><br><span class="line">    port: liveness-port</span><br></pre></td></tr></table></figure><h3 id="ReadinessProbe探针配置"><a href="#ReadinessProbe探针配置" class="headerlink" title="ReadinessProbe探针配置"></a>ReadinessProbe探针配置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadinessProbe探针的使用场景livenessProbe稍有不同，有的时候应用程序可能暂时无法接受请求，比如Pod已经Running了，但是容器内应用程序尚未启动成功，在这种情况下，如果没有ReadinessProbe，则Kubernetes认为它可以处理请求了，然而此时，我们知道程序还没启动成功是不能接收用户请求的，所以不希望kubernetes把请求调度给它，则使用ReadinessProbe探针。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadinessProbe和livenessProbe可以使用相同探测方式，只是对Pod的处置方式不同，ReadinessProbe是将Pod IP:Port从对应的EndPoint列表中删除，而livenessProbe则Kill容器并根据Pod的重启策略来决定作出对应的措施。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;探针探测容器是否已准备就绪，如果未准备就绪则kubernetes不会将流量转发给此Pod。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadinessProbe探针与livenessProbe一样也支持exec、httpGet、TCP的探测方式，配置方式相同，只不过是将livenessProbe字段修改为ReadinessProbe。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">readinessProbe:</span><br><span class="line">  <span class="built_in">exec</span>:</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">    - cat</span><br><span class="line">    - /tmp/healthy</span><br><span class="line">  initialDelaySeconds: 5</span><br><span class="line">  periodSeconds: 5</span><br></pre></td></tr></table></figure><p>ReadinessProbe探针的HTTP、TCP的探测方式也与livenessProbe的基本一致。</p><h4 id="例四-ReadinessProbe示例"><a href="#例四-ReadinessProbe示例" class="headerlink" title="例四: ReadinessProbe示例"></a>例四: ReadinessProbe示例</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加入ReadinessProbe探针和一个没有ReadinessProbe探针的示例，该示例中，创建了一个deploy，名为JavaApp，启动的容器运行一个java应用程序，程序监听端口为9093。</p><ul><li><p>没有ReadinessProbe</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; k8s.yaml &lt;&lt; EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  labels:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9093</span><br><span class="line">    name: biz-gateway</span><br><span class="line">  selector:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: biz-gateway</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: biz-gateway</span><br><span class="line">        image: docker.io/xxlaila/biz-gateway:dev-08c8a4e</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9093</span><br><span class="line">        env:</span><br><span class="line">        - name: RUN_ENV</span><br><span class="line">          value: dev</span><br><span class="line">        - name: CONFIG_API_SERVER</span><br><span class="line">          value: http://api.conf.xxlaila.cn</span><br><span class="line">        - name: RUN_CLUSTER</span><br><span class="line">          value: default</span><br><span class="line">        - name: RUN_MODE</span><br><span class="line">          value: AUTO</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f k8s.yaml </span><br><span class="line">service/biz-gateway created</span><br><span class="line">deployment.extensions/biz-gateway created</span><br></pre></td></tr></table></figure></li><li><p>刚创建后，等一会后，查看Pod状态，记着要给image留下pull的时间</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods  |grep <span class="string">"biz-gateway"</span></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">biz-gateway-95f6b677f-rnz22   1/1     Running   0          2m8s</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到，整个过程Pod用了2m8s，自身状态已Running，其READ字段，1/1 表示1个容器状态已准备就绪了，此时，对于kubernetes而言，已经可以接收请求了,而实际上服务还无法访问，因为JAVA程序还尚启动起来，2m8ss后方可正常访问，所以针对此类程序，必须配置ReadinessProbe。</p><ul><li>加入readinessProbe<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; k8s.yaml &lt;&lt; EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  labels:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 9093</span><br><span class="line">    name: biz-gateway</span><br><span class="line">  selector:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: biz-gateway</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: biz-gateway</span><br><span class="line">        image: docker.io/xxlaila/biz-gateway:dev-08c8a4e</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9093</span><br><span class="line">        readinessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 9093</span><br><span class="line">          initialDelaySeconds: 140</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">        env:</span><br><span class="line">        - name: RUN_ENV</span><br><span class="line">          value: dev</span><br><span class="line">        - name: CONFIG_API_SERVER</span><br><span class="line">          value: http://api.conf.xxlaila.cn</span><br><span class="line">        - name: RUN_CLUSTER</span><br><span class="line">          value: default</span><br><span class="line">        - name: RUN_MODE</span><br><span class="line">          value: AUTO</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在该配置文件中，ReadinessProbe探针的探测方式为tcpSocket，因为程序监听在9093端口，所以这里探测为对9093建立连接,这里第一次探测时间是在Pod Runing后140秒后，间隔10秒后执行第二次探测。</p><ul><li><p>创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./</span><br><span class="line">service/biz-gateway created</span><br><span class="line">deployment.extensions/biz-gateway created</span><br></pre></td></tr></table></figure></li><li><p>查看验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建后等待了60s</span></span><br><span class="line">$ kubectl get pod -o wide</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE   IP            NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">biz-gateway-f69cc8678-qs8s7   0/1     Running   0          60s   172.30.56.6   172.21.17.40   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续等待一会</span></span><br><span class="line">$ kubectl get pod -o wide</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE     IP            NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">biz-gateway-f69cc8678-qs8s7   1/1     Running   0          2m36s   172.30.56.6   172.21.17.40   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到在2m36秒后，pod启动ok，在第一次查看的时候，Pod虽然已处于Runnig状态，但是由于第一次探测时间未到，所以READY字段为0/1，即容器的状态为未准备就绪，在未准备就绪的情况下，其Pod对应的Service下的Endpoint也为空，所以才不会有任何请求被调度进来。</p><ul><li>查看Endpoint<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一次执行</span></span><br><span class="line">$ kubectl get endpoints</span><br><span class="line">NAME          ENDPOINTS                                                AGE</span><br><span class="line">biz-gateway                                                            57s</span><br><span class="line">kubernetes    172.21.16.110:6443,172.21.17.30:6443,172.21.17.31:6443   13d</span><br><span class="line"></span><br><span class="line">在2m36s后在次执行</span><br><span class="line">$ kubectl get endpoints</span><br><span class="line">NAME          ENDPOINTS                                                AGE</span><br><span class="line">biz-gateway   172.30.56.6:9093                                         2m41s</span><br><span class="line">kubernetes    172.21.16.110:6443,172.21.17.30:6443,172.21.17.31:6443   13d</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置探针-Probe-相关属性"><a href="#配置探针-Probe-相关属性" class="headerlink" title="配置探针(Probe)相关属性"></a>配置探针(Probe)相关属性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;探针(Probe)有许多可选字段，可以用来更加精确的控制Liveness和Readiness两种探针的行为(Probe)：</p><ul><li>initialDelaySeconds：Pod启动后延迟多久才进行检查，单位：秒</li><li>periodSeconds：检查的间隔时间，默认为10，单位：秒。</li><li>timeoutSeconds：探测的超时时间，默认为1，单位：秒。</li><li>successThreshold：探测失败后认为成功的最小连接成功次数，默认为1，在Liveness探针中必须为1，最小值为1。</li><li>failureThreshold：探测失败的重试次数，重试一定次数后将认为失败，在readiness探针中，Pod会被标记为未就绪，默认为3，最小值为1。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>之前错误参考排查介绍</strong>: 在之前安装jenkins的时候，创建pod就一值处于<code>running</code>,但是过一会，界面就报错，错误如下图<br><img src="https://img.xxlaila.cn/15008WechatIMG.png" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后查看pod日志和系统系统，都没有任何问题，pod日志如下，然后就问了朋友，就说有可能是pod的健康检测机制，最后就修改了pod的健康检测机制，jenkins服务器部署ok。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">log</span> $(kubectl get pods -n kube-ops | awk <span class="string">'&#123;print $1&#125;'</span> | grep jenkins) -n kube-ops</span><br><span class="line"><span class="built_in">log</span> is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use logs instead.</span><br><span class="line">VM settings:</span><br><span class="line">    Max. Heap Size: 3.00G</span><br><span class="line">    Ergonomics Machine Class: server</span><br><span class="line">    Using VM: OpenJDK 64-Bit Server VM</span><br><span class="line"></span><br><span class="line">Running from: /usr/share/jenkins/jenkins.war</span><br><span class="line">webroot: EnvVars.masterEnvVars.get(<span class="string">"JENKINS_HOME"</span>)</span><br><span class="line">2019-09-27 03:02:24.133+0000 [id=1] INFO org.eclipse.jetty.util.log.Log<span class="comment">#initialized: Logging initialized @429ms to org.eclipse.jetty.util.log.JavaUtilLog</span></span><br><span class="line">2019-09-27 03:02:24.247+0000 [id=1] INFO winstone.Logger<span class="comment">#logInternal: Beginning extraction from war file</span></span><br></pre></td></tr></table></figure><p><strong>后续</strong>: 虽然健康检测可以取消，不加入，但是当我们在上生产环境的时候还是要加上，正如例四介绍的那样。如果我们在生产环境错故障自愈、轮询发布等。都需要这个东西，加入再升级的时候，服务器都还没起来，k8s就吧流量给调度过来，升级下一个pod，外部用户访问就会报错，那就是很尴尬</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>pod</tag>
      </tags>
  </entry>
  <entry>
    <title>EFK</title>
    <url>/2019/09/25/EFK/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="初始化配置文件准备"><a href="#初始化配置文件准备" class="headerlink" title="初始化配置文件准备"></a>初始化配置文件准备</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将下载的 kubernetes-server-linux-amd64.tar.gz 解压后，再解压其中的 kubernetes-src.tar.gz 文件。<code>kubernetes/cluster/addons/fluentd-elasticsearch</code>这是文件所在的路径</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;es 数据默认的存储在docker里面，在用的是node节点的空间，而node节点我们不可能都准备很大的空间，那样很浪费资源，所以这里我们需要准备外部的nfs存储空间，然后通过<a href="https://xxlaila.github.io/2019/09/24/%E5%88%A9%E7%94%A8NFS%E5%8A%A8%E6%80%81%E6%8F%90%E4%BE%9BKubernetes%E5%90%8E%E7%AB%AF%E5%AD%98%E5%82%A8%E5%8D%B7/" target="_blank" rel="noopener">pv</a>的模式进行挂载，数据存储到nfs服务器上，这样保障了es收集数据的可用性。</p><a id="more"></a><h3 id="创建存储介质"><a href="#创建存储介质" class="headerlink" title="创建存储介质"></a>创建存储介质</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; pvc.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: es-nfs-data</span><br><span class="line">provisioner: fuseim.pri/ifs</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f pvc.yaml</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li><p>es-statefulset.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RBAC authn and authz</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - <span class="string">"services"</span></span><br><span class="line">  - <span class="string">"namespaces"</span></span><br><span class="line">  - <span class="string">"endpoints"</span></span><br><span class="line">  verbs:</span><br><span class="line">  - <span class="string">"get"</span></span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># Elasticsearch deployment itself</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    version: v6.6.1</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  serviceName: elasticsearch-logging</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: elasticsearch-logging</span><br><span class="line">      version: v6.6.1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: elasticsearch-logging</span><br><span class="line">        version: v6.6.1</span><br><span class="line">        kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: elasticsearch-logging</span><br><span class="line">      containers:</span><br><span class="line">      - image: elasticsearch:6.6.1</span><br><span class="line">        name: elasticsearch-logging</span><br><span class="line">        resources:</span><br><span class="line">          <span class="comment"># need more cpu upon initialization, therefore burstable class</span></span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9200</span><br><span class="line">          name: db</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 9300</span><br><span class="line">          name: transport</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: elasticsearch-logging</span><br><span class="line">          mountPath: /data</span><br><span class="line">        env:</span><br><span class="line">        - name: <span class="string">"NAMESPACE"</span></span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">      <span class="comment"># Elasticsearch requires vm.max_map_count to be at least 262144.</span></span><br><span class="line">      <span class="comment"># If your OS already sets up this number to a higher value, feel free</span></span><br><span class="line">      <span class="comment"># to remove this init container.</span></span><br><span class="line">      initContainers:</span><br><span class="line">      - image: alpine:3.6</span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">"/sbin/sysctl"</span>, <span class="string">"-w"</span>, <span class="string">"vm.max_map_count=262144"</span>]</span><br><span class="line">        name: elasticsearch-logging-init</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: <span class="literal">true</span></span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: elasticsearch-logging</span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [ <span class="string">"ReadWriteMany"</span> ]</span><br><span class="line">      storageClassName: <span class="string">"es-nfs-data"</span></span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 30Gi</span><br></pre></td></tr></table></figure></li><li><p>fluentd-es-ds.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - <span class="string">"namespaces"</span></span><br><span class="line">  - <span class="string">"pods"</span></span><br><span class="line">  verbs:</span><br><span class="line">  - <span class="string">"get"</span></span><br><span class="line">  - <span class="string">"watch"</span></span><br><span class="line">  - <span class="string">"list"</span></span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es-v2.4.0</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    version: v2.4.0</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: fluentd-es</span><br><span class="line">      version: v2.4.0</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: fluentd-es</span><br><span class="line">        kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">        version: v2.4.0</span><br><span class="line">      <span class="comment"># This annotation ensures that fluentd does not get evicted if the node</span></span><br><span class="line">      <span class="comment"># supports critical pod annotation based priority scheme.</span></span><br><span class="line">      <span class="comment"># Note that this does not guarantee admission on the nodes (#40573).</span></span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">        seccomp.security.alpha.kubernetes.io/pod: <span class="string">'docker/default'</span></span><br><span class="line">    spec:</span><br><span class="line">      priorityClassName: system-node-critical</span><br><span class="line">      serviceAccountName: fluentd-es</span><br><span class="line">      containers:</span><br><span class="line">      - name: fluentd-es</span><br><span class="line">        image: docker.io/xxlaila/fluentd-elasticsearch:v2.4.0</span><br><span class="line">        env:</span><br><span class="line">        - name: FLUENTD_ARGS</span><br><span class="line">          value: --no-supervisor -q</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            memory: 500Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 200Mi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: varlog</span><br><span class="line">          mountPath: /var/<span class="built_in">log</span></span><br><span class="line">        - name: varlibdockercontainers</span><br><span class="line">          mountPath: /var/lib/docker/containers</span><br><span class="line">          readOnly: <span class="literal">true</span></span><br><span class="line">        - name: config-volume</span><br><span class="line">          mountPath: /etc/fluent/config.d</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">      - name: varlog</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/<span class="built_in">log</span></span><br><span class="line">      - name: varlibdockercontainers</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/lib/docker/containers</span><br><span class="line">      - name: config-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: fluentd-es-config-v0.2.0</span><br></pre></td></tr></table></figure></li><li><p>kibana-deployment.yaml<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注释里面的两行配置,不注释的话，打开kibana的时候会提示<code>kibana {&quot;statusCode&quot;:404,&quot;error&quot;:&quot;Not Found&quot;,&quot;message&quot;:&quot;Not Found&quot;}</code>,参考<a href="https://github.com/kubernetes-sigs/kubespray/issues/3322" target="_blank" rel="noopener">解决方案</a>,注释配置如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: SERVER_BASEPATH</span><br><span class="line">  value: /api/v1/namespaces/kube-system/services/kibana-logging/proxy</span><br></pre></td></tr></table></figure></li></ul><h4 id="执行创建"><a href="#执行创建" class="headerlink" title="执行创建"></a>执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f ./</span><br></pre></td></tr></table></figure><h4 id="查看创建"><a href="#查看创建" class="headerlink" title="查看创建"></a>查看创建</h4><ul><li><p>查看pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -n kube-system |egrep <span class="string">"kibana|elasticsearch|fluentd"</span></span><br><span class="line">elasticsearch-logging-0                       1/1     Running   0          65m</span><br><span class="line">elasticsearch-logging-1                       1/1     Running   0          61m</span><br><span class="line">fluentd-es-v2.4.0-4fp28                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-b7k67                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-f8jzp                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-shwzm                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-ww8r8                       1/1     Running   0          30m</span><br><span class="line">kibana-logging-57b55f58bc-xh5lp               1/1     Running   0          6m35s</span><br></pre></td></tr></table></figure></li><li><p>查看service</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc -n kube-system |egrep <span class="string">"kibana|elasticsearch"</span></span><br><span class="line">elasticsearch-logging     ClusterIP   10.254.30.110    &lt;none&gt;        9200/TCP                 9s</span><br><span class="line">kibana-logging            ClusterIP   10.254.188.5     &lt;none&gt;        5601/TCP                 16h</span><br></pre></td></tr></table></figure></li><li><p>查看pv，pvc</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  kubectl get pv,pvc -n kube-system</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                                       STORAGECLASS   REASON   AGE</span><br><span class="line">persistentvolume/pvc-65fdd14e-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            Delete           Bound    kube-system/elasticsearch-logging-elasticsearch-logging-0   es-nfs-data             21m</span><br><span class="line">persistentvolume/pvc-fe818f55-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            Delete           Bound    kube-system/elasticsearch-logging-elasticsearch-logging-1   es-nfs-data             16m</span><br><span class="line"></span><br><span class="line">NAME                                                                  STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">persistentvolumeclaim/elasticsearch-logging-elasticsearch-logging-0   Bound    pvc-65fdd14e-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            es-nfs-data    21m</span><br><span class="line">persistentvolumeclaim/elasticsearch-logging-elasticsearch-logging-1   Bound    pvc-fe818f55-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            es-nfs-data    17m</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建web访问"><a href="#创建web访问" class="headerlink" title="创建web访问"></a>创建web访问</h3><ul><li><p>kibana-Ingress.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; kibana-Ingress.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: kibana-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: kibana.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: kibana-logging</span><br><span class="line">          servicePort: 5601</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>es-Ingress.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; es-Ingress &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: es-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: es.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: elasticsearch-logging</span><br><span class="line">          servicePort: 9200</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f es-Ingress.yaml kibana-Ingress.yaml</span><br></pre></td></tr></table></figure></li><li><p>在浏览器访问es<br><img src="https://img.xxlaila.cn/1569462606884.jpg" alt="img"></p></li><li><p>浏览器访问kibana<br><img src="https://img.xxlaila.cn/1569464839630.jpg" alt="img"><br>建立索引，默认的索引是根据天来自动创建在es里面，这里我是在kibana里面是根据月来却分的<br><img src="https://img.xxlaila.cn/1569464950776.jpg" alt="img"></p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>efk</tag>
      </tags>
  </entry>
  <entry>
    <title>网络状态监控</title>
    <url>/2019/09/25/%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;监控IDC机房网络质量情况，本地区到其他地区，其他地区到本节点，或者各省市时间网络、运营商网络状态，监视网络性能，包括常规的 ping，用 fping、echoping、tracert 监视 www 服务器性能，监视 dns 查询性能，监视 ssh 性能等。底层也是 rrdtool 做支持，特点是画的图非常漂亮，网络丢包和延迟用颜色和阴影来表示。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Smokeping。最新版本的 Smokeping 支持多个节点的检测结果从一个图上画出来</p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装yum源"><a href="#安装yum源" class="headerlink" title="安装yum源"></a>安装yum源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm               </span></span><br><span class="line"><span class="comment"># rpm –Uvh http://mirrors.neusoft.edu.cn/epel/6/i386/epel-release-6-8.noarch.rpm</span></span><br></pre></td></tr></table></figure><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum –y install perl perl-Net-Telnet perl-Net-DNS perl-LDAP perl-libwww-perl perl-RadiusPerl perl-IO-Socket-SSL perl-Socket6 perl-CGI-SpeedyCGI perl-FCGI perl-CGI-SpeedCGI perl-Time-HiRes perl-ExtUtils-MakeMaker perl-RRD-Simple rrdtool rrdtool-perl curl fping echo</span></span><br><span class="line">ping  httpd httpd-devel gcc make  wget libxml2-devel libpng-devel glib pango pango-devel freetype freetype-devel fontconfig cairo cairo-devel libart_lgpl libart_lgpl-devel mod_fastcgi</span><br></pre></td></tr></table></figure><h3 id="安装smokeping"><a href="#安装smokeping" class="headerlink" title="安装smokeping"></a>安装smokeping</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget http://oss.oetiker.ch/smokeping/pub/smokeping-2.6.11.tar.gz 这里下载的最新版</span></span><br></pre></td></tr></table></figure><h4 id="安装FCGI"><a href="#安装FCGI" class="headerlink" title="安装FCGI"></a>安装FCGI</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf CGI-4.33.tar.gz</span></span><br><span class="line"><span class="comment"># cd CGI-4.33</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装Config-Grammar"><a href="#安装Config-Grammar" class="headerlink" title="安装Config-Grammar"></a>安装Config-Grammar</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf Config-Grammar-1.10.tar.gz</span></span><br><span class="line"><span class="comment"># cd Config-Grammar-1.10</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装ExtUtils-MakeMaker"><a href="#安装ExtUtils-MakeMaker" class="headerlink" title="安装ExtUtils-MakeMaker"></a>安装ExtUtils-MakeMaker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf ExtUtils-MakeMaker-7.24.tar.gz</span></span><br><span class="line"><span class="comment"># cd ExtUtils-MakeMaker</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装Simple"><a href="#安装Simple" class="headerlink" title="安装Simple"></a>安装Simple</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf Test-Simple-1.302056.tar.gz</span></span><br><span class="line"><span class="comment"># cd Test-Simple-1.302056</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><h4 id="安装Net-OpenSSH"><a href="#安装Net-OpenSSH" class="headerlink" title="安装Net-OpenSSH"></a>安装Net-OpenSSH</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf Net-OpenSSH-0.73.tar.gz</span></span><br><span class="line"><span class="comment"># cd Net-OpenSSH-0.73</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装Net-SNMP"><a href="#安装Net-SNMP" class="headerlink" title="安装Net-SNMP"></a>安装Net-SNMP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar Net-SNMP-v6.0.1.tar.gz</span></span><br><span class="line"><span class="comment"># cd Net-SNMP-v6.0.1</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装perl-ldap"><a href="#安装perl-ldap" class="headerlink" title="安装perl-ldap"></a>安装perl-ldap</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf perl-ldap-0.65.tar.gz</span></span><br><span class="line"><span class="comment"># cd perl-ldap-0.65</span></span><br><span class="line"><span class="comment"># ./install-nomake</span></span><br></pre></td></tr></table></figure><h4 id="安装Net-DNS"><a href="#安装Net-DNS" class="headerlink" title="安装Net-DNS"></a>安装Net-DNS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf Net-DNS-1.06.tar.gz</span></span><br><span class="line"><span class="comment"># cd Net-DNS-1.06</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装IO-Tty"><a href="#安装IO-Tty" class="headerlink" title="安装IO-Tty"></a>安装IO-Tty</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar IO-Tty-1.12.tar.gz</span></span><br><span class="line"><span class="comment"># cd IO-Tty-1.12</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装libwww-perl"><a href="#安装libwww-perl" class="headerlink" title="安装libwww-perl"></a>安装libwww-perl</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf libwww-perl-6.15.tar.gz</span></span><br><span class="line"><span class="comment"># cd libwww-perl-6.15</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装smokeping-1"><a href="#安装smokeping-1" class="headerlink" title="安装smokeping"></a>安装smokeping</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf smokeping-2.6.11.tar.gz</span></span><br><span class="line"><span class="comment"># cd smokeping-2.6.11</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/usr/local/smokeping</span></span><br><span class="line"><span class="comment"># /usr/bin/gmake install</span></span><br></pre></td></tr></table></figure><p>上面是手动安装，针对网络不能翻墙。也可以采取smokeping一键安装的方式进行安装</p><h3 id="smokeping一键安装"><a href="#smokeping一键安装" class="headerlink" title="smokeping一键安装"></a>smokeping一键安装</h3><h4 id="安装smokeping-2"><a href="#安装smokeping-2" class="headerlink" title="安装smokeping"></a>安装smokeping</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf smokeping-2.6.11.tar.gz</span></span><br><span class="line"><span class="comment"># cd smokeping-2.6.11</span></span><br><span class="line"><span class="comment"># ./setup/build-perl-modules.sh /usr/local/smokeping/thirdparty</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/usr/local/smokeping</span></span><br><span class="line"><span class="comment"># /usr/bin/gmake install</span></span><br></pre></td></tr></table></figure><h3 id="配置smkeping"><a href="#配置smkeping" class="headerlink" title="配置smkeping"></a>配置smkeping</h3><h4 id="创建cache、data、var目录"><a href="#创建cache、data、var目录" class="headerlink" title="创建cache、data、var目录"></a>创建cache、data、var目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /usr/local/smokeping/</span></span><br><span class="line"><span class="comment"># mkdir &#123;cache,data,var&#125;</span></span><br></pre></td></tr></table></figure><h4 id="创建日志文件"><a href="#创建日志文件" class="headerlink" title="创建日志文件"></a>创建日志文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># touch /var/log/smokeping.log</span></span><br></pre></td></tr></table></figure><h4 id="赋权限"><a href="#赋权限" class="headerlink" title="赋权限"></a>赋权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chown apache:apache cache/ data/ var/</span></span><br><span class="line"><span class="comment"># chown  apache:apache /var/log/smokeping.log</span></span><br><span class="line"><span class="comment"># chmod 755 cache/ data/ var/    #这里也要赋权限，会影响图片无法加载</span></span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/smokeping/htdocs</span></span><br><span class="line"><span class="comment"># cp -arp smokeping.fcgi.dist smokeping.fcgi</span></span><br><span class="line"><span class="comment"># cd ../etc/</span></span><br><span class="line"><span class="comment"># cp -arp config.dist config</span></span><br><span class="line"><span class="comment"># chmod 600 /usr/local/smokeping/etc/smokeping_secrets.dist</span></span><br><span class="line"><span class="comment"># vim config</span></span><br><span class="line">*** General ***</span><br><span class="line">owner    = Peter Random</span><br><span class="line">contact  = some@address.nowhere</span><br><span class="line">mailhost = my.mail.host</span><br><span class="line">sendmail = /usr/sbin/sendmail</span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> do not put the Image Cache below cgi-bin</span></span><br><span class="line"><span class="comment"># since all files under cgi-bin will be executed ... this is not</span></span><br><span class="line"><span class="comment"># good for images.</span></span><br><span class="line">imgcache = /usr/<span class="built_in">local</span>/smokeping/cache</span><br><span class="line">imgurl   = http://172.16.1.100/cache                                                      <span class="comment">#这里如果不配置正确，会影响后面出图，这里一个坑</span></span><br><span class="line">datadir  = /usr/<span class="built_in">local</span>/smokeping/data</span><br><span class="line">piddir  = /usr/<span class="built_in">local</span>/smokeping/var</span><br><span class="line">cgiurl   = http://172.16.1.100/smokeping/smokeping.cgi</span><br><span class="line"><span class="comment">#cgiurl   = http://some.url/smokeping.cgi</span></span><br><span class="line">smokemail = /usr/<span class="built_in">local</span>/smokeping/etc/smokemail.dist</span><br><span class="line">tmail = /usr/<span class="built_in">local</span>/smokeping/etc/tmail.dist</span><br><span class="line"><span class="comment"># specify this to get syslog logging</span></span><br><span class="line">syslogfacility = local0</span><br><span class="line"><span class="comment"># each probe is now run in its own process</span></span><br><span class="line"><span class="comment"># disable this to revert to the old behaviour</span></span><br><span class="line"><span class="comment"># concurrentprobes = no</span></span><br><span class="line">*** Alerts ***</span><br><span class="line">to = alertee@address.somewhere</span><br><span class="line">from = smokealert@company.xy</span><br><span class="line">+someloss</span><br><span class="line"><span class="built_in">type</span> = loss</span><br><span class="line"><span class="comment"># in percent</span></span><br><span class="line">pattern = &gt;0%,*12*,&gt;0%,*12*,&gt;0%</span><br><span class="line">comment = loss 3 <span class="built_in">times</span>  <span class="keyword">in</span> a row</span><br><span class="line">*** Database ***</span><br><span class="line">step     = 60                                              <span class="comment">#检测时间，默认300</span></span><br><span class="line">pings    = 20</span><br></pre></td></tr></table></figure><p>配置文件上述修改带有注视部分，其他参数参考官方，而且都能看懂。后面有很多配置不全部贴出来</p><h3 id="配置apache"><a href="#配置apache" class="headerlink" title="配置apache"></a>配置apache</h3><h4 id="配置httpd-conf"><a href="#配置httpd-conf" class="headerlink" title="配置httpd.conf"></a>配置httpd.conf</h4><p>在DocumentRoot “/var/www/html”这行增加如下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">Alias /cache <span class="string">"/usr/local/smokeping/cache"</span></span><br><span class="line">Alias /cropper <span class="string">"/usr/local/smokeping/htdocs/cropper"</span></span><br><span class="line">Alias /smokeping <span class="string">"/usr/local/smokeping/htdocs/smokeping.fcgi"</span></span><br><span class="line">&lt;Directory <span class="string">"/usr/local/smokeping"</span>&gt;</span><br><span class="line">        AllowOverride None</span><br><span class="line">        Options All</span><br><span class="line">        AddHandler cgi-script .fcgi .cgi</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all</span><br><span class="line">        AuthName <span class="string">"Smokeping"</span></span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthUserFile /usr/<span class="built_in">local</span>/smokeping/htdocs/htpasswd</span><br><span class="line">        Require valid-user</span><br><span class="line">        DirectoryIndex smokeping.fcgi</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h4 id="apache登录认证"><a href="#apache登录认证" class="headerlink" title="apache登录认证"></a>apache登录认证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/smokeping/htdocs</span></span><br><span class="line"><span class="comment"># htpasswd -c /usr/local/smokeping/htdocs/htpasswd admin                   #回车设置admin账户的密码</span></span><br></pre></td></tr></table></figure><h4 id="安装网页支持的中文字体"><a href="#安装网页支持的中文字体" class="headerlink" title="安装网页支持的中文字体"></a>安装网页支持的中文字体</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install wqy-zenhei-fonts.noarch</span></span><br></pre></td></tr></table></figure><h4 id="smokeping开机脚本"><a href="#smokeping开机脚本" class="headerlink" title="smokeping开机脚本"></a>smokeping开机脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/init.d/smokeping</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PIDFILE=/usr/<span class="built_in">local</span>/smokeping/var/smokeping.pid</span><br><span class="line">SMOKEPING=/usr/<span class="built_in">local</span>/smokeping/bin/smokeping</span><br><span class="line">ERROR=0</span><br><span class="line">RUNNING=0</span><br><span class="line">ARGV=<span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$ARGV</span>"</span> = <span class="string">"x"</span> ] ; <span class="keyword">then</span></span><br><span class="line">ARGS=<span class="built_in">help</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">for</span> ARG <span class="keyword">in</span> <span class="variable">$@</span> <span class="variable">$ARGS</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ] ; <span class="keyword">then</span></span><br><span class="line">PID=`cat <span class="variable">$PIDFILE</span>`</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">kill</span> -0 <span class="variable">$PID</span> 2&gt;/dev/null ; <span class="keyword">then</span></span><br><span class="line"><span class="comment"># smokeping is running</span></span><br><span class="line">RUNNING=1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># smokeping not running but PID file exists =&gt; delete PID file</span></span><br><span class="line">rm -f <span class="variable">$PIDFILE</span></span><br><span class="line">RUNNING=0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># smokeping (no pid file) not running</span></span><br><span class="line">RUNNING=0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$ARG</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 0 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$SMOKEPING</span> &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping started"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping could not be started"</span></span><br><span class="line">ERROR=1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping is running with PID <span class="variable">$PID</span>"</span></span><br><span class="line">ERROR=2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">kill</span> <span class="variable">$PID</span> ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping (<span class="variable">$PID</span>) stopped"</span></span><br><span class="line">rm <span class="variable">$PIDFILE</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping could not be stopped"</span></span><br><span class="line">ERROR=3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping not running"</span></span><br><span class="line">ERROR=4</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$SMOKEPING</span> --restart &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping restarted"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping could not be started"</span></span><br><span class="line">ERROR=5</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="variable">$0</span> start</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">strace_debug)</span><br><span class="line">rm -f /tmp/strace_smokeping</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> strace -o/tmp/strace_smokeping <span class="variable">$SMOKEPING</span> --restart &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping restarted with strace debug in /tmp/strace_smokeping"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping strace debug could not be started"</span></span><br><span class="line">ERROR=6</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> strace -o/tmp/strace_smokeping <span class="variable">$SMOKEPING</span> &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping started with strace debug in /tmp/strace_smokeping"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping strace debug could not be started"</span></span><br><span class="line">ERROR=7</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">status)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping is running with PID (<span class="variable">$PID</span>)"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping is not running"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"usage: <span class="variable">$0</span> (start|stop|restart|status|strace_debug|help)"</span></span><br><span class="line">cat</span><br><span class="line">start - start smokeping</span><br><span class="line">stop - stop smokeping</span><br><span class="line">restart - restart smokeping <span class="keyword">if</span> running or start <span class="keyword">if</span> not running</span><br><span class="line">status - show status <span class="keyword">if</span> smokeping is running or not</span><br><span class="line"><span class="built_in">help</span> - this screen</span><br><span class="line">EOF</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$ERROR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod +x /etc/init.d/smokeping</span></span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># service httpd start</span></span><br><span class="line"><span class="comment"># /etc/init.d/smokeping start</span></span><br></pre></td></tr></table></figure><p>打开浏览器测试http://{ip}/smokeping 会提示输入用户和密码<br><img src="https://img.xxlaila.cn/74D2C8DE-129F-4219-87C5-D6A771D19484.png" alt="img"><br><img src="https://img.xxlaila.cn/91D9FA70-65B1-4752-8F15-68A158E72A49.png" alt="img"></p><h4 id="配置文件添加"><a href="#配置文件添加" class="headerlink" title="配置文件添加"></a>配置文件添加</h4><p>配置文件添介绍，在配置文件里面+表示一级++表示二级+++三级<br>本次添加的内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+ Other</span><br><span class="line">menu = 其他网络监控</span><br><span class="line">title = 其他所有网络监控列表</span><br><span class="line">++ dianxin</span><br><span class="line">menu = 电信网络监控</span><br><span class="line">title = 电信网络监控列表</span><br><span class="line">host = /Other/dianxin/dianxin-hlj /Other/dianxin/dianxin-gd /Other/dianxin/dianxin-gs /Other/dianxin/dianxin-sh /Other/dianxin/dianxin-sc /Other/dianxin/dianxin-cq /Other/dianxin/dianxin-gz /Other/dianxin/dianxin-ln /Other/dianxin/dianxin-zj /Other/dianxin/dianxin-sd /Other/dianxin/dianxin-hib /Other/dianxin/dianxin-ah /Other/dianxin/dianxin-hb /Other/dianxin/dianxin-jl /Other/dianxin/dianxin-jx</span><br><span class="line">+++ dianxin-hlj</span><br><span class="line">menu = 黑龙江电信</span><br><span class="line">title = 黑龙江电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 219.150.32.132</span><br><span class="line">+++ dianxin-gd</span><br><span class="line">menu = 广东电信</span><br><span class="line">title = 广东电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.96.134.133</span><br><span class="line">+++ dianxin-gs</span><br><span class="line">menu = 甘肃电信</span><br><span class="line">title = 甘肃电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.100.64.68</span><br><span class="line">+++ dianxin-sh</span><br><span class="line">menu = 上海电信</span><br><span class="line">title = 上海电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.96.209.5</span><br><span class="line">+++ dianxin-sc</span><br><span class="line">menu = 四川电信</span><br><span class="line">title = 四川电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.6.145.111</span><br><span class="line">+++ dianxin-cq</span><br><span class="line">menu = 重庆电信</span><br><span class="line">title = 重庆电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 61.128.128.68</span><br><span class="line">+++ dianxin-gz</span><br><span class="line">menu = 贵州电信</span><br><span class="line">title = 贵州电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.98.192.68</span><br><span class="line">+++ dianxin-ln</span><br><span class="line">menu = 辽宁电信</span><br><span class="line">title = 辽宁电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 219.149.6.99</span><br><span class="line">+++ dianxin-zj</span><br><span class="line">menu = 浙江电信</span><br><span class="line">title = 浙江电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.96.96.68</span><br><span class="line">+++ dianxin-sd</span><br><span class="line">menu = 山东电信</span><br><span class="line">title = 山东电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 222.173.95.53</span><br><span class="line">+++ dianxin-hib</span><br><span class="line">menu = 湖北电信</span><br><span class="line">title = 湖北电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.103.0.68</span><br><span class="line">+++ dianxin-ah</span><br><span class="line">menu = 安徽电信</span><br><span class="line">title = 安徽电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 220.178.75.134</span><br><span class="line">+++ dianxin-hb</span><br><span class="line">menu = 河北电信</span><br><span class="line">title = 河北电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.99.160.68</span><br><span class="line">+++ dianxin-jl</span><br><span class="line">menu = 吉林电信</span><br><span class="line">title = 吉林电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host =  219.149.194.55</span><br><span class="line">+++ dianxin-jx</span><br><span class="line">menu = 江西电信</span><br><span class="line">title = 江西电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.101.224.68</span><br><span class="line"><span class="comment">#+++ dianxin-multi</span></span><br><span class="line"><span class="comment">#menu = 多个电信网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个电信网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/dianxin/dianxin-hlj /Other/dianxin/dianxin-gd /Other/dianxin/dianxin-gs /Other/dianxin/dianxin-sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">++ liantong</span><br><span class="line">menu = 联通网络监控</span><br><span class="line">title = 联通网络监控列表</span><br><span class="line">host = /Other/liantong/liantong-hlj /Other/liantong/liantong-gd /Other/liantong/liantong-gs /Other/liantong/liantong-sh /Other/liantong/liantong-sc /Other/liantong/liantong-cq /Other/liantong/liantong-gz /Other/liantong/liantong-ln /Other/liantong/liantong-zj /Other/liantong/liantong-sd /Other/liantong/liantong-hib /Other/liantong/liantong-ah /Other/liantong/liantong-hb /Other/liantong/liantong-jl /Other/liantong/liantong-jx</span><br><span class="line">+++ liantong-hlj</span><br><span class="line">menu = 黑龙江联通</span><br><span class="line">title = 黑龙江联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.97.224.68</span><br><span class="line">+++ liantong-gd</span><br><span class="line">menu = 广东联通</span><br><span class="line">title = 广东联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 221.4.66.66</span><br><span class="line">+++ liantong-gs</span><br><span class="line">menu = 甘肃联通</span><br><span class="line">title = 甘肃联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 221.7.34.10</span><br><span class="line">+++ liantong-sh</span><br><span class="line">menu = 上海联通</span><br><span class="line">title = 上海联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 210.22.70.3</span><br><span class="line">+++ liantong-sc</span><br><span class="line">menu = 四川联通</span><br><span class="line">title = 四川联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 119.6.6.6</span><br><span class="line">+++ liantong-cq</span><br><span class="line">menu = 重庆联通</span><br><span class="line">title = 重庆联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 221.7.92.98</span><br><span class="line">+++ liantong-gz</span><br><span class="line">menu = 贵州联通</span><br><span class="line">title = 贵州联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 221.13.30.242</span><br><span class="line">+++ liantong-ln</span><br><span class="line">menu = 辽宁联通</span><br><span class="line">title = 辽宁联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 124.161.97.234</span><br><span class="line">+++ liantong-zj</span><br><span class="line">menu = 浙江联通</span><br><span class="line">title = 浙江联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 221.12.33.227</span><br><span class="line">+++ liantong-sd</span><br><span class="line">menu = 山东联通</span><br><span class="line">title = 山东联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.102.152.3</span><br><span class="line">+++ liantong-hib</span><br><span class="line">menu = 湖北联通</span><br><span class="line">title = 湖北联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.104.111.114</span><br><span class="line">+++ liantong-ah</span><br><span class="line">menu = 安徽联通</span><br><span class="line">title = 安徽联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.91.88.129</span><br><span class="line">+++ liantong-hb</span><br><span class="line">menu = 河北联通</span><br><span class="line">title = 河北联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.99.160.68</span><br><span class="line">+++ liantong-jl</span><br><span class="line">menu = 吉林联通</span><br><span class="line">title = 吉林联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.98.5.6</span><br><span class="line">+++ liantong-jx</span><br><span class="line">menu = 江西联通</span><br><span class="line">title = 江西联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 220.248.192.12</span><br><span class="line"><span class="comment">#+++ liantong-multi</span></span><br><span class="line"><span class="comment">#menu = 多个联通网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个联通网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/liantong/liantong-hlj /Other/liantong/liantong-gd /Other/liantong/liantong-gs /Other/liantong/liantong-sh</span></span><br><span class="line">++ yidong</span><br><span class="line">menu = 移动网络监控</span><br><span class="line">title = 移动网络监控列表</span><br><span class="line">host = /Other/yidong/yidong-hlj /Other/yidong/yidong-gd /Other/yidong/yidong-gs /Other/yidong/yidong-sh /Other/yidong/yidong-sc /Other/yidong/yidong-cq /Other/yidong/yidong-gz /Other/yidong/yidong-ln /Other/yidong/yidong-zj /Other/yidong/yidong-sd /Other/yidong/yidong-hib /Other/yidong/yidong-ah /Other/yidong/yidong-hb</span><br><span class="line">+++ yidong-hlj</span><br><span class="line">menu = 黑龙江移动</span><br><span class="line">title = 黑龙江移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 211.137.241.34</span><br><span class="line">+++ yidong-gd</span><br><span class="line">menu = 广东移动</span><br><span class="line">title = 广东移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 211.137.241.34</span><br><span class="line">+++ yidong-gs</span><br><span class="line">menu = 甘肃移动</span><br><span class="line">title = 甘肃移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 218.203.160.194</span><br><span class="line">+++ yidong-sh</span><br><span class="line">menu = 上海移动</span><br><span class="line">title = 上海移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 117.131.0.22</span><br><span class="line">+++ yidong-sc</span><br><span class="line">menu = 四川移动</span><br><span class="line">title = 四川移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.137.96.205</span><br><span class="line">+++ yidong-cq</span><br><span class="line">menu = 重庆移动</span><br><span class="line">title = 重庆移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.201.4.3</span><br><span class="line">+++ yidong-gz</span><br><span class="line">menu = 贵州移动</span><br><span class="line">title = 贵州移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.139.1.3</span><br><span class="line">+++ yidong-ln</span><br><span class="line">menu = 辽宁移动</span><br><span class="line">title = 辽宁移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.59.181.182</span><br><span class="line">+++ yidong-zj</span><br><span class="line">menu = 浙江移动</span><br><span class="line">title = 浙江移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.140.10.2</span><br><span class="line">+++ yidong-sd</span><br><span class="line">menu = 山东移动</span><br><span class="line">title = 山东移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.137.191.26</span><br><span class="line">+++ yidong-hib</span><br><span class="line">menu = 湖北移动</span><br><span class="line">title = 湖北移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.137.76.68</span><br><span class="line">+++ yidong-ah</span><br><span class="line">menu = 安徽移动</span><br><span class="line">title = 安徽移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.138.180.2</span><br><span class="line">+++ yidong-hb</span><br><span class="line">menu = 河北移动</span><br><span class="line">title = 河北移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.98.2.4</span><br><span class="line"><span class="comment">#+++ yidong-multi</span></span><br><span class="line"><span class="comment">#menu = 多个移动网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个移动网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/yidong/yidong-hlj /Other/yidong/yidong-gd /Other/yidong/yidong-gs /Other/yidong/yidong-sh</span></span><br><span class="line">++ jiaoyu</span><br><span class="line">menu = 教育网络监控</span><br><span class="line">title = 教育网络监控列表</span><br><span class="line">host = /Other/jiaoyu/jiaoyu-qh /Other/jiaoyu/jiaoyu-sh /Other/jiaoyu/jiaoyu-wh /Other/jiaoyu/jiaoyu-hn</span><br><span class="line">+++ jiaoyu-qh</span><br><span class="line">menu = 清华大学</span><br><span class="line">title = 清华大学</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 166.111.8.28</span><br><span class="line">+++ jiaoyu-sh</span><br><span class="line">menu = 上海交大</span><br><span class="line">title = 上海交大</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.112.26.34</span><br><span class="line">+++ jiaoyu-wh</span><br><span class="line">menu = 武汉科技大学</span><br><span class="line">title = 武汉科技大学</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.114.240.6</span><br><span class="line">+++ jiaoyu-hn</span><br><span class="line">menu = 华南农业大学</span><br><span class="line">title = 华南农业大学</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.116.160.33</span><br><span class="line"><span class="comment">#+++ jiaoyu-multi</span></span><br><span class="line"><span class="comment">#menu = 多个教育网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个教育网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/jiaoyu/jiaoyu-qh /Other/jiaoyu/jiaoyu-sh /Other/jiaoyu/jiaoyu-wh /Other/jiaoyu/jiaoyu-hn</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Smokeping</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用命令学习</title>
    <url>/2019/09/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h4 id="查找文件使用命令"><a href="#查找文件使用命令" class="headerlink" title="查找文件使用命令"></a>查找文件使用命令</h4><ul><li><p>查找目录下面大小超过5M的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home/ -size +5M</span><br></pre></td></tr></table></figure></li><li><p>查找目录下100天之前修改过的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home/ -mtime +100</span><br></pre></td></tr></table></figure></li><li><p>查找目录下60天未被访问过的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home/ \! atime -60</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>查找目录下面文件“core“，如果发现无需提示直接删除。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find / -name core -<span class="built_in">exec</span> rm &#123;&#125; \</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找排除某一个文件然后进行删除</span></span><br><span class="line">$ find / -<span class="built_in">type</span> f ! -name <span class="string">"test"</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br><span class="line">$ find ./ -mtime +3 -name <span class="string">"*.log"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br><span class="line">$ find /tmp -mtime +30 -<span class="built_in">type</span> f -name <span class="string">"*.sh[ab]"</span> -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure></li></ul><p>在一个目录中保留最近30天的文件，30天前的文件自动删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /tmp -mtime +30 -<span class="built_in">type</span> f -name <span class="string">"*.sh[ab]"</span> -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><ul><li>/tmp –设置查找的目录；</li><li>-mtime +30 –设置时间为30天前；</li><li>-type f –设置查找的类型为文件；</li><li>-name *.sh[ab] –设置文件名称中包含sha或者shb；</li><li>-exec rm -f –查找完毕后执行删除操作；</li><li><strong>提示</strong>：将此命令写入crontab后即可自动完成查找并删除的工作</li></ul><ul><li>显示目录文件的文件名和它们的拥有者<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ll | awk <span class="string">'&#123;print $3,"owns",$9&#125;'</span></span><br></pre></td></tr></table></figure></li></ul><p>显示你的系统上PCI总线和附加设备的信息。指定-v，-vv或-vvv来获取越来越详细的输出</p><ul><li>lspci 安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum whatprovides */lspci</span><br><span class="line">pciutils-3.5.1-2.el7.x86_64 : PCI bus related utilities</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /usr/sbin/lspci</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pciutils-3.5.1-3.el7.x86_64 : PCI bus related utilities</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /usr/sbin/lspci</span><br><span class="line"></span><br><span class="line">$ sudo yum install pciutils</span><br><span class="line"></span><br><span class="line">$ lspci -vvvvv</span><br></pre></td></tr></table></figure></li></ul><p>lspci 更多<a href="https://blog.csdn.net/styshoo/article/details/51281437" target="_blank" rel="noopener">详细使用</a></p><ul><li><p>查看当前的Linux服务器的运行级别</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ who -r</span><br><span class="line">$ who -b </span><br><span class="line"><span class="comment"># 查看系统最后一次启动的时间</span></span><br><span class="line"></span><br><span class="line">$ last reboot</span><br><span class="line"><span class="comment"># 查看系统历史启动的时间</span></span><br></pre></td></tr></table></figure></li><li><p>查看系统运行了多长时间</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /proc/uptime| awk -F. <span class="string">'&#123;run_days=$1 / 86400;run_hour=($1 % 86400)/3600;run_minute=($1 % 3600)/60;run_second=$1 % 60;printf("系统已运行：%d天%d时%d分%d秒",run_days,run_hour,run_minute,run_second)&#125;'</span></span><br><span class="line">$ w</span><br><span class="line">$ uptime</span><br></pre></td></tr></table></figure></li><li><p>查看系统启动的日期</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ date -d <span class="string">"<span class="variable">$(awk -F. '&#123;print $1&#125;' /proc/uptime)</span> second ago"</span> +<span class="string">"%Y-%m-%d %H:%M:%S"</span></span><br></pre></td></tr></table></figure></li><li><p>查找目录下文件内容没有包括“nginx”、“msgType”字符串的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -r -l -v <span class="string">"nginx"</span> /data/</span><br><span class="line">$ grep -r  -v <span class="string">"msgType"</span> /data/</span><br></pre></td></tr></table></figure></li><li><p>查找目录下文件内容包括”nginx”字符串的文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -r <span class="string">"nginx"</span> /data/                                             会把<span class="string">"nginx"</span>字符串所在这行的内容显示出来</span><br><span class="line">$ grep -o “nginx” /data/</span><br><span class="line">$ grep -r -l <span class="string">"nginx"</span> /data/                                          不显示<span class="string">"nginx"</span>字符串所在行，是显示文件</span><br></pre></td></tr></table></figure></li><li><p>cat使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat sentry.conf.py |grep -v <span class="string">"^#"</span>          查看配置文件不包括注释内容</span><br><span class="line">$ cat -b `find /var/<span class="built_in">log</span>/httpd/ -cmin -60 -<span class="built_in">print</span> |sed <span class="string">"1d"</span>`\ |awk <span class="string">'&#123;print $2&#125;'</span>|sort |uniq -c |sort -n -k 1 -r |head -n 1               统计当前目录下日志文件里面I平访问量最多的一个IP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某一个时间段的IP地址访问排名前10</span></span><br><span class="line">$ cat nginx_access.log|grep <span class="string">'+0800'</span>|awk <span class="string">'&#123;split($1,array,"[");if(array[2]&gt;="25/Jul/2017:14:17:30" &amp;&amp; array[2]&lt;="25/Jul/2017:20:17:30")&#123;print $0&#125;&#125;'</span>|awk -F<span class="string">"^`"</span> &amp;&amp; <span class="string">"-"</span> &amp;&amp; <span class="string">"^`"</span> <span class="string">'&#123;print $1&#125;'</span>|sort|uniq -c|sort -n -k 1 -r|head -n 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计当前日志ip访问前10</span></span><br><span class="line">$ cat nginx_access.log |awk -F<span class="string">"^"</span> <span class="string">'&#123;print $1&#125;'</span>|sort|uniq -c|sort -n -k 1 -r|head -n 10</span><br></pre></td></tr></table></figure></li><li><p>获取IP地址通用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig |sed -n 2p |awk <span class="string">'&#123;print $1$2&#125;'</span>|sed <span class="string">'s/^.*[^0-9]\([0-9]\&#123;1,3\&#125;\)\.\([0-9]\&#123;1,3\&#125;\)\.\([0-9]\&#123;1,3\&#125;\)\.\([0-9]\&#123;1,3\&#125;\)$/\1\.\2\.\3\.\4/g'</span></span><br></pre></td></tr></table></figure></li><li><p>curl使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监控网页的响应时间</span></span><br><span class="line">$ curl -o /dev/null -s -w <span class="string">"time_connect: %&#123;time_connect&#125;\ntime_starttransfer: %&#123;time_starttransfer&#125;\ntime_total: %&#123;time_total&#125;\n"</span> <span class="string">"http://www.baidu.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控站点可用性</span></span><br><span class="line">$ curl -o /dev/null -s -w %&#123;http_code&#125; <span class="string">"http://www.baidu.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启gzip请求</span></span><br><span class="line">$ curl -I http://www.sina.com.cn/ -H Accept-Encoding:gzip,defalte</span><br></pre></td></tr></table></figure></li><li><p>每10秒显示一次复制的大小</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ watch -n 10 du -sh /root</span><br></pre></td></tr></table></figure></li><li><p>统计目录(包括子目录)下面文件个数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find ./ -<span class="built_in">type</span> f | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用find命令查找当前目录下是文件类型的文件，然后用wc来计数</span></span><br><span class="line">$ ls -lR|grep <span class="string">"^-"</span>|wc -l</span><br><span class="line"><span class="comment"># ls命令加R参数，列出下级子目录，使用grep命令过滤以“-”开头的，如果是目录就改成“^d”，后面用wc计数。</span></span><br><span class="line"></span><br><span class="line">$ find ./ -name <span class="string">"*.*"</span> |xargs cat|grep -v ^$|wc -l</span><br><span class="line">$ find . \( ! -name <span class="string">'*.png'</span> ! -name <span class="string">'*.gif'</span> ! -name <span class="string">'*.jpg'</span> ! -name <span class="string">'*.swf'</span> \) -<span class="built_in">type</span> f |wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目录下所有文件的的行数，去掉空行</span></span><br><span class="line">$ find ./ -name <span class="string">"*.*"</span> |xargs cat|wc -l   </span><br><span class="line">$ find . \( ! -name <span class="string">'*.png'</span> ! -name <span class="string">'*.gif'</span> ! -name <span class="string">'*.jpg'</span> ! -name <span class="string">'*.swf'</span> \) -<span class="built_in">type</span> f |xargs cat|wc -l</span><br></pre></td></tr></table></figure></li><li><p>查看系统tcp连接中各个状态的连接数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -an | awk '/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出每个IP的连接数，以及总的各个状态的连接数</span></span><br><span class="line">$ netstat -n | awk <span class="string">'/^tcp/ &#123;n=split($(NF-1),array,":");if(n&lt;=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N&#125; END &#123;for(a in S)&#123;printf("%-20s %s\n", a, S[a]);++I&#125;printf("%-20s %s\n","TOTAL_IP",I);for(a in s) printf("%-20s %s\n",a, s[a]);printf("%-20s %s\n","TOTAL_LINK",N);&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计当前tcp/ip链接数排名前10的IP</span></span><br><span class="line">$ netstat -n|awk <span class="string">'/^tcp/ &#123;print $5&#125;'</span>|awk -F<span class="string">':'</span> <span class="string">'&#123;print $1&#125;'</span>|sort|uniq -c|sort -n -k 1 -r|head -n 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用grep统计当前文件里面所有的IP地址</span></span><br><span class="line">$ grep -E -o <span class="string">"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"</span> nginx_access.log</span><br></pre></td></tr></table></figure></li></ul><p>查看系统当前进程打开的文件句柄数，按照最大的进行排序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsof -n | awk <span class="string">'&#123;print $2&#125;'</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure><p>ping命令显示时间以及日期</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ping www.sina.com.cn -i 3 | awk <span class="string">'&#123; print $0"\t" strftime("%Y-%m-%d %H:%M:%S",systime()) &#125; '</span> &gt; /opt/sina.log &amp;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables</title>
    <url>/2019/09/25/iptables/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="Iptables"><a href="#Iptables" class="headerlink" title="Iptables"></a>Iptables</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iptalbes 是用来设置、维护和检查Linux内核的IP包过滤规则的。可以定义不同的表，每个表都包含几个内部的链，也能包含用户定义的链。每个链都是一个规则列表，对对应的包进行匹配：每条规则指定应当如何处理与之相匹配的包。这被称作’target’（目标），也可以跳向同一个表内的用户定义的链。</p><a id="more"></a><h4 id="iptables限制IP访问特定端口"><a href="#iptables限制IP访问特定端口" class="headerlink" title="iptables限制IP访问特定端口"></a>iptables限制IP访问特定端口</h4><ul><li><p>允许某个IP （192.168.6.100）的机器进行SSH连接：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -s 192.168.6.100 -p tcp --dport 22 -j ACCEPT</span><br><span class="line">$ iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">ACCEPT tcp -- 192.168.6.100 0.0.0.0/0 tcp dpt:22</span><br></pre></td></tr></table></figure></li><li><p>允许某一段的IP 访问SSH</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -s 192.168.6.0/24 -p tcp --dport 22 -j ACCEPT</span><br><span class="line">$ iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">ACCEPT tcp -- 192.168.6.0/24 0.0.0.0/0 tcp dpt:22</span><br></pre></td></tr></table></figure></li><li><p>限制某一IP 访问SSH</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -p tcp -s ! 192.168.6.100 --dport 22 -j ACCEPT --注意！号有个空格</span><br><span class="line">$ iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">ACCEPT tcp -- 192.168.6.0/24 0.0.0.0/0 tcp dpt:22</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置一个NAT表放火墙"><a href="#配置一个NAT表放火墙" class="headerlink" title="配置一个NAT表放火墙"></a>配置一个NAT表放火墙</h3><ul><li><p>防止外网用内网IP欺骗</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -s 10.0.0.0/8 -j DROP</span><br><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -s 172.16.0.0/12 -j DROP</span><br><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -s 192.168.0.0/16 -j DROP</span><br></pre></td></tr></table></figure></li><li><p>禁止与211.101.46.253的所有连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -d 211.101.46.253 -j DROP</span><br></pre></td></tr></table></figure></li><li><p>禁用FTP(21)端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 21 -j DROP</span><br><span class="line"><span class="comment"># 这样写范围太大了,我们可以更精确的定义.</span></span><br><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 21 -d 211.101.46.253 -j DROP</span><br><span class="line"><span class="comment"># 这样只禁用211.101.46.253地址的FTP连接,其他连接还可以.如web(80端口)连接.</span></span><br></pre></td></tr></table></figure></li><li><p>iptables白名单</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -s 0.0.0.0/0 -p tcp --dport 80 -j DROP</span><br><span class="line"><span class="comment"># 拒绝所有IP链接80端口</span></span><br><span class="line"></span><br><span class="line">$ iptables -A INPUT -s 58.17.245.222 -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="comment"># 允许指定IP访问80端口</span></span><br></pre></td></tr></table></figure></li><li><p>允许所有已经建立的和相关的连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">$ iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>drop非法连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -m state --state INVALID -j DROP</span><br><span class="line">$ iptables -A OUTPUT -m state --state INVALID -j DROP</span><br><span class="line">$ iptables -A FORWARD -m state --state INVALID -j DROP</span><br></pre></td></tr></table></figure></li></ul><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><ul><li>这里使用的是FTP服务(36542)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 36542 -j DNAT --to 192.168.50.2:36542</span><br><span class="line">$ iptables -t nat -A POSTROUTING -p tcp --dport 36542 -j MASQUERADE</span><br><span class="line"><span class="comment"># 因为FTP使用了两个端口21和20，21只是用于连接，20是执行命令的。20没办法修改，这里使用了被动模式连接。</span></span><br><span class="line"></span><br><span class="line">$ iptables -t nat -I PREROUTING -p tcp --dport 60000:65000 -j DNAT --to 192.168.50.2</span><br><span class="line"><span class="comment"># 被动连接端口60000-65000全部转发给50.2</span></span><br><span class="line"></span><br><span class="line">$ iptables -t nat -I POSTROUTING -p tcp --dport 60000:65000 -j MASQUERADE</span><br><span class="line"><span class="comment"># 需要开放60000:65000端口，</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;公司有一台服务器连接外网，其他的服务器都不能上外网，我们可以通过这个外网服务器用作网关服务器，做端口转发，连接到内网服务器</p><ul><li><p>这里使用数据库的3306映射到外网的的36544</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING  -m tcp -p tcp --dport 36544 -j DNAT --to-destination 172.16.1.11:3306</span><br><span class="line">$ iptables -t nat -A POSTROUTING -m tcp -p tcp --dport 3306 -d 172.16.1.11 -j SNAT --to-source 172.16.1.1</span><br></pre></td></tr></table></figure></li><li><p>添加连续端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -p tcp --dport 60000:65000 -j ACCEPT</span><br><span class="line"><span class="comment"># 冒号表示添加一个连续的端口</span></span><br><span class="line"></span><br><span class="line">$ iptables -A INPUT -p tcp -m multiport –dport 21:25,135:139 -j DROP</span><br><span class="line"><span class="comment">#使用multiport参数配置不连续端口和多个端口</span></span><br></pre></td></tr></table></figure></li><li><p>代理上网<br>内网机子无法上网，通过一台可以上网的电脑，在可以访问外网的server上iptables让其一个网段内的机子访问外网，这里是阿里云环境来做的，开启IP转发功能</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -i <span class="string">'s/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/g'</span> /etc/sysctl.conf</span><br><span class="line">$ iptables -t nat -I POSTROUTING -s 172.16.3.0/24 -j SNAT --to-source 172.16.3.2</span><br></pre></td></tr></table></figure></li></ul><h4 id="操作iptables的nat规则"><a href="#操作iptables的nat规则" class="headerlink" title="操作iptables的nat规则"></a>操作iptables的nat规则</h4><ul><li><p>查看规则</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -nvL -t nat</span><br><span class="line">$ iptables -t nat -L -n --line-numbers</span><br></pre></td></tr></table></figure></li><li><p>删除规则</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -D POSTROUTING 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># iptables的规则号</span></span><br><span class="line">$ iptables -nL --line-number</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改/替换规则</span></span><br><span class="line">$ iptbales -R INPUT &#123;1&#125; -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除规则</span></span><br><span class="line">$ iptables -D INPUT &#123;1&#125;</span><br></pre></td></tr></table></figure></li><li><p>iptales端口通过一张网卡出去</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -i eth0 -p tcp -s 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLESHED -j ACCEPT</span><br><span class="line">$ iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>本机端口，映射到本机端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 25 -j REDIRECT --to-port 2525</span><br><span class="line">$ iptables -t nat -I PREROUTING --src 0/0 --dst 192.168.1.5 -p tcp --dport 80 -j REDIRECT --to-ports 8123</span><br><span class="line">$ iptables -t nat -I OUTPUT --src 0/0 --dst 192.168.1.5 -p tcp --dport 80 -j REDIRECT --to-ports 8123</span><br></pre></td></tr></table></figure></li><li><p>保存防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /usr/libexec/iptables/iptables.init save</span><br></pre></td></tr></table></figure></li><li><p>奇葩需求，开放ssh端口指定的IP地址访问，其他端口太多不想添加能对外访问</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample configuration for iptables service</span></span><br><span class="line"><span class="comment"># you can edit this manually or use system-config-firewall</span></span><br><span class="line"><span class="comment"># please do not ask us to add additional ports/services to this default configuration</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -s 192.168.10.1/32 -p tcp -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 22 -j  REJECT --reject-with icmp-port-unreachable</span><br><span class="line"><span class="comment">#-A INPUT -j REJECT --reject-with icmp-host-prohibited</span></span><br><span class="line"><span class="comment">#-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>交换机做端口聚合</title>
    <url>/2019/09/25/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%81%9A%E7%AB%AF%E5%8F%A3%E8%81%9A%E5%90%88/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p><strong>应用场景</strong>：h3c s5500 (Switch A)。huawei s5720S-SI-AC（Switch B）</p><p>Switch A 作为上行交换机，Switch B作为下行交换机</p><p><strong>组网</strong>：两个交换机的id、vlan号这里使用的是相同</p><a id="more"></a><p><img src="https://img.xxlaila.cn/2846sjdhausiy84yhks.png" alt="img"></p><h3 id="Switch-A配置"><a href="#Switch-A配置" class="headerlink" title="Switch A配置"></a>Switch A配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch A-SW]vlan 50</span><br><span class="line">[Switch A-SW-vlan50]quit</span><br><span class="line">[Switch A-SW]interface Bridge-Aggregation 50</span><br><span class="line">[Switch A-SW-Bridge-Aggregation50]port access vlan 50</span><br><span class="line">[Switch A-SW]interface GigabitEthernet 1/0/19</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/19]port link-aggregation group 50</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/19] port access vlan 50</span><br><span class="line">[Switch A-SW]interface GigabitEthernet 1/0/20</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/20]port link-aggregation group 50</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/20]port access vlan 50</span><br><span class="line">[Switch A-SW]link-aggregation load-sharing mode <span class="built_in">source</span>-mac destination-mac</span><br></pre></td></tr></table></figure><ul><li>查看端口聚合<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch A-SW]dis link-aggregation verbose</span><br></pre></td></tr></table></figure></li></ul><h3 id="Switch-B配置"><a href="#Switch-B配置" class="headerlink" title="Switch B配置"></a>Switch B配置</h3><h4 id="1、创建eth-trunk接口并加入成员"><a href="#1、创建eth-trunk接口并加入成员" class="headerlink" title="1、创建eth-trunk接口并加入成员"></a>1、创建eth-trunk接口并加入成员</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch B] interface eth-trunk 50</span><br><span class="line">[Switch B-Eth-Trunk1] trunkport gigabitethernet 0/0/1 to 0/0/3</span><br><span class="line">[Switch B-Eth-Trunk1] quit</span><br></pre></td></tr></table></figure><h4 id="2、创建vlan并吧串行加入vlan"><a href="#2、创建vlan并吧串行加入vlan" class="headerlink" title="2、创建vlan并吧串行加入vlan"></a>2、创建vlan并吧串行加入vlan</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch B] vlan batch 50</span><br><span class="line">[Switch B] interface eth-trunk 50</span><br><span class="line">[Switch B-Eth-Trunk1] port link-type trunk</span><br><span class="line">[Switch B-Eth-Trunk1] port trunk allow-pass vlan 50</span><br><span class="line">[Switch B-Eth-Trunk1] quit</span><br></pre></td></tr></table></figure><h4 id="3、配置eth-trunk的负载分担方式"><a href="#3、配置eth-trunk的负载分担方式" class="headerlink" title="3、配置eth-trunk的负载分担方式"></a>3、配置eth-trunk的负载分担方式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch B] interface eth-trunk 1</span><br><span class="line">[Switch B-Eth-Trunk1] load-balance src-dst-mac</span><br><span class="line">[Switch B-Eth-Trunk1] quit</span><br></pre></td></tr></table></figure><h3 id="Switch-A配置地址段"><a href="#Switch-A配置地址段" class="headerlink" title="Switch A配置地址段"></a>Switch A配置地址段</h3><p>在vlan里面起一个网络，但不启用dhcp服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch A-SW]int vlan 50</span><br><span class="line">[Switch A-SW-Vlan-interface50]ip ad 172.21.16.1 20</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
      <tags>
        <tag>交换机</tag>
      </tags>
  </entry>
  <entry>
    <title>pv pvc</title>
    <url>/2019/09/25/pv-pvc/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PersistentVolume（pv）和PersistentVolumeClaim（pvc）是k8s提供的两种API资源，用于抽象存储细节。管理员关注于如何通过pv提供存储功能而无需关注用户如何使用，同样的用户只需要挂载pvc到容器中而不需要关注存储卷采用何种技术实现。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvc和pv的关系与pod和node关系类似，前者消耗后者的资源。pvc可以向pv申请指定大小的存储资源并设置访问模式,这就可以通过Provision -&gt; Claim 的方式，来对存储资源进行控制。</p><a id="more"></a><h3 id="2、生命周期"><a href="#2、生命周期" class="headerlink" title="2、生命周期"></a>2、生命周期</h3><p>pv和pvc遵循以下生命周期:</p><ul><li>供应准备。通过集群外的存储系统或者云平台来提供存储持久化支持。<ul><li><strong>静态提供</strong>: 管理员手动创建多个PV，供PVC使用。</li><li><strong>动态提供</strong>: 动态创建PVC特定的PV，并绑定。</li></ul></li><li>绑定。用户创建pvc并指定需要的资源和访问模式。在找到可用pv之前，pvc会保持未绑定状态。</li><li>使用。用户可在pod中像volume一样使用pvc。</li><li>释放。用户删除pvc来回收存储资源，pv将变成“released”状态。由于还保留着之前的数据，这些数据需要根据不同的策略来处理，否则这些存储资源无法被其他pvc使用。</li><li>回收(Reclaiming)。pv可以设置三种回收策略：保留（Retain），回收（Recycle）和删除（Delete）。</li></ul><ul><li><strong>保留策略</strong>: 允许人工处理保留的数据。</li><li><strong>删除策略</strong>: 将删除pv和外部关联的存储资源，需要插件支持。</li><li><strong>回收策略</strong>: 将执行清除操作，之后可以被新的pvc使用，需要插件支持。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前只有NFS和HostPath类型卷支持回收策略，AWS EBS,GCE PD,Azure Disk和Cinder支持删除(Delete)策略。</p><h4 id="2-1、Provisioning"><a href="#2-1、Provisioning" class="headerlink" title="2.1、Provisioning"></a>2.1、Provisioning</h4><p>两种方式提供的PV资源供给：</p><ul><li><p>static:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过集群管理者创建多个PV，为集群“使用者”提供存储能力而隐藏真实存储的细节。并且存在于kubenretes api中，可被直接使用。</p></li><li><p>dynamic:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;动态卷供给是kubernetes独有的功能，这一功能允许按需创建存储建。在此之前，集群管理员需要事先在集群外由存储提供者或者云提供商创建<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储卷，成功之后再创建PersistentVolume对象，才能够在kubernetes中使用。动态卷供给能让集群管理员不必进行预先创建存储卷，而是随着用户需求进行创建。在1.5版本提高了动态卷的弹性和可用性。</p></li></ul><h3 id="PV类型"><a href="#PV类型" class="headerlink" title="PV类型"></a>PV类型</h3><p>pv支持以下类型:</p><ul><li>GCEPersistentDisk</li><li>AWSElasticBlockStore</li><li>NFS</li><li>iSCSI</li><li>RBD (Ceph Block Device)</li><li>Glusterfs</li><li>AzureFile</li><li>AzureDisk</li><li>CephFS</li><li>cinder</li><li>FC</li><li>FlexVolume</li><li>Flocker</li><li>PhotonPersistentDisk</li><li>Quobyte</li><li>VsphereVolume</li><li>HostPath (single node testing only – local storage is not supported in any way and WILL NOT WORK in a multi-node cluster)</li></ul><h4 id="3-1、PV属性"><a href="#3-1、PV属性" class="headerlink" title="3.1、PV属性"></a>3.1、PV属性</h4><ul><li>访问模式,与pv的语义相同。在请求资源时使用特定模式。</li><li>资源,申请的存储资源数额。</li></ul><h4 id="3-2、PV卷阶段状态"><a href="#3-2、PV卷阶段状态" class="headerlink" title="3.2、PV卷阶段状态"></a>3.2、PV卷阶段状态</h4><ul><li>Available – 资源尚未被claim使用</li><li>Bound – 卷已经被绑定到claim了</li><li>Released – claim被删除，卷处于释放状态，但未被集群回收。</li><li>Failed – 卷自动回收失败</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>pv, pvc</tag>
      </tags>
  </entry>
  <entry>
    <title>利用NFS动态提供Kubernetes后端存储卷</title>
    <url>/2019/09/24/%E5%88%A9%E7%94%A8NFS%E5%8A%A8%E6%80%81%E6%8F%90%E4%BE%9BKubernetes%E5%90%8E%E7%AB%AF%E5%AD%98%E5%82%A8%E5%8D%B7/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nfs-client-provisioner是一个automatic provisioner，使用NFS作为存储，自动创建PV和对应的PVC，本身不提供NFS存储，需要外部先有一套NFS存储服务。</p><ul><li>PV以 ${namespace}-${pvcName}-${pvName}的命名格式提供（在NFS服务器上）</li><li>PV回收的时候以 archieved-${namespace}-${pvcName}-${pvName} 的命名格式（在NFS服务器上）</li></ul><p><a href="https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client" target="_blank" rel="noopener">官方访问地址</a></p><a id="more"></a><h3 id="1、权限体系构建"><a href="#1、权限体系构建" class="headerlink" title="1、权限体系构建"></a>1、权限体系构建</h3><h4 id="1-1、创建serviceaccount"><a href="#1-1、创建serviceaccount" class="headerlink" title="1.1、创建serviceaccount"></a>1.1、创建serviceaccount</h4><p>ServiceAccount也是一种账号, 供运行在pod中的进程使用, 为pod中的进程提供必要的身份证明</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; serviceaccount.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="1-2、创建role"><a href="#1-2、创建role" class="headerlink" title="1.2、创建role"></a>1.2、创建role</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt;clusterrole.yaml&lt;&lt;EOF</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumes"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"delete"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumeclaims"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"storage.k8s.io"</span>]</span><br><span class="line">    resources: [<span class="string">"storageclasses"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"events"</span>]</span><br><span class="line">    verbs: [<span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"services"</span>, <span class="string">"endpoints"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"create"</span>,<span class="string">"list"</span>, <span class="string">"watch"</span>,<span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"extensions"</span>]</span><br><span class="line">    resources: [<span class="string">"podsecuritypolicies"</span>]</span><br><span class="line">    resourceNames: [<span class="string">"nfs-client-provisioner"</span>]</span><br><span class="line">    verbs: [<span class="string">"use"</span>]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="1-3、账户和角色绑定"><a href="#1-3、账户和角色绑定" class="headerlink" title="1.3、账户和角色绑定"></a>1.3、账户和角色绑定</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt;clusterrolebinding.yaml &lt;&lt;EOF</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  name: run-nfs-client-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nfs-client-provisioner</span><br><span class="line">    namespace: kube-ops</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="1-4、执行创建"><a href="#1-4、执行创建" class="headerlink" title="1.4、执行创建"></a>1.4、执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f serviceaccount.yaml -f clusterrole.yaml -f clusterrolebinding.yaml</span><br><span class="line">serviceaccount/nfs-client-provisioner created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/nfs-client-provisioner-runner created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/run-nfs-client-provisioner created</span><br></pre></td></tr></table></figure><h3 id="2、安装部署"><a href="#2、安装部署" class="headerlink" title="2、安装部署"></a>2、安装部署</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载deployment.yaml文件,需要修改NFS服务器所在的IP地址（10.10.10.60），以及NFS服务器共享的路径（/ifs/kubernetes），两处都需要修改为你实际的NFS服务器和共享目录</p><h4 id="2-1、部署存储供应卷"><a href="#2-1、部署存储供应卷" class="headerlink" title="2.1、部署存储供应卷"></a>2.1、部署存储供应卷</h4><p>根据PVC的请求, 动态创建PV存储.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; deployment.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">---</span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nfs-client-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nfs-client-provisioner</span><br><span class="line">      containers:</span><br><span class="line">        - name: nfs-client-provisioner</span><br><span class="line">          image: quay.io/external_storage/nfs-client-provisioner:latest</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: nfs-client-root</span><br><span class="line">              mountPath: /persistentvolumes</span><br><span class="line">          env:</span><br><span class="line">            - name: PROVISIONER_NAME</span><br><span class="line">              value: fuseim.pri/ifs</span><br><span class="line">            - name: NFS_SERVER</span><br><span class="line">              value: 172.21.17.39</span><br><span class="line">            - name: NFS_PATH</span><br><span class="line">              value: /opt</span><br><span class="line">      volumes:</span><br><span class="line">        - name: nfs-client-root</span><br><span class="line">          nfs:</span><br><span class="line">            server: /opt</span><br><span class="line">            path: 172.21.17.39</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>修改StorageClass文件并部署class.yaml</li></ul><p>此处可以不修改，或者修改provisioner的名字，需要与上面的deployment的PROVISIONER_NAME名字一致</p><h4 id="2-2、创建storageclass"><a href="#2-2、创建storageclass" class="headerlink" title="2.2、创建storageclass"></a>2.2、创建storageclass</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; class.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: managed-nfs-storage</span><br><span class="line">provisioner: fuseim.pri/ifs <span class="comment"># or choose another name, must match deployment's env PROVISIONER_NAME'</span></span><br><span class="line">parameters:</span><br><span class="line">  archiveOnDelete: <span class="string">"false"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="2-3、执行创建"><a href="#2-3、执行创建" class="headerlink" title="2.3、执行创建"></a>2.3、执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f deployment.yaml </span><br><span class="line">serviceaccount/nfs-client-provisioner created</span><br><span class="line">deployment.extensions/nfs-client-provisioner created</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f class.yaml </span><br><span class="line">storageclass.storage.k8s.io/managed-nfs-storage created</span><br></pre></td></tr></table></figure><h5 id="2-3-1、查看StorageClass"><a href="#2-3-1、查看StorageClass" class="headerlink" title="2.3.1、查看StorageClass"></a>2.3.1、查看StorageClass</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get storageclass</span><br><span class="line">NAME                  PROVISIONER      AGE</span><br><span class="line">managed-nfs-storage   fuseim.pri/ifs   18s</span><br></pre></td></tr></table></figure><h5 id="2-3-2、设置默认后端存储"><a href="#2-3-2、设置默认后端存储" class="headerlink" title="2.3.2、设置默认后端存储"></a>2.3.2、设置默认后端存储</h5><p>设置这个default名字的SC为Kubernetes的默认存储后端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch storageclass managed-nfs-storage -p <span class="string">'&#123;"metadata": &#123;"annotations":&#123;"storageclass.kubernetes.io/is-default-class":"true"&#125;&#125;&#125;'</span></span><br><span class="line">storageclass.storage.k8s.io/managed-nfs-storage patched</span><br></pre></td></tr></table></figure><ul><li>storage.yaml (和上面一样)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; storage.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: managed-nfs-storage</span><br><span class="line">  annotations:</span><br><span class="line">    storageclass.kubernetes.io/is-default-class: <span class="string">"true"</span></span><br><span class="line">provisioner: fuseim.pri/ifs</span><br><span class="line">parameters:</span><br><span class="line">  archiveOnDelete: <span class="string">"false"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-3、查看验证"><a href="#2-3-3、查看验证" class="headerlink" title="2.3.3、查看验证"></a>2.3.3、查看验证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get all -n kube-ops</span><br><span class="line">NAME                                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/nfs-client-provisioner-77f678858b-8d2d6   1/1     Running   0          26m</span><br><span class="line"></span><br><span class="line">NAME                                     READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/nfs-client-provisioner   1/1     1            1           29m</span><br><span class="line"></span><br><span class="line">NAME                                                DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/nfs-client-provisioner-77f678858b   1         1         1       26m</span><br></pre></td></tr></table></figure><h3 id="3、验证测试"><a href="#3、验证测试" class="headerlink" title="3、验证测试"></a>3、验证测试</h3><h4 id="3-1、创建一个测试存储"><a href="#3-1、创建一个测试存储" class="headerlink" title="3.1、创建一个测试存储"></a>3.1、创建一个测试存储</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; <span class="built_in">test</span>-claim.yaml &lt;&lt;EOF</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-claim</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"managed-nfs-storage"</span></span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Mi</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="3-2、启动测试POD"><a href="#3-2、启动测试POD" class="headerlink" title="3.2、启动测试POD"></a>3.2、启动测试POD</h4><p>POD文件如下，作用就是在test-claim的PV里touch一个SUCCESS文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat  &gt; <span class="built_in">test</span>-pod.yaml &lt;&lt;EOF</span><br><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-pod</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: <span class="built_in">test</span>-pod</span><br><span class="line">    image: docker.io/busybox:1.24</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - <span class="string">"/bin/sh"</span></span><br><span class="line">    args:</span><br><span class="line">      - <span class="string">"-c"</span></span><br><span class="line">      - <span class="string">"touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1"</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">      - name: nfs-pvc</span><br><span class="line">        mountPath: <span class="string">"/mnt"</span></span><br><span class="line">  restartPolicy: <span class="string">"Never"</span></span><br><span class="line">  volumes:</span><br><span class="line">    - name: nfs-pvc</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: <span class="built_in">test</span>-claim</span><br></pre></td></tr></table></figure><h4 id="3-3、执行创建"><a href="#3-3、执行创建" class="headerlink" title="3.3、执行创建"></a>3.3、执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f ./</span><br><span class="line">persistentvolumeclaim/<span class="built_in">test</span>-claim created</span><br><span class="line">pod/<span class="built_in">test</span>-pod created</span><br></pre></td></tr></table></figure><h4 id="3-4、查看验证"><a href="#3-4、查看验证" class="headerlink" title="3.4、查看验证"></a>3.4、查看验证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pod,pv -n kube-ops</span><br><span class="line">NAME                                          READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod/nfs-client-provisioner-77f678858b-8d2d6   1/1     Running     0          3h26m</span><br><span class="line">pod/<span class="built_in">test</span>-pod                                  0/1     Completed   0          172m</span><br><span class="line"></span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS          REASON   AGE</span><br><span class="line">persistentvolume/pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8   1Mi        RWX            Retain           Bound    kube-ops/<span class="built_in">test</span>-claim   managed-nfs-storage            172m</span><br></pre></td></tr></table></figure><ul><li>登录nfs服务器查看是否成功的创建目录<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls /opt/</span><br><span class="line">kube-ops-test-claim-pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-5、更改PersistentVolumes-中的一个回收策略"><a href="#3-5、更改PersistentVolumes-中的一个回收策略" class="headerlink" title="3.5、更改PersistentVolumes 中的一个回收策略"></a>3.5、更改PersistentVolumes 中的一个回收策略</h4><ul><li><p>查看集群中PersistentVolumes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pv -n kube-ops</span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS          REASON   AGE</span><br><span class="line">pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8   1Mi        RWX            Delete           Bound    kube-ops/<span class="built_in">test</span>-claim   managed-nfs-storage            3m6s</span><br></pre></td></tr></table></figure></li><li><p>更改PersistentVolumes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl patch pv pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8  -p <span class="string">'&#123;"spec":&#123;"persistentVolumeReclaimPolicy":"Retain"&#125;&#125;'</span></span><br><span class="line">persistentvolume/pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8 patched</span><br><span class="line"></span><br><span class="line">$ kubectl get pv -n kube-ops</span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS          REASON   AGE</span><br><span class="line">pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8   1Mi        RWX            Retain           Bound    kube-ops/<span class="built_in">test</span>-claim   managed-nfs-storage            3m54s</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>pvc,pv</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 prometheus</title>
    <url>/2019/09/20/k8s-v1-14-prometheus/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h1 id="Prometheus、Grafana-部署"><a href="#Prometheus、Grafana-部署" class="headerlink" title="Prometheus、Grafana 部署"></a>Prometheus、Grafana 部署</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Grafana是一个开源的度量分析与可视化套件。经常被用作基础设施的时间序列数据和应用程序分析的可视化，我们这里用它来做Kubernetes集群监控数据的可视化。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;截至当前，prometheus、grafana均采用最新的镜像包，在在第一次部署的时候grafana报了一个错误<code>mkdir: cannot create directory &#39;/var/lib/grafana/plugins&#39;: No such file or directory</code>,这是因为Grafana启动使用的用户和用户组都是472，造成对外挂存储没有权限。<a href="https://grafana.com/docs/installation/docker/#migration-from-a-previous-version-of-the-docker-container-to-5-1-or-later" target="_blank" rel="noopener">参考官方</a></p><a id="more"></a><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>新建yaml文件</p><ul><li>monitor-namespace.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat  monitor-namespace.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: monitoring</span><br></pre></td></tr></table></figure></li></ul><p>其他的文件均采用以前历史的，然后稍加修改，其他<a href="https://github.com/xxlaila/kubernetes-yaml.git" target="_blank" rel="noopener">yaml</a>文件,移除<code>grafana-ingress.yaml</code>、<code>prometheus-ingress.yaml</code></p><h3 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h3><ul><li><p>grafana-deploy.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana-core</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  labels:</span><br><span class="line">    app: grafana</span><br><span class="line">    component: core</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: grafana</span><br><span class="line">        component: core</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: grafana/grafana:latest</span><br><span class="line">        name: grafana-core</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="comment"># env:</span></span><br><span class="line">        resources:</span><br><span class="line">          <span class="comment"># keep request = limit to keep this container in guaranteed class</span></span><br><span class="line">          limits:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        env:</span><br><span class="line">          <span class="comment"># The following env variables set up basic auth twith the default admin user and admin password.</span></span><br><span class="line">          - name: GF_AUTH_BASIC_ENABLED</span><br><span class="line">            value: <span class="string">"true"</span></span><br><span class="line">          - name: GF_AUTH_ANONYMOUS_ENABLED</span><br><span class="line">            value: <span class="string">"false"</span></span><br><span class="line">          <span class="comment"># - name: GF_AUTH_ANONYMOUS_ORG_ROLE</span></span><br><span class="line">          <span class="comment">#   value: Admin</span></span><br><span class="line">          <span class="comment"># does not really work, because of template variables in exported dashboards:</span></span><br><span class="line">          <span class="comment"># - name: GF_DASHBOARDS_JSON_ENABLED</span></span><br><span class="line">          <span class="comment">#   value: "true"</span></span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /login</span><br><span class="line">            port: 3000</span><br><span class="line">          <span class="comment"># initialDelaySeconds: 30</span></span><br><span class="line">          <span class="comment"># timeoutSeconds: 1</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: grafana-persistent-storage</span><br><span class="line">          mountPath: /var/lib/grafana</span><br><span class="line">      volumes:</span><br><span class="line">      - name: grafana-persistent-storage</span><br><span class="line">        emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>prometheus-deploy.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: prom/prometheus:latest</span><br><span class="line">        name: prometheus</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - <span class="string">"/bin/prometheus"</span></span><br></pre></td></tr></table></figure></li><li><p>prometheus-svc.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#type: NodePort</span></span><br><span class="line">  ports:</span><br><span class="line">  - port: 9090</span><br><span class="line">    targetPort: 9090</span><br><span class="line">    <span class="comment">#nodePort: 30005</span></span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br></pre></td></tr></table></figure></li><li><p>grafana-svc.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat grafana-svc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  labels:</span><br><span class="line">    app: grafana</span><br><span class="line">    component: core</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#type: NodePort</span></span><br><span class="line">  ports:</span><br><span class="line">    - port: 3000</span><br><span class="line">  selector:</span><br><span class="line">    app: grafana</span><br><span class="line">    component: core</span><br></pre></td></tr></table></figure></li></ul><h3 id="执行创建"><a href="#执行创建" class="headerlink" title="执行创建"></a>执行创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f ./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多执行几次</span></span><br></pre></td></tr></table></figure><h3 id="检查部署"><a href="#检查部署" class="headerlink" title="检查部署"></a>检查部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod,svc,deploy -n monitoring</span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/grafana-core-7b5989cf9d-snbk5   1/1     Running   0          2m31s</span><br><span class="line">pod/node-exporter-dddv7             1/1     Running   0          12m</span><br><span class="line">pod/node-exporter-fhfp6             1/1     Running   0          12m</span><br><span class="line">pod/node-exporter-m46bf             1/1     Running   0          12m</span><br><span class="line">pod/node-exporter-xkrzp             1/1     Running   0          12m</span><br><span class="line">pod/node-exporter-zfcxh             1/1     Running   0          12m</span><br><span class="line">pod/prometheus-67bcf457db-999ns     1/1     Running   0          12m</span><br><span class="line"></span><br><span class="line">NAME                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">service/grafana         ClusterIP   10.254.95.151    &lt;none&gt;        3000/TCP         12m</span><br><span class="line">service/node-exporter   ClusterIP   10.254.114.12    &lt;none&gt;        9100/TCP         12m</span><br><span class="line">service/prometheus      ClusterIP   10.254.104.216   &lt;none&gt;        9090/TCP         12m</span><br><span class="line"></span><br><span class="line">NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.extensions/grafana-core   1/1     1            1           12m</span><br><span class="line">deployment.extensions/prometheus     1/1     1            1           12m</span><br></pre></td></tr></table></figure><h3 id="创建Ingress"><a href="#创建Ingress" class="headerlink" title="创建Ingress"></a>创建Ingress</h3><h4 id="prometheus-Ingress"><a href="#prometheus-Ingress" class="headerlink" title="prometheus Ingress"></a>prometheus Ingress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat prometheus-Ingress.yaml </span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-web-ui</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: prometheus.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: prometheus</span><br><span class="line">          servicePort: 9090</span><br></pre></td></tr></table></figure><h4 id="grafana-Ingress"><a href="#grafana-Ingress" class="headerlink" title="grafana Ingress"></a>grafana Ingress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat grafana-Ingress.yaml </span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana-web-ui</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: grafana.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: grafana</span><br><span class="line">          servicePort: 3000</span><br></pre></td></tr></table></figure><h4 id="执行创建-1"><a href="#执行创建-1" class="headerlink" title="执行创建"></a>执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f prometheus-Ingress.yaml </span></span><br><span class="line">ingress.extensions/prometheus-web-ui created</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f grafana-Ingress.yaml </span></span><br><span class="line">ingress.extensions/grafana-web-ui created</span><br></pre></td></tr></table></figure><p>在浏览器输入prometheus.xxlaila.cn访问prometheus，输入grafana.xxlaila.cn访问grafana。</p><h3 id="访问prometheus"><a href="#访问prometheus" class="headerlink" title="访问prometheus"></a>访问prometheus</h3><p><img src="https://img.xxlaila.cn/1569218750254.jpg" alt="img"></p><h3 id="配置grafana"><a href="#配置grafana" class="headerlink" title="配置grafana"></a>配置grafana</h3><p><img src="https://img.xxlaila.cn/1568968344227.jpg" alt="img"></p><p>到grafana的官方下载对应的模版文件导入，就可以出图啦<br><img src="https://img.xxlaila.cn/1568968420655.jpg" alt="img"></p><p><a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/prometheus" target="_blank" rel="noopener">后续利用pvc</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s v1.14,prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 weave-scope</title>
    <url>/2019/09/20/k8s-v1-14-weave-scope/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes 集群并部署容器化应用只是第一步。一旦集群运行起来，我们需要确保一起正常，所有必要组件就位并各司其职，有足够的资源满足应用的需求。Kubernetes 是一个复杂系统，运维团队需要有一套工具帮助他们获知集群的实时状态，并为故障排查提供及时和准确的数据支持。</p><h3 id="weave-scope-介绍"><a href="#weave-scope-介绍" class="headerlink" title="weave scope 介绍"></a>weave scope 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Weave Scope是Docker和Kubernetes的可视化和监控工具。它提供了一个自上而下的应用程序以及整个基础架构视图，并允许您在部署到云提供商时实时诊断分布式容器化应用程序的任何问题。</p><a id="more"></a><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><ul><li>pod拓扑映射</li><li>图形或表格模式</li><li>灵活过滤</li><li>强大的搜索功能</li><li>实时应用和容器指标</li><li>排除故障并管理容器</li><li>使用Plugin API生成自定义指标</li></ul><p><a href="https://www.weave.works/docs/scope/latest/features/" target="_blank" rel="noopener">介绍参考</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在 K8s 集群中安装 Scope 的方法很简单，使用下面的命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f "https://cloud.weave.works/k8s/scope.yaml?k8s-version=$(kubectl version | base64 | tr -d '\n')"</span></span><br><span class="line">namespace/weave created</span><br><span class="line">serviceaccount/weave-scope created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/weave-scope created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/weave-scope created</span><br><span class="line">deployment.apps/weave-scope-app created</span><br><span class="line">service/weave-scope-app created</span><br><span class="line">deployment.apps/weave-scope-cluster-agent created</span><br><span class="line">daemonset.extensions/weave-scope-agent created</span><br></pre></td></tr></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod,svc,deploy -n weave</span></span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/weave-scope-agent-2t4m5                      1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-agent-6tfp5                      1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-agent-fxj5f                      1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-agent-gkxc6                      1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-agent-qnbbv                      1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-app-b99fb9585-wld6n              1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-cluster-agent-77bc946585-8fcjj   1/1     Running   0          15m</span><br><span class="line"></span><br><span class="line">NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/weave-scope-app   ClusterIP   10.254.184.106   &lt;none&gt;        80/TCP    15m</span><br><span class="line"></span><br><span class="line">NAME                                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.extensions/weave-scope-app             1/1     1            1           15m</span><br><span class="line">deployment.extensions/weave-scope-cluster-agent   1/1     1            1           15m</span><br></pre></td></tr></table></figure><h3 id="创建weave-scope-ingress"><a href="#创建weave-scope-ingress" class="headerlink" title="创建weave-scope ingress"></a>创建weave-scope ingress</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat weave-scope.yaml </span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: weave-web-ui</span><br><span class="line">  namespace: weave</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: weave-scope.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: weave-scope-app</span><br><span class="line">          servicePort: 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f weave-scope.yaml </span></span><br><span class="line">ingress.extensions/weave-web-ui created</span><br></pre></td></tr></table></figure><p>在浏览输入<code>weave-scope.xxlaila.cn</code>即可访问<br><img src="https://img.xxlaila.cn/1568958836846.jpg" alt="img"></p><h4 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scope 会自动构建应用和集群的逻辑拓扑。比如点击顶部 Pods，会显示所有 Pod 以及 Pod 之间的依赖关系<br><img src="https://img.xxlaila.cn/1568958666089.jpg" alt="img"><br>点击 Hosts，会显示各个节点之间的关系，可以在 Scope 中查看资源的 CPU 和内存使用情况。<br><img src="https://img.xxlaila.cn/1568958913275.jpg" alt="img"></p><h3 id="在线操作"><a href="#在线操作" class="headerlink" title="在线操作"></a>在线操作</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scope 还提供了便捷的在线操作功能，比如选中某个 Host，点击 &gt;_按钮可以直接在浏览器中打开节点的命令行终端：<br><img src="https://img.xxlaila.cn/1568959004395.jpg" alt="img"></p><ul><li><p>点击 Deployment 的 + 可以执行新增一个pod实列<br><img src="https://img.xxlaila.cn/1568959269040.jpg" alt="img"></p></li><li><p>查看pod的日志<br><img src="https://img.xxlaila.cn/1568959359334.jpg" alt="img"></p></li><li><p>attach、restart、stop 容器，以及直接在 Scope 中排查问题<br><img src="https://img.xxlaila.cn/1568959467442.jpg" alt="img"></p></li></ul><p>更多功呢个请<a href="https://www.weave.works/docs/scope/latest/plugins/" target="_blank" rel="noopener">参考官方</a>,或者实操</p><p><strong>错误</strong>: 如果系统内核版本低于4.4。weave-scope pod 就会提示错误，但是适用了一下不影响正常使用，不知道后期是否会影响。错误如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;probe&gt; WARN: 2019/11/28 08:44:07.263039 Error setting up the eBPF tracker, falling back to proc scanning: kernel not supported: got kernel 3.10.0-693.el7.x86_64 but need kernel &gt;=4.4</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s v1.14, weave-scope</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 traefik部署</title>
    <url>/2019/09/20/k8s-v1-14-traefik%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;traefix 前篇是可以使用，这里k8s v1.14 之前的拿来用不上，然后折腾了一下，参考官方的折腾起来了</p><h3 id="基于角色的访问控制配置（仅限Kubernetes-1-6-）"><a href="#基于角色的访问控制配置（仅限Kubernetes-1-6-）" class="headerlink" title="基于角色的访问控制配置（仅限Kubernetes 1.6+）"></a>基于角色的访问控制配置（仅限Kubernetes 1.6+）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes在1.6+中引入了基于角色的访问控制（RBAC），以允许对Kubernetes资源和API进行细粒度控制。群集配置了RBAC，则需要授权Traefik使用Kubernetes API。有两种方法可以设置适当的权限：通过特定于命名空间的RoleBindings或单个全局ClusterRoleBinding。</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个命名空间的RoleBinding可以限制授予权限，只有Traefik正在监视的名称空间才能使用，从而遵循最小权限原则。如果Traefik不应该监视所有名称空间，并且名称空间集不会动态更改，那么这是首选方法。否则，必须使用单个ClusterRoleBinding。</p><p><a href="https://xxlaila.github.io/2019/09/05/traefik-ingress%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">traefik学习</a><br><a href="https://docs.traefik.io/v1.7/user-guide/kubernetes/" target="_blank" rel="noopener">traefik官方</a></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>下载trarfix代码，然后切换到v1.7的分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/containous/traefik.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git branch --all</span></span><br><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/add-plugin-support</span><br><span class="line">  remotes/origin/gh-pages</span><br><span class="line">  remotes/origin/master</span><br><span class="line">  remotes/origin/v1.0</span><br><span class="line">  remotes/origin/v1.1</span><br><span class="line">  remotes/origin/v1.2</span><br><span class="line">  remotes/origin/v1.3</span><br><span class="line">  remotes/origin/v1.4</span><br><span class="line">  remotes/origin/v1.5</span><br><span class="line">  remotes/origin/v1.6</span><br><span class="line">  remotes/origin/v1.7</span><br><span class="line">  remotes/origin/v2.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># git checkout v1.7</span></span><br><span class="line">Branch <span class="string">'v1.7'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'v1.7'</span> from <span class="string">'origin'</span>.</span><br><span class="line">Switched to a new branch <span class="string">'v1.7'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /root/traefik/examples/k8s</span></span><br></pre></td></tr></table></figure><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><h4 id="使用ClusterRoleBinding"><a href="#使用ClusterRoleBinding" class="headerlink" title="使用ClusterRoleBinding"></a>使用ClusterRoleBinding</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f traefik-rbac.yaml </span></span><br><span class="line">clusterrole.rbac.authorization.k8s.io/traefik-ingress-controller created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/traefik-ingress-controller created</span><br></pre></td></tr></table></figure><p>对于命名空间限制，每个监视命名空间需要一个RoleBinding以及Traefik kubernetes.namespaces参数的相应配置。</p><h4 id="使用Deployments部署或部署DaemonSet"><a href="#使用Deployments部署或部署DaemonSet" class="headerlink" title="使用Deployments部署或部署DaemonSet"></a>使用Deployments部署或部署DaemonSet</h4><p>可以将Traefik与Deployment或DaemonSet对象一起使用，而这两个选项各有利弊：</p><ul><li>使用部署时，可伸缩性可以更好，因为在使用DaemonSet时您将拥有每个节点的Single-Pod模型，而在使用部署时，可能需要更少的基于环境的副本。</li><li>当节点加入群集时，DaemonSet会自动扩展到新节点，而部署窗格仅在需要时在新节点上进行调度。</li><li>DaemonSets确保只有一个pod副本在任何单个节点上运行。如果要确保两个pod不在同一节点上，则部署需要关联设置</li><li>可以使用该NET_BIND_SERVICE功能运行DaemonSet ，这将允许它绑定到每个主机上的端口80/443 / etc。这将允许绕过kube-proxy，并减少流量跳跃。请注意，这违反了Kubernetes最佳实践指南，并提出了调度/扩展问题的可能性。尽管存在潜在问题，但这仍然是大多数入口控制器的选择。</li></ul><h4 id="Deployments部署"><a href="#Deployments部署" class="headerlink" title="Deployments部署"></a>Deployments部署</h4><ul><li>修改traefik-deployment.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-controller</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-controller</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: traefik-ingress-lb</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: traefik-ingress-lb</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">    spec:</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      serviceAccountName: traefik-ingress-controller</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      containers:</span><br><span class="line">      - image: traefik:v1.7</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 80</span><br><span class="line">        - name: https</span><br><span class="line">          containerPort: 443</span><br><span class="line">          hostPort: 443</span><br><span class="line">        - name: admin</span><br><span class="line">          containerPort: 8080</span><br><span class="line">        securityContext:</span><br><span class="line">          capabilities:</span><br><span class="line">            drop:</span><br><span class="line">            - ALL</span><br><span class="line">            add:</span><br><span class="line">              - NET_BIND_SERVICE</span><br><span class="line">        args:</span><br><span class="line">        - --api</span><br><span class="line">        - --kubernetes</span><br><span class="line">        - --logLevel=INFO</span><br><span class="line">        - --web.metrics</span><br><span class="line">        - --metrics.prometheus</span><br><span class="line">        - --web.metrics.prometheus</span><br><span class="line">        - --kubernetes</span><br><span class="line">        - --traefiklog</span><br><span class="line">        - --traefiklog.format=json</span><br><span class="line">        - --accesslog</span><br><span class="line">        - --accesslog.format=json</span><br><span class="line">        - --accessLog.fields.headers.defaultMode=redact</span><br><span class="line">        - --insecureskipverify=<span class="literal">true</span></span><br><span class="line">        - --defaultentrypoints=http,https</span><br><span class="line">        - --entrypoints=Name:https Address::443 TLS</span><br><span class="line">        - --entrypoints=Name:http Address::80      </span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-service</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      name: web</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 8080</span><br><span class="line">      name: admin</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br></pre></td></tr></table></figure></li></ul><p><strong>参数</strong>:</p><ul><li>hostNetwork: 映射到本地网络</li><li>name: https 增加443端口的映射</li><li>securityContext，args: 参考官方</li></ul><ul><li>部署traefik-deployment</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl  apply -f  traefik-deployment.yaml</span></span><br><span class="line">serviceaccount/traefik-ingress-controller created</span><br><span class="line">deployment.extensions/traefik-ingress-controller created</span><br><span class="line">service/traefik-ingress-service created</span><br></pre></td></tr></table></figure><h4 id="DaemonSets-部署-可选"><a href="#DaemonSets-部署-可选" class="headerlink" title="DaemonSets 部署(可选)"></a>DaemonSets 部署(可选)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f traefik-ds.yaml</span></span><br></pre></td></tr></table></figure><ul><li>Deployments和DaemonSets之间存在一些显着差异:<ul><li>部署具有更容易的向上和向下扩展可能性。它可以实现完整的pod生命周期，并支持Kubernetes 1.2的滚动更新。运行部署至少需要一个Pod。</li><li>DaemonSet会自动扩展到满足特定选择器的所有节点，并保证一次填充一个节点。Kubernetes 1.7也完全支持滚动更新，适用于DaemonSets</li></ul></li></ul><h3 id="检查部署"><a href="#检查部署" class="headerlink" title="检查部署"></a>检查部署</h3><ul><li><p>查看pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl --namespace=kube-system get pods</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-5579b8778b-xw8m9                     1/1     Running   2          3d21h</span><br><span class="line">kubernetes-dashboard-65dfbf6f4f-hcgbb        1/1     Running   0          2d16h</span><br><span class="line">metrics-server-94ff5d4cc-b97l5               1/1     Running   1          3d</span><br><span class="line">tiller-deploy-5cbcf75545-rbzld               1/1     Running   0          17h</span><br><span class="line">traefik-ingress-controller-c595665d6-cm7kh   1/1     Running   0          3m20s</span><br></pre></td></tr></table></figure></li><li><p>查看services</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get services --namespace=kube-system</span></span><br><span class="line">NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                       AGE</span><br><span class="line">kube-dns                  ClusterIP   10.254.0.2       &lt;none&gt;        53/UDP,53/TCP,9153/TCP        3d21h</span><br><span class="line">kubernetes-dashboard      NodePort    10.254.214.153   &lt;none&gt;        443:32533/TCP                 3d21h</span><br><span class="line">metrics-server            ClusterIP   10.254.61.132    &lt;none&gt;        443/TCP                       3d</span><br><span class="line">tiller-deploy             ClusterIP   10.254.207.227   &lt;none&gt;        44134/TCP                     17h</span><br><span class="line">traefik-ingress-service   NodePort    10.254.246.158   &lt;none&gt;        80:32146/TCP,8080:30455/TCP   3m53s</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里使用的是nodeport模式进行部署的，可以看到端口为32146，这里访问会返回<code>404 page not found</code>,那是因为我们还没有给Traefik任何配置。</p><ul><li>查看services 1<br>`` bash<h1 id="kubectl-get-services-–namespace-kube-system-grep-“traefik”"><a href="#kubectl-get-services-–namespace-kube-system-grep-“traefik”" class="headerlink" title="kubectl get services –namespace=kube-system |grep “traefik”"></a>kubectl get services –namespace=kube-system |grep “traefik”</h1>traefik-ingress-service ClusterIP None<none>80/TCP,8080/TCP 7m55s<br>traefik-web-ui ClusterIP 10.254.78.17<none>80/TCP 21h<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="variable">&amp;nbsp</span>;<span class="variable">&amp;nbsp</span>;<span class="variable">&amp;nbsp</span>;<span class="variable">&amp;nbsp</span>;<span class="variable">&amp;nbsp</span>;<span class="variable">&amp;nbsp</span>;<span class="variable">&amp;nbsp</span>;<span class="variable">&amp;nbsp</span>;这个例子是修改过 `traefik-deployment.yaml` 的结果，明显没有nodeport的端口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">### 创建一个服务和一个将公开Traefik Web UI的Ingres</span></span><br><span class="line">``` bash</span><br><span class="line"><span class="meta"># kubectl apply -f ui.yaml </span></span><br><span class="line">service/traefik-web-ui created</span><br><span class="line">ingress.extensions/traefik-web-ui created</span><br></pre></td></tr></table></figure></none></none></li></ul><p>在/etc/hosts 文件设置一个路由条目<code>traefik-ui.minikube</code></p><p>在浏览器进行访问可以看到Traefik Web UI</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s v1.14, traefik</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 metrics-server</title>
    <url>/2019/09/17/k8s-v1-14-metrics-server/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>metrics-server这里不详细介绍，可以参考<a href="https://xxlaila.github.io/2019/09/04/metrics-server安装季/" target="_blank" rel="noopener">metrics-server安装季</a></p><h3 id="安装metrics-server"><a href="#安装metrics-server" class="headerlink" title="安装metrics-server"></a>安装metrics-server</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里安装和之前的<strong>metrics-server安装季</strong>稍微有点不一样，之前集群安装没有使用https证书，后面去各种生成的证书和踩坑，这里是在安装的时候一开始就使用了https全证书,所有稍微有一点区别，这里只列出有区别的地方，其他的完全可以参考<a href="https://xxlaila.github.io/2019/09/04/metrics-server安装季/" target="_blank" rel="noopener">metrics-server安装季</a>，这里https证书<strong>不需要</strong>重新生成；</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置文件也不需要添加，在v1.14安装的时候就已经吧配置文件添加进去了，所以这里配置文件也不需要增加</p><h3 id="文件的修改"><a href="#文件的修改" class="headerlink" title="文件的修改"></a>文件的修改</h3><ul><li><p>修改 metrics-server-deployment.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat metrics-server-deployment.yaml</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: metrics-server</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: metrics-server</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: metrics-server</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: metrics-server</span><br><span class="line">      hostNetwork: <span class="literal">true</span> 这个还是需要增加</span><br><span class="line">      volumes:</span><br><span class="line">      <span class="comment"># mount in tmp so we can safely use from-scratch images and/or read-only containers</span></span><br><span class="line">      - name: tmp-dir</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      containers:</span><br><span class="line">      - name: metrics-server</span><br><span class="line">        image: mirrorgooglecontainers/metrics-server-amd64:v0.3.4</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        args:  <span class="comment"># 这里不一样</span></span><br><span class="line">        - --metric-resolution=30s</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: tmp-dir</span><br><span class="line">          mountPath: /tmp</span><br></pre></td></tr></table></figure></li><li><p>–metric-resolution=30s：从 kubelet 采集数据的周期；</p></li><li><p>–kubelet-preferred-address-types：优先使用 InternalIP 来访问 kubelet，这样可以避免节点名称没有 DNS 解析记录时，通过节点名称调用节点 kubelet API 失败的情况（未配置时默认的情况）；</p></li><li><p><strong>hostNetwork: true:</strong> 这个不增加的会提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error from server (ServiceUnavailable): the server is currently unable to handle the request</span><br></pre></td></tr></table></figure></li><li><p>修改 resource-reader.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat resource-reader.yaml </span></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes/stats</span><br><span class="line">  - namespaces</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups: <span class="comment"># 增加</span></span><br><span class="line">  - <span class="string">"extensions"</span></span><br><span class="line">  resources:</span><br><span class="line">  - deployments</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure></li></ul><h3 id="执行创建"><a href="#执行创建" class="headerlink" title="执行创建"></a>执行创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f ./</span></span><br></pre></td></tr></table></figure><h3 id="查看运行情况"><a href="#查看运行情况" class="headerlink" title="查看运行情况"></a>查看运行情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -n kube-system get pods -l k8s-app=metrics-server</span></span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">metrics-server-94ff5d4cc-b97l5   1/1     Running   0          21m</span><br><span class="line"></span><br><span class="line"><span class="comment">#  kubectl get svc -n kube-system  metrics-server</span></span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">metrics-server   ClusterIP   10.254.61.132   &lt;none&gt;        443/TCP   27m</span><br></pre></td></tr></table></figure><h3 id="获取v1beta1-metrics-k8s-io并验证"><a href="#获取v1beta1-metrics-k8s-io并验证" class="headerlink" title="获取v1beta1.metrics.k8s.io并验证"></a>获取v1beta1.metrics.k8s.io并验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get apiservice</span></span><br><span class="line">NAME                                   SERVICE                      AVAILABLE   AGE</span><br><span class="line">v1.                                    Local                        True        23h</span><br><span class="line">v1.apps                                Local                        True        23h</span><br><span class="line">v1.authentication.k8s.io               Local                        True        23h</span><br><span class="line">v1.authorization.k8s.io                Local                        True        23h</span><br><span class="line">v1.autoscaling                         Local                        True        23h</span><br><span class="line">v1.batch                               Local                        True        23h</span><br><span class="line">v1.coordination.k8s.io                 Local                        True        23h</span><br><span class="line">v1.networking.k8s.io                   Local                        True        23h</span><br><span class="line">v1.rbac.authorization.k8s.io           Local                        True        23h</span><br><span class="line">v1.scheduling.k8s.io                   Local                        True        23h</span><br><span class="line">v1.storage.k8s.io                      Local                        True        23h</span><br><span class="line">v1alpha1.auditregistration.k8s.io      Local                        True        23h</span><br><span class="line">v1alpha1.node.k8s.io                   Local                        True        23h</span><br><span class="line">v1alpha1.rbac.authorization.k8s.io     Local                        True        23h</span><br><span class="line">v1alpha1.scheduling.k8s.io             Local                        True        23h</span><br><span class="line">v1alpha1.settings.k8s.io               Local                        True        23h</span><br><span class="line">v1alpha1.storage.k8s.io                Local                        True        23h</span><br><span class="line">v1beta1.admissionregistration.k8s.io   Local                        True        23h</span><br><span class="line">v1beta1.apiextensions.k8s.io           Local                        True        23h</span><br><span class="line">v1beta1.apps                           Local                        True        23h</span><br><span class="line">v1beta1.authentication.k8s.io          Local                        True        23h</span><br><span class="line">v1beta1.authorization.k8s.io           Local                        True        23h</span><br><span class="line">v1beta1.batch                          Local                        True        23h</span><br><span class="line">v1beta1.certificates.k8s.io            Local                        True        23h</span><br><span class="line">v1beta1.coordination.k8s.io            Local                        True        23h</span><br><span class="line">v1beta1.events.k8s.io                  Local                        True        23h</span><br><span class="line">v1beta1.extensions                     Local                        True        23h</span><br><span class="line">v1beta1.metrics.k8s.io                 kube-system/metrics-server   True        27m</span><br><span class="line">v1beta1.networking.k8s.io              Local                        True        23h</span><br><span class="line">v1beta1.node.k8s.io                    Local                        True        23h</span><br><span class="line">v1beta1.policy                         Local                        True        23h</span><br><span class="line">v1beta1.rbac.authorization.k8s.io      Local                        True        23h</span><br><span class="line">v1beta1.scheduling.k8s.io              Local                        True        23h</span><br><span class="line">v1beta1.storage.k8s.io                 Local                        True        23h</span><br><span class="line">v1beta2.apps                           Local                        True        23h</span><br><span class="line">v2alpha1.batch                         Local                        True        23h</span><br><span class="line">v2beta1.autoscaling                    Local                        True        23h</span><br><span class="line">v2beta2.autoscaling                    Local                        True        23h</span><br></pre></td></tr></table></figure><h3 id="metrics-server-的命令行参数"><a href="#metrics-server-的命令行参数" class="headerlink" title="metrics-server 的命令行参数"></a>metrics-server 的命令行参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl exec --namespace kube-system -it metrics-server-94ff5d4cc-b97l5 -- /metrics-server --help</span></span><br><span class="line">Launch metrics-server</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">   [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --alsologtostderr                                         <span class="built_in">log</span> to standard error as well as files</span><br><span class="line">      --authentication-kubeconfig string                        kubeconfig file pointing at the <span class="string">'core'</span> kubernetes server with enough rights to create tokenaccessreviews.authentication.k8s.io.</span><br><span class="line">      --authentication-skip-lookup                              If <span class="literal">false</span>, the authentication-kubeconfig will be used to lookup missing authentication configuration from the cluster.</span><br><span class="line">      --authentication-token-webhook-cache-ttl duration         The duration to cache responses from the webhook token authenticator. (default 10s)</span><br><span class="line">      --authentication-tolerate-lookup-failure                  If <span class="literal">true</span>, failures to look up missing authentication configuration from the cluster are not considered fatal. Note that this can result <span class="keyword">in</span> authentication that treats all requests as anonymous.</span><br><span class="line">      --authorization-always-allow-paths strings                A list of HTTP paths to skip during authorization, i.e. these are authorized without contacting the <span class="string">'core'</span> kubernetes server.</span><br><span class="line">      --authorization-kubeconfig string                         kubeconfig file pointing at the <span class="string">'core'</span> kubernetes server with enough rights to create subjectaccessreviews.authorization.k8s.io.</span><br><span class="line">      --authorization-webhook-cache-authorized-ttl duration     The duration to cache <span class="string">'authorized'</span> responses from the webhook authorizer. (default 10s)</span><br><span class="line">      --authorization-webhook-cache-unauthorized-ttl duration   The duration to cache <span class="string">'unauthorized'</span> responses from the webhook authorizer. (default 10s)</span><br><span class="line">      --<span class="built_in">bind</span>-address ip                                         The IP address on <span class="built_in">which</span> to listen <span class="keyword">for</span> the --secure-port port. The associated interface(s) must be reachable by the rest of the cluster, and by CLI/web clients. If blank, all interfaces will be used (0.0.0.0 <span class="keyword">for</span> all IPv4 interfaces and :: <span class="keyword">for</span> all IPv6 interfaces). (default 0.0.0.0)</span><br><span class="line">      --cert-dir string                                         The directory <span class="built_in">where</span> the TLS certs are located. If --tls-cert-file and --tls-private-key-file are provided, this flag will be ignored. (default <span class="string">"apiserver.local.config/certificates"</span>)</span><br><span class="line">      --client-ca-file string                                   If <span class="built_in">set</span>, any request presenting a client certificate signed by one of the authorities <span class="keyword">in</span> the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.</span><br><span class="line">      --contention-profiling                                    Enable lock contention profiling, <span class="keyword">if</span> profiling is enabled</span><br><span class="line">  -h, --<span class="built_in">help</span>                                                    <span class="built_in">help</span> <span class="keyword">for</span> this <span class="built_in">command</span></span><br><span class="line">      --http2-max-streams-per-connection int                    The <span class="built_in">limit</span> that the server gives to clients <span class="keyword">for</span> the maximum number of streams <span class="keyword">in</span> an HTTP/2 connection. Zero means to use golang<span class="string">'s default.</span></span><br><span class="line"><span class="string">      --kubeconfig string                                       The path to the kubeconfig used to connect to the Kubernetes API server and the Kubelets (defaults to in-cluster config)</span></span><br><span class="line"><span class="string">      --kubelet-certificate-authority string                    Path to the CA to use to validate the Kubelet'</span>s serving certificates.</span><br><span class="line">      --kubelet-insecure-tls                                    Do not verify CA of serving certificates presented by Kubelets.  For testing purposes only.</span><br><span class="line">      --kubelet-port int                                        The port to use to connect to Kubelets. (default 10250)</span><br><span class="line">      --kubelet-preferred-address-types strings                 The priority of node address types to use when determining <span class="built_in">which</span> address to use to connect to a particular node (default [Hostname,InternalDNS,InternalIP,ExternalDNS,ExternalIP])</span><br><span class="line">      --<span class="built_in">log</span>-flush-frequency duration                            Maximum number of seconds between <span class="built_in">log</span> flushes (default 5s)</span><br><span class="line">      --log_backtrace_at traceLocation                          when logging hits line file:N, emit a stack trace (default :0)</span><br><span class="line">      --log_dir string                                          If non-empty, write <span class="built_in">log</span> files <span class="keyword">in</span> this directory</span><br><span class="line">      --log_file string                                         If non-empty, use this <span class="built_in">log</span> file</span><br><span class="line">      --logtostderr                                             <span class="built_in">log</span> to standard error instead of files (default <span class="literal">true</span>)</span><br><span class="line">      --metric-resolution duration                              The resolution at <span class="built_in">which</span> metrics-server will retain metrics. (default 1m0s)</span><br><span class="line">      --profiling                                               Enable profiling via web interface host:port/debug/pprof/ (default <span class="literal">true</span>)</span><br><span class="line">      --requestheader-allowed-names strings                     List of client certificate common names to allow to provide usernames <span class="keyword">in</span> headers specified by --requestheader-username-headers. If empty, any client certificate validated by the authorities <span class="keyword">in</span> --requestheader-client-ca-file is allowed.</span><br><span class="line">      --requestheader-client-ca-file string                     Root certificate bundle to use to verify client certificates on incoming requests before trusting usernames <span class="keyword">in</span> headers specified by --requestheader-username-headers. WARNING: generally <span class="keyword">do</span> not depend on authorization being already <span class="keyword">done</span> <span class="keyword">for</span> incoming requests.</span><br><span class="line">      --requestheader-extra-headers-prefix strings              List of request header prefixes to inspect. X-Remote-Extra- is suggested. (default [x-remote-extra-])</span><br><span class="line">      --requestheader-group-headers strings                     List of request headers to inspect <span class="keyword">for</span> groups. X-Remote-Group is suggested. (default [x-remote-group])</span><br><span class="line">      --requestheader-username-headers strings                  List of request headers to inspect <span class="keyword">for</span> usernames. X-Remote-User is common. (default [x-remote-user])</span><br><span class="line">      --secure-port int                                         The port on <span class="built_in">which</span> to serve HTTPS with authentication and authorization.If 0, don<span class="string">'t serve HTTPS at all. (default 443)</span></span><br><span class="line"><span class="string">      --skip_headers                                            If true, avoid header prefixes in the log messages</span></span><br><span class="line"><span class="string">      --stderrthreshold severity                                logs at or above this threshold go to stderr</span></span><br><span class="line"><span class="string">      --tls-cert-file string                                    File containing the default x509 Certificate for HTTPS. (CA cert, if any, concatenated after server cert). If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to the directory specified by --cert-dir.</span></span><br><span class="line"><span class="string">      --tls-cipher-suites strings                               Comma-separated list of cipher suites for the server. If omitted, the default Go cipher suites will be use.  Possible values: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_RC4_128_SHA,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_RC4_128_SHA</span></span><br><span class="line"><span class="string">      --tls-min-version string                                  Minimum TLS version supported. Possible values: VersionTLS10, VersionTLS11, VersionTLS12</span></span><br><span class="line"><span class="string">      --tls-private-key-file string                             File containing the default x509 private key matching --tls-cert-file.</span></span><br><span class="line"><span class="string">      --tls-sni-cert-key namedCertKey                           A pair of x509 certificate and private key file paths, optionally suffixed with a list of domain patterns which are fully qualified domain names, possibly with prefixed wildcard segments. If no domain patterns are provided, the names of the certificate are extracted. Non-wildcard matches trump over wildcard matches, explicit domain patterns trump over extracted names. For multiple key/certificate pairs, use the --tls-sni-cert-key multiple times. Examples: "example.crt,example.key" or "foo.crt,foo.key:*.foo.com,foo.com". (default [])</span></span><br><span class="line"><span class="string">  -v, --v Level                                                 number for the log level verbosity</span></span><br><span class="line"><span class="string">      --vmodule moduleSpec                                      comma-separated list of pattern=N settings for file-filtered logging</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>: 如果是使用<a href="https://github.com/kubernetes-incubator/metrics-server.git" target="_blank" rel="noopener">metrics-server</a> 源码安装的，metrics-server-deployment.yaml文件需要这样修改，其他修改不变</p><ul><li><p>修改1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: metrics-server</span><br><span class="line">        image: mirrorgooglecontainers/metrics-server-amd64:v0.3.6</span><br><span class="line">        args:</span><br><span class="line">          - --cert-dir=/tmp</span><br><span class="line">          - --secure-port=4443</span><br><span class="line">          - --metric-resolution=30s</span><br><span class="line">          - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br><span class="line">        ports:</span><br><span class="line">        - name: main-port</span><br><span class="line">          containerPort: 4443</span><br><span class="line">          protocol: TCP</span><br></pre></td></tr></table></figure></li><li><p>修改2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了上述修改，还可以用这种方式修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span>:</span><br><span class="line">        - /metrics-server</span><br><span class="line">        - --cert-dir=/tmp</span><br><span class="line">        - --kubelet-insecure-tls</span><br><span class="line">        - --secure-port=4443</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIp,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>metrics-server</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 dashboard</title>
    <url>/2019/09/16/k8s-v1-14-dashboard/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>kuberntes 自带插件的 manifests yaml 文件使用 gcr.io 的 docker registry，国内被墙，需要手动替换为其它 registry 地址</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>将下载的 kubernetes-server-linux-amd64.tar.gz 解压后，再解压其中的 kubernetes-src.tar.gz 文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd kubernetes</span></span><br><span class="line"><span class="comment"># tar -xzvf kubernetes-src.tar.gz</span></span><br></pre></td></tr></table></figure><p>dashboard 对应的目录是：cluster/addons/dashboard：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd cluster/addons/dashboard</span></span><br></pre></td></tr></table></figure><p>修改 service 定义，指定端口类型为 NodePort，这样外界可以通过地址 NodeIP:NodePort 访问 dashboard；</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat dashboard-service.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort <span class="comment"># 增加这一行</span></span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  ports:</span><br><span class="line">  - port: 443</span><br><span class="line">    targetPort: 8443</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat dashboard-controller.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kubernetes-dashboard</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kubernetes-dashboard</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">        seccomp.security.alpha.kubernetes.io/pod: <span class="string">'docker/default'</span></span><br><span class="line">    spec:</span><br><span class="line">      priorityClassName: system-cluster-critical</span><br><span class="line">      containers:</span><br><span class="line">      - name: kubernetes-dashboard</span><br><span class="line">        image: docker.io/xxlaila/kubernetes-dashboard-amd64:v1.10.0  <span class="comment">#修改这一行</span></span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 300Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 50m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8443</span><br><span class="line">          protocol: TCP</span><br></pre></td></tr></table></figure><h3 id="执行所有定义文件"><a href="#执行所有定义文件" class="headerlink" title="执行所有定义文件"></a>执行所有定义文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls *.yaml</span></span><br><span class="line">dashboard-configmap.yaml  dashboard-controller.yaml  dashboard-rbac.yaml  dashboard-secret.yaml  dashboard-service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f  .</span></span><br></pre></td></tr></table></figure><h3 id="查看分配的-NodePort"><a href="#查看分配的-NodePort" class="headerlink" title="查看分配的 NodePort"></a>查看分配的 NodePort</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get deployment kubernetes-dashboard  -n kube-system</span></span><br><span class="line">NAME                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">kubernetes-dashboard   1/1     1            1           5h10m</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl --namespace kube-system get pods -o wide</span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE     IP             NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-5579b8778b-xw8m9                1/1     Running   1          5h15m   172.30.232.3   172.21.16.204   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubernetes-dashboard-6cc78dfc99-hb4l5   1/1     Running   0          5h10m   172.30.176.3   172.21.16.240   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get services kubernetes-dashboard -n kube-system</span></span><br><span class="line">NAME                   TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kubernetes-dashboard   NodePort   10.254.214.153   &lt;none&gt;        443:32533/TCP   5h10m</span><br></pre></td></tr></table></figure><ul><li>NodePort 32533 映射到 dashboard pod 443 端口；</li></ul><h3 id="查看-dashboard-支持的命令行参数"><a href="#查看-dashboard-支持的命令行参数" class="headerlink" title="查看 dashboard 支持的命令行参数"></a>查看 dashboard 支持的命令行参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl exec --namespace kube-system -it kubernetes-dashboard-6cc78dfc99-hb4l5  -- /dashboard --help</span></span><br><span class="line">2019/09/16 09:51:33 Starting overwatch</span><br><span class="line">Usage of /dashboard:</span><br><span class="line">      --alsologtostderr                  <span class="built_in">log</span> to standard error as well as files</span><br><span class="line">      --api-log-level string             Level of API request logging. Should be one of <span class="string">'INFO|NONE|DEBUG'</span>. Default: <span class="string">'INFO'</span>. (default <span class="string">"INFO"</span>)</span><br><span class="line">      --apiserver-host string            The address of the Kubernetes Apiserver to connect to <span class="keyword">in</span> the format of protocol://address:port, e.g., http://localhost:8080. If not specified, the assumption is that the binary runs inside a Kubernetes cluster and <span class="built_in">local</span> discovery is attempted.</span><br><span class="line">      --authentication-mode strings      Enables authentication options that will be reflected on login screen. Supported values: token, basic. Default: token.Note that basic option should only be used <span class="keyword">if</span> apiserver has <span class="string">'--authorization-mode=ABAC'</span> and <span class="string">'--basic-auth-file'</span> flags <span class="built_in">set</span>. (default [token])</span><br><span class="line">      --auto-generate-certificates       When <span class="built_in">set</span> to <span class="literal">true</span>, Dashboard will automatically generate certificates used to serve HTTPS. Default: <span class="literal">false</span>.</span><br><span class="line">      --<span class="built_in">bind</span>-address ip                  The IP address on <span class="built_in">which</span> to serve the --secure-port (<span class="built_in">set</span> to 0.0.0.0 <span class="keyword">for</span> all interfaces). (default 0.0.0.0)</span><br><span class="line">      --default-cert-dir string          Directory path containing <span class="string">'--tls-cert-file'</span> and <span class="string">'--tls-key-file'</span> files. Used also when auto-generating certificates flag is <span class="built_in">set</span>. (default <span class="string">"/certs"</span>)</span><br><span class="line">      --<span class="built_in">disable</span>-settings-authorizer      When enabled, Dashboard settings page will not require user to be logged <span class="keyword">in</span> and authorized to access settings page.</span><br><span class="line">      --<span class="built_in">disable</span>-skip                     When enabled, the skip button on the login page will not be shown. Default: <span class="literal">false</span>.</span><br><span class="line">      --<span class="built_in">enable</span>-insecure-login            When enabled, Dashboard login view will also be shown when Dashboard is not served over HTTPS. Default: <span class="literal">false</span>.</span><br><span class="line">      --heapster-host string             The address of the Heapster Apiserver to connect to <span class="keyword">in</span> the format of protocol://address:port, e.g., http://localhost:8082. If not specified, the assumption is that the binary runs inside a Kubernetes cluster and service proxy will be used.</span><br><span class="line">      --insecure-bind-address ip         The IP address on <span class="built_in">which</span> to serve the --port (<span class="built_in">set</span> to 0.0.0.0 <span class="keyword">for</span> all interfaces). (default 127.0.0.1)</span><br><span class="line">      --insecure-port int                The port to listen to <span class="keyword">for</span> incoming HTTP requests. (default 9090)</span><br><span class="line">      --kubeconfig string                Path to kubeconfig file with authorization and master location information.</span><br><span class="line">      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)</span><br><span class="line">      --log_dir string                   If non-empty, write <span class="built_in">log</span> files <span class="keyword">in</span> this directory</span><br><span class="line">      --logtostderr                      <span class="built_in">log</span> to standard error instead of files</span><br><span class="line">      --metric-client-check-period int   Time <span class="keyword">in</span> seconds that defines how often configured metric client health check should be run. Default: 30 seconds. (default 30)</span><br><span class="line">      --port int                         The secure port to listen to <span class="keyword">for</span> incoming HTTPS requests. (default 8443)</span><br><span class="line">      --stderrthreshold severity         logs at or above this threshold go to stderr (default 2)</span><br><span class="line">      --system-banner string             When non-empty displays message to Dashboard users. Accepts simple HTML tags. Default: <span class="string">''</span>.</span><br><span class="line">      --system-banner-severity string    Severity of system banner. Should be one of <span class="string">'INFO|WARNING|ERROR'</span>. Default: <span class="string">'INFO'</span>. (default <span class="string">"INFO"</span>)</span><br><span class="line">      --tls-cert-file string             File containing the default x509 Certificate <span class="keyword">for</span> HTTPS.</span><br><span class="line">      --tls-key-file string              File containing the default x509 private key matching --tls-cert-file.</span><br><span class="line">      --token-ttl int                    Expiration time (<span class="keyword">in</span> seconds) of JWE tokens generated by dashboard. Default: 15 min. 0 - never expires (default 900)</span><br><span class="line">  -v, --v Level                          <span class="built_in">log</span> level <span class="keyword">for</span> V logs</span><br><span class="line">      --vmodule moduleSpec               comma-separated list of pattern=N settings <span class="keyword">for</span> file-filtered logging</span><br><span class="line">pflag: <span class="built_in">help</span> requested</span><br><span class="line"><span class="built_in">command</span> terminated with <span class="built_in">exit</span> code 2</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dashboard 的 –authentication-mode 支持 token、basic，默认为 token。如果使用 basic，则 kube-apiserver 必须配置 –authorization-mode=ABAC 和 –basic-auth-file 参数</p><h3 id="访问-dashboard"><a href="#访问-dashboard" class="headerlink" title="访问 dashboard"></a>访问 dashboard</h3><p>使用https协议，在浏览器输入任意node的ip加端口即可访问<br><img src="https://img.xxlaila.cn/1568961339763.jpg" alt="img"></p><h3 id="创建登录-Dashboard-的-token-和-kubeconfig-配置文件"><a href="#创建登录-Dashboard-的-token-和-kubeconfig-配置文件" class="headerlink" title="创建登录 Dashboard 的 token 和 kubeconfig 配置文件"></a>创建登录 Dashboard 的 token 和 kubeconfig 配置文件</h3><p>dashboard 默认只支持 token 认证（不支持 client 证书认证），所以如果使用 Kubeconfig 文件，需要将 token 写入到该文件。</p><h4 id="创建登录-token"><a href="#创建登录-token" class="headerlink" title="创建登录 token"></a>创建登录 token</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create sa dashboard-admin -n kube-system</span></span><br><span class="line"><span class="comment"># kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span></span><br><span class="line"><span class="comment"># ADMIN_SECRET=$(kubectl get secrets -n kube-system | grep dashboard-admin | awk '&#123;print $1&#125;')</span></span><br><span class="line"><span class="comment"># DASHBOARD_LOGIN_TOKEN=$(kubectl describe secret -n kube-system $&#123;ADMIN_SECRET&#125; | grep -E '^token' | awk '&#123;print $2&#125;')</span></span><br><span class="line"><span class="comment"># echo $&#123;DASHBOARD_LOGIN_TOKEN&#125;</span></span><br></pre></td></tr></table></figure><p>使用输出的 token 登录 Dashboard。</p><h3 id="创建使用-token-的-KubeConfig-文件"><a href="#创建使用-token-的-KubeConfig-文件" class="headerlink" title="创建使用 token 的 KubeConfig 文件"></a>创建使用 token 的 KubeConfig 文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=dashboard.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数，使用上面创建的 Token</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials dashboard_user \</span><br><span class="line">  --token=<span class="variable">$&#123;DASHBOARD_LOGIN_TOKEN&#125;</span> \</span><br><span class="line">  --kubeconfig=dashboard.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=dashboard_user \</span><br><span class="line">  --kubeconfig=dashboard.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context default --kubeconfig=dashboard.kubeconfig</span><br></pre></td></tr></table></figure><p>如图:<br><img src="https://img.xxlaila.cn/1568961447890.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用生成的 dashboard.kubeconfig 登录 Dashboard。由于k8s 默认的Dashboard 15分钟后就会弹出，又要重新登录和获取token麻烦，可以参考之前的<a href="https://xxlaila.github.io/2019/08/29/k8s配置Dashboard/" target="_blank" rel="noopener">k8s配置Dashboard</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>dashboard</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 dns插件</title>
    <url>/2019/09/16/k8s-v1-14-dns%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="部署-coredns-插件"><a href="#部署-coredns-插件" class="headerlink" title="部署 coredns 插件"></a>部署 coredns 插件</h3><p><strong>注意:</strong></p><ul><li>kuberntes 自带插件的 manifests yaml 文件使用 gcr.io 的 docker registry，国内被墙，需要手动替换为其它 registry 地址;</li></ul><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>将下载的 kubernetes-server-linux-amd64.tar.gz 解压后，再解压其中的 kubernetes-src.tar.gz 文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd kubernetes</span></span><br><span class="line"><span class="comment"># tar -xzvf kubernetes-src.tar.gz</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>coredns 目录是 cluster/addons/dns<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd cluster/addons/dns/coredns</span></span><br><span class="line"><span class="comment"># cp coredns.yaml.base coredns.yaml</span></span><br><span class="line"><span class="comment"># sed -i -e "s/__PILLAR__DNS__DOMAIN__/cluster.local/" -e "s/__PILLAR__DNS__SERVER__/10.254.0.2/" coredns.yaml</span></span><br><span class="line"><span class="comment"># sed -i "s/k8s.gcr.io/coredns/" coredns.yaml</span></span><br><span class="line"><span class="comment"># kubectl create -f coredns.yaml</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="检查-coredns-功能"><a href="#检查-coredns-功能" class="headerlink" title="检查 coredns 功能"></a>检查 coredns 功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get all -n kube-system</span></span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/coredns-5579b8778b-xw8m9                1/1     Running   1          5h7m</span><br><span class="line"></span><br><span class="line">NAME                           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">service/kube-dns               ClusterIP   10.254.0.2       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   5h7m</span><br><span class="line"></span><br><span class="line">NAME                                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/coredns                1/1     1            1           5h7m</span><br><span class="line"></span><br><span class="line">NAME                                              DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/coredns-5579b8778b                1         1         1       5h7m</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods</span></span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ds-9fb46   1/1     Running   0          5h14m</span><br><span class="line">nginx-ds-bgfzt   1/1     Running   0          5h14m</span><br><span class="line">nginx-ds-t22wj   1/1     Running   0          5h14m</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -it exec nginx-ds-9fb46 bash</span></span><br><span class="line">root@nginx-ds-9fb46:/<span class="comment"># cat /etc/resolv.conf</span></span><br><span class="line">nameserver 10.254.0.2</span><br><span class="line">search default.svc.cluster.local svc.cluster.local cluster.local openstacklocal novalocal</span><br><span class="line">options ndots:5</span><br><span class="line"></span><br><span class="line">root@nginx-ds-9fb46:/<span class="comment"># ping www.baidu.com</span></span><br><span class="line">PING www.wshifen.com (104.193.88.77): 48 data bytes</span><br><span class="line">56 bytes from 104.193.88.77: icmp_seq=0 ttl=45 time=191.953 ms</span><br><span class="line">56 bytes from 104.193.88.77: icmp_seq=1 ttl=45 time=191.680 ms</span><br><span class="line">^C--- www.wshifen.com ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 191.680/191.817/191.953/0.137 ms</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@nginx-ds-9fb46:/<span class="comment"># ping kube-dns.kube-system.svc</span></span><br><span class="line">PING kube-dns.kube-system.svc.cluster.local (10.254.0.2): 48 data bytes</span><br><span class="line">56 bytes from 10.254.0.2: icmp_seq=0 ttl=64 time=0.120 ms</span><br><span class="line">56 bytes from 10.254.0.2: icmp_seq=1 ttl=64 time=0.116 ms</span><br><span class="line">^C--- kube-dns.kube-system.svc.cluster.local ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.116/0.118/0.120/0.000 ms</span><br><span class="line"></span><br><span class="line">root@nginx-ds-9fb46:/<span class="comment"># ping kube-dns.kube-system.svc.cluster.local</span></span><br><span class="line">PING kube-dns.kube-system.svc.cluster.local (10.254.0.2): 48 data bytes</span><br><span class="line">56 bytes from 10.254.0.2: icmp_seq=0 ttl=64 time=0.079 ms</span><br><span class="line">56 bytes from 10.254.0.2: icmp_seq=1 ttl=64 time=0.152 ms</span><br><span class="line">^C--- kube-dns.kube-system.svc.cluster.local ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.079/0.115/0.152/0.037 ms</span><br><span class="line"></span><br><span class="line">root@nginx-ds-9fb46:/<span class="comment"># ping kube-dns.kube-system.svc.cluster.local.</span></span><br><span class="line">PING kube-dns.kube-system.svc.cluster.local (10.254.0.2): 48 data bytes</span><br><span class="line">56 bytes from 10.254.0.2: icmp_seq=0 ttl=64 time=0.080 ms</span><br><span class="line">^C--- kube-dns.kube-system.svc.cluster.local ping statistics ---</span><br><span class="line">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.080/0.080/0.080/0.000 ms</span><br><span class="line">`</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>v1.14 coredns</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14集群验证</title>
    <url>/2019/09/16/k8s-v1-14%E9%9B%86%E7%BE%A4%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="验证集群功能"><a href="#验证集群功能" class="headerlink" title="验证集群功能"></a>验证集群功能</h3><h3 id="检查节点状态"><a href="#检查节点状态" class="headerlink" title="检查节点状态"></a>检查节点状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME            STATUS   ROLES    AGE     VERSION</span><br><span class="line">172.21.16.204   Ready    &lt;none&gt;   5h50m   v1.14.6</span><br><span class="line">172.21.16.240   Ready    &lt;none&gt;   5h48m   v1.14.6</span><br><span class="line">172.21.16.87    Ready    &lt;none&gt;   5h45m   v1.14.6</span><br></pre></td></tr></table></figure><p>都为 Ready 时正常。</p><a id="more"></a><h3 id="创建测试文件"><a href="#创建测试文件" class="headerlink" title="创建测试文件"></a>创建测试文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat nginx-ds.yml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ds</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx-ds</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx-ds</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ds</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-ds</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: my-nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl create -f nginx-ds.yml</span></span><br></pre></td></tr></table></figure><h3 id="检查各节点的-Pod-IP-连通性"><a href="#检查各节点的-Pod-IP-连通性" class="headerlink" title="检查各节点的 Pod IP 连通性"></a>检查各节点的 Pod IP 连通性</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods  -o wide|grep nginx-ds</span></span><br><span class="line">nginx-ds-9fb46   1/1     Running   0          5h2m   172.30.232.2   172.21.16.204   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-ds-bgfzt   1/1     Running   0          5h2m   172.30.128.2   172.21.16.87    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-ds-t22wj   1/1     Running   0          5h2m   172.30.176.2   172.21.16.240   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="检查服务-IP-和端口可达性"><a href="#检查服务-IP-和端口可达性" class="headerlink" title="检查服务 IP 和端口可达性"></a>检查服务 IP 和端口可达性</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc |grep nginx-ds</span></span><br><span class="line">nginx-ds     NodePort    10.254.232.104   &lt;none&gt;        80:30349/TCP   5h2m</span><br></pre></td></tr></table></figure><p>在浏览器在30349进行访问可以看到neinx的欢迎界面</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>v1.14</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-v1.14 node安装</title>
    <url>/2019/09/16/kubernetes-v1-14-node%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h3><h4 id="1-1、增加docker-源"><a href="#1-1、增加docker-源" class="headerlink" title="1.1、增加docker 源"></a>1.1、增加docker 源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">  --add-repo \</span><br><span class="line">  https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方的源比较慢，可以增加阿里的源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="1-1-1-node节点安装插件"><a href="#1-1-1-node节点安装插件" class="headerlink" title="1.1.1 node节点安装插件"></a>1.1.1 node节点安装插件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install -y epel-release</span></span><br><span class="line"><span class="comment"># yum install -y yum-utils  ipvsadm  telnet  wget  net-tools  conntrack  ipset  jq  iptables  curl  sysstat  libseccomp  socat  nfs-utils  fuse  fuse-devel </span></span><br><span class="line"><span class="comment"># yum install -y python-pip python-devel yum-utils device-mapper-persistent-data lvm2</span></span><br></pre></td></tr></table></figure><h4 id="1-2、安装docker"><a href="#1-2、安装docker" class="headerlink" title="1.2、安装docker"></a>1.2、安装docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  yum -y install docker-ce</span></span><br></pre></td></tr></table></figure><h4 id="1-3、修改docker-systemd-unit-文件"><a href="#1-3、修改docker-systemd-unit-文件" class="headerlink" title="1.3、修改docker systemd unit 文件"></a>1.3、修改docker systemd unit 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/docker.service |egrep -Ev "^$|^#"</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">BindsTo=containerd.service</span><br><span class="line">After=network-online.target firewalld.service containerd.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Requires=docker.socket</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=-/run/flannel/docker</span><br><span class="line">ExecStart=/usr/bin/dockerd <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">TimeoutSec=0</span><br><span class="line">RestartSec=2</span><br><span class="line">Restart=always</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TasksMax=infinity</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>dockerd 运行时会调用其它 docker 命令，如 docker-proxy，所以需要将 docker 命令所在的目录加到 PATH 环境变量中；</li><li>flanneld 启动时将网络配置写入 /run/flannel/docker 文件中，dockerd 启动前读取该文件中的环境变量 DOCKER_NETWORK_OPTIONS ，然后设置 docker0 网桥网段；</li><li>如果指定了多个 EnvironmentFile 选项，则必须将 /run/flannel/docker 放在最后(确保 docker0 使用 flanneld 生成的 bip 参数)；</li><li>docker 需要以 root 用于运行；</li></ul><h4 id="1-4、启动-docker-服务"><a href="#1-4、启动-docker-服务" class="headerlink" title="1.4、启动 docker 服务"></a>1.4、启动 docker 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable docker &amp;&amp; systemctl restart docker &amp;&amp; systemctl status docker</span></span><br></pre></td></tr></table></figure><h4 id="1-5、检查-docker0-网桥"><a href="#1-5、检查-docker0-网桥" class="headerlink" title="1.5、检查 docker0 网桥"></a>1.5、检查 docker0 网桥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/sbin/ip addr show flannel.1 &amp;&amp; /usr/sbin/ip addr show docker0</span></span><br><span class="line">3: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN </span><br><span class="line">    link/ether 8a:be:12:b9:ab:b8 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.30.128.0/32 scope global flannel.1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP </span><br><span class="line">    link/ether 02:42:eb:ec:ae:94 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.30.128.1/21 brd 172.30.135.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h5 id="1-5-1、查看-docker-的状态信息"><a href="#1-5-1、查看-docker-的状态信息" class="headerlink" title="1.5.1、查看 docker 的状态信息"></a>1.5.1、查看 docker 的状态信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps -elfH|grep docker</span></span><br><span class="line">0 S root      1436   975  0  80   0 - 28167 -      10:54 pts/0    00:00:00                 grep --color=auto docker</span><br><span class="line">4 S root      1265     1  1  80   0 - 122095 futex_ 10:54 ?       00:00:00   /usr/bin/dockerd --bip=172.30.112.1/21 --ip-masq=<span class="literal">false</span> --mtu=1450</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker info</span></span><br><span class="line">vClient:</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 0</span><br><span class="line">  Running: 0</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 0</span><br><span class="line"> Images: 0</span><br><span class="line"> Server Version: 18.09.6</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: xfs</span><br><span class="line">  Supports d_type: <span class="literal">true</span></span><br><span class="line">  Native Overlay Diff: <span class="literal">true</span></span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: <span class="built_in">local</span></span><br><span class="line">  Network: bridge host macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line"> runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line"> init version: fec3683</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 4.4.193-1.el7.elrepo.x86_64</span><br><span class="line"> Operating System: CentOS Linux 7 (Core)</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: x86_64</span><br><span class="line"> CPUs: 4</span><br><span class="line"> Total Memory: 7.796GiB</span><br><span class="line"> Name: k8s-node-2.kxl</span><br><span class="line"> ID: GJEA:U6PT:NMHM:KWD2:DOIJ:U6XW:6N3U:4QZN:F5PT:CQXH:MZKU:VATL</span><br><span class="line"> Docker Root Dir: /var/lib/docker</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: <span class="literal">false</span></span><br><span class="line"> Insecure Registries:</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Live Restore Enabled: <span class="literal">false</span></span><br><span class="line"> Product License: Community Engine</span><br></pre></td></tr></table></figure><h3 id="2、部署-kubelet-组件"><a href="#2、部署-kubelet-组件" class="headerlink" title="2、部署 kubelet 组件"></a>2、部署 kubelet 组件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet 运行在每个 worker 节点上，接收 kube-apiserver 发送的请求，管理 Pod 容器，执行交互式命令，如 exec、run、logs 等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet 启动时自动向 kube-apiserver 注册节点信息，内置的 cadvisor 统计和监控节点的资源使用情况。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为确保安全，部署时关闭了 kubelet 的非安全 http 端口，对请求进行认证和授权，拒绝未授权的访问(如 apiserver、heapster 的请求)。</p><h4 id="2-1、创建-kubelet-bootstrap-kubeconfig-文件"><a href="#2-1、创建-kubelet-bootstrap-kubeconfig-文件" class="headerlink" title="2.1、创建 kubelet bootstrap kubeconfig 文件"></a>2.1、创建 kubelet bootstrap kubeconfig 文件</h4><p>NODE_NAMES 里面的值是node的主机名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NODE_NAMES=(node-01 node-02 node-03)</span></span><br><span class="line"><span class="keyword">for</span> node_name <span class="keyword">in</span> <span class="variable">$&#123;NODE_NAMES[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 token</span></span><br><span class="line">    <span class="built_in">export</span> BOOTSTRAP_TOKEN=$(kubeadm token create \</span><br><span class="line">      --description kubelet-bootstrap-token \</span><br><span class="line">      --groups system:bootstrappers:<span class="variable">$&#123;node_name&#125;</span> \</span><br><span class="line">      --kubeconfig ~/.kube/config)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置集群参数</span></span><br><span class="line">    kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">      --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">      --embed-certs=<span class="literal">true</span> \</span><br><span class="line">      --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">      --kubeconfig=kubelet-bootstrap-<span class="variable">$&#123;node_name&#125;</span>.kubeconfig</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置客户端认证参数</span></span><br><span class="line">    kubectl config <span class="built_in">set</span>-credentials kubelet-bootstrap \</span><br><span class="line">      --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</span><br><span class="line">      --kubeconfig=kubelet-bootstrap-<span class="variable">$&#123;node_name&#125;</span>.kubeconfig</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置上下文参数</span></span><br><span class="line">    kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">      --cluster=kubernetes \</span><br><span class="line">      --user=kubelet-bootstrap \</span><br><span class="line">      --kubeconfig=kubelet-bootstrap-<span class="variable">$&#123;node_name&#125;</span>.kubeconfig</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置默认上下文</span></span><br><span class="line">    kubectl config use-context default --kubeconfig=kubelet-bootstrap-<span class="variable">$&#123;node_name&#125;</span>.kubeconfig</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for node_name in $&#123;NODE_NAMES[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_name&#125;</span>"</span></span><br><span class="line">    scp kubelet-bootstrap-<span class="variable">$&#123;node_name&#125;</span>.kubeconfig root@<span class="variable">$&#123;node_name&#125;</span>:/etc/kubernetes/kubelet-bootstrap.kubeconfig</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><p>向 kubeconfig 写入的是 token，bootstrap 结束后 kube-controller-manager 为 kubelet 创建 client 和 server 证书；</p></li><li><p>查看 kubeadm 为各节点创建的 token:<br>master 节点查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm token list --kubeconfig ~/.kube/config</span></span><br><span class="line">TOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION               EXTRA GROUPS</span><br><span class="line">016e9x.306t91l832suzg8i   19h       2019-09-17T11:29:43+08:00   authentication,signing   kubelet-bootstrap-token   system:bootstrappers:node-03</span><br><span class="line">4l4tcx.juy6qs9rmrnfpbig   19h       2019-09-17T11:29:43+08:00   authentication,signing   kubelet-bootstrap-token   system:bootstrappers:node-01</span><br><span class="line">64pk36.vbhvbmtojpskyclt   19h       2019-09-17T11:29:43+08:00   authentication,signing   kubelet-bootstrap-token   system:bootstrappers:node-02</span><br></pre></td></tr></table></figure><ul><li>token 有效期为 1 天，超期后将不能再被用来 boostrap kubelet，且会被 kube-controller-manager 的 tokencleaner 清理；</li><li>kube-apiserver 接收 kubelet 的 bootstrap token 后，将请求的 user 设置为 system:bootstrap:<token>，group 设置为 system:bootstrappers，后续将为这个 group 设置 ClusterRoleBinding；</token></li></ul></li><li><p>查看各 token 关联的 Secret：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get secrets  -n kube-system|grep bootstrap-token</span></span><br><span class="line">bootstrap-token-016e9x                           bootstrap.kubernetes.io/token         7      4h25m</span><br><span class="line">bootstrap-token-4l4tcx                           bootstrap.kubernetes.io/token         7      4h25m</span><br><span class="line">bootstrap-token-64pk36                           bootstrap.kubernetes.io/token         7      4h25m</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2、创建和分发-kubelet-参数配置文件"><a href="#2-2、创建和分发-kubelet-参数配置文件" class="headerlink" title="2.2、创建和分发 kubelet 参数配置文件"></a>2.2、创建和分发 kubelet 参数配置文件</h4><p>从 v1.10 开始，部分 kubelet 参数需在配置文件中配置，kubelet –help 会提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEPRECATED: This parameter should be <span class="built_in">set</span> via the config file specified by the Kubelet<span class="string">'s --config flag</span></span><br></pre></td></tr></table></figure><ul><li><p>创建 kubelet 参数配置文件模板</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/kubelet-config.yaml</span></span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">address: <span class="string">"##node_ip##"</span></span><br><span class="line">staticPodPath: <span class="string">""</span></span><br><span class="line">syncFrequency: 1m</span><br><span class="line">fileCheckFrequency: 20s</span><br><span class="line">httpCheckFrequency: 20s</span><br><span class="line">staticPodURL: <span class="string">""</span></span><br><span class="line">port: 10250</span><br><span class="line">readOnlyPort: 0</span><br><span class="line">rotateCertificates: <span class="literal">true</span></span><br><span class="line">serverTLSBootstrap: <span class="literal">true</span></span><br><span class="line">authentication:</span><br><span class="line">  anonymous:</span><br><span class="line">    enabled: <span class="literal">false</span></span><br><span class="line">  webhook:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  x509:</span><br><span class="line">    clientCAFile: <span class="string">"/etc/kubernetes/ssl/ca.pem"</span></span><br><span class="line">authorization:</span><br><span class="line">  mode: Webhook</span><br><span class="line">registryPullQPS: 0</span><br><span class="line">registryBurst: 20</span><br><span class="line">eventRecordQPS: 0</span><br><span class="line">eventBurst: 20</span><br><span class="line">enableDebuggingHandlers: <span class="literal">true</span></span><br><span class="line">enableContentionProfiling: <span class="literal">true</span></span><br><span class="line">healthzPort: 10248</span><br><span class="line">healthzBindAddress: <span class="string">"##node_ip##"</span></span><br><span class="line">clusterDomain: <span class="string">"cluster.local"</span></span><br><span class="line">clusterDNS:</span><br><span class="line">  - <span class="string">"10.254.0.2"</span></span><br><span class="line">nodeStatusUpdateFrequency: 10s</span><br><span class="line">nodeStatusReportFrequency: 1m</span><br><span class="line">imageMinimumGCAge: 2m</span><br><span class="line">imageGCHighThresholdPercent: 85</span><br><span class="line">imageGCLowThresholdPercent: 80</span><br><span class="line">volumeStatsAggPeriod: 1m</span><br><span class="line">kubeletCgroups: <span class="string">""</span></span><br><span class="line">systemCgroups: <span class="string">""</span></span><br><span class="line">cgroupRoot: <span class="string">""</span></span><br><span class="line">cgroupsPerQOS: <span class="literal">true</span></span><br><span class="line">cgroupDriver: cgroupfs</span><br><span class="line">runtimeRequestTimeout: 10m</span><br><span class="line">hairpinMode: promiscuous-bridge</span><br><span class="line">maxPods: 100</span><br><span class="line"><span class="comment"># podCIDR: "172.30.0.0/16"</span></span><br><span class="line">podPidsLimit: -1</span><br><span class="line">resolvConf: /etc/resolv.conf</span><br><span class="line">maxOpenFiles: 1000000</span><br><span class="line">kubeAPIQPS: 1000</span><br><span class="line">kubeAPIBurst: 2000</span><br><span class="line">serializeImagePulls: <span class="literal">false</span></span><br><span class="line">evictionHard:</span><br><span class="line">  memory.available:  <span class="string">"100Mi"</span></span><br><span class="line">nodefs.available:  <span class="string">"10%"</span></span><br><span class="line">nodefs.inodesFree: <span class="string">"5%"</span></span><br><span class="line">imagefs.available: <span class="string">"15%"</span></span><br><span class="line">evictionSoft: &#123;&#125;</span><br><span class="line">enableControllerAttachDetach: <span class="literal">true</span></span><br><span class="line">failSwapOn: <span class="literal">true</span></span><br><span class="line">containerLogMaxSize: 20Mi</span><br><span class="line">containerLogMaxFiles: 10</span><br><span class="line">systemReserved: &#123;&#125;</span><br><span class="line">kubeReserved: &#123;&#125;</span><br><span class="line">systemReservedCgroup: <span class="string">""</span></span><br><span class="line">kubeReservedCgroup: <span class="string">""</span></span><br><span class="line">enforceNodeAllocatable: [<span class="string">"pods"</span>]</span><br></pre></td></tr></table></figure><ul><li>address：kubelet 安全端口（https，10250）监听的地址，不能为 127.0.0.1，否则 kube-apiserver、heapster 等不能调用 kubelet 的 API；</li><li>readOnlyPort=0：关闭只读端口(默认 10255)，等效为未指定；</li><li>authentication.anonymous.enabled：设置为 false，不允许匿名�访问 10250 端口；</li><li>authentication.x509.clientCAFile：指定签名客户端证书的 CA 证书，开启 HTTP 证书认证；</li><li>authentication.webhook.enabled=true：开启 HTTPs bearer token 认证；</li><li>对于未通过 x509 证书和 webhook 认证的请求(kube-apiserver 或其他客户端)，将被拒绝，提示 Unauthorized；</li><li>authroization.mode=Webhook：kubelet 使用 SubjectAccessReview API 查询 kube-apiserver 某 user、group 是否具有操作资源的权限(RBAC)；</li><li>featureGates.RotateKubeletClientCertificate、featureGates.RotateKubeletServerCertificate：自动 rotate 证书，证书的有效期取决于 kube-controller-manager 的 –experimental-cluster-signing-duration 参数；</li><li>需要 root 账户运行；</li></ul></li></ul><h4 id="2-3、创建kubelet-systemd-unit-文件"><a href="#2-3、创建kubelet-systemd-unit-文件" class="headerlink" title="2.3、创建kubelet systemd unit 文件"></a>2.3、创建kubelet systemd unit 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kubelet.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/<span class="built_in">log</span>/k8s/kubelet</span><br><span class="line">ExecStart=/usr/bin/kubelet \</span><br><span class="line">  --allow-privileged=<span class="literal">true</span> \</span><br><span class="line">  --bootstrap-kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig \</span><br><span class="line">  --cert-dir=/etc/kubernetes/ssl \</span><br><span class="line">  --network-plugin=cni \</span><br><span class="line">  --cni-conf-dir=/etc/cni/net.d \</span><br><span class="line">  --cni-bin-dir=/opt/cni/bin \</span><br><span class="line">  --container-runtime=docker \</span><br><span class="line">  --container-runtime-endpoint=unix:///var/run/dockershim.sock \</span><br><span class="line">  --root-dir=/var/lib/kubelet \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="line">  --config=/etc/kubernetes/kubelet-config.yaml \</span><br><span class="line">  --hostname-override=<span class="comment">##node_ip## \</span></span><br><span class="line">  --pod-infra-container-image=registry.cn-beijing.aliyuncs.com/images_k8s/pause-amd64:3.1 \</span><br><span class="line">  --image-pull-progress-deadline=15m \</span><br><span class="line">  --volume-plugin-dir=/var/lib/kubelet/kubelet-plugins/volume/<span class="built_in">exec</span>/ \</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">StartLimitInterval=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>如果设置了 –hostname-override 选项，则 kube-proxy 也需要设置该选项，否则会出现找不到 Node 的情况；</li><li>–bootstrap-kubeconfig：指向 bootstrap kubeconfig 文件，kubelet 使用该文件中的用户名和 token 向 kube-apiserver 发送 TLS Bootstrapping 请求；</li><li>K8S approve kubelet 的 csr 请求后，在 –cert-dir 目录创建证书和私钥文件，然后写入 –kubeconfig 文件；</li><li>–pod-infra-container-image 不使用 redhat 的 pod-infrastructure:latest 镜像，它不能回收容器的僵尸；</li></ul><h4 id="2-4、Bootstrap-Token-Auth-和授予权限"><a href="#2-4、Bootstrap-Token-Auth-和授予权限" class="headerlink" title="2.4、Bootstrap Token Auth 和授予权限"></a>2.4、Bootstrap Token Auth 和授予权限</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet 启动时查找 –kubeletconfig 参数对应的文件是否存在，如果不存在则使用 –bootstrap-kubeconfig 指定的 kubeconfig 文件向 kube-apiserver 发送证书签名请求 (CSR)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kube-apiserver 收到 CSR 请求后，对其中的 Token 进行认证，认证通过后将请求的 user 设置为 system:bootstrap:<token>，group 设置为 system:bootstrappers，这一过程称为 Bootstrap Token Auth。</token></p><p>默认情况下，这个 user 和 group 没有创建 CSR 的权限，kubelet 启动失败，错误日志如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.858672   20385 reflector.go:126] k8s.io/client-go/informers/factory.go:133: Failed to list *v1beta1.RuntimeClass: Unauthorized</span><br><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.860429   20385 reflector.go:126] k8s.io/client-go/informers/factory.go:133: Failed to list *v1beta1.CSIDriver: Unauthorized</span><br><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.903098   20385 kubelet.go:2244] node <span class="string">"172.21.16.240"</span> not found</span><br><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.985568   20385 reflector.go:126] k8s.io/kubernetes/pkg/kubelet/kubelet.go:442: Failed to list *v1.Service: Unauthorized</span><br><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.986781   20385 reflector.go:126] k8s.io/kubernetes/pkg/kubelet/config/apiserver.go:47: Failed to list *v1.Pod: Unauthorized</span><br><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.987454   20385 reflector.go:126] k8s.io/kubernetes/pkg/kubelet/kubelet.go:451: Failed to list *v1.Node: Unauthorized</span><br></pre></td></tr></table></figure><p>解决办法是：创建一个 clusterrolebinding，将 group system:bootstrappers 和 clusterrole system:node-bootstrapper 绑定：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --group=system:bootstrappers</span></span><br></pre></td></tr></table></figure><h4 id="2-5、启动-kubelet-服务"><a href="#2-5、启动-kubelet-服务" class="headerlink" title="2.5、启动 kubelet 服务"></a>2.5、启动 kubelet 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /var/log/k8s/kubelet</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable kubelet &amp;&amp; systemctl restart kubelet &amp;&amp; systemctl status kubelet</span></span><br></pre></td></tr></table></figure><ul><li>启动服务前必须先创建工作目录；</li><li>关闭 swap 分区，否则 kubelet 会启动失败；</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet 启动后使用 –bootstrap-kubeconfig 向 kube-apiserver 发送 CSR 请求，当这个 CSR 被 approve 后，kube-controller-manager 为 kubelet 创建 TLS 客户端证书、私钥和 –kubeletconfig 文件。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>注意</strong>：kube-controller-manager 需要配置 –cluster-signing-cert-file 和 –cluster-signing-key-file 参数，才会为 TLS Bootstrap 创建证书和私钥。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get csr</span></span><br><span class="line">NAME        AGE     REQUESTOR                 CONDITION</span><br><span class="line">csr-bwcbm   82s     system:bootstrap:016e9x   Pending</span><br><span class="line">csr-gqdhf   105s    system:bootstrap:64pk36   Pending</span><br><span class="line">csr-q995g   6m57s   system:bootstrap:4l4tcx   Pending</span><br><span class="line">csr-xx45v   7m33s   system:bootstrap:4l4tcx   Pending</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line">No resources found.</span><br></pre></td></tr></table></figure><h4 id="2-6、自动-approve-CSR-请求"><a href="#2-6、自动-approve-CSR-请求" class="headerlink" title="2.6、自动 approve CSR 请求"></a>2.6、自动 approve CSR 请求</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/csr-crb.yaml</span></span><br><span class="line"><span class="comment"># Approve all CSRs for the group "system:bootstrappers"</span></span><br><span class="line"> kind: ClusterRoleBinding</span><br><span class="line"> apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"> metadata:</span><br><span class="line">   name: auto-approve-csrs-for-group</span><br><span class="line"> subjects:</span><br><span class="line"> - kind: Group</span><br><span class="line">   name: system:bootstrappers</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br><span class="line"> roleRef:</span><br><span class="line">   kind: ClusterRole</span><br><span class="line">   name: system:certificates.k8s.io:certificatesigningrequests:nodeclient</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br><span class="line">---</span><br><span class="line"> <span class="comment"># To let a node of the group "system:nodes" renew its own credentials</span></span><br><span class="line"> kind: ClusterRoleBinding</span><br><span class="line"> apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"> metadata:</span><br><span class="line">   name: node-client-cert-renewal</span><br><span class="line"> subjects:</span><br><span class="line"> - kind: Group</span><br><span class="line">   name: system:nodes</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br><span class="line"> roleRef:</span><br><span class="line">   kind: ClusterRole</span><br><span class="line">   name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br><span class="line">---</span><br><span class="line"><span class="comment"># A ClusterRole which instructs the CSR approver to approve a node requesting a</span></span><br><span class="line"><span class="comment"># serving cert matching its client cert.</span></span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: approve-node-server-renewal-csr</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [<span class="string">"certificates.k8s.io"</span>]</span><br><span class="line">  resources: [<span class="string">"certificatesigningrequests/selfnodeserver"</span>]</span><br><span class="line">  verbs: [<span class="string">"create"</span>]</span><br><span class="line">---</span><br><span class="line"> <span class="comment"># To let a node of the group "system:nodes" renew its own server credentials</span></span><br><span class="line"> kind: ClusterRoleBinding</span><br><span class="line"> apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"> metadata:</span><br><span class="line">   name: node-server-cert-renewal</span><br><span class="line"> subjects:</span><br><span class="line"> - kind: Group</span><br><span class="line">   name: system:nodes</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br><span class="line"> roleRef:</span><br><span class="line">   kind: ClusterRole</span><br><span class="line">   name: approve-node-server-renewal-csr</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure><ul><li>auto-approve-csrs-for-group：自动 approve node 的第一次 CSR； 注意第一次 CSR 时，请求的 Group 为 system:bootstrappers；</li><li>node-client-cert-renewal：自动 approve node 后续过期的 client 证书，自动生成的证书 Group 为 system:nodes;</li><li>node-server-cert-renewal：自动 approve node 后续过期的 server 证书，自动生成的证书 Group 为 system:nodes;</li></ul><h4 id="2-6、等查看-kubelet-的情况"><a href="#2-6、等查看-kubelet-的情况" class="headerlink" title="2.6、等查看 kubelet 的情况"></a>2.6、等查看 kubelet 的情况</h4><p>待一段时间(1-10 分钟)，三个节点的 CSR 都被自动 approved：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get csr</span></span><br><span class="line">NAME        AGE     REQUESTOR                   CONDITION</span><br><span class="line">csr-2t4bj   2m58s   system:node:172.21.16.240   Pending</span><br><span class="line">csr-2z2mq   4m14s   system:node:172.21.16.204   Pending</span><br><span class="line">csr-bwcbm   6m6s    system:bootstrap:016e9x     Approved,Issued</span><br><span class="line">csr-gqdhf   6m29s   system:bootstrap:64pk36     Approved,Issued</span><br><span class="line">csr-q995g   11m     system:bootstrap:4l4tcx     Approved,Issued</span><br><span class="line">csr-xx45v   12m     system:bootstrap:4l4tcx     Pending</span><br></pre></td></tr></table></figure><ul><li>所有节点均 ready：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME            STATUS   ROLES    AGE     VERSION</span><br><span class="line">172.21.16.204   Ready    &lt;none&gt;   4m17s   v1.14.6</span><br><span class="line">172.21.16.240   Ready    &lt;none&gt;   3m2s    v1.14.6</span><br><span class="line">172.21.16.231    Ready    &lt;none&gt;   3s      v1.14.6</span><br></pre></td></tr></table></figure></li></ul><p>kube-controller-manager 为各 node 生成了 kubeconfig 文件和公私钥：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls -l /etc/kubernetes/kubelet.kubeconfig</span></span><br><span class="line">-rw------- 1 root root 2311 Sep 16 11:31 /etc/kubernetes/kubelet.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls -l /etc/kubernetes/ssl/|grep kubelet</span></span><br><span class="line">-rw------- 1 root root 1281 Sep 16 11:43 kubelet-client-2019-09-16-11-43-20.pem</span><br><span class="line">lrwxrwxrwx 1 root root   58 Sep 16 11:43 kubelet-client-current.pem -&gt; /etc/kubernetes/ssl/kubelet-client-2019-09-16-11-43-20.pem</span><br></pre></td></tr></table></figure><p>没有自动生成 kubelet server 证书；</p><h4 id="2-8、手动-approve-server-cert-csr"><a href="#2-8、手动-approve-server-cert-csr" class="headerlink" title="2.8、手动 approve server cert csr"></a>2.8、手动 approve server cert csr</h4><p>基于<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls-bootstrapping/#kubelet-configuratio" target="_blank" rel="noopener">安全性考虑</a>，CSR approving controllers 不会自动 approve kubelet server 证书签名请求，需要手动 approve：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get csr</span></span><br><span class="line">NAME        AGE     REQUESTOR                   CONDITION</span><br><span class="line">csr-2t4bj   3m5s    system:node:172.21.16.240   Pending</span><br><span class="line">csr-2z2mq   4m21s   system:node:172.21.16.204   Pending</span><br><span class="line">csr-bwcbm   6m13s   system:bootstrap:016e9x     Approved,Issued</span><br><span class="line">csr-gqdhf   6m36s   system:bootstrap:64pk36     Approved,Issued</span><br><span class="line">csr-gtkrt   7s      system:node:172.21.16.231    Pending</span><br><span class="line">csr-q995g   11m     system:bootstrap:4l4tcx     Approved,Issued</span><br><span class="line">csr-xx45v   12m     system:bootstrap:4l4tcx     Pending</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl certificate approve csr-2t4bj</span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/csr-2t4bj approved</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl certificate approve csr-2z2mq </span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/csr-2z2mq approved</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl certificate approve csr-gtkrt</span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/csr-gtkrt approved</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls -l /etc/kubernetes/ssl/|grep kubelet</span></span><br><span class="line">-rw------- 1 root root 1281 Sep 16 11:43 kubelet-client-2019-09-16-11-43-20.pem</span><br><span class="line">lrwxrwxrwx 1 root root   58 Sep 16 11:43 kubelet-client-current.pem -&gt; /etc/kubernetes/ssl/kubelet-client-2019-09-16-11-43-20.pem</span><br><span class="line">-rw------- 1 root root 1305 Sep 16 11:44 kubelet-server-2019-09-16-11-44-12.pem</span><br><span class="line">lrwxrwxrwx 1 root root   58 Sep 16 11:44 kubelet-server-current.pem -&gt; /etc/kubernetes/ssl/kubelet-server-2019-09-16-11-44-12.pem</span><br></pre></td></tr></table></figure><h4 id="2-9、kubelet-提供的-API-接口"><a href="#2-9、kubelet-提供的-API-接口" class="headerlink" title="2.9、kubelet 提供的 API 接口"></a>2.9、kubelet 提供的 API 接口</h4><p>kubelet 启动后监听多个端口，用于接收 kube-apiserver 或其它客户端发送的请求：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -lnpt|grep kubelet</span></span><br><span class="line">tcp        0      0 127.0.0.1:43042         0.0.0.0:*               LISTEN      22726/kubelet       </span><br><span class="line">tcp        0      0 172.21.16.231:10248      0.0.0.0:*               LISTEN      22726/kubelet       </span><br><span class="line">tcp6       0      0 :::10250                :::*                    LISTEN      22726/kubelet</span><br></pre></td></tr></table></figure><ul><li>10248: healthz http 服务；</li><li>10250: https 服务，访问该端口时需要认证和授权（即使访问 /healthz 也需要）；</li><li>未开启只读端口 10255；</li><li>从 K8S v1.10 开始，去除了 –cadvisor-port 参数（默认 4194 端口），不支持访问 cAdvisor UI &amp; API。</li></ul><p>由于关闭了匿名认证，同时开启了 webhook 授权，所有访问 10250 端口 https API 的请求都需要被认证和授权。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;预定义的 ClusterRole system:kubelet-api-admin 授予访问 kubelet 所有 API 的权限(kube-apiserver 使用的 kubernetes 证书 User 授予了该权限)：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe clusterrole system:kubelet-api-admin</span></span><br><span class="line">Name:         system:kubelet-api-admin</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources      Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------      -----------------  --------------  -----</span><br><span class="line">  nodes/<span class="built_in">log</span>      []                 []              [*]</span><br><span class="line">  nodes/metrics  []                 []              [*]</span><br><span class="line">  nodes/proxy    []                 []              [*]</span><br><span class="line">  nodes/spec     []                 []              [*]</span><br><span class="line">  nodes/stats    []                 []              [*]</span><br><span class="line">  nodes          []                 []              [get list watch proxy]</span><br></pre></td></tr></table></figure><h4 id="2-10、kubelet-api-认证和授权"><a href="#2-10、kubelet-api-认证和授权" class="headerlink" title="2.10、kubelet api 认证和授权"></a>2.10、kubelet api 认证和授权</h4><p>kubelet 配置了如下认证参数:</p><ul><li>authentication.anonymous.enabled：设置为 false，不允许匿名访问 10250 端口；</li><li>authentication.x509.clientCAFile：指定签名客户端证书的 CA 证书，开启 HTTPs 证书认证；</li><li>authentication.webhook.enabled=true：开启 HTTPs bearer token 认证；</li></ul><p>同时配置了如下授权参数:</p><ul><li>authroization.mode=Webhook：开启 RBAC 授权</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet 收到请求后，使用 clientCAFile 对证书签名进行认证，或者查询 bearer token 是否有效。如果两者都没通过，则拒绝请求，提示 Unauthorized：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem https://172.21.16.231:10250/metrics</span></span><br><span class="line">Unauthorized</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem -H "Authorization: Bearer 123456"  https://172.21.16.231:10250/metrics</span></span><br><span class="line">Unauthorized</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过认证后，kubelet 使用 SubjectAccessReview API 向 kube-apiserver 发送请求，查询证书或 token 对应的 user、group 是否有操作资源的权限(RBAC)；</p><h4 id="2-11、证书认证和授权"><a href="#2-11、证书认证和授权" class="headerlink" title="2.11、证书认证和授权"></a>2.11、证书认证和授权</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 权限不足的证书；</span></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem --cert /etc/kubernetes/ssl/kube-controller-manager.pem --key /etc/kubernetes/ssl/kube-controller-manager-key.pem https://172.21.16.231:10250/metrics</span></span><br><span class="line">Forbidden (user=system:kube-controller-manager, verb=get, resource=nodes, subresource=metrics)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用部署 kubectl 命令行工具时创建的、具有最高权限的 admin 证书；</span></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem --cert /etc/kubernetes/ssl/admin.pem --key /etc/kubernetes/ssl/admin-key.pem https://172.21.16.231:10250/metrics</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"1800"</span>&#125; 0</span><br></pre></td></tr></table></figure><ul><li>–cacert、–cert、–key 的参数值必须是文件路径，如上面的 ./admin.pem 不能省略 ./，否则返回 401 Unauthorized；</li></ul><h4 id="2-12、bear-token-认证和授权"><a href="#2-12、bear-token-认证和授权" class="headerlink" title="2.12、bear token 认证和授权"></a>2.12、bear token 认证和授权</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建一个 ServiceAccount，将它和 ClusterRole system:kubelet-api-admin 绑定，从而具有调用 kubelet API 的权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create sa kubelet-api-test</span></span><br><span class="line"><span class="comment"># kubectl create clusterrolebinding kubelet-api-test --clusterrole=system:kubelet-api-admin --serviceaccount=default:kubelet-api-test</span></span><br><span class="line"><span class="comment"># SECRET=$(kubectl get secrets | grep kubelet-api-test | awk '&#123;print $1&#125;')</span></span><br><span class="line"><span class="comment"># TOKEN=$(kubectl describe secret $&#123;SECRET&#125; | grep -E '^token' | awk '&#123;print $2&#125;')</span></span><br><span class="line"><span class="comment"># echo $&#123;TOKEN&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem -H "Authorization: Bearer $&#123;TOKEN&#125;" https://172.21.16.231:10250/metrics|head</span></span><br></pre></td></tr></table></figure><h3 id="3、cadvisor-和-metrics"><a href="#3、cadvisor-和-metrics" class="headerlink" title="3、cadvisor 和 metrics"></a>3、cadvisor 和 metrics</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cadvisor 是内嵌在 kubelet 二进制中的，统计所在节点各容器的资源(CPU、内存、磁盘、网卡)使用情况的服务。<br>浏览器访问 <a href="https://172.21.16.231:10250/metrics" target="_blank" rel="noopener">https://172.21.16.231:10250/metrics</a> 和 <a href="https://172.21.16.231:10250/metrics/cadvisor" target="_blank" rel="noopener">https://172.21.16.231:10250/metrics/cadvisor</a> 分别返回 kubelet 和 cadvisor 的 metrics。<br><img src="https://img.xxlaila.cn/1568624798589.jpg" alt="img"></p><p><strong>注意:</strong></p><ul><li>kubelet.config.json 设置 authentication.anonymous.enabled 为 false，不允许匿名证书访问 10250 的 https 服务；</li><li>参考<a href="https://xxlaila.github.io/2019/09/04/kubelet提供api请求接口/" target="_blank" rel="noopener">kubelet提供api请求接口</a>，创建和导入相关证书，然后访问上面的 10250 端口；</li></ul><h4 id="3-1、获取-kubelet-的配置"><a href="#3-1、获取-kubelet-的配置" class="headerlink" title="3.1、获取 kubelet 的配置"></a>3.1、获取 kubelet 的配置</h4><p>从 kube-apiserver 获取各节点 kubelet 的配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用部署 kubectl 命令行工具时创建的、具有最高权限的 admin 证书；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># curl -sSL --cacert /etc/kubernetes/ssl/ca.pem --cert /etc/kubernetes/ssl/admin.pem --key /etc/kubernetes/ssl/admin-key.pem $&#123;KUBE_APISERVER&#125;/api/v1/nodes/172.21.16.231/proxy/configz | jq  '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1"'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"syncFrequency"</span>: <span class="string">"1m0s"</span>,</span><br><span class="line">  <span class="string">"fileCheckFrequency"</span>: <span class="string">"20s"</span>,</span><br><span class="line">  <span class="string">"httpCheckFrequency"</span>: <span class="string">"20s"</span>,</span><br><span class="line">  <span class="string">"address"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="string">"port"</span>: 10250,</span><br><span class="line">  <span class="string">"rotateCertificates"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"serverTLSBootstrap"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"authentication"</span>: &#123;</span><br><span class="line">    <span class="string">"x509"</span>: &#123;</span><br><span class="line">      <span class="string">"clientCAFile"</span>: <span class="string">"/etc/kubernetes/ssl/ca.pem"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"webhook"</span>: &#123;</span><br><span class="line">      <span class="string">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"cacheTTL"</span>: <span class="string">"2m0s"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"anonymous"</span>: &#123;</span><br><span class="line">      <span class="string">"enabled"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"authorization"</span>: &#123;</span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"Webhook"</span>,</span><br><span class="line">    <span class="string">"webhook"</span>: &#123;</span><br><span class="line">      <span class="string">"cacheAuthorizedTTL"</span>: <span class="string">"5m0s"</span>,</span><br><span class="line">      <span class="string">"cacheUnauthorizedTTL"</span>: <span class="string">"30s"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"registryPullQPS"</span>: 0,</span><br><span class="line">  <span class="string">"registryBurst"</span>: 20,</span><br><span class="line">  <span class="string">"eventRecordQPS"</span>: 0,</span><br><span class="line">  <span class="string">"eventBurst"</span>: 20,</span><br><span class="line">  <span class="string">"enableDebuggingHandlers"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"enableContentionProfiling"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"healthzPort"</span>: 10248,</span><br><span class="line">  <span class="string">"healthzBindAddress"</span>: <span class="string">"172.21.16.231"</span>,</span><br><span class="line">  <span class="string">"oomScoreAdj"</span>: -999,</span><br><span class="line">  <span class="string">"clusterDomain"</span>: <span class="string">"cluster.local"</span>,</span><br><span class="line">  <span class="string">"clusterDNS"</span>: [</span><br><span class="line">    <span class="string">"10.254.0.2"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"streamingConnectionIdleTimeout"</span>: <span class="string">"4h0m0s"</span>,</span><br><span class="line">  <span class="string">"nodeStatusUpdateFrequency"</span>: <span class="string">"10s"</span>,</span><br><span class="line">  <span class="string">"nodeStatusReportFrequency"</span>: <span class="string">"1m0s"</span>,</span><br><span class="line">  <span class="string">"nodeLeaseDurationSeconds"</span>: 40,</span><br><span class="line">  <span class="string">"imageMinimumGCAge"</span>: <span class="string">"2m0s"</span>,</span><br><span class="line">  <span class="string">"imageGCHighThresholdPercent"</span>: 85,</span><br><span class="line">  <span class="string">"imageGCLowThresholdPercent"</span>: 80,</span><br><span class="line">  <span class="string">"volumeStatsAggPeriod"</span>: <span class="string">"1m0s"</span>,</span><br><span class="line">  <span class="string">"cgroupsPerQOS"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"cgroupDriver"</span>: <span class="string">"cgroupfs"</span>,</span><br><span class="line">  <span class="string">"cpuManagerPolicy"</span>: <span class="string">"none"</span>,</span><br><span class="line">  <span class="string">"cpuManagerReconcilePeriod"</span>: <span class="string">"10s"</span>,</span><br><span class="line">  <span class="string">"runtimeRequestTimeout"</span>: <span class="string">"10m0s"</span>,</span><br><span class="line">  <span class="string">"hairpinMode"</span>: <span class="string">"promiscuous-bridge"</span>,</span><br><span class="line">  <span class="string">"maxPods"</span>: 100,</span><br><span class="line">  <span class="string">"podCIDR"</span>: <span class="string">"172.30.0.0/16"</span>,</span><br><span class="line">  <span class="string">"podPidsLimit"</span>: -1,</span><br><span class="line">  <span class="string">"resolvConf"</span>: <span class="string">"/etc/resolv.conf"</span>,</span><br><span class="line">  <span class="string">"cpuCFSQuota"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"cpuCFSQuotaPeriod"</span>: <span class="string">"100ms"</span>,</span><br><span class="line">  <span class="string">"maxOpenFiles"</span>: 1000000,</span><br><span class="line">  <span class="string">"contentType"</span>: <span class="string">"application/vnd.kubernetes.protobuf"</span>,</span><br><span class="line">  <span class="string">"kubeAPIQPS"</span>: 1000,</span><br><span class="line">  <span class="string">"kubeAPIBurst"</span>: 2000,</span><br><span class="line">  <span class="string">"serializeImagePulls"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"evictionHard"</span>: &#123;</span><br><span class="line">    <span class="string">"memory.available"</span>: <span class="string">"100Mi"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"evictionPressureTransitionPeriod"</span>: <span class="string">"5m0s"</span>,</span><br><span class="line">  <span class="string">"enableControllerAttachDetach"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"makeIPTablesUtilChains"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"iptablesMasqueradeBit"</span>: 14,</span><br><span class="line">  <span class="string">"iptablesDropBit"</span>: 15,</span><br><span class="line">  <span class="string">"failSwapOn"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"containerLogMaxSize"</span>: <span class="string">"20Mi"</span>,</span><br><span class="line">  <span class="string">"containerLogMaxFiles"</span>: 10,</span><br><span class="line">  <span class="string">"configMapAndSecretChangeDetectionStrategy"</span>: <span class="string">"Watch"</span>,</span><br><span class="line">  <span class="string">"enforceNodeAllocatable"</span>: [</span><br><span class="line">    <span class="string">"pods"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"kind"</span>: <span class="string">"KubeletConfiguration"</span>,</span><br><span class="line">  <span class="string">"apiVersion"</span>: <span class="string">"kubelet.config.k8s.io/v1beta1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、部署-kube-proxy-组件"><a href="#4、部署-kube-proxy-组件" class="headerlink" title="4、部署 kube-proxy 组件"></a>4、部署 kube-proxy 组件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kube-proxy 运行在所有 worker 节点上，它监听 apiserver 中 service 和 endpoint 的变化情况，创建路由规则以提供服务 IP 和负载均衡功能。</p><h4 id="4-1、创建-kube-proxy-证书"><a href="#4-1、创建-kube-proxy-证书" class="headerlink" title="4.1、创建 kube-proxy 证书"></a>4.1、创建 kube-proxy 证书</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; kube-proxy-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li><p>CN：指定该证书的 User 为 system:kube-proxy；</p></li><li><p>预定义的 RoleBinding system:node-proxier 将User system:kube-proxy 与 Role system:node-proxier 绑定，该 Role 授予了调用 kube-apiserver Proxy 相关 API 的权限；</p></li><li><p>该证书只会被 kube-proxy 当做 client 证书使用，所以 hosts 字段为空；</p></li><li><p>生成证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ls kube-proxy*.pem</span></span><br><span class="line">kube-proxy-key.pem  kube-proxy.pem</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-2、创建和分发-kubeconfig-文件"><a href="#4-2、创建和分发-kubeconfig-文件" class="headerlink" title="4.2、创建和分发 kubeconfig 文件"></a>4.2、创建和分发 kubeconfig 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-credentials kube-proxy \</span></span><br><span class="line">  --client-certificate=kube-proxy.pem \</span><br><span class="line">  --client-key=kube-proxy-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-context default \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-proxy \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span></span><br></pre></td></tr></table></figure><ul><li>–embed-certs=true：将 ca.pem 和 admin.pem 证书内容嵌入到生成的 kubectl-proxy.kubeconfig 文件中(不加时，写入的是证书文件路径)</li></ul><h4 id="4-3、创建-kube-proxy-配置文件"><a href="#4-3、创建-kube-proxy-配置文件" class="headerlink" title="4.3、创建 kube-proxy 配置文件"></a>4.3、创建 kube-proxy 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/kube-proxy-config.yaml</span></span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">clientConnection:</span><br><span class="line">  burst: 200</span><br><span class="line">  kubeconfig: <span class="string">"/etc/kubernetes/kube-proxy.kubeconfig"</span></span><br><span class="line">  qps: 100</span><br><span class="line">bindAddress: 0.0.0.0</span><br><span class="line">healthzBindAddress: <span class="comment">##node_ip##:10256</span></span><br><span class="line">metricsBindAddress: <span class="comment">##node_ip##:10249</span></span><br><span class="line">enableProfiling: <span class="literal">true</span></span><br><span class="line">clusterCIDR: 10.244.0.0/16</span><br><span class="line">hostnameOverride: <span class="comment">##node_ip##</span></span><br><span class="line">mode: <span class="string">"ipvs"</span></span><br><span class="line">portRange: <span class="string">""</span></span><br><span class="line">kubeProxyIPTablesConfiguration:</span><br><span class="line">  masqueradeAll: <span class="literal">false</span></span><br><span class="line">kubeProxyIPVSConfiguration:</span><br><span class="line">  scheduler: rr</span><br><span class="line">  excludeCIDRs: []</span><br></pre></td></tr></table></figure><ul><li>bindAddress: 监听地址；</li><li>clientConnection.kubeconfig: 连接 apiserver 的 kubeconfig 文件；</li><li>clusterCIDR: kube-proxy 根据 –cluster-cidr 判断集群内部和外部流量，指定 –cluster-cidr 或 –masquerade-all 选项后 kube-proxy 才会对访问 Service IP 的请求做 SNAT；</li><li>hostnameOverride: 参数值必须与 kubelet 的值一致，否则 kube-proxy 启动后会找不到该 Node，从而不会创建任何 ipvs 规则；</li><li>mode: 使用 ipvs 模式；</li></ul><h4 id="4-4、创建kube-proxy-systemd-unit-文件"><a href="#4-4、创建kube-proxy-systemd-unit-文件" class="headerlink" title="4.4、创建kube-proxy systemd unit 文件"></a>4.4、创建kube-proxy systemd unit 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-proxy.service </span></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/<span class="built_in">log</span>/k8s/kube-proxy</span><br><span class="line">ExecStart=/usr/bin/kube-proxy \</span><br><span class="line">  --config=/etc/kubernetes/kube-proxy-config.yaml \</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="4-5、启动-kube-proxy-服务"><a href="#4-5、启动-kube-proxy-服务" class="headerlink" title="4.5、启动 kube-proxy 服务"></a>4.5、启动 kube-proxy 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /var/log/k8s/kube-proxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable kube-proxy &amp;&amp; systemctl restart kube-proxy &amp;&amp; systemctl status kube-proxy</span></span><br></pre></td></tr></table></figure><h4 id="4-5、检查"><a href="#4-5、检查" class="headerlink" title="4.5、检查"></a>4.5、检查</h4><ul><li><p>查看监听端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -lnpt|grep kube-prox</span></span><br><span class="line">tcp        0      0 172.21.16.231:10256      0.0.0.0:*               LISTEN      27423/kube-proxy    </span><br><span class="line">tcp        0      0 172.21.16.231:10249      0.0.0.0:*               LISTEN      27423/kube-proxy</span><br></pre></td></tr></table></figure></li><li><p>查看 ipvs 路由规则</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipvsadm -ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  10.254.0.1:443 rr</span><br><span class="line">  -&gt; 172.21.17.30:6443            Masq    1      0          0         </span><br><span class="line">  -&gt; 172.21.17.31:6443            Masq    1      0          0 </span><br><span class="line">  -&gt; 172.21.16.110:6443           Masq    1      0          0</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>v1.14 node安装</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-v1.14安装</title>
    <url>/2019/09/11/kubernetes-v1-14%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h3><table><thead><tr><th>ip</th><th>type</th><th>docker</th><th>os</th><th>k8s version</th></tr></thead><tbody><tr><td>172.21.17.30</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td>v1.14.6</td></tr><tr><td>172.21.17.31</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.110</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.87</td><td>node,flanneld</td><td>18.06.2-ce</td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.240</td><td>node,flanneld,ha+kee</td><td>18.06.2-ce</td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.204</td><td>node,flanneld,ha+kee</td><td>18.06.2-ce</td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.45</td><td>vip</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr></tbody></table><h3 id="2、初始化系统"><a href="#2、初始化系统" class="headerlink" title="2、初始化系统"></a>2、初始化系统</h3><h4 id="2-1、安装依赖包"><a href="#2-1、安装依赖包" class="headerlink" title="2.1、安装依赖包"></a>2.1、安装依赖包</h4><a id="more"></a><p>每台服务器均操作,关闭防火墙,关闭selinux</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install -y epel-release</span></span><br><span class="line"><span class="comment"># yum install -y conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget</span></span><br></pre></td></tr></table></figure><h4 id="2-2、关闭-swap-分区"><a href="#2-2、关闭-swap-分区" class="headerlink" title="2.2、关闭 swap 分区"></a>2.2、关闭 swap 分区</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果开启了 swap 分区，kubelet 会启动失败(可以通过将参数 –fail-swap-on 设置为 false 来忽略 swap on)，故需要在每台机器上关闭 swap 分区。同时注释 /etc/fstab 中相应的条目，防止开机自动挂载 swap 分区。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># swapoff -a</span></span><br><span class="line"><span class="comment"># sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab</span></span><br></pre></td></tr></table></figure><h4 id="2-3、加载内核模块"><a href="#2-3、加载内核模块" class="headerlink" title="2.3、加载内核模块"></a>2.3、加载内核模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># modprobe ip_vs_rr</span></span><br><span class="line"><span class="comment"># modprobe br_netfilter</span></span><br></pre></td></tr></table></figure><h5 id="2-3-1-加载内核，加入开机启动"><a href="#2-3-1-加载内核，加入开机启动" class="headerlink" title="2.3.1 加载内核，加入开机启动"></a>2.3.1 加载内核，加入开机启动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; /etc/rc.local  &lt;&lt; EOF</span></span><br><span class="line">modprobe ip_vs_rr</span><br><span class="line">modprobe br_netfilter</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h5 id="2-3-2-使用systemd-modules-load加载内核模块"><a href="#2-3-2-使用systemd-modules-load加载内核模块" class="headerlink" title="2.3.2 使用systemd-modules-load加载内核模块"></a>2.3.2 使用systemd-modules-load加载内核模块</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; /etc/modules-load.d/ipvs.conf &lt;&lt; EOF</span></span><br><span class="line"> ip_vs_rr</span><br><span class="line"> br_netfilter</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># systemctl enable --now systemd-modules-load.service</span></span><br></pre></td></tr></table></figure><h5 id="2-3-3-验证模块是否加载成功"><a href="#2-3-3-验证模块是否加载成功" class="headerlink" title="2.3.3 验证模块是否加载成功"></a>2.3.3 验证模块是否加载成功</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lsmod |egrep " ip_vs_rr|br_netfilter"</span></span><br><span class="line">为什么要使用IPVS,从k8s的1.8版本开始，kube-proxy引入了IPVS模式，IPVS模式与iptables同样基于Netfilter，但是采用的<span class="built_in">hash</span>表，因此当service数量达到一定规模时，<span class="built_in">hash</span>查表的速度优势就会显现出来，从而提高service的服务性能。</span><br></pre></td></tr></table></figure><h4 id="2-4、优化内核参数"><a href="#2-4、优化内核参数" class="headerlink" title="2.4、优化内核参数"></a>2.4、优化内核参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/sysctl.d/kubernetes.conf </span></span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv4.tcp_tw_recycle=0</span><br><span class="line">vm.swappiness=0</span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line">vm.panic_on_oom=0</span><br><span class="line">fs.inotify.max_user_instances=8192</span><br><span class="line">fs.inotify.max_user_watches=1048576</span><br><span class="line">fs.file-max=52706963</span><br><span class="line">fs.nr_open=52706963</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">net.netfilter.nf_conntrack_max=2310720</span><br><span class="line"></span><br><span class="line"><span class="comment"># sysctl -p /etc/sysctl.d/kubernetes.conf</span></span><br></pre></td></tr></table></figure><ul><li>必须关闭 tcp_tw_recycle，否则和 NAT 冲突，会导致服务不通；</li><li>关闭 IPV6，防止触发 docker BUG；</li></ul><h4 id="2-5、设置系统时区"><a href="#2-5、设置系统时区" class="headerlink" title="2.5、设置系统时区"></a>2.5、设置系统时区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># timedatectl set-timezone Asia/Shanghai</span></span><br><span class="line"><span class="comment"># timedatectl set-local-rtc 0</span></span><br><span class="line"><span class="comment"># systemctl restart rsyslog </span></span><br><span class="line"><span class="comment"># systemctl restart crond</span></span><br></pre></td></tr></table></figure><h4 id="2-6、关闭无关的服务"><a href="#2-6、关闭无关的服务" class="headerlink" title="2.6、关闭无关的服务"></a>2.6、关闭无关的服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl stop postfix &amp;&amp; systemctl disable postfix</span></span><br></pre></td></tr></table></figure><h3 id="3、升级内核"><a href="#3、升级内核" class="headerlink" title="3、升级内核"></a>3、升级内核</h3><p>以下在master节点操作<br>CentOS 7.x 系统自带的 3.10.x 内核存在一些 Bugs，导致运行的 Docker、Kubernetes 不稳定，例如:</p><ul><li>1.高版本的 docker(1.13 以后) 启用了 3.10 kernel 实验支持的 kernel memory account 功能(无法关闭)，当节点压力大如频繁启动和停止容器时会导致 cgroup memory leak；</li><li>2.网络设备引用计数泄漏，会导致类似于报错：”kernel:unregister_netdevice: waiting for eth0 to become free. Usage count = 1”;<br>解决方案如下:</li><li>1.升级内核到 4.4.X 以上</li><li>2.或者，手动编译内核，disable CONFIG_MEMCG_KMEM 特性</li><li>或者，安装修复了该问题的 Docker 18.09.1 及以上的版本。但由于 kubelet 也会设置 kmem（它 vendor 了 runc），所以需要重新编译 kubelet 并指定 GOFLAGS=”-tags=nokmem”</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --branch v1.14.1 --single-branch --depth 1 https://github.com/kubernetes/kubernetes</span><br><span class="line"><span class="built_in">cd</span> kubernetes</span><br><span class="line">KUBE_GIT_VERSION=v1.14.1 ./build/run.sh make kubelet GOFLAGS=<span class="string">"-tags=nokmem"</span></span><br></pre></td></tr></table></figure><h4 id="3-1、内核升级方法"><a href="#3-1、内核升级方法" class="headerlink" title="3.1、内核升级方法"></a>3.1、内核升级方法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span></span><br><span class="line"><span class="comment"># 安装完成后检查 /boot/grub2/grub.cfg 中对应内核 menuentry 中是否包含 initrd16 配置，如果没有，再安装一次！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yum --enablerepo=elrepo-kernel install -y kernel-lt</span></span><br><span class="line"><span class="comment"># 设置开机从新内核启动</span></span><br><span class="line"><span class="comment"># grub2-set-default 0</span></span><br></pre></td></tr></table></figure><h4 id="3-2、安装内核源文件"><a href="#3-2、安装内核源文件" class="headerlink" title="3.2、安装内核源文件"></a>3.2、安装内核源文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum --enablerepo=elrepo-kernel install kernel-lt-devel-$(uname -r) kernel-lt-headers-$(uname -r)</span></span><br></pre></td></tr></table></figure><h4 id="3-3、关闭-NUMA"><a href="#3-3、关闭-NUMA" class="headerlink" title="3.3、关闭 NUMA"></a>3.3、关闭 NUMA</h4><p>在其中一台master节点操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp /etc/default/grub&#123;,.bak&#125;</span></span><br><span class="line"><span class="comment"># 在 GRUB_CMDLINE_LINUX 一行添加 `numa=off` 参数，如下所示</span></span><br><span class="line"><span class="comment"># cat /etc/default/grub</span></span><br><span class="line">GRUB_TIMEOUT=1</span><br><span class="line">GRUB_DISTRIBUTOR=<span class="string">"<span class="variable">$(sed 's, release .*$,,g' /etc/system-release)</span>"</span></span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_DISABLE_SUBMENU=<span class="literal">true</span></span><br><span class="line">GRUB_TERMINAL=<span class="string">"serial console"</span></span><br><span class="line">GRUB_SERIAL_COMMAND=<span class="string">"serial --speed=115200"</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">"console=tty0 crashkernel=auto console=ttyS0,115200"</span></span><br><span class="line">numa=off</span><br><span class="line">GRUB_DISABLE_RECOVERY=<span class="string">"true"</span></span><br></pre></td></tr></table></figure><ul><li>重新生成 grub2 配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp /boot/grub2/grub.cfg&#123;,.bak&#125;</span></span><br><span class="line"><span class="comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4、创建CA证书和秘钥"><a href="#4、创建CA证书和秘钥" class="headerlink" title="4、创建CA证书和秘钥"></a>4、创建CA证书和秘钥</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为确保安全，kubernetes 系统各组件需要使用 x509 证书对通信进行加密和认证。CA (Certificate Authority) 是自签名的根证书，用来签名后续创建的其它证书。使用 CloudFlare 的 PKI 工具集 cfssl 创建所有证书，证书均在一台master节点进行操作，然后通过远程分发到其他的服务器上去。</p><ul><li><strong>注意</strong>: 每生成的证书均要进行分发到其他的master节点</li></ul><h4 id="4-1、安装-cfssl-工具集"><a href="#4-1、安装-cfssl-工具集" class="headerlink" title="4.1、安装 cfssl 工具集"></a>4.1、安装 cfssl 工具集</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -o cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span></span><br><span class="line"><span class="comment"># curl -o cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span></span><br><span class="line"><span class="comment"># curl -o cfssl-certinfo https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span></span><br><span class="line"><span class="comment"># chmod +x * &amp;&amp;mv cfssl* /usr/bin/</span></span><br><span class="line"><span class="comment"># scp /usr/bin/cfssl* &#123;master-ip&#125;:/usr/bin</span></span><br></pre></td></tr></table></figure><h4 id="4-2、创建根证书-CA"><a href="#4-2、创建根证书-CA" class="headerlink" title="4.2、创建根证书 (CA)"></a>4.2、创建根证书 (CA)</h4><p>CA 证书是集群所有节点共享的，只需要创建一个 CA 证书，后续创建的所有证书都由它签名。</p><h4 id="4-3、创建配置文件"><a href="#4-3、创建配置文件" class="headerlink" title="4.3、创建配置文件"></a>4.3、创建配置文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CA 配置文件用于配置根证书的使用场景 (profile) 和具体参数 (usage，过期时间、服务端认证、客户端认证、加密等)，后续在签名其它证书时需要指定特定场景。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir k8s &amp;&amp; cd k8s#后面k8s生成所需要的证书均在该目录执行</span></span><br></pre></td></tr></table></figure><ul><li><p>ca-config.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; ca-config.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"signing"</span>: &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">      <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profiles"</span>: &#123;</span><br><span class="line">      <span class="string">"kubernetes"</span>: &#123;</span><br><span class="line">        <span class="string">"usages"</span>: [</span><br><span class="line">            <span class="string">"signing"</span>,</span><br><span class="line">            <span class="string">"key encipherment"</span>,</span><br><span class="line">            <span class="string">"server auth"</span>,</span><br><span class="line">            <span class="string">"client auth"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>signing：表示该证书可用于签名其它证书，生成的 ca.pem 证书中 CA=TRUE；</p></li><li><p>server auth：表示 client 可以用该该证书对 server 提供的证书进行验证；</p></li><li><p>client auth：表示 server 可以用该该证书对 client 提供的证书进行验证；</p></li></ul><h4 id="4-4、创建证书签名请求文件"><a href="#4-4、创建证书签名请求文件" class="headerlink" title="4.4、创建证书签名请求文件"></a>4.4、创建证书签名请求文件</h4><ul><li><p>ca-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"ca"</span>: &#123;</span><br><span class="line">    <span class="string">"expiry"</span>: <span class="string">"876000h"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>CN：Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)，浏览器使用该字段验证网站是否合法；</p></li><li><p>O：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；</p></li><li><p>kube-apiserver 将提取的 User、Group 作为 RBAC 授权的用户标识；</p></li><li><p>生成 CA 证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span></span><br><span class="line"><span class="comment"># ls ca*</span></span><br><span class="line"><span class="comment"># mkdir -p /etc/kubernetes/ssl &amp;&amp; cp ca*.pem ca-config.json /etc/kubernetes/ssl</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-部署-kubectl-命令行工具"><a href="#5-部署-kubectl-命令行工具" class="headerlink" title="5.部署 kubectl 命令行工具"></a>5.部署 kubectl 命令行工具</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubectl 默认从 ~/.kube/config 文件读取 kube-apiserver 地址和认证信息，如果没有配置，执行 kubectl 命令时可能会出错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods</span></span><br><span class="line">The connection to the server localhost:8080 was refused - did you specify the right host or port?</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>:</li></ul><ul><li>本文档只需要部署一次，生成的 kubeconfig 文件是通用的，可以拷贝到需要执行 kubectl 命令的机器，重命名为 ~/.kube/config；</li></ul><h4 id="5-1、下载和分发-kubectl-二进制文件"><a href="#5-1、下载和分发-kubectl-二进制文件" class="headerlink" title="5.1、下载和分发 kubectl 二进制文件"></a>5.1、下载和分发 kubectl 二进制文件</h4><p>这里吧把node和master所需要的包均给一次性分发</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://dl.k8s.io/v1.14.6/kubernetes-server-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar -xzvf kubernetes-client-linux-amd64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># master 节点</span></span><br><span class="line"><span class="comment"># scp kubernetes/server/bin/&#123;apiextensions-apiserver,cloud-controller-manager,kube-apiserver,kube-controller-manager,kube-proxy,kube-scheduler,kubeadm,kubectl,kubelet,mounter&#125; &#123;master-ip&#125;:/usr/bin/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># node 节点</span></span><br><span class="line"><span class="comment"># scp kubernetes/server/bin/&#123;kube-proxy,kubelet&#125; &#123;node-ip&#125;:/usr/bin/</span></span><br></pre></td></tr></table></figure><h4 id="5-2、创建-admin-证书和私钥"><a href="#5-2、创建-admin-证书和私钥" class="headerlink" title="5.2、创建 admin 证书和私钥"></a>5.2、创建 admin 证书和私钥</h4><p>kubectl 与 apiserver https 安全端口通信，apiserver 对提供的证书进行认证和授权。<br>kubectl 作为集群的管理工具，需要被授予最高权限，这里创建具有<strong>最高权限</strong>的 admin 证书。</p><ul><li><p>创建证书签名请求:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; admin-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"admin"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"system:masters"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>O 为 system:masters，kube-apiserver 收到该证书后将请求的 Group 设置为 system:masters；</p></li><li><p>预定义的 ClusterRoleBinding cluster-admin 将 Group system:masters 与 Role cluster-admin 绑定，该 Role 授予所有 API的权限；</p></li><li><p>该证书只会被 kubectl 当做 client 证书使用，所以 hosts 字段为空；</p></li><li><p>生成证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json  -profile=kubernetes admin-csr.json | cfssljson -bare admin</span></span><br><span class="line"><span class="comment"># ls admin*</span></span><br><span class="line"><span class="comment"># cp admin*.pem /etc/kubernetes/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3、创建-kubeconfig-文件"><a href="#5-3、创建-kubeconfig-文件" class="headerlink" title="5.3、创建 kubeconfig 文件"></a>5.3、创建 kubeconfig 文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubeconfig 为 kubectl 的配置文件，包含访问 apiserver 的所有信息，如 apiserver 地址、CA 证书和自身使用的证书；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置集群API地址</span></span><br><span class="line"><span class="comment"># KUBE_APISERVER="https://172.21.16.45:8443"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kubectl.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials admin \</span><br><span class="line">  --client-certificate=admin.pem \</span><br><span class="line">  --client-key=admin-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kubectl.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context kubernetes \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=admin \</span><br><span class="line">  --kubeconfig=kubectl.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context kubernetes --kubeconfig=kubectl.kubeconfig</span><br></pre></td></tr></table></figure><ul><li><strong>提示</strong>: 分发<code>kubectl.kubeconfig</code>文件，吧文件命名<code>~/.kube/config</code>;</li><li>–certificate-authority：验证 kube-apiserver 证书的根证书；</li><li>–client-certificate、–client-key：刚生成的 admin 证书和私钥，连接 kube-apiserver 时使用；</li><li>–embed-certs=true：将 ca.pem 和 admin.pem 证书内容嵌入到生成的 kubectl.kubeconfig 文件中(不加时，写入的是证书文件路径，后续拷贝 kubeconfig 到其它机器时，还需要单独拷贝证书文件，不方便。)；</li></ul><h3 id="6、部署etcd集群"><a href="#6、部署etcd集群" class="headerlink" title="6、部署etcd集群"></a>6、部署etcd集群</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;etcd 是基于 Raft 的分布式 key-value 存储系统，由 CoreOS 开发，常用于服务发现、共享配置以及并发控制（如 leader 选举、分布式锁等）。kubernetes 使用 etcd 存储所有运行数据。</p><p>三节点高可用 etcd 集群的步骤：</p><ul><li>下载和分发 etcd 二进制文件；</li><li>创建 etcd 集群各节点的 x509 证书，用于加密客户端(如 etcdctl) 与 etcd 集群、etcd 集群之间的数据流；</li><li>创建 etcd 的 systemd unit 文件，配置服务参数</li><li>检查集群工作状态;</li></ul><ul><li><strong>注意</strong>: 均在一台master<code>[etcd]</code>节点操作，其他master<code>[etcd]</code>节点通过分发</li></ul><h4 id="6-1、下载和分发-etcd-二进制文件"><a href="#6-1、下载和分发-etcd-二进制文件" class="headerlink" title="6.1、下载和分发 etcd 二进制文件"></a>6.1、下载和分发 etcd 二进制文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir etcd &amp;&amp;cd etcd</span></span><br><span class="line"><span class="comment"># https://github.com/coreos/etcd/releases/download/v3.3.13/etcd-v3.3.13-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar -xvf etcd-v3.3.13-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># scp etcd* &#123;master-ip&#125;:/usr/bin/</span></span><br></pre></td></tr></table></figure><h4 id="6-2、创建-etcd-证书和私钥"><a href="#6-2、创建-etcd-证书和私钥" class="headerlink" title="6.2、创建 etcd 证书和私钥"></a>6.2、创建 etcd 证书和私钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; etcd-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"172.21.17.30"</span>,</span><br><span class="line">    <span class="string">"172.21.17.31"</span>,</span><br><span class="line">    <span class="string">"172.21.16.110"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>hosts 字段指定授权使用该证书的 etcd 节点 IP 或域名列表，需要将 etcd 集群的三个节点 IP 都列在其中；</li><li>生成证书和私钥<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd</span></span><br><span class="line"><span class="comment"># ls etcd*pem</span></span><br><span class="line"><span class="comment"># mkdir -p /etc/etcd/ssl &amp;&amp; cp etcd*pem /etc/etcd/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-3、创建-etcd-的-systemd-unit-模板文件"><a href="#6-3、创建-etcd-的-systemd-unit-模板文件" class="headerlink" title="6.3、创建 etcd 的 systemd unit 模板文件"></a>6.3、创建 etcd 的 systemd unit 模板文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/systemd/system/etcd.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Documentation=https://github.com/coreos</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/data</span><br><span class="line">ExecStart=/usr/bin/etcd \</span><br><span class="line">  --data-dir=/var/lib/etcd/data \</span><br><span class="line">  --wal-dir=/var/lib/etcd/wal \</span><br><span class="line">  --name=etcd1 \<span class="comment">#根据节点名称进行变化</span></span><br><span class="line">  --cert-file=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --trusted-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --peer-cert-file=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">  --peer-key-file=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --peer-client-cert-auth \</span><br><span class="line">  --client-cert-auth \</span><br><span class="line">  --listen-peer-urls=https://172.21.17.30:2380 \</span><br><span class="line">  --initial-advertise-peer-urls=https://172.21.17.30:2380 \</span><br><span class="line">  --listen-client-urls=https://172.21.17.30:2379,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls=https://172.21.17.30:2379 \</span><br><span class="line">  --initial-cluster-token=etcd-cluster-0 \</span><br><span class="line">  --initial-cluster=etcd1=https://172.21.17.30:2380,etcd2=https://172.21.17.31:2380,etcd3=https://172.21.16.110:2380 \</span><br><span class="line">  --initial-cluster-state=new \</span><br><span class="line">  --auto-compaction-mode=periodic \</span><br><span class="line">  --auto-compaction-retention=1 \</span><br><span class="line">  --max-request-bytes=33554432 \</span><br><span class="line">  --quota-backend-bytes=6442450944 \</span><br><span class="line">  --heartbeat-interval=250 \</span><br><span class="line">  --election-timeout=2000</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir -p /var/lib/etcd/&#123;data,wal&#125;</span></span><br></pre></td></tr></table></figure><ul><li>WorkingDirectory、–data-dir：指定工作目录和数据目录为 ${ETCD_DATA_DIR}，需在启动服务前创建这个目录；</li><li>–wal-dir：指定 wal 目录，为了提高性能，一般使用 SSD 或者和 –data-dir 不同的磁盘；</li><li>–name：指定节点名称，当 –initial-cluster-state 值为 new 时，–name 的参数值必须位于 –initial-cluster 列表中；</li><li>–cert-file、–key-file：etcd server 与 client 通信时使用的证书和私钥；</li><li>–trusted-ca-file：签名 client 证书的 CA 证书，用于验证 client 证书；</li><li>–peer-cert-file、–peer-key-file：etcd 与 peer 通信使用的证书和私钥；</li><li>–peer-trusted-ca-file：签名 peer 证书的 CA 证书，用于验证 peer 证书；</li></ul><h4 id="6-4、启动-etcd-服务"><a href="#6-4、启动-etcd-服务" class="headerlink" title="6.4、启动 etcd 服务"></a>6.4、启动 etcd 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable etcd &amp;&amp; systemctl restart etcd &amp;&amp; systemctl status etcd</span></span><br></pre></td></tr></table></figure><h4 id="6-5、检查启动结果"><a href="#6-5、检查启动结果" class="headerlink" title="6.5、检查启动结果"></a>6.5、检查启动结果</h4><ul><li>确保状态为 active (running)，否则查看日志，确认原因：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># journalctl -u etcd</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-6、验证服务状态"><a href="#6-6、验证服务状态" class="headerlink" title="6.6、验证服务状态"></a>6.6、验证服务状态</h4><p>部署完 etcd 集群后，在任一 etcd 节点上执行如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ETCDCTL_API=3 etcdctl \</span></span><br><span class="line">    --endpoints=https://172.21.17.31:2379 \</span><br><span class="line">    --cacert=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">    --cert=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">    --key=/etc/etcd/ssl/etcd-key.pem endpoint health</span><br></pre></td></tr></table></figure><p>检查输出均为 healthy 时表示集群服务正常</p><h4 id="6-7、查看当前的-leader"><a href="#6-7、查看当前的-leader" class="headerlink" title="6.7、查看当前的 leader"></a>6.7、查看当前的 leader</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ETCD_ENDPOINTS="https://172.21.17.30:2379,https://172.21.17.31:2379,https://172.21.16.110:2379"</span></span><br><span class="line"><span class="comment"># ETCDCTL_API=3 etcdctl \</span></span><br><span class="line">  -w table --cacert=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">  --key=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> endpoint status </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">+----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|          ENDPOINT          |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |</span><br><span class="line">+----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|  https://172.21.17.30:2379 | 5d23ebc4382fa16f |  3.3.13 |  1.2 MB |     <span class="literal">false</span> |        83 |      58127 |</span><br><span class="line">|  https://172.21.17.31:2379 |  ceaae5134701946 |  3.3.13 |  1.2 MB |     <span class="literal">false</span> |        83 |      58127 |</span><br><span class="line">| https://172.21.16.110:2379 | 575020c8e15d3a06 |  3.3.13 |  1.2 MB |      <span class="literal">true</span> |        83 |      58128 |</span><br><span class="line">+----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br></pre></td></tr></table></figure><ul><li>当前的 leader 为 172.21.16.110</li></ul><h3 id="7、部署-flannel-网络"><a href="#7、部署-flannel-网络" class="headerlink" title="7、部署 flannel 网络"></a>7、部署 flannel 网络</h3><p>flannel 网络部署在node节点，证书在master节点生成分发</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubernetes 要求集群内各节点(包括 master 节点)能通过 Pod 网段互联互通。flannel 使用 vxlan 技术为各节点创建一个可以互通的 Pod 网络，使用的端口为 UDP 8472（需要开放该端口）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flanneld 第一次启动时，从 etcd 获取配置的 Pod 网段信息，为本节点分配一个未使用的地址段，然后创建 flannedl.1 网络接口（也可能是其它名称，如 flannel1 等）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flannel 将分配给自己的 Pod 网段信息写入 /run/flannel/docker 文件，docker 后续使用这个文件中的环境变量设置 docker0 网桥，从而从这个地址段为本节点的所有 Pod 容器分配 IP。</p><h4 id="7-1、下载和分发-flanneld-二进制文件"><a href="#7-1、下载和分发-flanneld-二进制文件" class="headerlink" title="7.1、下载和分发 flanneld 二进制文件"></a>7.1、下载和分发 flanneld 二进制文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir flannel &amp;&amp;cd flannel</span></span><br><span class="line"><span class="comment"># wget https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar -xzvf flannel-v0.11.0-linux-amd64.tar.gz -C flannel</span></span><br></pre></td></tr></table></figure><ul><li>分发flanneld 可执行文件到node节点</li></ul><h4 id="7-2、创建-flannel-证书和私钥"><a href="#7-2、创建-flannel-证书和私钥" class="headerlink" title="7.2、创建 flannel 证书和私钥"></a>7.2、创建 flannel 证书和私钥</h4><ul><li><p>flanneld-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; flanneld-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"flanneld"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>该证书只会被 kubectl 当做 client 证书使用，所以 hosts 字段为空；</p></li><li><p>生成证书和私钥:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes flanneld-csr.json | cfssljson -bare flanneld </span></span><br><span class="line"><span class="comment"># ls flanneld*pem</span></span><br><span class="line"><span class="comment"># scp flanneld*pem &#123;node-ip&#125;:/etc/flanneld/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="7-3、向-etcd-写入集群-Pod-网段信息"><a href="#7-3、向-etcd-写入集群-Pod-网段信息" class="headerlink" title="7.3、向 etcd 写入集群 Pod 网段信息"></a>7.3、向 etcd 写入集群 Pod 网段信息</h4><p><strong>注意</strong>：本步骤只需执行一次。在etcd集群上执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">etcdctl \</span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert-file=flanneld.pem \</span><br><span class="line">  --key-file=flanneld-key.pem \</span><br><span class="line">  mk /kubernetes/network/config <span class="string">'&#123;"Network":"172.30.0.0/16", "SubnetLen": 21, "Backend": &#123;"Type": "vxlan"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>flanneld 当前版本 (v0.11.0) 不支持 etcd v3，故使用 etcd v2 API 写入配置 key 和网段数据；</li><li>写入的 Pod 网段 ${CLUSTER_CIDR} 地址段（如 /16）必须小于 SubnetLen，必须与 kube-controller-manager 的 –cluster-cidr 参数值一致；</li></ul><h4 id="7-4、创建-flanneld-的-systemd-unit-文件"><a href="#7-4、创建-flanneld-的-systemd-unit-文件" class="headerlink" title="7.4、创建 flanneld 的 systemd unit 文件"></a>7.4、创建 flanneld 的 systemd unit 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/flanneld.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=etcd.service</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/bin/flanneld \</span><br><span class="line">  -etcd-cafile=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  -etcd-certfile=/etc/flanneld/ssl/flanneld.pem \</span><br><span class="line">  -etcd-keyfile=/etc/flanneld/ssl/flanneld-key.pem \</span><br><span class="line">  -etcd-endpoints=https://172.21.17.30:2379,https://172.21.17.31:2379,https://172.21.16.110:2379 \</span><br><span class="line">  -etcd-prefix=/kubernetes/network \</span><br><span class="line">  -iface=eth0 \</span><br><span class="line">  -ip-masq</span><br><span class="line">ExecStartPost=/usr/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">StartLimitInterval=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">RequiredBy=docker.service</span><br></pre></td></tr></table></figure><ul><li>mk-docker-opts.sh 脚本将分配给 flanneld 的 Pod 子网段信息写入 /run/flannel/docker 文件，后续 docker 启动时使用这个文件中的环境变量配置 docker0 网桥；</li><li>flanneld 使用系统缺省路由所在的接口与其它节点通信，对于有多个网络接口（如内网和公网）的节点，可以用 -iface 参数指定通信接口;</li><li>flanneld 运行时需要 root 权限；</li><li>-ip-masq: flanneld 为访问 Pod 网络外的流量设置 SNAT 规则，同时将传递给 Docker 的变量 –ip-masq（/run/flannel/docker 文件中）设置为 false，这样 Docker 将不再创建 SNAT 规则； Docker 的 –ip-masq 为 true 时，创建的 SNAT 规则比较“暴力”：将所有本节点 Pod 发起的、访问非 docker0 接口的请求做 SNAT，这样访问其他节点 Pod 的请求来源 IP 会被设置为 flannel.1 接口的 IP，导致目的 Pod 看不到真实的来源 Pod IP。 flanneld 创建的 SNAT 规则比较温和，只对访问非 Pod 网段的请求做 SNAT。</li></ul><h4 id="7-5、启动-flanneld-服务"><a href="#7-5、启动-flanneld-服务" class="headerlink" title="7.5、启动 flanneld 服务"></a>7.5、启动 flanneld 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable flanneld &amp;&amp; systemctl restart flanneld &amp;&amp; systemctl status flanneld</span></span><br></pre></td></tr></table></figure><h4 id="7-6、检查分配给各-flanneld-的-Pod-网段信息"><a href="#7-6、检查分配给各-flanneld-的-Pod-网段信息" class="headerlink" title="7.6、检查分配给各 flanneld 的 Pod 网段信息"></a>7.6、检查分配给各 flanneld 的 Pod 网段信息</h4><ul><li><p>查看集群 Pod 网段(/16)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl \</span></span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert-file=/etc/flanneld/ssl/flanneld.pem \</span><br><span class="line">  --key-file=/etc/flanneld/ssl/flanneld-key.pem \</span><br><span class="line">  get /kubernetes/network/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">"Network"</span>:<span class="string">"172.30.0.0/16"</span>, <span class="string">"SubnetLen"</span>: 21, <span class="string">"Backend"</span>: &#123;<span class="string">"Type"</span>: <span class="string">"vxlan"</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看已分配的 Pod 子网段列表(/24):</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl \</span></span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert-file=/etc/flanneld/ssl/flanneld.pem \</span><br><span class="line">  --key-file=/etc/flanneld/ssl/flanneld-key.pem \</span><br><span class="line">  ls /kubernetes/network/subnets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">/kubernetes/network/subnets/172.30.232.0-21</span><br><span class="line">/kubernetes/network/subnets/172.30.128.0-21</span><br><span class="line">/kubernetes/network/subnets/172.30.176.0-21</span><br></pre></td></tr></table></figure></li><li><p>查看某一 Pod 网段对应的节点 IP 和 flannel 接口地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl \</span></span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert-file=/etc/flanneld/ssl/flanneld.pem \</span><br><span class="line">  --key-file=/etc/flanneld/ssl/flanneld-key.pem \</span><br><span class="line">  get /kubernetes/network/subnets/172.30.232.0-21</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">&#123;<span class="string">"PublicIP"</span>:<span class="string">"172.21.16.204"</span>,<span class="string">"BackendType"</span>:<span class="string">"vxlan"</span>,<span class="string">"BackendData"</span>:&#123;<span class="string">"VtepMAC"</span>:<span class="string">"f6:50:05:5c:9a:20"</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>172.30.232.0/21 被分配给节点172.21.16.204）；</p></li><li><p>VtepMAC 为172.21.16.204节点的 flannel.1 网卡 MAC 地址；</p></li></ul><h4 id="7-7、检查节点-flannel-网络信息"><a href="#7-7、检查节点-flannel-网络信息" class="headerlink" title="7.7、检查节点 flannel 网络信息"></a>7.7、检查节点 flannel 网络信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip addr show</span></span><br></pre></td></tr></table></figure><ul><li><p>flannel.1 网卡的地址为分配的 Pod 子网段的第一个 IP（.0），且是 /32 的地址；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip route show |grep flannel.1</span></span><br><span class="line">172.30.128.0/21 via 172.30.128.0 dev flannel.1 onlink </span><br><span class="line">172.30.176.0/21 via 172.30.176.0 dev flannel.1 onlink</span><br></pre></td></tr></table></figure></li><li><p>到其它节点 Pod 网段请求都被转发到 flannel.1 网卡；</p></li><li><p>flanneld 根据 etcd 中子网段的信息，如/kubernetes/network/subnets/172.30.232.0-21 ，来决定进请求发送给哪个节点的互联 IP；</p></li><li><p>验证各节点能通过 Pod 网段互通</p></li></ul><h3 id="8、master节点部署"><a href="#8、master节点部署" class="headerlink" title="8、master节点部署"></a>8、master节点部署</h3><p>kubernetes master 节点运行如下组件：</p><ul><li>kube-apiserver</li><li>kube-scheduler</li><li>kube-controller-manager<br>kube-apiserver、kube-scheduler 和 kube-controller-manager 均以多实例模式运行：<br>1、kube-scheduler 和 kube-controller-manager 会自动选举产生一个 leader 实例，其它实例处于阻塞模式，当 leader 挂了后，重新选举产生新的 leader，从而保证服务可用性；<br>2、kube-apiserver 是无状态的，需要通过<a href="https://xxlaila.github.io/2019/08/10/haproxy-keepalived/" target="_blank" rel="noopener">haproxy+keepalived</a>进行代理访问，从而保证服务可用性；</li></ul><h4 id="8-1、创建-kubernetes-证书和私钥"><a href="#8-1、创建-kubernetes-证书和私钥" class="headerlink" title="8.1、创建 kubernetes 证书和私钥"></a>8.1、创建 kubernetes 证书和私钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; kubernetes-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"172.21.17.30"</span>,</span><br><span class="line">    <span class="string">"172.21.17.31"</span>,</span><br><span class="line">    <span class="string">"172.21.16.110"</span>,</span><br><span class="line">    <span class="string">"172.21.16.45"</span>,</span><br><span class="line">    <span class="string">"10.254.0.1"</span>,</span><br><span class="line">    <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc.cluster.local."</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li><p>hosts 字段指定授权使用该证书的 IP 和域名列表，这里列出了 master 节点 IP、kubernetes 服务的 IP 和域名,以及VIP地址；</p></li><li><p>kubernetes 服务 IP 是 apiserver 自动创建的，一般是 –service-cluster-ip-range 参数指定的网段的第一个IP,后续可以通过下面命令获取：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc kubernetes</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.254.0.1   &lt;none&gt;        443/TCP   4h13m</span><br></pre></td></tr></table></figure></li><li><p>生成证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes</span></span><br><span class="line"><span class="comment"># ls kubernetes*pem</span></span><br><span class="line">kubernetes-key.pem  kubernetes.pem</span><br><span class="line"><span class="comment"># cp kubernetes*pem /etc/kubernetes/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="8-2、创建加密配置文件"><a href="#8-2、创建加密配置文件" class="headerlink" title="8.2、创建加密配置文件"></a>8.2、创建加密配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)</span></span><br><span class="line"><span class="comment"># cat &gt; encryption-config.yaml &lt;&lt;EOF</span></span><br><span class="line">kind: EncryptionConfig</span><br><span class="line">apiVersion: v1</span><br><span class="line">resources:</span><br><span class="line">  - resources:</span><br><span class="line">      - secrets</span><br><span class="line">    providers:</span><br><span class="line">      - aescbc:</span><br><span class="line">          keys:</span><br><span class="line">            - name: key1</span><br><span class="line">              secret: <span class="variable">$&#123;ENCRYPTION_KEY&#125;</span></span><br><span class="line">      - identity: &#123;&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># cp encryption-config.yaml /etc/kubernetes/</span></span><br></pre></td></tr></table></figure><h4 id="8-3、创建审计策略文件"><a href="#8-3、创建审计策略文件" class="headerlink" title="8.3、创建审计策略文件"></a>8.3、创建审计策略文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; audit-policy.yaml &lt;&lt;EOF</span></span><br><span class="line">apiVersion: audit.k8s.io/v1beta1</span><br><span class="line">kind: Policy</span><br><span class="line">rules:</span><br><span class="line">  <span class="comment"># The following requests were manually identified as high-volume and low-risk, so drop them.</span></span><br><span class="line">  - level: None</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - endpoints</span><br><span class="line">          - services</span><br><span class="line">          - services/status</span><br><span class="line">    users:</span><br><span class="line">      - <span class="string">'system:kube-proxy'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - watch</span><br><span class="line"></span><br><span class="line">  - level: None</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - nodes</span><br><span class="line">          - nodes/status</span><br><span class="line">    userGroups:</span><br><span class="line">      - <span class="string">'system:nodes'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line"></span><br><span class="line">  - level: None</span><br><span class="line">    namespaces:</span><br><span class="line">      - kube-system</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - endpoints</span><br><span class="line">    users:</span><br><span class="line">      - <span class="string">'system:kube-controller-manager'</span></span><br><span class="line">      - <span class="string">'system:kube-scheduler'</span></span><br><span class="line">      - <span class="string">'system:serviceaccount:kube-system:endpoint-controller'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - update</span><br><span class="line"></span><br><span class="line">  - level: None</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - namespaces</span><br><span class="line">          - namespaces/status</span><br><span class="line">          - namespaces/finalize</span><br><span class="line">    users:</span><br><span class="line">      - <span class="string">'system:apiserver'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Don't log HPA fetching metrics.</span></span><br><span class="line">  - level: None</span><br><span class="line">    resources:</span><br><span class="line">      - group: metrics.k8s.io</span><br><span class="line">    users:</span><br><span class="line">      - <span class="string">'system:kube-controller-manager'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Don't log these read-only URLs.</span></span><br><span class="line">  - level: None</span><br><span class="line">    nonResourceURLs:</span><br><span class="line">      - <span class="string">'/healthz*'</span></span><br><span class="line">      - /version</span><br><span class="line">      - <span class="string">'/swagger*'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Don't log events requests.</span></span><br><span class="line">  - level: None</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - events</span><br><span class="line"></span><br><span class="line">  <span class="comment"># node and pod status calls from nodes are high-volume and can be large, don't log responses for expected updates from nodes</span></span><br><span class="line">  - level: Request</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - nodes/status</span><br><span class="line">          - pods/status</span><br><span class="line">    users:</span><br><span class="line">      - kubelet</span><br><span class="line">      - <span class="string">'system:node-problem-detector'</span></span><br><span class="line">      - <span class="string">'system:serviceaccount:kube-system:node-problem-detector'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - update</span><br><span class="line">      - patch</span><br><span class="line"></span><br><span class="line">  - level: Request</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - nodes/status</span><br><span class="line">          - pods/status</span><br><span class="line">    userGroups:</span><br><span class="line">      - <span class="string">'system:nodes'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - update</span><br><span class="line">      - patch</span><br><span class="line"></span><br><span class="line">  <span class="comment"># deletecollection calls can be large, don't log responses for expected namespace deletions</span></span><br><span class="line">  - level: Request</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    users:</span><br><span class="line">      - <span class="string">'system:serviceaccount:kube-system:namespace-controller'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - deletecollection</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Secrets, ConfigMaps, and TokenReviews can contain sensitive &amp; binary data,</span></span><br><span class="line">  <span class="comment"># so only log at the Metadata level.</span></span><br><span class="line">  - level: Metadata</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - secrets</span><br><span class="line">          - configmaps</span><br><span class="line">      - group: authentication.k8s.io</span><br><span class="line">        resources:</span><br><span class="line">          - tokenreviews</span><br><span class="line">  <span class="comment"># Get repsonses can be large; skip them.</span></span><br><span class="line">  - level: Request</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">      - group: admissionregistration.k8s.io</span><br><span class="line">      - group: apiextensions.k8s.io</span><br><span class="line">      - group: apiregistration.k8s.io</span><br><span class="line">      - group: apps</span><br><span class="line">      - group: authentication.k8s.io</span><br><span class="line">      - group: authorization.k8s.io</span><br><span class="line">      - group: autoscaling</span><br><span class="line">      - group: batch</span><br><span class="line">      - group: certificates.k8s.io</span><br><span class="line">      - group: extensions</span><br><span class="line">      - group: metrics.k8s.io</span><br><span class="line">      - group: networking.k8s.io</span><br><span class="line">      - group: policy</span><br><span class="line">      - group: rbac.authorization.k8s.io</span><br><span class="line">      - group: scheduling.k8s.io</span><br><span class="line">      - group: settings.k8s.io</span><br><span class="line">      - group: storage.k8s.io</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default level for known APIs</span></span><br><span class="line">  - level: RequestResponse</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">      - group: admissionregistration.k8s.io</span><br><span class="line">      - group: apiextensions.k8s.io</span><br><span class="line">      - group: apiregistration.k8s.io</span><br><span class="line">      - group: apps</span><br><span class="line">      - group: authentication.k8s.io</span><br><span class="line">      - group: authorization.k8s.io</span><br><span class="line">      - group: autoscaling</span><br><span class="line">      - group: batch</span><br><span class="line">      - group: certificates.k8s.io</span><br><span class="line">      - group: extensions</span><br><span class="line">      - group: metrics.k8s.io</span><br><span class="line">      - group: networking.k8s.io</span><br><span class="line">      - group: policy</span><br><span class="line">      - group: rbac.authorization.k8s.io</span><br><span class="line">      - group: scheduling.k8s.io</span><br><span class="line">      - group: settings.k8s.io</span><br><span class="line">      - group: storage.k8s.io</span><br><span class="line">      </span><br><span class="line">  <span class="comment"># Default level for all other requests.</span></span><br><span class="line">  - level: Metadata</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp audit-policy.yaml /etc/kubernetes/</span></span><br></pre></td></tr></table></figure><h4 id="8-4、创建后续访问-metrics-server-使用的证书"><a href="#8-4、创建后续访问-metrics-server-使用的证书" class="headerlink" title="8.4、创建后续访问 metrics-server 使用的证书"></a>8.4、创建后续访问 metrics-server 使用的证书</h4><ul><li><p>创建证书签名请求:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; proxy-client-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"aggregator"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>CN 名称需要位于 kube-apiserver 的 –requestheader-allowed-names 参数中，否则后续访问 metrics 时会提示权限不足。</p></li><li><p>生成证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem  -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes proxy-client-csr.json | cfssljson -bare proxy-client</span></span><br><span class="line"><span class="comment"># ls proxy-client*.pem</span></span><br><span class="line">proxy-client-key.pem  proxy-client.pem</span><br><span class="line"><span class="comment"># cp proxy-client*.pem /etc/kubernetes/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="8-5、创建-kube-apiserver-systemd-unit-模板文件"><a href="#8-5、创建-kube-apiserver-systemd-unit-模板文件" class="headerlink" title="8.5、创建 kube-apiserver systemd unit 模板文件"></a>8.5、创建 kube-apiserver systemd unit 模板文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-apiserver.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/<span class="built_in">log</span>/k8s/kube-apiserver</span><br><span class="line">ExecStart=/usr/bin/kube-apiserver \</span><br><span class="line">  --advertise-address=172.21.17.30 \<span class="comment">#master 节点的ip</span></span><br><span class="line">  --default-not-ready-toleration-seconds=360 \</span><br><span class="line">  --default-unreachable-toleration-seconds=360 \</span><br><span class="line">  --feature-gates=DynamicAuditing=<span class="literal">true</span> \</span><br><span class="line">  --max-mutating-requests-inflight=2000 \</span><br><span class="line">  --max-requests-inflight=4000 \</span><br><span class="line">  --default-watch-cache-size=200 \</span><br><span class="line">  --delete-collection-workers=2 \</span><br><span class="line">  --encryption-provider-config=/etc/kubernetes/encryption-config.yaml \</span><br><span class="line">  --etcd-cafile=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --etcd-certfile=/etc/kubernetes/ssl/kubernetes.pem \</span><br><span class="line">  --etcd-keyfile=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="line">  --etcd-servers=https://172.21.17.30:2379,https://172.21.17.31:2379,https://172.21.16.110:2379 \</span><br><span class="line">  --<span class="built_in">bind</span>-address=0.0.0.0 \</span><br><span class="line">  --secure-port=6443 \</span><br><span class="line">  --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem \</span><br><span class="line">  --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="line">  --insecure-port=0 \</span><br><span class="line">  --audit-dynamic-configuration \</span><br><span class="line">  --audit-log-maxage=15 \</span><br><span class="line">  --audit-log-maxbackup=3 \</span><br><span class="line">  --audit-log-maxsize=100 \</span><br><span class="line">  --audit-log-truncate-enabled \</span><br><span class="line">  --audit-log-path=/var/<span class="built_in">log</span>/k8s/kube-apiserver/audit.log \</span><br><span class="line">  --audit-policy-file=/etc/kubernetes/audit-policy.yaml \</span><br><span class="line">  --profiling \</span><br><span class="line">  --anonymous-auth=<span class="literal">false</span> \</span><br><span class="line">  --client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --<span class="built_in">enable</span>-bootstrap-token-auth \</span><br><span class="line">  --requestheader-allowed-names=aggregator \</span><br><span class="line">  --requestheader-client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --requestheader-extra-headers-prefix=X-Remote-Extra- \</span><br><span class="line">  --requestheader-group-headers=X-Remote-Group \</span><br><span class="line">  --requestheader-username-headers=X-Remote-User \</span><br><span class="line">  --service-account-key-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --authorization-mode=Node,RBAC \</span><br><span class="line">  --runtime-config=api/all=<span class="literal">true</span> \</span><br><span class="line">  --<span class="built_in">enable</span>-admission-plugins=DefaultStorageClass,DefaultTolerationSeconds,LimitRanger,NamespaceExists,NamespaceLifecycle,NodeRestriction,OwnerReferencesPermissionEnforcement,PodNodeSelector,PersistentVolumeClaimResize,PodPreset,PodTolerationRestriction,ResourceQuota,ServiceAccount,StorageObjectInUseProtection,MutatingAdmissionWebhook,ValidatingAdmissionWebhook \</span><br><span class="line">  --allow-privileged=<span class="literal">true</span> \</span><br><span class="line">  --apiserver-count=3 \</span><br><span class="line">  --cors-allowed-origins=.* \</span><br><span class="line">  --<span class="built_in">enable</span>-swagger-ui \</span><br><span class="line">  --event-ttl=168h \</span><br><span class="line">  --kubelet-certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --kubelet-client-certificate=/etc/kubernetes/ssl/kubernetes.pem \</span><br><span class="line">  --kubelet-client-key=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="line">  --kubelet-https=<span class="literal">true</span> \</span><br><span class="line">  --kubelet-timeout=10s \</span><br><span class="line">  --proxy-client-cert-file=/etc/kubernetes/ssl/proxy-client.pem \</span><br><span class="line">  --proxy-client-key-file=/etc/kubernetes/ssl/proxy-client-key.pem \</span><br><span class="line">  --service-cluster-ip-range=10.254.0.0/16 \</span><br><span class="line">  --service-node-port-range=30000-32767 \</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \</span><br><span class="line">  --<span class="built_in">enable</span>-aggregator-routing=<span class="literal">true</span> \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10</span><br><span class="line">Type=notify</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir -p /var/log/k8s/kube-apiserver</span></span><br></pre></td></tr></table></figure><ul><li>–advertise-address：apiserver 对外通告的 IP（kubernetes 服务后端节点 IP）；</li><li>–default-*-toleration-seconds：设置节点异常相关的阈值；</li><li>–max-*-requests-inflight：请求相关的最大阈值；</li><li>–etcd-*：访问 etcd 的证书和 etcd 服务器地址；</li><li>–experimental-encryption-provider-config：指定用于加密 etcd 中 secret 的配置；</li><li>–bind-address： https 监听的 IP，不能为 127.0.0.1，否则外界不能访问它的安全端口 6443；</li><li>–secret-port：https 监听端口；</li><li>–insecure-port=0：关闭监听 http 非安全端口(8080)；</li><li>–tls-*-file：指定 apiserver 使用的证书、私钥和 CA 文件；</li><li>–audit-*：配置审计策略和审计日志文件相关的参数；</li><li>–client-ca-file：验证 client (kue-controller-manager、kube-scheduler、kubelet、kube-proxy 等)请求所带的证书；</li><li>–enable-bootstrap-token-auth：启用 kubelet bootstrap 的 token 认证；</li><li>–requestheader-*：kube-apiserver 的 aggregator layer 相关的配置参数，proxy-client &amp; HPA 需要使用；</li><li>–requestheader-client-ca-file：用于签名 –proxy-client-cert-file 和 –proxy-client-key-file 指定的证书；在启用了 metric aggregator 时使用；</li><li>–requestheader-allowed-names：不能为空，值为逗号分割的 –proxy-client-cert-file 证书的 CN 名称，这里设置为 “aggregator”；</li><li>–service-account-key-file：签名 ServiceAccount Token 的公钥文件，kube-controller-manager 的 –service-account-private-key-file 指定私钥文件，两者配对使用；</li><li>–runtime-config=api/all=true： 启用所有版本的 APIs，如 autoscaling/v2alpha1；</li><li>–authorization-mode=Node,RBAC、–anonymous-auth=false： 开启 Node 和 RBAC 授权模式，拒绝未授权的请求；</li><li>–enable-admission-plugins：启用一些默认关闭的 plugins；</li><li>–allow-privileged：运行执行 privileged 权限的容器；</li><li>–apiserver-count=3：指定 apiserver 实例的数量；</li><li>–event-ttl：指定 events 的保存时间；</li><li>–kubelet-<em>：如果指定，则使用 https 访问 kubelet APIs；需要为证书对应的用户(上面 kubernetes</em>.pem 证书的用户为 kubernetes) 用户定义 RBAC 规则，否则访问 kubelet API 时提示未授权；</li><li>–proxy-client-*：apiserver 访问 metrics-server 使用的证书；</li><li>–service-cluster-ip-range： 指定 Service Cluster IP 地址段；</li><li>–service-node-port-range： 指定 NodePort 的端口范围；</li><li>如果 kube-apiserver 机器没有运行 kube-proxy，则还需要添加 –enable-aggregator-routing=true 参数</li></ul><p><strong>注意</strong>:<br>1.requestheader-client-ca-file 指定的 CA 证书，必须具有 client auth and server auth；<br>2.如果 –requestheader-allowed-names 为空，或者 –proxy-client-cert-file 证书的 CN 名称不在 allowed-names 中，则后续查看 node 或 pods 的 metrics 失败，提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl top nodes</span></span><br><span class="line">Error from server (Forbidden): nodes.metrics.k8s.io is forbidden: User <span class="string">"aggregator"</span> cannot list resource <span class="string">"nodes"</span> <span class="keyword">in</span> API group <span class="string">"metrics.k8s.io"</span> at the cluster scope</span><br></pre></td></tr></table></figure><h4 id="8-6、启动-kube-apiserver-服务"><a href="#8-6、启动-kube-apiserver-服务" class="headerlink" title="8.6、启动 kube-apiserver 服务"></a>8.6、启动 kube-apiserver 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable kube-apiserver &amp;&amp; systemctl restart kube-apiserver &amp;&amp;systemctl status kube-apiserver</span></span><br><span class="line"><span class="comment"># systemctl status kube-apiserver |grep 'Active:'</span></span><br><span class="line">   Active: active (running) since Mon 2019-09-16 14:38:31 CST; 1min 41s ago</span><br></pre></td></tr></table></figure><h4 id="8-6、打印-kube-apiserver-写入-etcd-的数据"><a href="#8-6、打印-kube-apiserver-写入-etcd-的数据" class="headerlink" title="8.6、打印 kube-apiserver 写入 etcd 的数据"></a>8.6、打印 kube-apiserver 写入 etcd 的数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ETCDCTL_API=3 etcdctl \</span></span><br><span class="line">    --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">    --cacert=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">    --cert=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">    --key=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">    get /registry/ --prefix --keys-only</span><br></pre></td></tr></table></figure><h4 id="8-9、检查集群信息"><a href="#8-9、检查集群信息" class="headerlink" title="8.9、检查集群信息"></a>8.9、检查集群信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl cluster-info</span></span><br><span class="line">Kubernetes master is running at https://172.21.16.45:8443</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use <span class="string">'kubectl cluster-info dump'</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get all --all-namespaces</span></span><br><span class="line">NAMESPACE   NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">default     service/kubernetes   ClusterIP   10.254.0.1   &lt;none&gt;        443/TCP   12m</span><br><span class="line"></span><br><span class="line"><span class="comment">#  kubectl get componentstatuses</span></span><br><span class="line">NAME                 STATUS      MESSAGE                                                                                     ERROR</span><br><span class="line">controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: connect: connection refused</span><br><span class="line">scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused</span><br><span class="line">etcd-0               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">etcd-2               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">etcd-1               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>执行 kubectl get componentstatuses 命令时，apiserver 默认向 127.0.0.1 发送请求。当 controller-manager、scheduler 以集群模式运行时，有可能和 kube-apiserver 不在一台机器上，这时 controller-manager 或 scheduler 的状态为 Unhealthy，但实际上它们工作正常。</li></ul><h4 id="8-10、检查-kube-apiserver-监听的端口"><a href="#8-10、检查-kube-apiserver-监听的端口" class="headerlink" title="8.10、检查 kube-apiserver 监听的端口"></a>8.10、检查 kube-apiserver 监听的端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -lnpt|grep kube</span></span><br><span class="line">tcp6       0      0 :::6443                 :::*                    LISTEN      10845/kube-apiserve</span><br></pre></td></tr></table></figure><ul><li>6443: 接收 https 请求的安全端口，对所有请求做认证和授权；</li><li>由于关闭了非安全端口，故没有监听 8080；</li></ul><h4 id="8-11、授予-kube-apiserver-访问-kubelet-API-的权限"><a href="#8-11、授予-kube-apiserver-访问-kubelet-API-的权限" class="headerlink" title="8.11、授予 kube-apiserver 访问 kubelet API 的权限"></a>8.11、授予 kube-apiserver 访问 kubelet API 的权限</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在执行 kubectl exec、run、logs 等命令时，apiserver 会将请求转发到 kubelet 的 https 端口。这里定义 RBAC 规则，授权 apiserver 使用的证书（kubernetes.pem）用户名（CN：kuberntes）访问 kubelet API 的权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes</span><br><span class="line">kubectl create clusterrolebinding kubelet-node-clusterbinding --clusterrole=system:node --group=system:nodes</span><br><span class="line">kubectl create clusterrolebinding --user system:serviceaccount:kube-system:default kube-system-cluster-admin --clusterrole cluster-admin</span><br></pre></td></tr></table></figure><h3 id="9、部署高可用-kube-controller-manager"><a href="#9、部署高可用-kube-controller-manager" class="headerlink" title="9、部署高可用 kube-controller-manager"></a>9、部署高可用 kube-controller-manager</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该集群包含 3 个节点，启动后将通过竞争选举机制产生一个 leader 节点，其它节点为阻塞状态。当 leader 节点不可用时，阻塞的节点将再次进行选举产生新的 leader 节点，从而保证服务的可用性。<br>为保证通信安全，本文档先生成 x509 证书和私钥，kube-controller-manager 在如下两种情况下使用该证书：<br>1、与 kube-apiserver 的安全端口通信;<br>2、在安全端口(https，10252) 输出 prometheus 格式的 metrics；</p><h4 id="9-1、创建-kube-controller-manager-证书和私钥"><a href="#9-1、创建-kube-controller-manager-证书和私钥" class="headerlink" title="9.1、创建 kube-controller-manager 证书和私钥"></a>9.1、创建 kube-controller-manager 证书和私钥</h4><ul><li><p>创建证书签名请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; kube-controller-manager-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"172.21.17.30"</span>,</span><br><span class="line">      <span class="string">"172.21.17.31"</span>,</span><br><span class="line">      <span class="string">"172.21.16.110"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">        <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">        <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">        <span class="string">"O"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">        <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>hosts 列表包含所有 kube-controller-manager 节点 IP；</p></li><li><p>CN 和 O 均为 system:kube-controller-manager，kubernetes 内置的 ClusterRoleBindings system:kube-controller-manager 赋予 kube-controller-manager 工作所需的权限。</p></li><li><p>生成证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json   -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager</span></span><br><span class="line"><span class="comment"># ls kube-controller-manager*pem</span></span><br><span class="line">kube-controller-manager-key.pem  kube-controller-manager.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp kube-controller-manager*pem /etc/kubernetes/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="9-2、创建和分发-kubeconfig-文件"><a href="#9-2、创建和分发-kubeconfig-文件" class="headerlink" title="9.2、创建和分发 kubeconfig 文件"></a>9.2、创建和分发 kubeconfig 文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kube-controller-manager 使用 kubeconfig 文件访问 apiserver，该文件提供了 apiserver 地址、嵌入的 CA 证书和 kube-controller-manager 证书：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-credentials system:kube-controller-manager \</span></span><br><span class="line">  --client-certificate=kube-controller-manager.pem \</span><br><span class="line">  --client-key=kube-controller-manager-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-context system:kube-controller-manager \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-controller-manager \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config use-context system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cp kube-controller-manager.kubeconfig /etc/kubernetes/</span></span><br></pre></td></tr></table></figure><h4 id="9-3、创建-kube-controller-manager-systemd-unit文件"><a href="#9-3、创建-kube-controller-manager-systemd-unit文件" class="headerlink" title="9.3、创建 kube-controller-manager systemd unit文件"></a>9.3、创建 kube-controller-manager systemd unit文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-controller-manager.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/<span class="built_in">log</span>/k8s/kube-controller-manager</span><br><span class="line">ExecStart=/usr/bin/kube-controller-manager \</span><br><span class="line">  --profiling \</span><br><span class="line">  --cluster-name=kubernetes \</span><br><span class="line">  --allocate-node-cidrs=<span class="literal">true</span> \</span><br><span class="line">  --cluster-cidr=10.244.0.0/16 \</span><br><span class="line">  --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="line">  --kube-api-qps=1000 \</span><br><span class="line">  --kube-api-burst=2000 \</span><br><span class="line">  --leader-elect \</span><br><span class="line">  --use-service-account-credentials\</span><br><span class="line">  --concurrent-service-syncs=2 \</span><br><span class="line">  --<span class="built_in">bind</span>-address=0.0.0.0 \</span><br><span class="line">  --secure-port=10252 \</span><br><span class="line">  --tls-cert-file=/etc/kubernetes/ssl/kube-controller-manager.pem \</span><br><span class="line">  --tls-private-key-file=/etc/kubernetes/ssl/kube-controller-manager-key.pem \</span><br><span class="line">  --port=0 \</span><br><span class="line">  --authentication-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span><br><span class="line">  --client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --requestheader-allowed-names=<span class="string">""</span> \</span><br><span class="line">  --requestheader-client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --requestheader-extra-headers-prefix=X-Remote-Extra- \</span><br><span class="line">  --requestheader-group-headers=X-Remote-Group \</span><br><span class="line">  --requestheader-username-headers=X-Remote-User \</span><br><span class="line">  --authorization-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span><br><span class="line">  --cluster-signing-cert-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cluster-signing-key-file=/etc/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --experimental-cluster-signing-duration=876000h \</span><br><span class="line">  --horizontal-pod-autoscaler-sync-period=10s \</span><br><span class="line">  --horizontal-pod-autoscaler-use-rest-clients=<span class="literal">true</span> \</span><br><span class="line">  --concurrent-deployment-syncs=10 \</span><br><span class="line">  --concurrent-gc-syncs=30 \</span><br><span class="line">  --node-cidr-mask-size=24 \</span><br><span class="line">  --service-cluster-ip-range=10.254.0.0/16 \</span><br><span class="line">  --pod-eviction-timeout=6m \</span><br><span class="line">  --terminated-pod-gc-threshold=10000 \</span><br><span class="line">  --root-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --service-account-private-key-file=/etc/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>–port=0：关闭监听非安全端口（http），同时 –address 参数无效，–bind-address 参数有效；</li><li>–secure-port=10252、–bind-address=0.0.0.0: 在所有网络接口监听 10252 端口的 https /metrics 请求；</li><li>–kubeconfig：指定 kubeconfig 文件路径，kube-controller-manager 使用它连接和验证 kube-apiserver；</li><li>–authentication-kubeconfig 和 –authorization-kubeconfig：kube-controller-manager 使用它连接 apiserver，对 client 的请求进行认证和授权。kube-controller-manager 不再使用 –tls-ca-file 对请求 https metrics 的 Client 证书进行校验。如果没有配置这两个 kubeconfig 参数，则 client 连接 kube-controller-manager https 端口的请求会被拒绝(提示权限不足)。</li><li>–cluster-signing-*-file：签名 TLS Bootstrap 创建的证书；</li><li>–experimental-cluster-signing-duration：指定 TLS Bootstrap 证书的有效期；</li><li>–root-ca-file：放置到容器 ServiceAccount 中的 CA 证书，用来对 kube-apiserver 的证书进行校验；</li><li>–service-account-private-key-file：签名 ServiceAccount 中 Token 的私钥文件，必须和 kube-apiserver 的 –service-account-key-file 指定的公钥文件配对使用；</li><li>–service-cluster-ip-range ：指定 Service Cluster IP 网段，必须和 kube-apiserver 中的同名参数一致；</li><li>–leader-elect=true：集群运行模式，启用选举功能；被选为 leader 的节点负责处理工作，其它节点为阻塞状态；</li><li>–controllers=*,bootstrapsigner,tokencleaner：启用的控制器列表，tokencleaner 用于自动清理过期的 Bootstrap token；</li><li>–horizontal-pod-autoscaler-*：custom metrics 相关参数，支持 autoscaling/v2alpha1；</li><li>–tls-cert-file、–tls-private-key-file：使用 https 输出 metrics 时使用的 Server 证书和秘钥；</li><li>–use-service-account-credentials=true: kube-controller-manager 中各 controller 使用 serviceaccount 访问 kube-apiserver；</li></ul><h4 id="9-4、启动-kube-controller-manager-服务"><a href="#9-4、启动-kube-controller-manager-服务" class="headerlink" title="9.4、启动 kube-controller-manager 服务"></a>9.4、启动 kube-controller-manager 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /var/log/k8s/kube-controller-manager</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable kube-controller-manager &amp;&amp; systemctl restart kube-controller-manager &amp;&amp; systemctl status kube-controller-manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># netstat -lnpt|grep kube-con</span></span><br><span class="line">tcp6       0      0 :::10252                :::*                    LISTEN      8335/kube-controlle</span><br></pre></td></tr></table></figure><ul><li>授予 kubernetes API 的权限<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding controller-node-clusterrolebing --clusterrole=system:kube-controller-manager  --user=system:kube-controller-manager</span><br><span class="line">kubectl create clusterrolebinding controller-manager:system:auth-delegator --user system:kube-controller-manager --clusterrole system:auth-delegator</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-5、查看输出的-metrics"><a href="#9-5、查看输出的-metrics" class="headerlink" title="9.5、查看输出的 metrics"></a>9.5、查看输出的 metrics</h4><p><strong>注意:</strong> 以下命令在 kube-controller-manager 节点上执行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem --cert /etc/kubernetes/ssl/admin.pem --key /etc/kubernetes/ssl/admin-key.pem https://172.21.17.30:10252/metrics |head</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"1800"</span>&#125; 0</span><br></pre></td></tr></table></figure><h4 id="9-6-kube-controller-manager-的权限"><a href="#9-6-kube-controller-manager-的权限" class="headerlink" title="9.6 kube-controller-manager 的权限"></a>9.6 kube-controller-manager 的权限</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ClusteRole system:kube-controller-manager 的权限很小，只能创建 secret、serviceaccount 等资源对象，各 controller 的权限分散到 ClusterRole system:controller:XXX 中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe clusterrole system:kube-controller-manager</span></span><br><span class="line">Name:         system:kube-controller-manager</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources                                  Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------                                  -----------------  --------------  -----</span><br><span class="line">  secrets                                    []                 []              [create delete get update]</span><br><span class="line">  endpoints                                  []                 []              [create get update]</span><br><span class="line">  serviceaccounts                            []                 []              [create get update]</span><br><span class="line">  events                                     []                 []              [create patch update]</span><br><span class="line">  tokenreviews.authentication.k8s.io         []                 []              [create]</span><br><span class="line">  subjectaccessreviews.authorization.k8s.io  []                 []              [create]</span><br><span class="line">  configmaps                                 []                 []              [get]</span><br><span class="line">  namespaces                                 []                 []              [get]</span><br><span class="line">  *.*                                        []                 []              [list watch]</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要在 kube-controller-manager 的启动参数中添加 –use-service-account-credentials=true 参数，这样 main controller 会为各 controller 创建对应的 ServiceAccount XXX-controller。内置的 ClusterRoleBinding system:controller:XXX 将赋予各 XXX-controller ServiceAccount 对应的 ClusterRole system:controller:XXX 权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get clusterrole|grep controller</span></span><br><span class="line">system:controller:attachdetach-controller                              4h52m</span><br><span class="line">system:controller:certificate-controller                               4h52m</span><br><span class="line">system:controller:clusterrole-aggregation-controller                   4h52m</span><br><span class="line">system:controller:cronjob-controller                                   4h52m</span><br><span class="line">system:controller:daemon-set-controller                                4h52m</span><br><span class="line">system:controller:deployment-controller                                4h52m</span><br><span class="line">system:controller:disruption-controller                                4h52m</span><br><span class="line">system:controller:endpoint-controller                                  4h52m</span><br><span class="line">system:controller:expand-controller                                    4h52m</span><br><span class="line">system:controller:generic-garbage-collector                            4h52m</span><br><span class="line">system:controller:horizontal-pod-autoscaler                            4h52m</span><br><span class="line">system:controller:job-controller                                       4h52m</span><br><span class="line">system:controller:namespace-controller                                 4h52m</span><br><span class="line">system:controller:node-controller                                      4h52m</span><br><span class="line">system:controller:persistent-volume-binder                             4h52m</span><br><span class="line">system:controller:pod-garbage-collector                                4h52m</span><br><span class="line">system:controller:pv-protection-controller                             4h52m</span><br><span class="line">system:controller:pvc-protection-controller                            4h52m</span><br><span class="line">system:controller:replicaset-controller                                4h52m</span><br><span class="line">system:controller:replication-controller                               4h52m</span><br><span class="line">system:controller:resourcequota-controller                             4h52m</span><br><span class="line">system:controller:route-controller                                     4h52m</span><br><span class="line">system:controller:service-account-controller                           4h52m</span><br><span class="line">system:controller:service-controller                                   4h52m</span><br><span class="line">system:controller:statefulset-controller                               4h52m</span><br><span class="line">system:controller:ttl-controller                                       4h52m</span><br><span class="line">system:kube-controller-manager                                         4h52m</span><br></pre></td></tr></table></figure><ul><li>以 deployment controller 为例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe clusterrole system:controller:deployment-controller</span></span><br><span class="line">Name:         system:controller:deployment-controller</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources                          Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------                          -----------------  --------------  -----</span><br><span class="line">  replicasets.apps                   []                 []              [create delete get list patch update watch]</span><br><span class="line">  replicasets.extensions             []                 []              [create delete get list patch update watch]</span><br><span class="line">  events                             []                 []              [create patch update]</span><br><span class="line">  pods                               []                 []              [get list update watch]</span><br><span class="line">  deployments.apps                   []                 []              [get list update watch]</span><br><span class="line">  deployments.extensions             []                 []              [get list update watch]</span><br><span class="line">  deployments.apps/finalizers        []                 []              [update]</span><br><span class="line">  deployments.apps/status            []                 []              [update]</span><br><span class="line">  deployments.extensions/finalizers  []                 []              [update]</span><br><span class="line">  deployments.extensions/status      []                 []              [update]</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-7、查看当前的-leader"><a href="#9-7、查看当前的-leader" class="headerlink" title="9.7、查看当前的 leader"></a>9.7、查看当前的 leader</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get endpoints kube-controller-manager --namespace=kube-system  -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    control-plane.alpha.kubernetes.io/leader: <span class="string">'&#123;"holderIdentity":"k8s-master-01-2.kxl_8890f530-d829-11e9-873f-fa163e5af833","leaseDurationSeconds":15,"acquireTime":"2019-09-16T06:00:15Z","renewTime":"2019-09-16T07:05:38Z","leaderTransitions":1&#125;'</span></span><br><span class="line">  creationTimestamp: <span class="string">"2019-09-16T02:27:06Z"</span></span><br><span class="line">  name: kube-controller-manager</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">"25734"</span></span><br><span class="line">  selfLink: /api/v1/namespaces/kube-system/endpoints/kube-controller-manager</span><br><span class="line">  uid: 7a5b872e-d829-11e9-9b67-fa163effd55b</span><br></pre></td></tr></table></figure><p>当前的 leader 为k8s-master-01-2节点。</p><p>测试 kube-controller-manager 集群的高可用,停掉一个或两个节点的 kube-controller-manager 服务，观察其它节点的日志，看是否获取了 leader 权限。</p><h3 id="10、scheduler集群"><a href="#10、scheduler集群" class="headerlink" title="10、scheduler集群"></a>10、scheduler集群</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 个节点，启动后将通过竞争选举机制产生一个 leader 节点，其它节点为阻塞状态。当 leader 节点不可用后，剩余节点将再次进行选举产生新的 leader 节点，从而保证服务的可用性。</p><p>为保证通信安全，本文档先生成 x509 证书和私钥，kube-scheduler 在如下两种情况下使用该证书：<br>1.与 kube-apiserver 的安全端口通信;<br>2.在安全端口(https，10251) 输出 prometheus 格式的 metrics；</p><h4 id="10-1、创建-kube-scheduler-证书和私钥"><a href="#10-1、创建-kube-scheduler-证书和私钥" class="headerlink" title="10.1、创建 kube-scheduler 证书和私钥"></a>10.1、创建 kube-scheduler 证书和私钥</h4><ul><li><p>创建证书签名请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; kube-scheduler-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"172.21.17.30"</span>,</span><br><span class="line">      <span class="string">"172.21.17.31"</span>,</span><br><span class="line">      <span class="string">"172.21.16.110"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">        <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">        <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">        <span class="string">"O"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">        <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>hosts 列表包含所有 kube-scheduler 节点 IP；</p></li><li><p>CN 和 O 均为 system:kube-scheduler，kubernetes 内置的 ClusterRoleBindings system:kube-scheduler 将赋予 kube-scheduler 工作所需的权限；</p></li><li><p>生成证书和私钥:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ls kube-scheduler*pem</span></span><br><span class="line">kube-scheduler-key.pem  kube-scheduler.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp kube-scheduler*pem  /etc/kubernetes/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="10-2、创建和分发-kubeconfig-文件"><a href="#10-2、创建和分发-kubeconfig-文件" class="headerlink" title="10.2、创建和分发 kubeconfig 文件"></a>10.2、创建和分发 kubeconfig 文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kube-scheduler 使用 kubeconfig 文件访问 apiserver，该文件提供了 apiserver 地址、嵌入的 CA 证书和 kube-scheduler 证书：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-credentials system:kube-scheduler \</span></span><br><span class="line">  --client-certificate=kube-scheduler.pem \</span><br><span class="line">  --client-key=kube-scheduler-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-context system:kube-scheduler \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-scheduler \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config use-context system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cp kube-scheduler.kubeconfig /etc/kubernetes/</span></span><br></pre></td></tr></table></figure><h4 id="10-3、创建-kube-scheduler-配置文件"><a href="#10-3、创建-kube-scheduler-配置文件" class="headerlink" title="10.3、创建 kube-scheduler 配置文件"></a>10.3、创建 kube-scheduler 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;kube-scheduler.yaml &lt;&lt;EOF</span></span><br><span class="line">apiVersion: kubescheduler.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeSchedulerConfiguration</span><br><span class="line">bindTimeoutSeconds: 600</span><br><span class="line">clientConnection:</span><br><span class="line">  burst: 200</span><br><span class="line">  kubeconfig: <span class="string">"/etc/kubernetes/kube-scheduler.kubeconfig"</span></span><br><span class="line">  qps: 100</span><br><span class="line">enableContentionProfiling: <span class="literal">false</span></span><br><span class="line">enableProfiling: <span class="literal">true</span></span><br><span class="line">hardPodAffinitySymmetricWeight: 1</span><br><span class="line">healthzBindAddress: 127.0.0.1:10251</span><br><span class="line">leaderElection:</span><br><span class="line">  leaderElect: <span class="literal">true</span></span><br><span class="line">metricsBindAddress: <span class="comment">##NODE_IP##:10251</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp kube-scheduler.yaml /etc/kubernetes/</span></span><br></pre></td></tr></table></figure><ul><li>–kubeconfig：指定 kubeconfig 文件路径，kube-scheduler 使用它连接和验证 kube-apiserver；</li><li>–leader-elect=true：集群运行模式，启用选举功能；被选为 leader 的节点负责处理工作，其它节点为阻塞状态；</li></ul><h4 id="10-4、创建-kube-scheduler-systemd-unit-模板文件"><a href="#10-4、创建-kube-scheduler-systemd-unit-模板文件" class="headerlink" title="10.4、创建 kube-scheduler systemd unit 模板文件"></a>10.4、创建 kube-scheduler systemd unit 模板文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-scheduler.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/<span class="built_in">log</span>/k8s/kube-scheduler</span><br><span class="line">ExecStart=/usr/bin/kube-scheduler \</span><br><span class="line">  --config=/etc/kubernetes/kube-scheduler.yaml \</span><br><span class="line">  --<span class="built_in">bind</span>-address=0.0.0.0 \</span><br><span class="line">  --secure-port=10259 \</span><br><span class="line">  --port=0 \</span><br><span class="line">  --tls-cert-file=/etc/kubernetes/ssl/kube-scheduler.pem \</span><br><span class="line">  --tls-private-key-file=/etc/kubernetes/ssl/kube-scheduler-key.pem \</span><br><span class="line">  --authentication-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span><br><span class="line">  --client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --requestheader-allowed-names=<span class="string">""</span> \</span><br><span class="line">  --requestheader-client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --requestheader-extra-headers-prefix=<span class="string">"X-Remote-Extra-"</span> \</span><br><span class="line">  --requestheader-group-headers=X-Remote-Group \</span><br><span class="line">  --requestheader-username-headers=X-Remote-User \</span><br><span class="line">  --authorization-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">StartLimitInterval=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="10-5、启动-kube-scheduler-服务"><a href="#10-5、启动-kube-scheduler-服务" class="headerlink" title="10.5、启动 kube-scheduler 服务"></a>10.5、启动 kube-scheduler 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /var/log/k8s/kube-scheduler</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable kube-scheduler &amp;&amp; systemctl restart kube-scheduler &amp;&amp; systemctl status kube-scheduler</span></span><br></pre></td></tr></table></figure><ul><li>授予 kubernetes API 的权限<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding scheduler-node-clusterrolebing  --clusterrole=system:kube-scheduler --user=system:kube-scheduler</span><br></pre></td></tr></table></figure></li></ul><h4 id="10-6、查看输出的-metrics"><a href="#10-6、查看输出的-metrics" class="headerlink" title="10.6、查看输出的 metrics"></a>10.6、查看输出的 metrics</h4><p>kube-scheduler 监听 10251 和 10251 端口：</p><ul><li>10251：接收 http 请求，非安全端口，不需要认证授权</li><li>10259：接收 https 请求，安全端口，需要认证授权</li></ul><p>两个接口都对外提供 /metrics 和 /healthz 的访问。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -lnpt |grep kube-sch</span></span><br><span class="line">tcp        0      0 172.21.17.31:10251      0.0.0.0:*               LISTEN      8441/kube-scheduler </span><br><span class="line">tcp6       0      0 :::10259                :::*                    LISTEN      8441/kube-scheduler</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s http://172.21.17.30:10251/metrics |head</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"1800"</span>&#125; 0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem --cert /etc/kubernetes/ssl/admin.pem --key /etc/kubernetes/ssl/admin-key.pem https://172.21.17.30:10259/metrics |head</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"1800"</span>&#125; 0</span><br></pre></td></tr></table></figure><h4 id="10-7、查看当前的-leader"><a href="#10-7、查看当前的-leader" class="headerlink" title="10.7、查看当前的 leader"></a>10.7、查看当前的 leader</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  kubectl get endpoints kube-scheduler --namespace=kube-system  -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    control-plane.alpha.kubernetes.io/leader: <span class="string">'&#123;"holderIdentity":"k8s-master-01.kxl_2a6e0bf9-d82b-11e9-b946-fa163effd55b","leaseDurationSeconds":15,"acquireTime":"2019-09-16T06:00:28Z","renewTime":"2019-09-16T07:41:57Z","leaderTransitions":1&#125;'</span></span><br><span class="line">  creationTimestamp: <span class="string">"2019-09-16T02:38:55Z"</span></span><br><span class="line">  name: kube-scheduler</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">"29215"</span></span><br><span class="line">  selfLink: /api/v1/namespaces/kube-system/endpoints/kube-scheduler</span><br><span class="line">  uid: 20a04151-d82b-11e9-baf3-fa163e53d4c8</span><br></pre></td></tr></table></figure><h4 id="10-8-检查集群endpoints状态"><a href="#10-8-检查集群endpoints状态" class="headerlink" title="10.8 检查集群endpoints状态"></a>10.8 检查集群endpoints状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get endpoints</span></span><br><span class="line">NAME          ENDPOINTS                                                AGE</span><br><span class="line">kubernetes    172.21.16.110:6443,172.21.17.30:6443,172.21.17.31:6443   18h</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kuberntes v1.14</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器端口映射</title>
    <url>/2019/09/10/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>好记性不如烂笔头，h3c MSR3620路由器做端口映射到后端服务器,包含单个端口和端口段的映射</p><a id="more"></a><h3 id="单个端口的映射"><a href="#单个端口的映射" class="headerlink" title="单个端口的映射"></a>单个端口的映射</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[router] interface GigabitEthernet0/2 公网ip接口</span><br><span class="line">[router] nat server protocol tcp global 公网ip 80 inside 内网ip 80</span><br></pre></td></tr></table></figure><h3 id="多端口"><a href="#多端口" class="headerlink" title="多端口"></a>多端口</h3><p>vsftp可以使用这个</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[router] interface GigabitEthernet0/2 公网ip接口</span><br><span class="line">[router] nat server protocol tcp global current-interface 9000 9045 inside 内网ip 9000 9045</span><br></pre></td></tr></table></figure><p><strong>备注:</strong> 可以使用vsftp场景，<a href="https://xxlaila.github.io/2019/08/09/vsftpd%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">vsftp安装</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
      <tags>
        <tag>MSR3620</tag>
      </tags>
  </entry>
  <entry>
    <title>traefik https应用</title>
    <url>/2019/09/06/traefik-https%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前已经使用traefik服务作为入口，测试并访问了tomcat应用，之前是通过http来访问的，而我们在yaml文件里面也添加8443端口用于https访问，在实际环境中我们也是需要https来进行访问应用，通过traefik实现https，<a href="https://xxlaila.github.io/2019/09/05/traefik-ingress%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">traefik http应用</a></p><h3 id="操作实践"><a href="#操作实践" class="headerlink" title="操作实践"></a>操作实践</h3><ul><li>这里我用了公司的证书，就是为了贴近真实，也满足测试需求，</li><li>创建一个secret，保存https证书</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line">1_test.xxlaila.cn_bundle.crt  2_test.xxlaila.cn.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl create secret generic traefik-cert --from-file=1_test.xxlaila.cn_bundle.crt --from-file=2_test.xxlaila.cn.key -n kube-system</span></span><br><span class="line">secret/traefik-cert created</span><br></pre></td></tr></table></figure><p>把证书拷贝到k8s node节点，存放路径为/etc/kubernetes/certs。</p><h3 id="创建一个configmap，保存traefix的配置"><a href="#创建一个configmap，保存traefix的配置" class="headerlink" title="创建一个configmap，保存traefix的配置"></a>创建一个configmap，保存traefix的配置</h3><p>traefix中配置了把所有http请求全部rewrite为https的规则，并配置相应的证书位置</p><ul><li>traefik.toml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaultEntryPoints = [<span class="string">"http"</span>,<span class="string">"https"</span>]</span><br><span class="line">[entryPoints]</span><br><span class="line">  [entryPoints.http]</span><br><span class="line">  address = <span class="string">":80"</span></span><br><span class="line">    [entryPoints.http.redirect]</span><br><span class="line">    entryPoint = <span class="string">"https"</span></span><br><span class="line">  [entryPoints.https]</span><br><span class="line">  address = <span class="string">":443"</span></span><br><span class="line">    [entryPoints.https.tls]</span><br><span class="line">      [[entryPoints.https.tls.certificates]]</span><br><span class="line">      certFile = <span class="string">"/etc/kubernetes/certs/1_test.xxlaila.cn_bundle.crt"</span></span><br><span class="line">      keyFile = <span class="string">"/etc/kubernetes/certs/2_test.xxlaila.cn.key"</span></span><br><span class="line"></span><br><span class="line">$ kubectl create configmap traefik-conf --from-file=traefik.toml -n kube-system</span><br><span class="line">configmap/traefik-conf created</span><br></pre></td></tr></table></figure></li></ul><p>把traefik.toml文件拷贝到k8s node节点,存放路径为/etc/kubernetes/conf。</p><h3 id="重新部署Traefix"><a href="#重新部署Traefix" class="headerlink" title="重新部署Traefix"></a>重新部署Traefix</h3><p>主要是要关联创建的secret和configMap，并挂载相对应的主机目录。</p><ul><li>deployment.yaml</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat deployment.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-lb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2 <span class="comment"># 增加行</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: traefik-ingress-lb</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      serviceAccountName: ingress</span><br><span class="line">      containers:</span><br><span class="line">      - image: traefik</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">"/etc/kubernetes/certs"</span></span><br><span class="line">          name: <span class="string">"ssl"</span></span><br><span class="line">        - mountPath: <span class="string">"/etc/kubernetes/conf"</span></span><br><span class="line">          name: <span class="string">"config"</span></span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">            memory: 3000Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 2000Mi</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 80</span><br><span class="line">        - name: admin</span><br><span class="line">          containerPort: 8580</span><br><span class="line">          hostPort: 8580</span><br><span class="line">        args:</span><br><span class="line">        - --configFile=/etc/kubernetes/conf/traefik.toml</span><br><span class="line">        - --web</span><br><span class="line">        - --web.address=:8580</span><br><span class="line">        - --kubernetes</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f deployment.yaml </span><br><span class="line">deployment.extensions/traefik-ingress-lb configured</span><br></pre></td></tr></table></figure><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p>登陆traefik-ui界面,用原本http的访问，traefik会直接给我们重定向至https。<br><img src="https://img.xxlaila.cn/1567748749337.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于traefik-ui使用的域名不是我们证书所支持的域名，所以这里提示不安全，修改之前创建的ingress，修改其中的域名为支持证书的域名</p><ul><li>traefik-ui.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system </span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 8580</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: traefik.test.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: traefik-web-ui</span><br><span class="line">          servicePort: web</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f traefik-ui.yaml </span><br><span class="line">service/traefik-web-ui unchanged</span><br><span class="line">ingress.extensions/traefik-web-ui configured</span><br></pre></td></tr></table></figure></li></ul><p>修改hosts版定的域名进行访问<br><img src="https://img.xxlaila.cn/1567749086159.jpg" alt="img"></p><ul><li><p>修改之前部署的tomcat程序</p></li><li><p>ingress-tomcat.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test-web</span><br><span class="line">  namespace: default</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">    traefik.frontend.rule.type: PathPrefixStrip</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: tomcat.test.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /test1/</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: tomcat-test1</span><br><span class="line">          servicePort: 8080</span><br><span class="line">      - path: /test2/</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: tomcat-test2</span><br><span class="line">          servicePort: 8080</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f ingress-tomcat.yaml </span><br><span class="line">ingress.extensions/tomcat-test-web configured</span><br></pre></td></tr></table></figure></li></ul><p>访问链接测试<br><img src="https://img.xxlaila.cn/1567749278980.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1567749309772.jpg" alt="img"></p><h3 id="其他需求"><a href="#其他需求" class="headerlink" title="其他需求"></a>其他需求</h3><p>在我们真实的应用场景中，需求肯定有不同的，比如我所在的公司开发环境就要只是http和https，测试环境以上的就全部强制https。这就得分开进行配置</p><h4 id="同时支持http和https"><a href="#同时支持http和https" class="headerlink" title="同时支持http和https"></a>同时支持http和https</h4><p>把http中的rewrite代码改掉</p><ul><li>traefik.toml</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaultEntryPoints = [<span class="string">"http"</span>,<span class="string">"https"</span>]</span><br><span class="line">[entryPoints]</span><br><span class="line">  [entryPoints.http]</span><br><span class="line">  address = <span class="string">":80"</span></span><br><span class="line">    entryPoint = <span class="string">"https"</span></span><br><span class="line">  [entryPoints.https]</span><br><span class="line">  address = <span class="string">":443"</span></span><br><span class="line">    [entryPoints.https.tls]</span><br><span class="line">      [[entryPoints.https.tls.certificates]]</span><br><span class="line">      certFile = <span class="string">"/etc/kubernetes/certs/1_test.xxlaila.cn_bundle.crt"</span></span><br><span class="line">      keyFile = <span class="string">"/etc/kubernetes/certs/2_test.xxlaila.cn.key"</span></span><br><span class="line">      [[entryPoints.https.tls.certificates]]</span><br><span class="line">      certFile = <span class="string">"/etc/kubernetes/certs/1_dev.xxlaila.cn_bundle.crt"</span></span><br><span class="line">      keyFile = <span class="string">"/etc/kubernetes/certs/2_dev.xxlaila.cn.key"</span></span><br><span class="line"></span><br><span class="line">[file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># rules</span></span><br><span class="line">[entryPoints]</span><br><span class="line">  [entryPoints.http]</span><br><span class="line">  address = <span class="string">":80"</span></span><br><span class="line">    [entryPoints.http.redirect]</span><br><span class="line">      regex = <span class="string">"^http://traefix.test.xxlaila.cn/(.*)"</span></span><br><span class="line">      replacement = <span class="string">"https://traefix.test.xxlaila.cn/<span class="variable">$1</span>"</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>traefik</tag>
      </tags>
  </entry>
  <entry>
    <title>traefik ingress使用</title>
    <url>/2019/09/05/traefik-ingress%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="Traefik介绍"><a href="#Traefik介绍" class="headerlink" title="Traefik介绍"></a>Traefik介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单的说，ingress就是从kubernetes集群外访问集群的入口，将用户的URL请求转发到不同的service上。Ingress相当于nginx、apache等负载均衡反向代理服务器，其中还包括规则定义，即URL的路由信息。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Traefik是一款开源的反向代理与负载均衡工具。它最大的优点是能够与常见的微服务系统直接整合，实现自动化动态配置。Traefik通过不断地跟 kubernetes API 打交道，实时的感知后端 service、pod 等变化，比如pod，service 增加与减少等；当得到这些变化信息后，Ingress自动更新配置并热重载 ，达到服务发现的作用。</p><a id="more"></a><p>traefix 整体架构图如下:<br><img src="https://img.xxlaila.cn/34238937snkhfskdy8923.png" alt="img"></p><h3 id="Traefik主要特性详解"><a href="#Traefik主要特性详解" class="headerlink" title="Traefik主要特性详解"></a>Traefik主要特性详解</h3><ul><li><p>自动熔断</p><ul><li>在集群中，当某一个服务大量出现请求错误，或者请求响应时间过久，或者返回500+错误状态码时，我们希望可以主动剔除该服务，也就是不在将请求转发到该服务上，而这一个过程是自动完成，不需要人工执行。Traefik 通过配置很容易就能帮我们实现，Traefik 可以通过定义策略来主动熔断服务。</li><li>NetworkErrorRatio() &gt; 0.5：监测服务错误率达到50%时，熔断</li><li>LatencyAtQuantileMS(50.0) &gt; 50：监测延时大于50ms时，熔断</li><li>ResponseCodeRatio(500, 600, 0, 600) &gt; 0.5：监测返回状态码为[500-600]在[0-600]区间占比超过50%时，熔断</li></ul></li><li><p>负载均衡策略</p><ul><li>Traefik 提供两种负载均衡策略支持。一种是 wrr（加权轮训调度算法），一种是 drr（动态加权循环调度算法）</li><li>wrr是默认的负载均衡策略，新创建的 service 权重都是一样为1，这样的话，请求会平均分给每个服务，但是这样很多时候会出现资源分配不均衡的问题，比如由于集群中每个机器配置不一样，而且服务消耗不一样，假设 A 资源使用率已经很高，而 B 属于空闲状态，如果还是均摊到每个服务的话，会加重 A 的负荷，这时候因该有一种策略能够主动识别并分担更多流量到 B 才对</li><li>drr 就更加智能，它是一种动态加权轮训调度方式，它会记录一段时间内转发到 A 的请求数，跟转发到 B 的请求数对比，转发数量多，说明处理速度快，响应时间快。如果 A 处理请求速度比 B 快，那么就会调整 A 的权重，接下来的一段时间，就会转发更多请求给 A，相应的 B 的转发就少一些。整个过程都在不断的调整权重，实现请求的合理分配，从而达到资源使用最大化</li></ul></li></ul><h3 id="部署Traefik-ingress"><a href="#部署Traefik-ingress" class="headerlink" title="部署Traefik ingress"></a>部署Traefik ingress</h3><ul><li><p>创建ingress-rbac.yaml，将用于service account验证。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat ingress-rbac.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: ingress</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure></li><li><p>创建Depeloyment部署traefik，如文件名为deployment.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-lb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2 <span class="comment"># 增加行</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: traefik-ingress-lb</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      serviceAccountName: ingress</span><br><span class="line">      containers:</span><br><span class="line">      - image: traefik</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">            memory: 3000Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 2000Mi</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 80</span><br><span class="line">        - name: admin</span><br><span class="line">          containerPort: 8580</span><br><span class="line">          hostPort: 8580</span><br><span class="line">        args:</span><br><span class="line">        - --web</span><br><span class="line">        - --web.address=:8580</span><br><span class="line">        - --kubernetes</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>注意</strong>: 我们这里用的是Deploy类型，没有限定该pod运行在哪个主机上。Traefik的端口是8580。</li></ul><ul><li>编写Traefik UI的ingress部署文件，如文件名为traefik-ui.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system <span class="comment">#增加行</span></span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 8580</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: traefik.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: traefik-web-ui</span><br><span class="line">          servicePort: web</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><ul><li><code>backend</code>中要配置default namespace中启动的service名字。</li><li><code>path</code>就是URL地址后的路径，如<code>traefik.frontend.io/path</code>，service将会接受path这个路径</li><li><code>host</code>最好使用service-name.filed1.filed2.domain-name这种类似主机名称的命名方式，方便区分服务。</li></ul><ul><li><strong>逼逼一下</strong>: 目前我所在的公司后端微服务100+，前端60+，如果用传统nginx的local来匹配，估计要写死人，而且对于运维自动化来也不是很好做，再则是出了问题也还要去看一下是哪个应用；我们目前是通过每个服务每一个域名，域名是根据服务名来自动生成，除了几个特定对外公开的是特制的域名，其他的均采用这种机制，当有问题的时候，一下就能判断出那里出问题，很好定位，有域名有特殊配置的时候，也可以单独的进行设置，但是截止目前两年多来，运维拒绝这种特殊需求(有还有，很少，只有那么两三个)</li></ul><ul><li><p>配置完成后就可以启动treafik ingress了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f ./</span></span><br><span class="line">deployment.extensions/traefik-ingress-lb created</span><br><span class="line">serviceaccount/ingress created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress created</span><br><span class="line">service/traefik-web-ui created</span><br><span class="line">ingress.extensions/traefik-web-ui created</span><br></pre></td></tr></table></figure></li><li><p>查看是否部署成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n kube-system | grep traefik</span></span><br><span class="line"></span><br><span class="line">traefik-ingress-lb-5d7f658cfd-4vkjc     1/1     Running   0          29m</span><br><span class="line">traefik-ingress-lb-5d7f658cfd-7sszp     1/1     Running   0          19m</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get ingress -o wide --all-namespaces </span></span><br><span class="line">NAMESPACE     NAME                HOSTS                ADDRESS   PORTS   AGE</span><br><span class="line">kube-system   traefik-web-ui      traefik.xxlaila.io             80      29m</span><br></pre></td></tr></table></figure></li></ul><p>在浏览器绑定hosts域名解析，node的ip地址，在浏览器输入traefik.xxlaila.io即可访问了<br><img src="https://img.xxlaila.cn/1567676343800.jpg" alt="img"></p><p>左侧蓝色部分列出的是所有的前端(frontends)，右侧绿色部分是所有的后端(backend)。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>下面模拟部署一个程序，以Nginx 为例，并使用drr动态轮训加权策略。</p><ul><li><p>nginx-deployment.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-pod</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.15.5</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service</span><br><span class="line">  annotations:</span><br><span class="line">    traefik.ingress.kubernetes.io/load-balancer-method: drr</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx-service</span><br><span class="line">        namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx-pod</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: k8s.nginx.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: nginx-service</span><br><span class="line">          servicePort: 80</span><br></pre></td></tr></table></figure></li><li><p>创建nginx</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f nginx-deployment.yaml </span></span><br><span class="line">deployment.apps/nginx-pod created</span><br><span class="line">service/nginx-service created</span><br><span class="line">ingress.extensions/nginx-ingress created</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get pods</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有访问这些地址的流量都会发送给172.16.0.180这台主机，就是我们启动traefik的主机。Traefik会解析http请求header里的Host参数将流量转发给Ingress配置里的相应service。<br><img src="https://img.xxlaila.cn/1567676984150.jpg" alt="img"></p><p>客户端绑定host，浏览器进行访问: <a href="http://k8s.nginx.com" target="_blank" rel="noopener">http://k8s.nginx.com</a><br><img src="https://img.xxlaila.cn/1567677018297.jpg" alt="img"></p><p>在K8s集群节点上访问测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -x 172.21.16.204 http://k8s.nginx.com</span></span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;503 Service Unavailable&lt;/h1&gt;</span><br><span class="line">No server is available to handle this request.</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">[root@k8s ~]<span class="comment"># curl -x 172.21.16.204:80 http://k8s.nginx.com</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.org/"</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.com/"</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="ingress配置同域名不同路径代理web应用"><a href="#ingress配置同域名不同路径代理web应用" class="headerlink" title="ingress配置同域名不同路径代理web应用"></a>ingress配置同域名不同路径代理web应用</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多时候我们不想配置太多的域名来区别应用，使用同域名分路径的方式来区别应用就简洁方便很多。ingress也提供了相关的配置。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设两个应用tomcat-test1和tomcat-test2。这里可配置域名tomcat.xxlaila.io，通过路径test1、test2来分别代理两个tomcat应用。其中，分路径配置需添加配置：traefik.frontend.rule.type: PathPrefixStrip,首先，我先创建tomcat-test1和tomcat-test2的pod和service，其中8080为tomcat的http端口，8443为tomcat的https端口，本例中仅使用http端口测试。</p><ul><li><p>tomcat-test1.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test1</span><br><span class="line">  labels: </span><br><span class="line">    app: tomcat-test1</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1 </span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: tomcat-test1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: tomcat-test1</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: tomcat-test1</span><br><span class="line">        image: tomcat</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8443</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test1</span><br><span class="line">  labels:</span><br><span class="line">    name: tomcat-test1</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8443</span><br><span class="line">    targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    app: tomcat-test1</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8080 </span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    app: tomcat-test1</span><br></pre></td></tr></table></figure></li><li><p>tomcat-test2.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test2</span><br><span class="line">  labels: </span><br><span class="line">    app: tomcat-test2</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1 </span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: tomcat-test2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: tomcat-test2</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: tomcat-test2</span><br><span class="line">        image: manjeetchauhan211/tomcat_test2</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8443</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test2</span><br><span class="line">  labels:</span><br><span class="line">    name: tomcat-test2</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8443</span><br><span class="line">    targetPort: 8443</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8080 </span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    app: tomcat-test2</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f ./</span></span><br><span class="line"></span><br><span class="line">$ kubectl get deployment</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-pod      2/2     2            2           17h</span><br><span class="line">tomcat-test1   1/1     1            1           42m</span><br><span class="line">tomcat-test2   1/1     1            1           42m</span><br><span class="line"></span><br><span class="line">$ kubectl get svc</span><br><span class="line">NAME             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes       ClusterIP   10.254.0.1       &lt;none&gt;        443/TCP    5d23h</span><br><span class="line">nginx-service    ClusterIP   10.254.149.69    &lt;none&gt;        80/TCP     17h</span><br><span class="line">tomcat-test1     ClusterIP   10.254.195.108   &lt;none&gt;        8080/TCP   42m</span><br><span class="line">tomcat-test2     ClusterIP   10.254.6.88      &lt;none&gt;        8080/TCP   42m</span><br><span class="line">traefik-web-ui   ClusterIP   10.254.22.102    &lt;none&gt;        80/TCP     17h</span><br></pre></td></tr></table></figure></li></ul><p>创建test1的ingress，来发布tomcat-test1服务</p><ul><li>ingress-tomcat1.yam<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat ingress-tomcat1.yaml </span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test1-web</span><br><span class="line">  namespace: default</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: tomcat.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: tomcat-test1</span><br><span class="line">          servicePort: 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl create -f ingress-tomcat.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>在traefix-ui界面上，可以看到已经有了一个<code>tomcat.xxlaila.io</code>的域名规则.<br><img src="https://img.xxlaila.cn/1567739051461.jpg" alt="img"></p><p>在hosts文件添加tomcat.xxlaila.io绑定来进行访问<br><img src="https://img.xxlaila.cn/1567739162707.jpg" alt="img"></p><h5 id="ingress配置同域名对应location"><a href="#ingress配置同域名对应location" class="headerlink" title="ingress配置同域名对应location"></a>ingress配置同域名对应location</h5><ul><li><p>ingress-tomcat.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test-web</span><br><span class="line">  namespace: default</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">    traefik.frontend.rule.type: PathPrefixStrip</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: tomcat.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /test1/</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: tomcat-test1</span><br><span class="line">          servicePort: 8080</span><br><span class="line">      - path: /test2/</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: tomcat-test2</span><br><span class="line">          servicePort: 8080</span><br></pre></td></tr></table></figure></li><li><p>创建并查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f ingress-tomcat.yaml </span><br><span class="line"></span><br><span class="line">$ kubectl describe ingress tomcat-test-web</span><br><span class="line">Name:             tomcat-test-web</span><br><span class="line">Namespace:        default</span><br><span class="line">Address:          </span><br><span class="line">Default backend:  default-http-backend:80 (&lt;none&gt;)</span><br><span class="line">Rules:</span><br><span class="line">  Host               Path  Backends</span><br><span class="line">  ----               ----  --------</span><br><span class="line">  tomcat.xxlaila.io  </span><br><span class="line">                     /test1/   tomcat-test1:8080 (&lt;none&gt;)</span><br><span class="line">                     /test2/   tomcat-test2:8080 (&lt;none&gt;)</span><br><span class="line">Annotations:</span><br><span class="line">  traefik.frontend.rule.type:                        PathPrefixStrip</span><br><span class="line">  kubectl.kubernetes.io/last-applied-configuration:  &#123;<span class="string">"apiVersion"</span>:<span class="string">"extensions/v1beta1"</span>,<span class="string">"kind"</span>:<span class="string">"Ingress"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;<span class="string">"kubernetes.io/ingress.class"</span>:<span class="string">"traefik"</span>,<span class="string">"traefik.frontend.rule.type"</span>:<span class="string">"PathPrefixStrip"</span>&#125;,<span class="string">"name"</span>:<span class="string">"tomcat-test-web"</span>,<span class="string">"namespace"</span>:<span class="string">"default"</span>&#125;,<span class="string">"spec"</span>:&#123;<span class="string">"rules"</span>:[&#123;<span class="string">"host"</span>:<span class="string">"tomcat.xxlaila.io"</span>,<span class="string">"http"</span>:&#123;<span class="string">"paths"</span>:[&#123;<span class="string">"backend"</span>:&#123;<span class="string">"serviceName"</span>:<span class="string">"tomcat-test1"</span>,<span class="string">"servicePort"</span>:8080&#125;,<span class="string">"path"</span>:<span class="string">"/test1/"</span>&#125;,&#123;<span class="string">"backend"</span>:&#123;<span class="string">"serviceName"</span>:<span class="string">"tomcat-test2"</span>,<span class="string">"servicePort"</span>:8080&#125;,<span class="string">"path"</span>:<span class="string">"/test2/"</span>&#125;]&#125;&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line">  kubernetes.io/ingress.class:  traefik</span><br><span class="line">Events:                         &lt;none&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="给节点设置label"><a href="#给节点设置label" class="headerlink" title="给节点设置label"></a>给节点设置label</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于是 Kubernetes DeamonSet 这种方式部署 Traefik，所以需要提前给节点设置 Label，这样当程序部署时 Pod 会自动调度到设置 Label 的点上。</p><h4 id="节点设置-Label-标签"><a href="#节点设置-Label-标签" class="headerlink" title="节点设置 Label 标签"></a>节点设置 Label 标签</h4><ul><li>格式：kubectl label nodes [节点名] [key=value]<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> kubectl get nodes</span><br><span class="line">NAME            STATUS   ROLES    AGE    VERSION</span><br><span class="line">172.21.16.204   Ready    &lt;none&gt;   7d5h   v1.13.3</span><br><span class="line">172.21.16.240   Ready    &lt;none&gt;   7d2h   v1.13.3</span><br><span class="line">172.21.16.87    Ready    &lt;none&gt;   7d2h   v1.13.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl label nodes 172.21.16.204 IngressProxy=true</span></span><br><span class="line">node/172.21.16.204 labeled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点label设置是否成功</span></span><br><span class="line"><span class="comment"># kubectl get nodes --show-labels</span></span><br><span class="line">NAME            STATUS   ROLES    AGE    VERSION   LABELS</span><br><span class="line">172.21.16.204   Ready    &lt;none&gt;   7d5h   v1.13.3   IngressProxy=<span class="literal">true</span>,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=172.21.16.204,node.kubernetes.io/k8s-node=<span class="literal">true</span></span><br><span class="line">172.21.16.240   Ready    &lt;none&gt;   7d2h   v1.13.3   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=172.21.16.240,node.kubernetes.io/k8s-node=<span class="literal">true</span></span><br><span class="line">172.21.16.87    Ready    &lt;none&gt;   7d2h   v1.13.3   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=172.21.16.87,node.kubernetes.io/k8s-node=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="修改Traefix部署文件"><a href="#修改Traefix部署文件" class="headerlink" title="修改Traefix部署文件"></a>修改Traefix部署文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat deployment.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-lb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2 <span class="comment"># 增加行</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: traefik-ingress-lb</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      volumes:</span><br><span class="line">      - name: ssl</span><br><span class="line">        secret:</span><br><span class="line">          secretName: traefik-cert</span><br><span class="line">      - name: config</span><br><span class="line">        configMap:</span><br><span class="line">          name: traefik-conf</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      serviceAccountName: ingress</span><br><span class="line">      containers:</span><br><span class="line">      - image: traefik</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">"/etc/kubernetes/certs"</span></span><br><span class="line">          name: <span class="string">"ssl"</span></span><br><span class="line">        - mountPath: <span class="string">"/etc/kubernetes/conf"</span></span><br><span class="line">          name: <span class="string">"config"</span></span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">            memory: 3000Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 2000Mi</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 80</span><br><span class="line">        - name: admin</span><br><span class="line">          containerPort: 8580</span><br><span class="line">          hostPort: 8580</span><br><span class="line">        args:</span><br><span class="line">        - --configFile=/etc/kubernetes/conf/traefik.toml</span><br><span class="line">        - --web</span><br><span class="line">        - --web.address=:8580</span><br><span class="line">        - --kubernetes</span><br><span class="line">      nodeSelector:</span><br><span class="line">        IngressProxy: <span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行部署即可</span></span><br></pre></td></tr></table></figure><ul><li>traefix-ui界面上可以看到<br><img src="https://img.xxlaila.cn/1567739737385.jpg" alt="img"></li></ul><p>从describe信息和ui界面上可以看到，tomcat.test.k8s分别有了/test1/和/test2/的域名代理以及相对应的后端<br><img src="https://img.xxlaila.cn/1567739822127.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1567739856570.jpg" alt="img"></p><p><a href="https://xuchao918.github.io/2019/03/01/Kubernetes-traefik-ingress%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">参考文献2</a><br><a href="https://blog.51cto.com/icenycmh/2124502" target="_blank" rel="noopener">参考文献1</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>traefik</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-helm</title>
    <url>/2019/09/04/k8s-helm/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Helm类似与linux下面的yum，Helm是一个用于kubernetes的包管理器，每一个包为一个chart，一个chart是一个目录，常常会对目录进行打包压缩，形成一个${name}-version.tgz的格式进行传输和存储。</p><ul><li>对于应用发布者而言，可以通过Helm打包应用，管理应用依赖关系，管理应用版本并发布应用到软件仓库。</li><li>对于使用者而言，使用Helm后不用需要了解Kubernetes的Yaml语法并编写应用部署文件，可以通过Helm下载并在kubernetes上安装需要的应用。</li></ul><p>Helm还提供了kubernetes上的软件部署，删除，升级，回滚应用的强大功能</p><a id="more"></a><h3 id="1、helm组件"><a href="#1、helm组件" class="headerlink" title="1、helm组件"></a>1、helm组件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Helm 是一个命令行下的客户端工具。主要用于 Kubernetes 应用程序 Chart 的创建、打包、发布以及创建和管理本地和远程的 Chart 仓库。</p><h4 id="1-1、Tiller"><a href="#1-1、Tiller" class="headerlink" title="1.1、Tiller"></a>1.1、Tiller</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tiller 是 Helm 的服务端，部署在 Kubernetes 集群中。Tiller 用于接收 Helm 的请求，并根据 Chart 生成 Kubernetes 的部署文件（ Helm 称为 Release ），然后提交给 Kubernetes 创建应用。Tiller 还提供了 Release 的升级、删除、回滚等一系列功能。</p><h4 id="1-2、Chart"><a href="#1-2、Chart" class="headerlink" title="1.2、Chart"></a>1.2、Chart</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Helm 的软件包，采用 TAR 格式。类似于 APT 的 DEB 包或者 YUM 的 RPM 包，其包含了一组定义 Kubernetes 资源相关的 YAML 文件</p><h4 id="1-3、Repoistory"><a href="#1-3、Repoistory" class="headerlink" title="1.3、Repoistory"></a>1.3、Repoistory</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Helm 的软件仓库，Repository 本质上是一个 Web 服务器，该服务器保存了一系列的 Chart 软件包以供用户下载，并且提供了一个该 Repository 的 Chart 包的清单文件以供查询。Helm 可以同时管理多个不同的 Repository</p><h4 id="1-4、Release"><a href="#1-4、Release" class="headerlink" title="1.4、Release"></a>1.4、Release</h4><p>使用 helm install 命令在 Kubernetes 集群中部署的 Chart 称为 Release</p><h3 id="2、helm安装"><a href="#2、helm安装" class="headerlink" title="2、helm安装"></a>2、helm安装</h3><ul><li>下载helm<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://storage.googleapis.com/kubernetes-helm/helm-v2.14.3-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar zxf helm-v2.14.3-linux-amd64.tar.gz &amp;&amp; mv linux-amd64/&#123;helm,tiller&#125; /usr/bin</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-1、创建分蘖服务帐户"><a href="#2-1、创建分蘖服务帐户" class="headerlink" title="2.1、创建分蘖服务帐户"></a>2.1、创建分蘖服务帐户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create serviceaccount tiller --namespace kube-system</span></span><br><span class="line">serviceaccount/tiller created</span><br></pre></td></tr></table></figure><h4 id="2-2、授予分蘖集群管理员角色"><a href="#2-2、授予分蘖集群管理员角色" class="headerlink" title="2.2、授予分蘖集群管理员角色"></a>2.2、授予分蘖集群管理员角色</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create clusterrolebinding tiller-admin-binding --clusterrole=cluster-admin --serviceaccount=kube-system:tiller</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/tiller-admin-binding created</span><br></pre></td></tr></table></figure><h4 id="2-2、安装tiller"><a href="#2-2、安装tiller" class="headerlink" title="2.2、安装tiller"></a>2.2、安装tiller</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm init --service-account tiller --upgrade -i docker.io/sapcc/tiller:v2.14.3 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span></span><br></pre></td></tr></table></figure><h5 id="2-2-1、检查是否安装成功"><a href="#2-2-1、检查是否安装成功" class="headerlink" title="2.2.1、检查是否安装成功"></a>2.2.1、检查是否安装成功</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -n kube-system get pods|grep tiller</span></span><br><span class="line">tiller-deploy-75b8f8575d-fplck          1/1     Running   0          17h</span><br><span class="line"></span><br><span class="line"><span class="comment"># helm version</span></span><br><span class="line">Client: &amp;version.Version&#123;SemVer:<span class="string">"v2.14.3"</span>, GitCommit:<span class="string">"0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085"</span>, GitTreeState:<span class="string">"clean"</span>&#125;</span><br><span class="line">Server: &amp;version.Version&#123;SemVer:<span class="string">"v2.14.3"</span>, GitCommit:<span class="string">"0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085"</span>, GitTreeState:<span class="string">"clean"</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>错误</strong>: 这里安装完成后执行<code>helm version</code>提示错误，内容如下:<br><code>E0904 18:51:07.730671 22845 portforward.go:391] an error occurred forwarding 38767 -&gt; 44134: error forwarding port 44134 to pod b52064300cfa79e6d83795535584f89c97c33dc91ea39c024492b7b40e3fb68e, uid : unable to do port forwarding: socat not found.</code>这个错误需要在客户端安装一个<a href="https://github.com/helm/helm/issues/1371" target="_blank" rel="noopener">socat插件</a></li></ul><ul><li><p>在node安装socat</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install -y socat</span></span><br></pre></td></tr></table></figure></li><li><p>修改helm第三方存储库(可选)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm repo add stable https://burdenbear.github.io/kube-charts-mirror/</span></span><br><span class="line"><span class="comment"># helm repo list</span></span><br><span class="line">NAME     URL                                             </span><br><span class="line"><span class="built_in">local</span>    http://127.0.0.1:8879/charts                    </span><br><span class="line">monocular https://helm.github.io/monocular                </span><br><span class="line">stable   https://burdenbear.github.io/kube-charts-mirror/</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、测试和启动本地helm-web"><a href="#3、测试和启动本地helm-web" class="headerlink" title="3、测试和启动本地helm web"></a>3、测试和启动本地helm web</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm list</span></span><br><span class="line"><span class="comment"># helm search</span></span><br><span class="line"><span class="comment"># helm search mysql --versions</span></span><br><span class="line"><span class="comment"># helm repo list</span></span><br><span class="line"><span class="comment"># helm serve --address 0.0.0.0:8879 &amp;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/1567651293339.jpg" alt="img"></p><h3 id="4、helm-web-ui"><a href="#4、helm-web-ui" class="headerlink" title="4、helm web ui"></a>4、helm web ui</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;helm安装以后，经常使用helm cli命来进行部署还是比较吃力的，而且对于有些人不喜欢cli的来说，是一个非常痛苦的事情，这里介绍一款kubeapps，Kubeapps是一个基于Web的UI，用于在Kubernetes集群中部署和管理应用程序。 Kubeapps允许您：</p><ul><li>从图表存储库中浏览和部署Helm图表</li><li>检查，升级和删除群集中安装的基于Helm的应用程序</li><li>添加自定义和私有图表存储库（支持ChartMuseum和JFrog Artifactory)</li><li>从服务目录和可用的Service Brokers浏览和配置外部服务</li><li>使用服务目录绑定将基于Helm的应用程序连接到外部服务</li><li>基于Kubernetes基于角色的访问控制的安全身份验证和授权</li></ul><h4 id="4-1、安装kubeapps"><a href="#4-1、安装kubeapps" class="headerlink" title="4.1、安装kubeapps"></a>4.1、安装kubeapps</h4><p>使用Helm图表安装<a href="https://github.com/kubeapps/kubeapps" target="_blank" rel="noopener">最新版本的Kubeapps</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm repo add bitnami https://charts.bitnami.com/bitnami</span></span><br><span class="line"><span class="comment"># helm install --name kubeapps --namespace kubeapps bitnami/kubeapps</span></span><br></pre></td></tr></table></figure><h4 id="4-2、启动kubeappsDashboard"><a href="#4-2、启动kubeappsDashboard" class="headerlink" title="4.2、启动kubeappsDashboard"></a>4.2、启动kubeappsDashboard</h4><p>安装Kubeapps后，运行以下命令从系统安全访问Kubeapps Dashboard</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export POD_NAME=$(kubectl get pods --namespace kubeapps -l "app=kubeapps" -o jsonpath="&#123;.items[0].metadata.name&#125;")</span></span><br><span class="line"><span class="comment"># kubectl port-forward -n kubeapps $POD_NAME --address 0.0.0.0 8081:8080 &amp;</span></span><br><span class="line"><span class="comment"># 把容器的8080 映射到本地的8081端口，用于浏览器访问</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/1567650844980.jpg" alt="img"></p><h4 id="4-3、创建token"><a href="#4-3、创建token" class="headerlink" title="4.3、创建token"></a>4.3、创建token</h4><p>访问仪表板需要Kubernetes API令牌才能通过Kubernetes API服务器进行身份验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create serviceaccount kubeapps-operator</span></span><br><span class="line">serviceaccount/kubeapps-operator created</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl create clusterrolebinding kubeapps-operator --clusterrole=cluster-admin --serviceaccount=default:kubeapps-operator</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubeapps-operator created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取token</span></span><br><span class="line"><span class="comment"># kubectl get secret $(kubectl get serviceaccount kubeapps-operator -o jsonpath='&#123;.secrets[].name&#125;') -o jsonpath='&#123;.data.token&#125;' | base64 --decode</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/1567650971425.jpg" alt="img"></p><h5 id="4-3-1、创建token访问脚本"><a href="#4-3-1、创建token访问脚本" class="headerlink" title="4.3.1、创建token访问脚本"></a>4.3.1、创建token访问脚本</h5><p>每次访问kubeapps的token 都要输入一长串，这里我们写一个shell脚本，放在<code>/usr/bin</code>目录，需要的时候执行命令即可，这样方便用于记</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /usr/bin/kubeapps</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">kubectl get secret $(kubectl get serviceaccount kubeapps-operator -o jsonpath=<span class="string">'&#123;.secrets[].name&#125;'</span>) -o jsonpath=<span class="string">'&#123;.data.token&#125;'</span> | base64 --decode</span><br><span class="line"><span class="comment"># chmod +x /usr/bin/kubeapps</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>helm</tag>
      </tags>
  </entry>
  <entry>
    <title>metrics-server安装季</title>
    <url>/2019/09/04/metrics-server%E5%AE%89%E8%A3%85%E5%AD%A3/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics-server 通过 kube-apiserver 发现所有节点，然后调用 kubelet APIs（通过 https 接口）获得各节点（Node）和 Pod 的 CPU、Memory 等资源使用情况。Kubernetes 1.12 开始，kubernetes 的安装脚本移除了 Heapster，从 1.13 开始完全移除了对 Heapster 的支持，Heapster 不再被维护。</p><ul><li>替代方案如下:<ul><li>用于支持自动扩缩容的 CPU/memory HPA metrics：metrics-server</li><li>通用的监控方案：使用第三方可以获取 Prometheus 格式监控指标的监控系统，如 Prometheus Operator</li><li>事件传输：使用第三方工具来传输、归档 kubernetes events</li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用 metrics-server 替代 Heapster，将无法在 dashboard 中以图形展示 Pod 的内存和 CPU 情况，需要通过 Prometheus、Grafana 等监控方案来弥补。</p><a id="more"></a><h4 id="1、监控架构"><a href="#1、监控架构" class="headerlink" title="1、监控架构"></a>1、监控架构</h4><p><img src="https://img.xxlaila.cn/2748678bdjsg848sd.png" alt="img"></p><h4 id="2、安装-metrics-server"><a href="#2、安装-metrics-server" class="headerlink" title="2、安装 metrics-server"></a>2、安装 metrics-server</h4><ul><li>从 github clone 源码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/xxlaila/kubernetes-yaml.git</span></span><br><span class="line"><span class="comment"># cd kubernetes-yaml/metrics-server</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">aggregated-metrics-reader.yaml  auth-delegator.yaml  auth-reader.yaml  metrics-apiservice.yaml  metrics-server-deployment.yaml  metrics-server-service.yaml  resource-reader.yaml</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>注意</strong>: 之前在安装的时候遇到很多坑，而且网上看了教程基本上不能用，很坑，自己看网上教程，然后根据每一个错误来进行解决，终于，功夫不负有心人，花了一天半终于搞定啦。</li></ul><h4 id="3、metrics-server-文件修改"><a href="#3、metrics-server-文件修改" class="headerlink" title="3、metrics-server 文件修改"></a>3、metrics-server 文件修改</h4><p>metrics-server yaml文件这里文件已经修改好了，可以直接拿来用，<a href="https://github.com/kubernetes-incubator/metrics-server/issues/247" target="_blank" rel="noopener">参考文献</a>，</p><h5 id="3-1、metrics-server-deployment-yaml"><a href="#3-1、metrics-server-deployment-yaml" class="headerlink" title="3.1、metrics-server-deployment.yaml"></a>3.1、metrics-server-deployment.yaml</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat metrics-server-deployment.yaml</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: metrics-server</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: metrics-server</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: metrics-server</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: metrics-server</span><br><span class="line">      hostNetwork: <span class="literal">true</span>   <span class="comment">#增加行</span></span><br><span class="line">      volumes:</span><br><span class="line">      <span class="comment"># mount in tmp so we can safely use from-scratch images and/or read-only containers</span></span><br><span class="line">      - name: tmp-dir</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      containers:</span><br><span class="line">      - name: metrics-server</span><br><span class="line">        image: mirrorgooglecontainers/metrics-server-amd64:v0.3.3</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /etc/ssl/kubernetes/</span><br><span class="line">          name: ca-ssl</span><br><span class="line">        <span class="built_in">command</span>:   <span class="comment"># command内容均为增加</span></span><br><span class="line">        - /metrics-server</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br><span class="line">        - --requestheader-client-ca-file=/etc/ssl/kubernetes/front-proxy-ca.pem</span><br><span class="line">        - --kubelet-insecure-tls=<span class="literal">true</span></span><br><span class="line">      volumes:</span><br><span class="line">       - name: ca-ssl</span><br><span class="line">         hostPath:</span><br><span class="line">          path: /etc/kubernetes/ssl</span><br></pre></td></tr></table></figure><h5 id="3-2、"><a href="#3-2、" class="headerlink" title="3.2、"></a>3.2、</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat resource-reader.yaml</span></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes/stats</span><br><span class="line">  - namespaces</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups: <span class="comment"># 增加</span></span><br><span class="line">  - <span class="string">"extensions"</span></span><br><span class="line">  resources:</span><br><span class="line">  - deployments</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure><h4 id="4、准备证书"><a href="#4、准备证书" class="headerlink" title="4、准备证书"></a>4、准备证书</h4><p>这些证书文件主要用在Metrics API aggregator 上,<a href="https://blog.51cto.com/ylw6006/2114338" target="_blank" rel="noopener">参考文献</a></p><ul><li><p>front-proxy-ca-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat front-proxy-ca-csr.json </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>front-proxy-client-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"front-proxy-client"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-1、生成证书"><a href="#4-1、生成证书" class="headerlink" title="4.1、生成证书"></a>4.1、生成证书</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert   -initca front-proxy-ca-csr.json | cfssljson -bare front-proxy-ca</span></span><br><span class="line"><span class="comment"># cfssl gencert \</span></span><br><span class="line"> -ca=front-proxy-ca.pem \</span><br><span class="line"> -ca-key=front-proxy-ca-key.pem \</span><br><span class="line"> -config=/root/ssl/kubernetes-gencert.json \</span><br><span class="line"> -profile=kubernetes \</span><br><span class="line"> front-proxy-client-csr.json | cfssljson -bare front-proxy-client</span><br><span class="line"><span class="comment"># ls *.pem</span></span><br><span class="line">front-proxy-ca-key.pem  front-proxy-ca.pem  front-proxy-client-key.pem  front-proxy-client.pem</span><br></pre></td></tr></table></figure><ul><li>证书生成完成后，吧证书复制到所有的master节点和node节点</li></ul><h4 id="5、master修改配置文件"><a href="#5、master修改配置文件" class="headerlink" title="5、master修改配置文件"></a>5、master修改配置文件</h4><h4 id="5-1、apiserver"><a href="#5-1、apiserver" class="headerlink" title="5.1、apiserver"></a>5.1、apiserver</h4><p>在apiserver配置文件里面增加如下配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--runtime-config=api/all=<span class="literal">true</span> \</span><br><span class="line">--<span class="built_in">enable</span>-aggregator-routing=<span class="literal">true</span> \</span><br><span class="line">--requestheader-client-ca-file=/etc/kubernetes/ssl/front-proxy-ca.pem \</span><br><span class="line">--requestheader-allowed-names=aggregator \</span><br><span class="line">--requestheader-extra-headers-prefix=X-Remote-Extra- \</span><br><span class="line">--requestheader-group-headers=X-Remote-Group \</span><br><span class="line">--requestheader-username-headers=X-Remote-User \</span><br><span class="line">--proxy-client-cert-file=/etc/kubernetes/ssl/front-proxy-client.pem \</span><br><span class="line">--proxy-client-key-file=/etc/kubernetes/ssl/front-proxy-client-key.pem \</span><br></pre></td></tr></table></figure><ul><li>apiserver配置文件KUBE_API_ARGS内容如下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KUBE_API_ARGS=<span class="string">" --allow-privileged=true \</span></span><br><span class="line"><span class="string">                --anonymous-auth=false \</span></span><br><span class="line"><span class="string">                --alsologtostderr \</span></span><br><span class="line"><span class="string">                --apiserver-count=3 \</span></span><br><span class="line"><span class="string">                --audit-log-maxage=30 \</span></span><br><span class="line"><span class="string">                --audit-log-maxbackup=3 \</span></span><br><span class="line"><span class="string">                --audit-log-maxsize=100 \</span></span><br><span class="line"><span class="string">                --enable-aggregator-routing=true \</span></span><br><span class="line"><span class="string">                --audit-log-path=/var/log/kube-audit/audit.log \</span></span><br><span class="line"><span class="string">                --audit-policy-file=/etc/kubernetes/audit-policy.yaml \</span></span><br><span class="line"><span class="string">                --authorization-mode=Node,RBAC \</span></span><br><span class="line"><span class="string">                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --enable-bootstrap-token-auth \</span></span><br><span class="line"><span class="string">                --enable-garbage-collector \</span></span><br><span class="line"><span class="string">                --enable-logs-handler \</span></span><br><span class="line"><span class="string">                --endpoint-reconciler-type=lease \</span></span><br><span class="line"><span class="string">                --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem \</span></span><br><span class="line"><span class="string">                --etcd-certfile=/etc/etcd/ssl/etcd.pem \</span></span><br><span class="line"><span class="string">                --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</span></span><br><span class="line"><span class="string">                --etcd-compaction-interval=0s \</span></span><br><span class="line"><span class="string">                --event-ttl=168h0m0s \</span></span><br><span class="line"><span class="string">                --kubelet-https=true \</span></span><br><span class="line"><span class="string">                --kubelet-certificate-authority=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --kubelet-client-certificate=/etc/kubernetes/ssl/kubelet-api-admin.pem \</span></span><br><span class="line"><span class="string">                --kubelet-client-key=/etc/kubernetes/ssl/kubelet-api-admin-key.pem \</span></span><br><span class="line"><span class="string">                --kubelet-timeout=3s \</span></span><br><span class="line"><span class="string">                --runtime-config=api/all=true \</span></span><br><span class="line"><span class="string">                --service-node-port-range=30000-50000 \</span></span><br><span class="line"><span class="string">                --service-account-key-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem \</span></span><br><span class="line"><span class="string">                --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span></span><br><span class="line"><span class="string">                --requestheader-client-ca-file=/etc/kubernetes/ssl/front-proxy-ca.pem \</span></span><br><span class="line"><span class="string">                --requestheader-allowed-names=aggregator \</span></span><br><span class="line"><span class="string">                --requestheader-extra-headers-prefix=X-Remote-Extra- \</span></span><br><span class="line"><span class="string">                --requestheader-group-headers=X-Remote-Group \</span></span><br><span class="line"><span class="string">                --requestheader-username-headers=X-Remote-User \</span></span><br><span class="line"><span class="string">                --proxy-client-cert-file=/etc/kubernetes/ssl/front-proxy-client.pem \</span></span><br><span class="line"><span class="string">                --proxy-client-key-file=/etc/kubernetes/ssl/front-proxy-client-key.pem \</span></span><br><span class="line"><span class="string">                --v=2"</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="5-2、kube-control-manager"><a href="#5-2、kube-control-manager" class="headerlink" title="5.2、kube-control-manager"></a>5.2、kube-control-manager</h5><p>在controller-manager文件增加如下配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--horizontal-pod-autoscaler-use-rest-clients=<span class="literal">true</span> \</span><br></pre></td></tr></table></figure><ul><li>kube-control-manager配置文件KUBE_CONTROLLER_MANAGER_ARGS如下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KUBE_CONTROLLER_MANAGER_ARGS=<span class="string">"  --address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                                --authentication-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --authorization-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --bind-address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                                --cluster-name=kubernetes \</span></span><br><span class="line"><span class="string">                                --cluster-signing-cert-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --cluster-signing-key-file=/etc/kubernetes/ssl/kubernetes-ca-key.pem \</span></span><br><span class="line"><span class="string">                                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --controllers=*,bootstrapsigner,tokencleaner \</span></span><br><span class="line"><span class="string">                                --deployment-controller-sync-period=10s \</span></span><br><span class="line"><span class="string">                                --experimental-cluster-signing-duration=87600h0m0s \</span></span><br><span class="line"><span class="string">                                --enable-garbage-collector=true \</span></span><br><span class="line"><span class="string">                                --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --leader-elect=true \</span></span><br><span class="line"><span class="string">                                --node-monitor-grace-period=20s \</span></span><br><span class="line"><span class="string">                                --node-monitor-period=5s \</span></span><br><span class="line"><span class="string">                                --port=10252 \</span></span><br><span class="line"><span class="string">                                --pod-eviction-timeout=2m0s \</span></span><br><span class="line"><span class="string">                                --requestheader-client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --terminated-pod-gc-threshold=50 \</span></span><br><span class="line"><span class="string">                                --tls-cert-file=/etc/kubernetes/ssl/kube-controller-manager.pem \</span></span><br><span class="line"><span class="string">                                --tls-private-key-file=/etc/kubernetes/ssl/kube-controller-manager-key.pem \</span></span><br><span class="line"><span class="string">                                --root-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --secure-port=10257 \</span></span><br><span class="line"><span class="string">                                --service-cluster-ip-range=10.254.0.0/16 \</span></span><br><span class="line"><span class="string">                                --service-account-private-key-file=/etc/kubernetes/ssl/kubernetes-ca-key.pem \</span></span><br><span class="line"><span class="string">                                --use-service-account-credentials=true \</span></span><br><span class="line"><span class="string">                                --horizontal-pod-autoscaler-use-rest-clients=true \</span></span><br><span class="line"><span class="string">                                --v=2"</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="5-3、重启服务"><a href="#5-3、重启服务" class="headerlink" title="5.3、重启服务"></a>5.3、重启服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl  restart kube-apiserver.service &amp;&amp;systemctl  restart kube-controller-manager</span></span><br></pre></td></tr></table></figure><h4 id="6、node节点配置文件修改"><a href="#6、node节点配置文件修改" class="headerlink" title="6、node节点配置文件修改"></a>6、node节点配置文件修改</h4><p>node 节点修改修改kubelet文件</p><ul><li><p>kubelet配置文件完成的KUBELET_ARGS参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KUBELET_ARGS=<span class="string">"  --address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                --allow-privileged \</span></span><br><span class="line"><span class="string">                --anonymous-auth=false \</span></span><br><span class="line"><span class="string">                --authorization-mode=Webhook \</span></span><br><span class="line"><span class="string">                --authentication-token-webhook=true \</span></span><br><span class="line"><span class="string">                --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span></span><br><span class="line"><span class="string">                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --cgroup-driver=cgroupfs \</span></span><br><span class="line"><span class="string">                --cert-dir=/etc/kubernetes/ssl \</span></span><br><span class="line"><span class="string">                --cluster-dns=10.254.0.2 \</span></span><br><span class="line"><span class="string">                --cluster-domain=cluster.local \</span></span><br><span class="line"><span class="string">                --eviction-soft=imagefs.available&lt;15%,memory.available&lt;512Mi,nodefs.available&lt;15%,nodefs.inodesFree&lt;10% \</span></span><br><span class="line"><span class="string">                --eviction-soft-grace-period=imagefs.available=3m,memory.available=1m,nodefs.available=3m,nodefs.inodesFree=1m \</span></span><br><span class="line"><span class="string">                --eviction-hard=imagefs.available&lt;10%,memory.available&lt;256Mi,nodefs.available&lt;10%,nodefs.inodesFree&lt;5% \</span></span><br><span class="line"><span class="string">                --eviction-max-pod-grace-period=30 \</span></span><br><span class="line"><span class="string">                --image-gc-high-threshold=80 \</span></span><br><span class="line"><span class="string">                --image-gc-low-threshold=70 \</span></span><br><span class="line"><span class="string">                --image-pull-progress-deadline=30s \</span></span><br><span class="line"><span class="string">                --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span></span><br><span class="line"><span class="string">                --max-pods=100 \</span></span><br><span class="line"><span class="string">                --minimum-image-ttl-duration=720h0m0s \</span></span><br><span class="line"><span class="string">                --node-labels=node.kubernetes.io/k8s-node=true \</span></span><br><span class="line"><span class="string">                --pod-infra-container-image=docker.io/kubernetes/pause:latest \</span></span><br><span class="line"><span class="string">                --port=10250 \</span></span><br><span class="line"><span class="string">                --read-only-port=0 \</span></span><br><span class="line"><span class="string">                --rotate-certificates \</span></span><br><span class="line"><span class="string">                --rotate-server-certificates \</span></span><br><span class="line"><span class="string">                --fail-swap-on=false \</span></span><br><span class="line"><span class="string">                --v=2"</span></span><br></pre></td></tr></table></figure></li><li><p>重启kubelet</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl restart kubelet</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="7、创建metrics"><a href="#7、创建metrics" class="headerlink" title="7、创建metrics"></a>7、创建metrics</h4><p>通过yaml文件创建对应的资源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f ./</span></span><br></pre></td></tr></table></figure><h5 id="7-1、查看运行情况"><a href="#7-1、查看运行情况" class="headerlink" title="7.1、查看运行情况"></a>7.1、查看运行情况</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -n kube-system get pods -l k8s-app=metrics-server</span></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">metrics-server-84b786c9bb-7trdr   1/1     Running   0          62m</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get svc -n kube-system  metrics-server</span></span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">metrics-server   ClusterIP   10.254.45.238   &lt;none&gt;        443/TCP   3h6m</span><br></pre></td></tr></table></figure><h5 id="7-2、获取v1beta1-metrics-k8s-io并验证"><a href="#7-2、获取v1beta1-metrics-k8s-io并验证" class="headerlink" title="7.2、获取v1beta1.metrics.k8s.io并验证"></a>7.2、获取v1beta1.metrics.k8s.io并验证</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前<code>v1beta1.metrics.k8s.io kube-system/metrics-server True 3h</code>参数一直是<code>v1beta1.metrics.k8s.io kube-system/metrics-server False (FailedDiscoveryCheck) 16m</code>,</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  kubectl get apiservice</span></span><br><span class="line">NAME                                    SERVICE                      AVAILABLE   AGE</span><br><span class="line">v1.                                     Local                        True        4d</span><br><span class="line">v1.apps                                 Local                        True        4d</span><br><span class="line">v1.authentication.k8s.io                Local                        True        4d</span><br><span class="line">v1.authorization.k8s.io                 Local                        True        4d</span><br><span class="line">v1.autoscaling                          Local                        True        4d</span><br><span class="line">v1.batch                                Local                        True        4d</span><br><span class="line">v1.networking.k8s.io                    Local                        True        4d</span><br><span class="line">v1.rbac.authorization.k8s.io            Local                        True        4d</span><br><span class="line">v1.storage.k8s.io                       Local                        True        4d</span><br><span class="line">v1alpha1.admissionregistration.k8s.io   Local                        True        4d</span><br><span class="line">v1alpha1.auditregistration.k8s.io       Local                        True        4d</span><br><span class="line">v1alpha1.rbac.authorization.k8s.io      Local                        True        4d</span><br><span class="line">v1alpha1.scheduling.k8s.io              Local                        True        4d</span><br><span class="line">v1alpha1.settings.k8s.io                Local                        True        4d</span><br><span class="line">v1alpha1.storage.k8s.io                 Local                        True        4d</span><br><span class="line">v1beta1.admissionregistration.k8s.io    Local                        True        4d</span><br><span class="line">v1beta1.apiextensions.k8s.io            Local                        True        4d</span><br><span class="line">v1beta1.apps                            Local                        True        4d</span><br><span class="line">v1beta1.authentication.k8s.io           Local                        True        4d</span><br><span class="line">v1beta1.authorization.k8s.io            Local                        True        4d</span><br><span class="line">v1beta1.batch                           Local                        True        4d</span><br><span class="line">v1beta1.certificates.k8s.io             Local                        True        4d</span><br><span class="line">v1beta1.coordination.k8s.io             Local                        True        4d</span><br><span class="line">v1beta1.events.k8s.io                   Local                        True        4d</span><br><span class="line">v1beta1.extensions                      Local                        True        4d</span><br><span class="line">v1beta1.metrics.k8s.io                  kube-system/metrics-server   True        3h</span><br><span class="line">v1beta1.policy                          Local                        True        4d</span><br><span class="line">v1beta1.rbac.authorization.k8s.io       Local                        True        4d</span><br><span class="line">v1beta1.scheduling.k8s.io               Local                        True        4d</span><br><span class="line">v1beta1.storage.k8s.io                  Local                        True        4d</span><br><span class="line">v1beta2.apps                            Local                        True        4d</span><br><span class="line">v2alpha1.batch                          Local                        True        4d</span><br><span class="line">v2beta1.autoscaling                     Local                        True        4d</span><br><span class="line">v2beta2.autoscaling                     Local                        True        4d</span><br></pre></td></tr></table></figure><h4 id="8、查看-metrics-server-输出的-metrics"><a href="#8、查看-metrics-server-输出的-metrics" class="headerlink" title="8、查看 metrics-server 输出的 metrics"></a>8、查看 metrics-server 输出的 metrics</h4><h5 id="8-1、通过-kube-apiserver-或-kubectl-proxy-访问"><a href="#8-1、通过-kube-apiserver-或-kubectl-proxy-访问" class="headerlink" title="8.1、通过 kube-apiserver 或 kubectl proxy 访问"></a>8.1、通过 kube-apiserver 或 kubectl proxy 访问</h5><ul><li><a href="https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/nodes" target="_blank" rel="noopener">https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/nodes</a></li><li><a href="https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/nodes/" target="_blank" rel="noopener">https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/nodes/</a></li><li><a href="https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/pods" target="_blank" rel="noopener">https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/pods</a></li><li><a href="https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/namespace//pods/" target="_blank" rel="noopener">https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/namespace//pods/</a></li></ul><h5 id="8-2、直接使用-kubectl-命令访问"><a href="#8-2、直接使用-kubectl-命令访问" class="headerlink" title="8.2、直接使用 kubectl 命令访问"></a>8.2、直接使用 kubectl 命令访问</h5><ul><li>kubectl get –raw /apis/metrics.k8s.io/v1beta1/nodes</li><li>kubectl get –raw /apis/metrics.k8s.io/v1beta1/pods</li><li>kubectl get –raw /apis/metrics.k8s.io/v1beta1/nodes/</li><li>kubectl get –raw /apis/metrics.k8s.io/v1beta1/namespace//pods/</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get --raw "/apis/metrics.k8s.io/v1beta1" | jq .</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"kind"</span>: <span class="string">"APIResourceList"</span>,</span><br><span class="line">  <span class="string">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">  <span class="string">"groupVersion"</span>: <span class="string">"metrics.k8s.io/v1beta1"</span>,</span><br><span class="line">  <span class="string">"resources"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"nodes"</span>,</span><br><span class="line">      <span class="string">"singularName"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"namespaced"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"kind"</span>: <span class="string">"NodeMetrics"</span>,</span><br><span class="line">      <span class="string">"verbs"</span>: [</span><br><span class="line">        <span class="string">"get"</span>,</span><br><span class="line">        <span class="string">"list"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"pods"</span>,</span><br><span class="line">      <span class="string">"singularName"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"namespaced"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"kind"</span>: <span class="string">"PodMetrics"</span>,</span><br><span class="line">      <span class="string">"verbs"</span>: [</span><br><span class="line">        <span class="string">"get"</span>,</span><br><span class="line">        <span class="string">"list"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get --raw "/apis/metrics.k8s.io/v1beta1/nodes" | jq .</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"kind"</span>: <span class="string">"NodeMetricsList"</span>,</span><br><span class="line">  <span class="string">"apiVersion"</span>: <span class="string">"metrics.k8s.io/v1beta1"</span>,</span><br><span class="line">  <span class="string">"metadata"</span>: &#123;</span><br><span class="line">    <span class="string">"selfLink"</span>: <span class="string">"/apis/metrics.k8s.io/v1beta1/nodes"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"items"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"metadata"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"172.21.16.204"</span>,</span><br><span class="line">        <span class="string">"selfLink"</span>: <span class="string">"/apis/metrics.k8s.io/v1beta1/nodes/172.21.16.204"</span>,</span><br><span class="line">        <span class="string">"creationTimestamp"</span>: <span class="string">"2019-09-04T07:00:44Z"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2019-09-04T07:00:40Z"</span>,</span><br><span class="line">      <span class="string">"window"</span>: <span class="string">"30s"</span>,</span><br><span class="line">      <span class="string">"usage"</span>: &#123;</span><br><span class="line">        <span class="string">"cpu"</span>: <span class="string">"63788460n"</span>,</span><br><span class="line">        <span class="string">"memory"</span>: <span class="string">"1033152Ki"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"metadata"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"172.21.16.240"</span>,</span><br><span class="line">        <span class="string">"selfLink"</span>: <span class="string">"/apis/metrics.k8s.io/v1beta1/nodes/172.21.16.240"</span>,</span><br><span class="line">        <span class="string">"creationTimestamp"</span>: <span class="string">"2019-09-04T07:00:44Z"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2019-09-04T07:00:40Z"</span>,</span><br><span class="line">      <span class="string">"window"</span>: <span class="string">"30s"</span>,</span><br><span class="line">      <span class="string">"usage"</span>: &#123;</span><br><span class="line">        <span class="string">"cpu"</span>: <span class="string">"41797865n"</span>,</span><br><span class="line">        <span class="string">"memory"</span>: <span class="string">"837420Ki"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"metadata"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"172.21.16.87"</span>,</span><br><span class="line">        <span class="string">"selfLink"</span>: <span class="string">"/apis/metrics.k8s.io/v1beta1/nodes/172.21.16.87"</span>,</span><br><span class="line">        <span class="string">"creationTimestamp"</span>: <span class="string">"2019-09-04T07:00:44Z"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2019-09-04T07:00:34Z"</span>,</span><br><span class="line">      <span class="string">"window"</span>: <span class="string">"30s"</span>,</span><br><span class="line">      <span class="string">"usage"</span>: &#123;</span><br><span class="line">        <span class="string">"cpu"</span>: <span class="string">"37347688n"</span>,</span><br><span class="line">        <span class="string">"memory"</span>: <span class="string">"851232Ki"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>/apis/metrics.k8s.io/v1beta1/nodes 和 /apis/metrics.k8s.io/v1beta1/pods 返回的 usage 包含 CPU 和 Memory；</li></ul><h4 id="使用-kubectl-top"><a href="#使用-kubectl-top" class="headerlink" title="使用 kubectl top"></a>使用 kubectl top</h4><p>使用 kubectl top 命令查看集群节点资源使用情况,kubectl top 命令从 metrics-server 获取集群节点基本的指标信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl top node</span></span><br><span class="line">NAME            CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   </span><br><span class="line">172.21.16.204   69m          1%     1008Mi          13%       </span><br><span class="line">172.21.16.240   41m          2%     817Mi           23%       </span><br><span class="line">172.21.16.87    39m          1%     831Mi           23%</span><br></pre></td></tr></table></figure><p>metrics到这里就已经成功的部署，参数没有一一介绍，后期有时间在列出来</p><p>这里还有很多参考的文档没有一一列出来，主要是浏览器被关闭啦，感谢那些参考的文档，😊😊😊</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>metrics-server</tag>
      </tags>
  </entry>
  <entry>
    <title>kubelet提供api请求接口</title>
    <url>/2019/09/04/kubelet%E6%8F%90%E4%BE%9Bapi%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="kubelet-提供的-API-接口认证"><a href="#kubelet-提供的-API-接口认证" class="headerlink" title="kubelet 提供的 API 接口认证"></a>kubelet 提供的 API 接口认证</h3><p><a href="https://xxlaila.github.io/2019/08/10/kubernetes-node%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">node安装参考</a></p><p>kubelet 启动后监听多个端口，用于接收 kube-apiserver 或其它客户端发送的请求：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-3 ~]<span class="comment">#  netstat -lnpt|grep kubelet</span></span><br><span class="line">tcp        0      0 127.0.0.1:46395         0.0.0.0:*               LISTEN      8941/kubelet        </span><br><span class="line">tcp        0      0 127.0.0.1:10248         0.0.0.0:*               LISTEN      8941/kubelet        </span><br><span class="line">tcp6       0      0 :::10250                :::*                    LISTEN      8941/kubelet</span><br></pre></td></tr></table></figure><ul><li><strong>10248</strong>: healthz http 服务</li><li><strong>10250</strong>: https 服务，访问该端口时需要认证和授权（即使访问 /healthz 也需要）</li><li>未开启只读端口 10255</li><li>从 K8S v1.10 开始，去除了 –cadvisor-port 参数（默认 4194 端口），不支持访问 cAdvisor UI &amp; API</li></ul><a id="more"></a><p>kubelet 接收 10250 端口的 https 请求，可以访问如下资源：</p><ul><li>/pods、/runningpods</li><li>/metrics、/metrics/cadvisor、/metrics/probes</li><li>/spec</li><li>/stats、/stats/container</li><li>/logs</li><li>/run/、/exec/, /attach/, /portForward/, /containerLogs/<br><a href="https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/server/server.go#L434:3" target="_blank" rel="noopener">详情参考</a></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;由于关闭了匿名认证，同时开启了 webhook 授权，所有访问 10250 端口 https API 的请求都需要被认证和授权。<br>&nbsp;&nbsp;&nbsp;&nbsp;预定义的 ClusterRole system:kubelet-api-admin 授予访问 kubelet 所有 API 的权限(kube-apiserver 使用的 kubernetes 证书 User 授予了该权限)：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe clusterrole system:kubelet-api-admin</span></span><br><span class="line">Name:         system:kubelet-api-admin</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources      Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------      -----------------  --------------  -----</span><br><span class="line">  nodes/<span class="built_in">log</span>      []                 []              [*]</span><br><span class="line">  nodes/metrics  []                 []              [*]</span><br><span class="line">  nodes/proxy    []                 []              [*]</span><br><span class="line">  nodes/spec     []                 []              [*]</span><br><span class="line">  nodes/stats    []                 []              [*]</span><br><span class="line">  nodes          []                 []              [get list watch proxy]</span><br></pre></td></tr></table></figure><h3 id="kubelet-api-认证和授权"><a href="#kubelet-api-认证和授权" class="headerlink" title="kubelet api 认证和授权"></a>kubelet api 认证和授权</h3><p>kubelet 配置了如下认证参数:</p><ul><li><strong>–anonymous-auth=false</strong>: 设置为 false，不允许匿名�访问 10250 端口</li><li><strong>–authentication-token-webhook=true</strong>: 指定签名客户端证书的 CA 证书，开启 HTTPs 证书认证</li><li><strong>–client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem</strong>: 开启 HTTPs bearer token 认证</li><li><strong>–authorization-mode=Webhook</strong>: 开启 RBAC 授权</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;kubelet 收到请求后，使用 clientCAFile 对证书签名进行认证，或者查询 bearer token 是否有效。如果两者都没通过，则拒绝请求，提示 Unauthorized</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 ~]<span class="comment"># curl -s --cacert /etc/kubernetes/ssl/kubernetes-ca.pem https://172.21.16.204:10250/metrics</span></span><br><span class="line">Unauthorized</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;通过认证后，kubelet 使用 SubjectAccessReview API 向 kube-apiserver 发送请求，查询证书或 token 对应的 user、group 是否有操作资源的权限(RBAC)；</p><h3 id="证书认证和授权"><a href="#证书认证和授权" class="headerlink" title="证书认证和授权"></a>证书认证和授权</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 权限不足</span></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/kubernetes-ca.pem  --cert /etc/kubernetes/ssl/kube-controller-manager.pem --key /etc/kubernetes/ssl/kube-controller-manager-key.pem https://172.21.16.204:10250/metrics</span></span><br><span class="line">Forbidden (user=system:kube-controller-manager, verb=get, resource=nodes, subresource=metrics)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用部署 kubectl 命令行工具时创建的、具有最高权限的 admin 证书</span></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/kubernetes-ca.pem --cert /etc/kubernetes/ssl/admin.pem --key /etc/kubernetes/ssl/admin-key.pem https://172.21.16.204:10250/metrics|head</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"21600"</span>&#125; 0</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>: –cacert、–cert、–key 的参数值必须是文件路径，否则返回 401 Unauthorized；</li></ul><h4 id="bear-token-认证和授权"><a href="#bear-token-认证和授权" class="headerlink" title="bear token 认证和授权"></a>bear token 认证和授权</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;创建一个 ServiceAccount，将它和 ClusterRole system:kubelet-api-admin 绑定，从而具有调用 kubelet API 的权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">horization.k8s.io/kubelet-api-test created</span><br><span class="line"><span class="comment"># SECRET=$(kubectl get secrets | grep kubelet-api-test | awk '&#123;print $1&#125;')</span></span><br><span class="line"><span class="comment"># TOKEN=$(kubectl describe secret $&#123;SECRET&#125; | grep -E '^token' | awk '&#123;print $2&#125;')</span></span><br><span class="line"><span class="comment"># echo $&#123;TOKEN&#125;</span></span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Imt1YmVsZXQtYXBpLXRlc3QtdG9rZW4tNGJra3MiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoia3ViZWxldC1hcGktdGVzdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijk3MDRhZDEwLWNlYjQtMTFlOS04ZDIwLWZhMTYzZTVhZjgzMyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0Omt1YmVsZXQtYXBpLXRlc3QifQ.ishvOaC5tppYKDNpEOXIiVhVtgjyqzjySZjzndot5Z5U9MkY9LN8ZSMWRe6lNsB1UuTgEWTsHlG3OIRfExnHehYhWIt59V9e39KKbeY17hHoT-RZSaD6GoB449t_vUdIJedd1FGZ8DckQvDr6X5fMuD7MSU3vRL077j-uls-y4IW5kaJHeAGJfc6eWoCnv96DCbI8mQ8yuYbwLFpfIPLb4u6FPkwMQL2KXy6FhWPY1va6zAh4LdjGWhH6IAkKleq0aqfMwvmlnk1_OUmnmBoGJGuB96IwqBATP0jFzrd-Sv6af3RsSYz2r8YzJUj3kat9bd__HNCCXampYYr8ffu8YEdn-J9p6HK13FWU4O9QSIDrRONNIOpUXclJ-ov3z6N1hiIcVq5UJU6xR2z4ccvPXmH9Sj7p8CquqKEuobZxK97TFtECGlb2Ex43u4t0UHRo23UCQA-qP2Zs4-U2Zmf_qu3I-Lm7jzuYzXFCAb27yZx_XOUY-ycnKhtM6PpUfVKhkcHfWBOYY-QtBEbYf6yHRqCWcjrsZ63C_B56qAYaU5ca3hAcr6RBuHmmHISGESlLbmrpGgJ_ajd5mrJSh3Z_qdqu-Xt0Ya0NLfXgAcGi5n8xWJLztRTeyHrFTj7g82MqERUfFk9bdLHcz77xmrNLnhRZ87GW9sTZLw8QRUjF1g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/kubernetes-ca.pem -H "Authorization: Bearer $&#123;TOKEN&#125;" https://172.21.16.204:10250/metrics|head</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"21600"</span>&#125; 0</span><br></pre></td></tr></table></figure><h4 id="cadvisor-和-metrics"><a href="#cadvisor-和-metrics" class="headerlink" title="cadvisor 和 metrics"></a>cadvisor 和 metrics</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;cadvisor 是内嵌在 kubelet 二进制中的，统计所在节点各容器的资源(CPU、内存、磁盘、网卡)使用情况的服务.</p><blockquote><p>在访问api-server安全端口之前，我们需要做一些操作才能访问，否则无法进行访问</p></blockquote><h5 id="在浏览器访问kube-apiserver安全端口"><a href="#在浏览器访问kube-apiserver安全端口" class="headerlink" title="在浏览器访问kube-apiserver安全端口"></a>在浏览器访问kube-apiserver安全端口</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;提示证书不被信任,这是因为 kube-apiserver 的 server 证书是我们创建的根证书 ca.pem 签名的，需要将根证书 ca.pem 导入操作系统，并设置永久信任。<br><img src="https://img.xxlaila.cn/1567564092242.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;给浏览器生成一个 client 证书，访问 apiserver 的 6443 https 端口时使用。这里使用部署 kubectl 命令行工具时创建的 admin 证书、私钥和上面的 ca 证书，创建一个浏览器可以使用 PKCS#12/PFX 格式的证书：</p><ul><li><p>会提示输入密码，这里密码需要记住，一会倒入证书到浏览器的时候需要</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openssl pkcs12 -export -out admin.pfx -inkey admin-key.pem -in admin.pem -certfile kubernetes-ca.pem</span></span><br><span class="line">Enter Export Password:</span><br><span class="line">Verifying - Enter Export Password:</span><br></pre></td></tr></table></figure></li><li><p>将创建的 admin.pfx 导入到系统的证书中,<br><img src="https://img.xxlaila.cn/1567564289155.jpg" alt="img"></p></li></ul><p>再次访问 apiserver 地址，提示选择一个浏览器证书，这里选中上面导入的 admin.pfx<br><img src="https://img.xxlaila.cn/1567564393274.jpg" alt="img"></p><ul><li><p>提示需要输入系统的密码,这里是mac的电脑<br><img src="https://img.xxlaila.cn/1567564441293.jpg" alt="img"></p></li><li><p>被授权访问 kube-apiserver 的安全端口<br><img src="https://img.xxlaila.cn/1567564526664.jpg" alt="img"></p></li></ul><h5 id="客户端选择证书的原理"><a href="#客户端选择证书的原理" class="headerlink" title="客户端选择证书的原理"></a>客户端选择证书的原理</h5><ul><li>证书选择是在客户端和服务端 SSL/TLS 握手协商阶段商定的；</li><li>服务端如果要求客户端提供证书，则在握手时会向客户端发送一个它接受的 CA 列表；</li><li>客户端查找它的证书列表(一般是操作系统的证书，对于 Mac 为 keychain)，看有没有被 CA 签名的证书，如果有，则将它们提供给用户选择（证书的私钥）；</li><li>用户选择一个证书私钥，然后客户端将使用它和服务端通信；</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;在浏览器访问 <a href="https://172.21.16.204:10250/metrics" target="_blank" rel="noopener">https://172.21.16.204:10250/metrics</a> 和 <a href="https://172.21.16.204:10250/metrics/cadvisor" target="_blank" rel="noopener">https://172.21.16.204:10250/metrics/cadvisor</a> 分别返回 kubelet 和 cadvisor 的 metrics。<br><img src="https://img.xxlaila.cn/1567563858215.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1567564733531.jpg" alt="img"></p><ul><li><strong>原因</strong>: kubelet配置文件设置<code>--anonymous-auth=false</code>不允许匿名证书访问 10250 的 https 服务,所以我们才需要配置证书来进行访问</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubelet</tag>
      </tags>
  </entry>
  <entry>
    <title>centos-nfs-512错误</title>
    <url>/2019/09/03/centos-nfs-512%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>nfs 错误kernel: NFS: nfs4_discover_server_trunking unhandled error -512. Exiting with error EIO</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很久没挂载过nfs，忘记客户端怎么挂在nfs的了，服务端很早就安装好了，今天一台客户机需要挂载nfs，然后居然报错了，然后找了一圈居然没找到怎么解决，然后又重新看了一次centos nfs的配置。</p><p>在客户端挂载nfs的提示很慢，长时间无响应，强行结束看看是什么问题，查看日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo tail -f /var/<span class="built_in">log</span>/messages</span><br><span class="line">Sep  3 11:23:51 dev-application kernel: NFS: nfs4_discover_server_trunking unhandled error -512. Exiting with error EIO</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1、nfs服务端"><a href="#1、nfs服务端" class="headerlink" title="1、nfs服务端"></a>1、nfs服务端</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录nfs服务器查看nfs服务正常，查看rpc服务正常，查看服务貌似没有看出异常。查看nfs日志，在日志里面发现比较奇怪的东西。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Nov 13 14:53:41 dev-nfs systemd-logind: New session 11875 of user root.</span><br><span class="line">Nov 13 14:53:41 dev-nfs systemd: Starting Session 11875 of user root.</span><br><span class="line">Nov 13 14:54:28 dev-nfs systemd: Stopping RPC <span class="built_in">bind</span> service...</span><br><span class="line">Nov 13 14:54:28 dev-nfs systemd: Starting RPC <span class="built_in">bind</span> service...</span><br><span class="line">Nov 13 14:54:28 dev-nfs systemd: Started RPC <span class="built_in">bind</span> service.</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Stopping NFS server and services...</span><br><span class="line">Nov 13 14:54:31 dev-nfs kernel: nfsd: last server has exited, flushing <span class="built_in">export</span> cache</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Stopping NFS Mount Daemon...</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Stopping NFSv4 ID-name mapping service...</span><br><span class="line">Nov 13 14:54:31 dev-nfs rpc.mountd[3533]: Caught signal 15, un-registering and exiting.</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Starting Preprocess NFS configuration...</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Started Preprocess NFS configuration.</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Starting NFSv4 ID-name mapping service...</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Starting NFS Mount Daemon...</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Started NFSv4 ID-name mapping service.</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Started NFS Mount Daemon.</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Starting NFS server and services...</span><br><span class="line">Nov 13 14:54:31 dev-nfs rpc.mountd[11423]: Version 1.3.0 starting</span><br><span class="line">Nov 13 14:54:31 dev-nfs kernel: NFSD: starting 90-second grace period (net ffffffff81ad9d40)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;继续看日志发现一致在这里循环操作，懵逼啊。利用rpcinfo -p localhost | grep nfs和netstat 查看端口看起来工作是正常的。就是日志看出来有问题</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpcinfo -p localhost | grep nfs</span></span><br><span class="line">    100003    3   tcp   2049  nfs</span><br><span class="line">    100003    4   tcp   2049  nfs</span><br><span class="line">    100227    3   tcp   2049  nfs_acl</span><br><span class="line">    100003    3   udp   2049  nfs</span><br><span class="line">    100003    4   udp   2049  nfs</span><br><span class="line">    100227    3   udp   2049  nfs_acl</span><br></pre></td></tr></table></figure><h3 id="2、恢复nfs"><a href="#2、恢复nfs" class="headerlink" title="2、恢复nfs"></a>2、恢复nfs</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网上看了一下，只能重启nfs、和rpcbind服务才能解决。</p><h4 id="2-1、刷新nfs"><a href="#2-1、刷新nfs" class="headerlink" title="2.1、刷新nfs"></a>2.1、刷新nfs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo exportfs -arv</span></span><br></pre></td></tr></table></figure><p>感觉没多大效果</p><h4 id="2-2、重启nfs"><a href="#2-2、重启nfs" class="headerlink" title="2.2、重启nfs"></a>2.2、重启nfs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl restart rpcbind.service</span></span><br><span class="line"><span class="comment"># systemctl restart nfs.service</span></span><br></pre></td></tr></table></figure><h3 id="3、客户端挂载"><a href="#3、客户端挂载" class="headerlink" title="3、客户端挂载"></a>3、客户端挂载</h3><p>再次来到客户机挂载，可以成功的挂载</p><h3 id="4、rpcbind服务介绍"><a href="#4、rpcbind服务介绍" class="headerlink" title="4、rpcbind服务介绍"></a>4、rpcbind服务介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;共享和加载NFS文件系统需要服务，红帽企业Linux使用核心级的支持和守护进程的组合来提供NFS文件共享.NFS依靠远程过程调用(RPC)在客户端和服务器端路由请求。在Linux下RPC服务由portmap服务控制。</p><h4 id="4-1、为了共享和加载NFS文件系统，下面的服务要一起工作"><a href="#4-1、为了共享和加载NFS文件系统，下面的服务要一起工作" class="headerlink" title="4.1、为了共享和加载NFS文件系统，下面的服务要一起工作:"></a>4.1、为了共享和加载NFS文件系统，下面的服务要一起工作:</h4><ul><li>nfs - 启动相应RPC服务进程来服务对于NFS文件系统的请求.</li><li>nfslock - 一个可选的服务，用于启动相应的RPC进程，允许NFS客户端在服务器上对文件加锁.</li><li>portmap - Linux的RPC服务,它响应RPC服务的请求和与请求的RPC服务建立连接.</li></ul><h4 id="4-2、RPC进程在后台一起工作服务于NFS服务"><a href="#4-2、RPC进程在后台一起工作服务于NFS服务" class="headerlink" title="4.2、RPC进程在后台一起工作服务于NFS服务"></a>4.2、RPC进程在后台一起工作服务于NFS服务</h4><ul><li>rpc.mountd - 这个进程接受来自NFS客户端的加载请求和验证请求的文件系统正在被输出.这个进程由NFS服务自动启动，不需要用户的配置.</li><li>rpc.nfsd - 这个进程是NFS服务器.它和Linux核心一起工作来满足NFS客户端的动态需求，例如提供为每个NFS客户端的每次请求服务器线程.这个进程对应于nfs服务.</li><li>rpc.lockd - 一个可选的进程，它允许NFS客户端在服务器上对文件加锁.这个进程对应于nfslock服务.</li><li>rpc.statd - 这个进程实现了网络状态监控(NSM)RPC协议,通知NFS客户端什么时候一个NFS服务器非正常重启动.这个进程被nfslock服务自动启动，不需要用户的配置.</li><li>rpc.rquotad - 这个进程对于远程用户提供用户配额信息. 这个进程被nfs服务自动启动，不需要用户的配置.</li></ul><h3 id="整体异常现象"><a href="#整体异常现象" class="headerlink" title="整体异常现象"></a>整体异常现象</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nfs服务异常的时候，客户端会不断的去尝试连接nfs服务器，导致在客户端使用df命令卡死，到挂在目录的上层目录执行ls 也出现卡死。df 卡死可以使用ctrl+c 结束，ls的时候就不行啦，需要在另外一个终端kill 进程。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在网上看到一篇文章，上门说的是有可能是性能问题。解决办法是</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl stop rpcbind.service</span></span><br><span class="line"><span class="comment"># systemctl stop nfs.service</span></span><br><span class="line"><span class="comment"># rm -rf /var/lib/nfs/sm/*</span></span><br><span class="line"><span class="comment"># rm -rf /var/lib/nfs/sm.bak/*</span></span><br><span class="line"><span class="comment"># systemctl restart rpcbind.service</span></span><br><span class="line"><span class="comment"># systemctl restart nfs.service</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我执行了，结果还在观察中，<a href="https://qexe.de/question/nfsd-letzter-server-wurde-beendet-der-exportcache-wird-geleert" target="_blank" rel="noopener">参考</a></p><p>将持续关注这块和更新</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>nfs</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s集群部署heapster</title>
    <url>/2019/09/02/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2heapster/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>kubernetes集群启用tls认证部署heapster，在部署期间遇到了很多的坑，走过很多雷，这里记录一下,不过在新版本中heapster被metrics-server代替了，metrics-server后篇介绍和使用</p><h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><p>下载需要的文件，这里用之前k8s-heapster部署的文件拿来进行修改，<a href="https://github.com/xxlaila/kubernetes-yaml/" target="_blank" rel="noopener">文件地址</a></p><h3 id="2、执行文件创建"><a href="#2、执行文件创建" class="headerlink" title="2、执行文件创建"></a>2、执行文件创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd kubernetes-yaml/heapster-influxdb-grafana</span></span><br><span class="line"><span class="comment"># kubectl apply -f ./</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><strong>错误提示</strong>: 这里在执行创建后，没有图像显示，查看pods日志发现错误<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n kube-system|grep he</span></span><br><span class="line">heapster-7b7b4754d-5p7tb                1/1     Running   0          17m</span><br><span class="line"><span class="comment"># kubectl logs heapster-7b7b4754d-5p7tb -n kube-system</span></span><br><span class="line">E0902 10:57:11.804543       1 reflector.go:190] k8s.io/heapster/metrics/processors/namespace_based_enricher.go:89: Failed to list *v1.Namespace: namespaces is forbidden: User <span class="string">"system:serviceaccount:kube-system:heapster"</span> cannot list resource <span class="string">"namespaces"</span> <span class="keyword">in</span> API group <span class="string">""</span> at the cluster scope: RBAC: clusterrole.rbac.authorization.k8s.io <span class="string">"system:heapster"</span> not found</span><br><span class="line">E0902 10:57:12.071117       1 reflector.go:190] k8s.io/heapster/metrics/util/util.go:30: Failed to list *v1.Node: nodes is forbidden: User <span class="string">"system:serviceaccount:kube-system:heapster"</span> cannot list resource <span class="string">"nodes"</span> <span class="keyword">in</span> API group <span class="string">""</span> at the cluster scope: RBAC: clusterrole.rbac.authorization.k8s.io <span class="string">"system:heapster"</span> not found</span><br></pre></td></tr></table></figure></li></ul><ul><li>排错<br>查看ClusterRole: system:heapster的权限,发现并没有</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe clusterrole system:heapster</span></span><br><span class="line">Error from server (NotFound): clusterroles.rbac.authorization.k8s.io <span class="string">"system:heapster"</span> not found</span><br></pre></td></tr></table></figure><p>提示这个错误，应该是我之前部署过，然后修改过权限，不小心给删掉啦，这里需要吧权限重建一次就好了，<a href="https://www.cnblogs.com/vincenshen/p/9638162.html" target="_blank" rel="noopener">参考文献</a></p><ul><li>新建heapster-clusterrole.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat heapster-clusterrole.yaml </span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    rbac.authorization.kubernetes.io/autoupdate: <span class="string">"true"</span></span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io/bootstrapping: rbac-defaults</span><br><span class="line">  name: system:heapster</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - events</span><br><span class="line">  - namespaces</span><br><span class="line">  - nodes</span><br><span class="line">  - pods</span><br><span class="line">  - nodes/stats</span><br><span class="line">  verbs:</span><br><span class="line">  - create</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - extensions</span><br><span class="line">  resources:</span><br><span class="line">  - deployments</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br></pre></td></tr></table></figure></li></ul><p>并执行 kubectl apply -f heapster-clusterrole.yaml,在次查看日志，发现之前的错误没有了，但是又出现了一个新的错误<br><code>E0902 11:27:05.025300 1 manager.go:101] Error in scraping containers from kubelet:172.21.16.204:10250: failed to get all container stats from Kubelet URL &quot;https://172.21.16.204:10250/stats/container/&quot;: request failed - &quot;401 Unauthorized&quot;, response: &quot;Unauthorized&quot;</code></p><ul><li><p>修改heapster-clusterrole.yaml文件，在文件里面我们添加几个权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat heapster-clusterrole.yaml </span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    rbac.authorization.kubernetes.io/autoupdate: <span class="string">"true"</span></span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io/bootstrapping: rbac-defaults</span><br><span class="line">  name: system:heapster</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - events</span><br><span class="line">  - namespaces</span><br><span class="line">  - nodes</span><br><span class="line">  - pods</span><br><span class="line">  - nodes/stats</span><br><span class="line">  verbs:</span><br><span class="line">  - create</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - extensions</span><br><span class="line">  resources:</span><br><span class="line">  - deployments</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - nodes/stats</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f heapster-clusterrole.yaml</span></span><br><span class="line"><span class="comment"># 重新创建heapster</span></span><br><span class="line"><span class="comment"># kubectl delete -f heapster.yaml</span></span><br><span class="line"><span class="comment"># kubectl create -f heapster.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>完成以后我们继续看heapster pod的日志，发现日志里面还是出现<code>401 Unauthorized&quot;, response: &quot;Unauthorized&quot;</code>，我们需要修改node节点 kubelet 启动的配置参数，添加<code>--authentication-token-webhook</code>参数: 使用tokenreview API来进行令牌认证。Kubelet 在配置的 API server 上调用 TokenReview API 以确定来自 bearer token 的用户信息。<a href="https://k8smeetup.github.io/docs/admin/kubelet-authentication-authorization/" target="_blank" rel="noopener">官方参考</a>，<a href="https://github.com/kubernetes-retired/heapster/issues/1936" target="_blank" rel="noopener">github上错误解决</a>， <a href="https://jimmysong.io/posts/user-authentication-in-kubernetes/" target="_blank" rel="noopener">参数文章学习</a></p><p>到此为止: 错误没有啦，但是界面数据没出来，稍等片刻</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>heapster</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s配置Dashboard</title>
    <url>/2019/08/29/k8s%E9%85%8D%E7%BD%AEDashboard/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;K8S Dashboard是官方的一个基于WEB的用户界面，专门用来管理K8S集群，并可展示集群的状态。K8S集群安装好后默认没有包含Dashboard，我们需要额外创建它。</p><h3 id="1、安装dashboard"><a href="#1、安装dashboard" class="headerlink" title="1、安装dashboard"></a>1、安装dashboard</h3><h4 id="1-1、下载准备需要的文件"><a href="#1-1、下载准备需要的文件" class="headerlink" title="1.1、下载准备需要的文件"></a>1.1、下载准备需要的文件</h4><p>经过修改过后的文件，已经可以正常使用的<a href="https://github.com/xxlaila/kubernetes-yaml/" target="_blank" rel="noopener">文件</a></p><a id="more"></a><ul><li>创建dashboard<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 dashboard]<span class="comment"># kubectl create -f kubernetes-dashboard.yaml </span></span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-2、查看服务状态和pod"><a href="#1-2、查看服务状态和pod" class="headerlink" title="1.2、查看服务状态和pod"></a>1.2、查看服务状态和pod</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 ~]<span class="comment"># kubectl get service --all-namespaces</span></span><br><span class="line">NAMESPACE     NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">default       kubernetes             ClusterIP   10.254.0.1      &lt;none&gt;        443/TCP         18h</span><br><span class="line">kube-system   coredns                ClusterIP   10.254.0.10     &lt;none&gt;        53/UDP,53/TCP   16h</span><br><span class="line">kube-system   kubernetes-dashboard   NodePort    10.254.51.226   &lt;none&gt;        443:30001/TCP   15h</span><br></pre></td></tr></table></figure><ul><li><p>查看service描述</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 ~]<span class="comment"># kubectl describe  service kubernetes-dashboard -n kube-system</span></span><br><span class="line">Name:                     kubernetes-dashboard</span><br><span class="line">Namespace:                kube-system</span><br><span class="line">Labels:                   k8s-app=kubernetes-dashboard</span><br><span class="line">Annotations:              &lt;none&gt;</span><br><span class="line">Selector:                 k8s-app=kubernetes-dashboard</span><br><span class="line">Type:                     NodePort</span><br><span class="line">IP:                       10.254.51.226</span><br><span class="line">Port:                     &lt;<span class="built_in">unset</span>&gt;  443/TCP</span><br><span class="line">TargetPort:               8443/TCP</span><br><span class="line">NodePort:                 &lt;<span class="built_in">unset</span>&gt;  30001/TCP</span><br><span class="line">Endpoints:                10.254.39.3:8443</span><br><span class="line">Session Affinity:         None</span><br><span class="line">External Traffic Policy:  Cluster</span><br><span class="line">Events:                   &lt;none&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看pod描述</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 ~]<span class="comment"># kubectl describe pod kubernetes-dashboard-6c655d9445-6zntr --namespace=kube-system</span></span><br><span class="line">Name:           kubernetes-dashboard-6c655d9445-6zntr</span><br><span class="line">Namespace:      kube-system</span><br><span class="line">Node:           172.21.17.31/172.21.17.31</span><br><span class="line">Start Time:     Thu, 29 Aug 2019 17:47:20 +0800</span><br><span class="line">Labels:         k8s-app=kubernetes-dashboard</span><br><span class="line">                pod-template-hash=6c655d9445</span><br><span class="line">Annotations:    &lt;none&gt;</span><br><span class="line">Status:         Running</span><br><span class="line">IP:             10.254.39.3</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、授权Dashboard账户集群管理权限"><a href="#2、授权Dashboard账户集群管理权限" class="headerlink" title="2、授权Dashboard账户集群管理权限"></a>2、授权Dashboard账户集群管理权限</h3><p>若果不进行授权操作，打开dashboard会报错，如下图<br><img src="https://img.xxlaila.cn/WechatIMG28864.png" alt="img"></p><ul><li><p>新建kubrnetes-dashboard-admin-rbac.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kubernetes-dashboard-admin-rbac.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line"><span class="comment"># Create ClusterRoleBinding</span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f kubernetes-dashboard-admin-rbac.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>找到kubernete-dashboard-admin的token，复制token在dashboard页面进行登录，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 dashboard]<span class="comment"># kubectl -n kube-system get secret | grep admin-user</span></span><br><span class="line">admin-user-token-qv49g             kubernetes.io/service-account-token   3      15h</span><br><span class="line"></span><br><span class="line">[root@k8s-master-01 dashboard]<span class="comment"># kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '&#123;print $1&#125;')</span></span><br><span class="line">Name:         admin-user-token-qv49g</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class="line">              kubernetes.io/service-account.uid: ea3f0e3f-ca42-11e9-8716-fa163effd55b</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1359 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXF2NDlnIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJlYTNmMGUzZi1jYTQyLTExZTktODcxNi1mYTE2M2VmZmQ1NWIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.AbdsJdgi9d0rCYrmvoJkWf32HKSMT03OyOX55aRhPptjzIjDcGxxQYecT0w58N7Z_2L2RwTBfOrm4B3wTEDfFZKgYsnGJQOzJMtZDN9w5YJg2xGQ27E3KisTbbQzd_I5DgxSZWW75GwWf756_bIQpWuXNRO_KjheyWuNNv0tSEYRiXpcboSQpb-8R-Km-vP85mxke6s5cJFSk0WLMjFWow1vOF1ns23NZ5nslEmYOMZF3_Fxybh3LbiCyrpD4c0FtfRcXaBIBqACeyCPRriYMIIJq3OJjI-DzuqUedu1x2xH2prB4mNjxlKt2-7q0M1zCuvm5JhW_LzWgveu9ni2ig</span><br></pre></td></tr></table></figure><h3 id="3、配置文件修改说明"><a href="#3、配置文件修改说明" class="headerlink" title="3、配置文件修改说明"></a>3、配置文件修改说明</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;dashboard 文件被修改，默认的token失效的时间是900秒，15分钟，每15分钟就要进行一次认证，这样对于运维人员来说就不是特别的方便，我们可以通过修改token-ttl参数来设置，主要是修改dashborad的yaml文件，并重新建立即可</p><h4 id="3-1、在配置文件修改-添加"><a href="#3-1、在配置文件修改-添加" class="headerlink" title="3.1、在配置文件修改/添加"></a>3.1、在配置文件修改/添加</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ports:</span><br><span class="line">- containerPort: 8443</span><br><span class="line">  protocol: TCP</span><br><span class="line">args:</span><br><span class="line">  - --auto-generate-certificates</span><br><span class="line">  - --token-ttl=43200</span><br></pre></td></tr></table></figure><ul><li>重建pod<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 dashboard]<span class="comment"># kubectl apply -f kubernetes-dashboard.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>我们可以输入任意节点的ip加30001端口就可以访问dashboard, https://{ip}:30001。</p><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;每天我们来公司要登录dashboard的时候都要去输入一次token，每次去获取token的时候都要输入很长的一串，这里为了方便，可以写一个脚本，要token的时候执行一下脚本，就可以。</p><ul><li><p>创建脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim kube-token</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure></li><li><p>设置脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod +x kube-token</span></span><br><span class="line"><span class="comment"># mv kube-token /usr/bin</span></span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>dashboard</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s删除node重新加入</title>
    <url>/2019/08/29/k8s%E5%88%A0%E9%99%A4node%E9%87%8D%E6%96%B0%E5%8A%A0%E5%85%A5/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;有时候k8s node 在加入集群的时候不经意的时候弄错啦某些东西，这时候可以把这个node删除，然后重新加入，删除节点之前我们需要做一下常规化的操作，来保障运行在该节点的pod迁移到其他的node上。</p><a id="more"></a><ul><li><p>1、先驱赶上面的pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl drain 172.21.110 --delete-local-data</span></span><br><span class="line">node/172.21.110 cordoned</span><br><span class="line">node/172.21.110 drained</span><br></pre></td></tr></table></figure></li><li><p>2、删除节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl delete node 172.21.110</span></span><br><span class="line">node <span class="string">"172.21.110"</span> deleted</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>kubectl delete</code> 命令本身是通用的，可以进行任何资源的删除<code>kubectl delete type typename</code>，type是资源类型，可以是<code>node, pod, rs, rc, deployment, service</code>等等，typename是这个资源的名称</p><ul><li><p>3、查看node是否被删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME           STATUS   ROLES    AGE   VERSION</span><br><span class="line">172.21.17.30   Ready    &lt;none&gt;   20m   v1.13.3</span><br><span class="line">172.21.17.31   Ready    &lt;none&gt;   10m   v1.13.3</span><br></pre></td></tr></table></figure></li><li><p>4、彻底删除node<br>进入该节点。删除<code>kubelet.kubeconfig</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-3 kubernetes]<span class="comment"># rm -rf  kubelet.kubeconfig</span></span><br></pre></td></tr></table></figure></li><li><p>4、node重新加入集群<br>&nbsp;&nbsp;&nbsp;&nbsp;当我们的node执行删除以后，重新启动kubelet服务以后。node又会自动的加入到集群里面来，怎么彻底的删除，让后重启kubelet的时候重新像集群里面发出csr请求，集群重新通过该节点的csr请求吧该节点加入到集群来，<code>kubelet.kubeconfig</code>也重新生成</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl get csr</span></span><br><span class="line">NAME                                                   AGE     REQUESTOR           CONDITION</span><br><span class="line">node-csr-H1CAqJw4VZYY67-tk4Akuso_uuPPwpj3d5jK3xcL88M   8m      kubelet-bootstrap   Approved,Issued</span><br><span class="line">node-csr-YPvpbITaxGBrOxuCpGiY7jrGpPNSZ4sdbKhSkUEcdnc   7m54s   kubelet-bootstrap   Approved,Issued</span><br><span class="line">node-csr-odhUT58g0mdVuZdUeclj7doEpUmWzv1YzaiJYQaPeek   5s      kubelet-bootstrap   Pending</span><br><span class="line">node-csr-u4oi5e0Upt-ZmejSDEFm9Q0RU3wZf9bThU_o51nclgg   17m     kubelet-bootstrap   Approved,Issued</span><br></pre></td></tr></table></figure></li><li><p>5、重新通过csr</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl certificate approve node-csr-odhUT58g0mdVuZdUeclj7doEpUmWzv1YzaiJYQaPeek </span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/node-csr-odhUT58g0mdVuZdUeclj7doEpUmWzv1YzaiJYQaPeek approved</span><br></pre></td></tr></table></figure></li><li><p>6、在集群查看节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME            STATUS   ROLES    AGE   VERSION</span><br><span class="line">172.21.16.110   Ready    &lt;none&gt;   36s   v1.13.3</span><br><span class="line">172.21.17.30    Ready    &lt;none&gt;   28m   v1.13.3</span><br><span class="line">172.21.17.31    Ready    &lt;none&gt;   17m   v1.13.3</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos route策略</title>
    <url>/2019/08/28/Centos-route%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><blockquote><p>场景:<br>&nbsp;&nbsp;&nbsp;&nbsp;公司业务在一个新的云平台上线，该云平台使用的是比较传统的VMware vSphere来做的虚拟化，而且该云平台网络也是我们不清楚的，反正就是不能设置(不能像现在主流云平台自定义网络或者是地址段)，是一个政府的云平台，具体各种奇葩的限制就不说啦，你懂的……</p></blockquote><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;根据我们自身业务的需求，我们需要一个内网地址段，和对方协商后给我们开了一个10网段，20的子网，然后要了两台带有外网ip的服务器，一个用来做跳板机，一个用来做反向代理。然后等了两天对方吧服务器给我们开好了，我们登录跳板机，发现只有外网ip的服务器才能上网，其他的均不能上网，做nat也不能上，但是跳板机是公网，没有内网，可以通内网的ip服务器，所以猜测网络策略肯定是他们在交换机上做的。然后我们自己yum源来安装一些中间件。（不说了，后面还有一堆的奇葩问题，进入正题吧）</p><h3 id="后期问题"><a href="#后期问题" class="headerlink" title="后期问题"></a>后期问题</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;当我们把业务部署上线以后，运行一段时间后出现微服务之间调用超时，然后我们登录服务器排查网络问题，在服务器之间ping内网没问题，ping注册中心、数据库都没问题。服务器有公网，然后公网之间ping都没问题，网络层面没有任何的问题，查看系统日志也有发现错误，然后单独的吧借口地址拿出来进行<code>curl</code>能过但是有点慢，然后就吧这个命令写在脚本里面，让他每30秒跑一次，然后追加日志，跑了两三个小时，我们查看日志，日志里面也有超时现象，奇怪了，然后吧这个问题联系对方云平台的工程师，系统工程师、网络工程师拉群讨论，最后对方系统工程师提示我们让我们吧路由的<code>Metric</code>值两个网卡不要一样，对<code>Metric</code>刚开始一年懵逼，先不管，解决问题再说：</p><ul><li><p>修改Metric(内网卡)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ route -n</span><br><span class="line">$ sudo route add -net 10.10.20.0/22 dev ens160 metric 98</span><br><span class="line">$ sudo route  del -net 10.10.20.0/22 dev ens160 metric 100</span><br></pre></td></tr></table></figure></li><li><p>记住是先添加删除，顺序不要颠倒</p></li><li><p>查看路由</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         119.126.116.254 0.0.0.0         UG    100    0        0 ens192</span><br><span class="line">10.10.20.0      0.0.0.0         255.255.252.0   U     98     0        0 ens160</span><br><span class="line">119.126.116.128 0.0.0.0         255.255.255.128 U     100    0        0 ens192</span><br></pre></td></tr></table></figure></li><li><p>ens192(外网卡)</p></li><li><p>ens160(内网卡)</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;涉及到的业务服务器都修改，修改Metric值以后，我们<code>curl</code>一次，速度比以前快多了，又跑了一次脚本，观察了几个小时没问题，观察了两天，业务没有出现问题，日志里面也没有出现超时，问题得到解决</p><h3 id="Metric-介绍"><a href="#Metric-介绍" class="headerlink" title="Metric 介绍"></a>Metric 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;为路由指定所需跃点数的整数值（范围是 1 ~ 9999），它用来在路由表里的多个路由中选择与转发包中的目标地址最为匹配的路由。所选的路由具有最少的跃点数。跃点数能够反映跃点的数量、路径的速度、路径可靠性、路径吞吐量以及管理属性。Metric的值越小，优先级越高；如果两块网卡的Metric的值相同，就会出现抢占优先级继而网卡冲突，将会有一块网卡无法连接</p><p>更多介绍<a href="https://www.cyberciti.biz/faq/what-is-a-routing-table/" target="_blank" rel="noopener">参考</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>route</tag>
        <tag>Metric</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署ingress</title>
    <url>/2019/08/26/k8s%E9%83%A8%E7%BD%B2ingress/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>在kubernetes 集群中，一个服务安装以后怎么对外提供访问，外部用户怎么来访问我们容器中业务。</p><p><img src="https://img.xxlaila.cn/2373874sds43.png" alt="img"></p><h3 id="1、Ingress-介绍"><a href="#1、Ingress-介绍" class="headerlink" title="1、Ingress 介绍"></a>1、Ingress 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes 暴露服务的方式目前只有三种：LoadBlancer Service、NodePort Service、Ingress；本文主要通过Ingress来访问</p><h3 id="2、Ingress-是什么"><a href="#2、Ingress-是什么" class="headerlink" title="2、Ingress 是什么"></a>2、Ingress 是什么</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Ingress 就是能利用 Nginx、Haproxy 啥的负载均衡器暴露集群内服务的工具问题来了，集群内服务想要暴露出去面临着几个问题：</p><a id="more"></a><ul><li><p>Pod 漂移问题<br>&nbsp;&nbsp;&nbsp;&nbsp;众所周知 Kubernetes 具有强大的副本控制能力，能保证在任意副本(Pod)挂掉时自动从其他机器启动一个新的，还可以动态扩容等，总之一句话，这个 Pod 可能在任何时刻出现在任何节点上，也可能在任何时刻死在任何节点上；那么自然随着 Pod 的创建和销毁，Pod IP 肯定会动态变化；那么如何把这个动态的 Pod IP 暴露出去？这里借助于 Kubernetes 的 Service 机制，Service 可以以标签的形式选定一组带有指定标签的 Pod，并监控和自动负载他们的 Pod IP，那么我们向外暴露只暴露 Service IP 就行了；这就是 NodePort 模式：即在每个节点上开起一个端口，然后转发到内部 Service IP 上，如下图所示：<br><img src="https://img.xxlaila.cn/4dfs98347sdhsfs.png" alt="img"></p></li><li><p>端口管理问题<br>&nbsp;&nbsp;&nbsp;&nbsp;采用 NodePort 方式暴露服务面临一个坑爹的问题是，服务一旦多起来，NodePort 在每个节点上开启的端口会及其庞大，而且难以维护；这时候引出的思考问题是 “能不能使用 Nginx 啥的只监听一个端口，比如 80，然后按照域名向后转发？” 简单的实现就是使用 DaemonSet 在每个 node 上监听 80，然后写好规则，因为 Nginx 外面绑定了宿主机 80 端口(就像 NodePort)，本身又在集群内，那么向后直接转发到相应 Service IP 就行了，如下图所示<br><img src="https://img.xxlaila.cn/85793kdfksdo43.png" alt="img"></p></li><li><p>域名分配及动态更新问题<br>&nbsp;&nbsp;&nbsp;&nbsp;从上面的思路，采用 Nginx 似乎已经解决了问题，但是其实这里面有一个很大缺陷：每次有新服务加入怎么改 Nginx 配置？总不能手动改或者来个 Rolling Update 前端 Nginx Pod 吧？这时候 “伟大而又正直勇敢的” Ingress 登场，如果不算上面的 Nginx，Ingress 只有两大组件：Ingress Controller 和 Ingress<br>&nbsp;&nbsp;&nbsp;&nbsp;Ingress 简单的理解就是 你原来要改 Nginx 配置，然后配置各种域名对应哪个 Service，现在把这个动作抽象出来，变成一个 Ingress 对象，你可以用 yml 创建，每次不要去改 Nginx 了，直接改 yml 然后创建/更新就行了；那么问题来了：”Nginx 咋整？”<br>&nbsp;&nbsp;&nbsp;&nbsp;Ingress Controller 这东西就是解决 “Nginx 咋整” 的；Ingress Controoler 通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取他，按照他自己模板生成一段 Nginx 配置，再写到 Nginx Pod 里，最后 reload 一下，工作流程如下图:</p></li></ul><p><img src="https://img.xxlaila.cn/3248kjfiy4789wodjkshf3.png" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;当然在实际应用中，最新版本 Kubernetes 已经将 Nginx 与 Ingress Controller 合并为一个组件，所以 Nginx 无需单独部署，只需要部署 Ingress Controller 即可。</p><h3 id="3、Nginx-Ingress"><a href="#3、Nginx-Ingress" class="headerlink" title="3、Nginx Ingress"></a>3、Nginx Ingress</h3><h4 id="3-1、下载官方文件"><a href="#3-1、下载官方文件" class="headerlink" title="3.1、下载官方文件"></a>3.1、下载官方文件</h4><p>官方的mandatory.yaml文件里面包含了ingress RBAC，重要的组件 <a href="https://github.com/kubernetes/ingress-nginx/tree/nginx-0.20.0/deploy" target="_blank" rel="noopener">Nginx+Ingres Controller</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat mandatory.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-configuration</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: tcp-services</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: udp-services</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-serviceaccount</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-clusterrole</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">      - endpoints</span><br><span class="line">      - nodes</span><br><span class="line">      - pods</span><br><span class="line">      - secrets</span><br><span class="line">    verbs:</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - nodes</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - services</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">"extensions"</span></span><br><span class="line">    resources:</span><br><span class="line">      - ingresses</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - events</span><br><span class="line">    verbs:</span><br><span class="line">      - create</span><br><span class="line">      - patch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">"extensions"</span></span><br><span class="line">    resources:</span><br><span class="line">      - ingresses/status</span><br><span class="line">    verbs:</span><br><span class="line">      - update</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-role</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">      - pods</span><br><span class="line">      - secrets</span><br><span class="line">      - namespaces</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">    resourceNames:</span><br><span class="line">      <span class="comment"># Defaults to "&lt;election-id&gt;-&lt;ingress-class&gt;"</span></span><br><span class="line">      <span class="comment"># Here: "&lt;ingress-controller-leader&gt;-&lt;nginx&gt;"</span></span><br><span class="line">      <span class="comment"># This has to be adapted if you change either parameter</span></span><br><span class="line">      <span class="comment"># when launching the nginx-ingress-controller.</span></span><br><span class="line">      - <span class="string">"ingress-controller-leader-nginx"</span></span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - update</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">    verbs:</span><br><span class="line">      - create</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - endpoints</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-role-nisa-binding</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: nginx-ingress-role</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nginx-ingress-serviceaccount</span><br><span class="line">    namespace: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-clusterrole-nisa-binding</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nginx-ingress-clusterrole</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nginx-ingress-serviceaccount</span><br><span class="line">    namespace: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-controller</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app.kubernetes.io/name: ingress-nginx</span><br><span class="line">      app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app.kubernetes.io/name: ingress-nginx</span><br><span class="line">        app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">      annotations:</span><br><span class="line">        prometheus.io/port: <span class="string">"10254"</span></span><br><span class="line">        prometheus.io/scrape: <span class="string">"true"</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nginx-ingress-serviceaccount</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx-ingress-controller</span><br><span class="line">          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.22.0</span><br><span class="line">          args:</span><br><span class="line">            - /nginx-ingress-controller</span><br><span class="line">            - --configmap=$(POD_NAMESPACE)/nginx-configuration</span><br><span class="line">            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span><br><span class="line">            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services</span><br><span class="line">            - --publish-service=$(POD_NAMESPACE)/ingress-nginx</span><br><span class="line">            - --annotations-prefix=nginx.ingress.kubernetes.io</span><br><span class="line">     --default-ssl-certificate=$(POD_NAMESPACE)/ingress-secret</span><br><span class="line">      --default-backend-service=$(POD_NAMESPACE)/default-http-backend</span><br><span class="line">          securityContext:</span><br><span class="line">            allowPrivilegeEscalation: <span class="literal">true</span></span><br><span class="line">            capabilities:</span><br><span class="line">              drop:</span><br><span class="line">                - ALL</span><br><span class="line">              add:</span><br><span class="line">                - NET_BIND_SERVICE</span><br><span class="line">            <span class="comment"># www-data -&gt; 33</span></span><br><span class="line">            runAsUser: 33</span><br><span class="line">          env:</span><br><span class="line">            - name: POD_NAME</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.name</span><br><span class="line">            - name: POD_NAMESPACE</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.namespace</span><br><span class="line">          ports:</span><br><span class="line">            - name: http</span><br><span class="line">              containerPort: 80</span><br><span class="line">              hostPort: 80</span><br><span class="line">            - name: https</span><br><span class="line">              containerPort: 443</span><br><span class="line">              hostPort: 443</span><br><span class="line">          livenessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            initialDelaySeconds: 10</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 1</span><br><span class="line">          readinessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 1</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>hostNetwork: true</code>是增加的， 官方的 Ingress Controller 有个坑，默认注释了hostNetwork 工作方式。以防止端口的在宿主机的冲突。没有绑定到宿主机 80 端口，也就是说前端 Nginx 没有监听宿主机 80 端口；所以需要把配置搞下来自己加一下 hostNetwork。</p><h4 id="3-2、部署默认后端"><a href="#3-2、部署默认后端" class="headerlink" title="3.2、部署默认后端"></a>3.2、部署默认后端</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;我们知道 前端的 Nginx 最终要负载到后端 service 上，那么如果访问不存在的域名咋整？官方给出的建议是部署一个 默认后端，对于未知请求全部负载到这个默认后端上；这个后端啥也不干，就是返回 404，部署如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat default-backend.yaml </span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: default-http-backend</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: default-http-backend</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: default-http-backend</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      containers:</span><br><span class="line">      - name: default-http-backend</span><br><span class="line">        <span class="comment"># Any image is permissable as long as:</span></span><br><span class="line">        <span class="comment"># 1. It serves a 404 page at /</span></span><br><span class="line">        <span class="comment"># 2. It serves 200 on a /healthz endpoint</span></span><br><span class="line">        image: docker.io/xxlaila/defaultbackend:1.4</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /healthz</span><br><span class="line">            port: 8080</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 20Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 20Mi</span><br><span class="line"><span class="comment">#      nodeSelector:</span></span><br><span class="line"><span class="comment">#        kubernetes.io/hostname: 172.21.16.231</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: default-http-backend</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: default-http-backend</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: default-http-backend</span><br></pre></td></tr></table></figure><h4 id="3-3、执行创建-完成后可以看到"><a href="#3-3、执行创建-完成后可以看到" class="headerlink" title="3.3、执行创建,完成后可以看到"></a>3.3、执行创建,完成后可以看到</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f mandatory.yaml </span></span><br><span class="line"><span class="comment"># kubectl create -f default-backend.yaml</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/34dnksjfh384yksfkjdsfsd.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n ingress-nginx</span></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">default-http-backend-66cdcb6c7d-pb9sp      1/1     Running   0          8h</span><br><span class="line">nginx-ingress-controller-69585dbb4-m6fcm   1/1     Running   0          8h</span><br><span class="line"><span class="comment"># kubectl get svc -n ingress-nginx</span></span><br><span class="line">NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">default-http-backend   ClusterIP   10.102.60.154   &lt;none&gt;        80/TCP    8h</span><br></pre></td></tr></table></figure><h3 id="4、部署-Ingress"><a href="#4、部署-Ingress" class="headerlink" title="4、部署 Ingress"></a>4、部署 Ingress</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;从上面可以知道 Ingress 就是个规则，指定哪个域名转发到哪个 Service，所以说首先我们得有个 Service，当然 Service 去哪找这里就不管了；这里默认为已经有了两个可用的 Service，以下以 jenkins、Dashboard 为例<br>&nbsp;&nbsp;&nbsp;&nbsp;先写一个 Ingress 文件，语法格式啥的请参考 官方文档，由于我的 jenkins在kube-ops，Dashboard 在kube-system 这个命名空间，所以要指定 namespace.参考下面实例</p><h4 id="4-1、部署jenkins实例"><a href="#4-1、部署jenkins实例" class="headerlink" title="4.1、部署jenkins实例"></a>4.1、部署jenkins实例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat jenkins-ingress.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-ingress</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">"nginx"</span></span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: ci.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: jenkins2</span><br><span class="line">          servicePort: 8080</span><br><span class="line"><span class="comment"># kubectl create -f jenkins-ingress.yaml</span></span><br></pre></td></tr></table></figure><p>执行域名解析到ip地址，访问jenkins</p><p><img src="https://img.xxlaila.cn/1566808344775.jpg" alt="img"></p><h4 id="4-2、部署kubernetes-dashboard"><a href="#4-2、部署kubernetes-dashboard" class="headerlink" title="4.2、部署kubernetes-dashboard"></a>4.2、部署kubernetes-dashboard</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat nginx-kubernetes-dashboard.yaml </span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard-ingress</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/ingress.class: nginx</span><br><span class="line">    nginx.ingress.kubernetes.io/secure-backends: <span class="string">"true"</span></span><br><span class="line">    nginx.ingress.kubernetes.io/ssl-passthrough: <span class="string">"true"</span></span><br><span class="line">spec:</span><br><span class="line">  tls:</span><br><span class="line">  - hosts:</span><br><span class="line">    - k8s.xxlaila.io</span><br><span class="line">    secretName: ingress-secret</span><br><span class="line">  rules:</span><br><span class="line">    - host: dashboard.xxlaila.io</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">        - path: /</span><br><span class="line">          backend:</span><br><span class="line">            serviceName: kubernetes-dashboard</span><br><span class="line">            servicePort: 443</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/786jg656iojhf0.png" alt="img"></p><h3 id="5、部署-Ingress-TLS"><a href="#5、部署-Ingress-TLS" class="headerlink" title="5、部署 Ingress TLS"></a>5、部署 Ingress TLS</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;上面已经做好了 Ingress，接下来配置TLS ；官方给出的样例很简单，大致步骤就两步：创建一个含有证书的 secret、在 Ingress 开启证书；但是官方的有坑，下面是操作步骤</p><h4 id="5-1、创建证书"><a href="#5-1、创建证书" class="headerlink" title="5.1、创建证书"></a>5.1、创建证书</h4><p>首先第一步当然要有个证书，由于我这个 Ingress 有两个服务域名，所以证书要支持两个域名；生成证书命令如下：</p><ul><li><p>生成CA证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir cert &amp;&amp; cd cert</span></span><br></pre></td></tr></table></figure></li><li><p>编辑 openssl 配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp /etc/pki/tls/openssl.cnf .</span></span><br></pre></td></tr></table></figure></li><li><p>修改主要配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi openssl.cnf</span></span><br><span class="line">	[req]</span><br><span class="line">	req_extensions = v3_req <span class="comment"># 这行默认注释关着的 把注释删掉</span></span><br></pre></td></tr></table></figure></li><li><p>增加配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi openssl.cnf</span></span><br><span class="line">[ v3_req ]</span><br><span class="line">basicConstraints = CA:FALSE</span><br><span class="line">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 = dashboard.mritd.me		<span class="comment">#需要增加的域名</span></span><br><span class="line">DNS.2 = kibana.mritd.me</span><br></pre></td></tr></table></figure></li><li><p>生成证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openssl genrsa -out ingress-key.pem 2048</span></span><br><span class="line"><span class="comment"># openssl req -new -key ingress-key.pem -out ingress.csr -subj "/CN=kube-ingress" -config openssl.cnf</span></span><br><span class="line"><span class="comment"># openssl x509 -req -in ingress.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out ingress.pem -days 365 -extensions v3_req -extfile openssl.cnf</span></span><br></pre></td></tr></table></figure></li><li><p>查看生成后的证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line">ca-key.pem  ca.pem  ca.srl  ingress-key.pem  ingress.csr  ingress.pem  openssl.cnf</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-2、创建-secret"><a href="#5-2、创建-secret" class="headerlink" title="5.2、创建 secret"></a>5.2、创建 secret</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;创建好证书以后，需要将证书内容放到 secret 中，secret 中全部内容需要 base64 编码，然后注意去掉换行符(变成一行)；以下是我的 secret 样例(上一步中 ingress.pem 是证书crt，ingress-key.pem 是证书的 key)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim ingress-secret.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  tls.crt: MIIDAjCCAeqgAwIBAgIJAIUNBpFKFrg4MA0GCSqGSIb3DQEBCwUAMBIxEDAOBgNVBAMMB2t1YmUtY2EwHhcNMTkwMTI5MTAzMzQ3WhcNMjAwMTI5MTAzMzQ3WjAXMRUwEwYDVQQDDAxrdWJlLWluZ3Jlc3MwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC0rLcpYHdqVjN84vCJYF2l61F+LYuPRczPNWyo8Rba4XpT6MMMqoGqgmI164r4of2klBEMPZ0dm1mJaYnjb1Zq/qzVUlqaednxfXsr6u8Xm0a6l7ep+Yr+XcRISZC9AjgyqlFtgjzbNJauHkHTy0i+jqV2A4SkVUT2whBqF00WEKC6kQLhw4Ab1XBG5aOK2Jz4TZdP+Mw4n3AsihycHgjhFvhGNixKl4mpfHfLvFeKxmBa8ZoWT+3AGgkX186EXhdhsfdYqHeLT2TvwsqbUJI8E8F7nleo5VMifr9KGHxaCJ+ynr/WFX1c+0wYAGmSKsw4CnXh4EE+IvaeQjBz8O2HAgMBAAGjVjBUMAkGA1UdEwQCMAAwCwYDVR0PBAQDAgXgMDoGA1UdEQQzMDGCFmNpLnp4Yy5raW5neHVubGlhbi5jb22CF2s4cy56eGMua2luZ3h1bmxpYW4uY29tMA0GCSqGSIb3DQEBCwUAA4IBAQCShThVXg3Fnkrm82sHowxCEc9UG9uzOY2LbxhVN7mcm8U0cXy3acAXdKWLHUwdZnOxNJytpaBBWb/6KFFKrIekaSK+tSD+oRISJf43c1tbt0QEpplUaDagQ35NANyQY2VHQntDdVK4/NNJULbHNEqsu19vDDvmDFi0aLHvqPFAvlGnEBPgO1Ac297pDR2thHyMCGBzRKTQOJy2q3HKexa1pItHjAVmv/k71HBeTJ1en2tFHLUlR0kEhYYPBeRclVZ1oYWn7THRaBW8NtugdM6mxVNFAWQTq5goP0VcW44lWYiUF6mX/UZa2c+5FwsGWdSwbTqmZj7ptA2QcveUcN2/</span><br><span class="line">  tls.key: MIIEowIBAAKCAQEAtKy3KWB3alYzfOLwiWBdpetRfi2Lj0XMzzVsqPEW2uF6U+jDDKqBqoJiNeuK+KH9pJQRDD2dHZtZiWmJ429Wav6s1VJamnnZ8X17K+rvF5tGupe3qfmK/l3ESEmQvQI4MqpRbYI82zSWrh5B08tIvo6ldgOEpFVE9sIQahdNFhCgupEC4cOAG9VwRuWjitic+E2XT/jMOJ9wLIocnB4I4Rb4RjYsSpeJqXx3y7xXisZgWvGaFk/twBoJF9fOhF4XYbH3WKh3i09k78LKm1CSPBPBe55XqOVTIn6/Shh8Wgifsp6/1hV9XPtMGABpkirMOAp14eBBPiL2nkIwc/DthwIDAQABAoIBACLj97sV1fnDC85iRPFCmtMfzmz/fqP8ZsDdIE6/wBok0OrDWGdpxgCXjT+8bOn23nSZ43DptR2ykmfm6anyJk4jQF0xui16uovYH6ErjWCRq+b8xYsdlanpka4kBr95XkDqgy8Sp43taevWDABKkZG7Gljf9Q2HKfo9H85dEZXg7RKKz77wahcHpZofthNo0s5kkH2ckVpjwh5svM+M/gm8KhZkKayndr1ezEAmndT+K/P4EVuYbpPQyk5A6E1G7Dh9M2TczZZa6oiR5etloDk2sOIYxysIZqAblyMN2IrIO0hf4nGqSmfe0TZMCKzSXoVOV2Qe+ckJ+mSyOPcdbIECgYEA3EMWrrr4oc9R8o35mQ2FDCG0FUyXrCo9SN/CyhScdeUx1IRV00CBwL340H1CwzEpj5g4bj6LGGSeEw2g8qfPoPdzr1yxNnCv43dhaGrWRrSxGL6kGfKmIlbgHTPIuzRkAXGWiCgo5JnzPjQtjmpUTmwmxXwqDih8kpRsBSTsmx0CgYEA0f1ORGtmrj/bRBQU0NF+ztTVFJQbPV3lTHl21Qgd8QcEIcOHqzpI2fmkeGZdyYQXIfODA/X+PFng+Z6J5ubtvplN5jPzpQuQRtIZ47NRmtgn4DoH+GAqxIb2hFbwXpXuSR/LelFtzxb91nGiVKpdizvuwnitgOuAIbgGHYbgpfMCgYAvvA5fYb/eeWq+EUzFgauS3H8FmqrIMgNEFtJFL0BVQI2TC/b5qGI2XjVdIbhlSvNB3nBkXAOTDsM/R9XYoMubi+UzXPg+3x8PQeEHWxgDDMfQoAg6Y17j1EYPrhhTkeAWfAJukZ2DJWYU1gQFeD+7Gy8v31/R365XqfjbCIyKdQKBgD+/3tr2oB2WVUK9tfQPJag1BNtSe1KOBubImULjS/O4ZZC6g51//E3wc/X5Xc+nwj4UZ1n0fFJmFt6xOrxWryaF9BhG/VjFwe8+KY3vCn8v0CtKctD8oP842e4jVqXgbo7UkDl6LxQHrthDdzys2+lBMKLpcAMLe8LA01pzcA/xAoGBAK3KXGXz0AsM+5FBbUFVZFOROUQLcd+N8esHnSqD8i7/J0PJsxm9irutuLht0cYK7Fcq65fYmZ4lrJO7bpiBRzONR78lMgm/rcKfCCNr4o4n6almvuFxA+jGgEM2W7iYb9pW+FFOqIOjl0cSHy2hsN7seGv3JBcz5StRjtwuSWf6</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-secret</span><br><span class="line">  namespace: kube-system</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br></pre></td></tr></table></figure><ul><li>创建完成后 create<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f ingress-secret.yml</span></span><br><span class="line">secret/ingress-secret created</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3、快速创建"><a href="#5-3、快速创建" class="headerlink" title="5.3、快速创建"></a>5.3、快速创建</h4><p>5.2步骤可以简化创建，可以执行一条命令进行创建，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create secret tls ingress-secret --key cert/ingress-key.pem --cert cert/ingress.pem</span></span><br></pre></td></tr></table></figure><h4 id="5-4、重新部署-Ingress"><a href="#5-4、重新部署-Ingress" class="headerlink" title="5.4、重新部署 Ingress"></a>5.4、重新部署 Ingress</h4><p>在tls生成完成后，需要重新部署Ingress，让Ingress能够家在tls。修改配置文件</p><h5 id="5-4-1、jenkins-tls"><a href="#5-4-1、jenkins-tls" class="headerlink" title="5.4.1、jenkins tls"></a>5.4.1、jenkins tls</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi jenkins-ingress.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-ingress</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">"nginx"</span></span><br><span class="line">spec:</span><br><span class="line">  tls:</span><br><span class="line">  - hosts:</span><br><span class="line">    - ci.xxlaila.io</span><br><span class="line">    secretName: ingress-secret</span><br><span class="line">  rules:</span><br><span class="line">  - host: ci.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: jenkins2</span><br><span class="line">          servicePort: 8080</span><br><span class="line"><span class="comment"># kubect create -f jenkins-ingress.yaml</span></span><br></pre></td></tr></table></figure><p>访问jenkins域名，这里输入http访问会强制跳转到https<br><img src="https://img.xxlaila.cn/1566808668453.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1566808711171.jpg" alt="img"></p><h5 id="5-4-2、kubernetes-dashboard-tls"><a href="#5-4-2、kubernetes-dashboard-tls" class="headerlink" title="5.4.2、kubernetes dashboard tls"></a>5.4.2、kubernetes dashboard tls</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim nginx-kubernetes-dashboard.yaml </span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard-ingress</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">"nginx"</span></span><br><span class="line">spec:</span><br><span class="line">  tls:</span><br><span class="line">  - hosts:</span><br><span class="line">    - k8s.xxlaila.io</span><br><span class="line">    secretName: ingress-secret</span><br><span class="line">  rules:</span><br><span class="line">  - host: k8s.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: kubernetes-dashboard</span><br><span class="line">          servicePort: 80</span><br><span class="line"><span class="comment"># kubectl create -f nginx-kubernetes-dashboard.yaml</span></span><br></pre></td></tr></table></figure><h3 id="6、ingress-高级用法"><a href="#6、ingress-高级用法" class="headerlink" title="6、ingress 高级用法"></a>6、ingress 高级用法</h3><p><img src="https://img.xxlaila.cn/34324kjsdfh8234ks.png" alt="img"></p><ul><li>lvs 反向代理到 物理nginx。完成https拆包，继承nginx所有功能</li><li>nginx 反向代理到ingress-control。 ingress-control 有两种部署方式 。<ul><li>ingress-control 使用nodePort 方式暴漏服务</li><li>ingress-control 使用hostNetwork 方式暴漏服务</li></ul></li></ul><h3 id="7、总结分析"><a href="#7、总结分析" class="headerlink" title="7、总结分析"></a>7、总结分析</h3><ul><li>ingress-control 在自己的所属的namespace=ingress, 是可以夸不同namespace提供反向代理服.</li><li>如果需要提供夸NS 访问ingress，先给 ingress-control创建RBAC</li><li>ingress-control 使用hostnetwork 模式 性能比使用service nodePort 性能好很多。因为hostnetwork 是直接获取pod 的IP？</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>Ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署Weave Scope</title>
    <url>/2019/08/26/k8s%E9%83%A8%E7%BD%B2Weave-Scope/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="1、Weave-Scope介绍"><a href="#1、Weave-Scope介绍" class="headerlink" title="1、Weave Scope介绍"></a>1、Weave Scope介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;weave scope 是Docker和Kubernetes的故障排除和监控，自动生成应用程序的地图，能够直观地了解，监控和控制基于容器的，基于微服务的应用程序。可以实时的了解docker容器，选择容器基础架构的概述，或关注特定的微服务。轻松识别和纠正问题，确保集装箱化应用的稳定性和性能，查看容器的上下文指标，标记和元数据。轻松地在容器内的进程之间导航，以运行容器，在可扩展的可排序表中进行排列。使用给定主机或服务的最大CPU或内存轻松找到容器。直接与您的容器交互：暂停，重新启动和停止容器。启动命令行。全部不离开范围浏览器窗口。</p><p><img src="https://img.xxlaila.cn/378246bsjfhsajkdq.png" alt="img"></p><h3 id="2、部署weave-scope"><a href="#2、部署weave-scope" class="headerlink" title="2、部署weave scope"></a>2、部署weave scope</h3><p>初次学习，直接下载官方配置文件，没有经过任何修改，不过相信自己随着学习的进步，会逐渐深入。<a href="https://github.com/weaveworks/scope" target="_blank" rel="noopener">github地址</a>，<a href="https://www.weave.works/docs/cloud/latest/overview/" target="_blank" rel="noopener">官方地址</a></p><a id="more"></a><h4 id="2-1、下载配置文件"><a href="#2-1、下载配置文件" class="headerlink" title="2.1、下载配置文件"></a>2.1、下载配置文件</h4><p><a href="https://github.com/weaveworks/scope/tree/master/examples/k8s" target="_blank" rel="noopener">下载配置文件</a>,配置文件如下列表:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls -l</span></span><br><span class="line">cluster-role-binding.yaml</span><br><span class="line">cluster-role.yaml</span><br><span class="line">deploy.yaml</span><br><span class="line">ds.yaml</span><br><span class="line">ns.yaml</span><br><span class="line">psp.yaml</span><br><span class="line">sa.yaml</span><br><span class="line">scope.yaml</span><br><span class="line">svc.yaml</span><br></pre></td></tr></table></figure><ul><li>执行创建<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f ./</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2、查看部署"><a href="#2-2、查看部署" class="headerlink" title="2.2、查看部署"></a>2.2、查看部署</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc,pods -n weave</span></span><br><span class="line">NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/weave-scope-app   ClusterIP   10.99.252.207   &lt;none&gt;        80/TCP    25m</span><br><span class="line"></span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/weave-scope-agent-gpwmw            1/1     Running   0          24m</span><br><span class="line">pod/weave-scope-agent-lmf22            1/1     Running   0          24m</span><br><span class="line">pod/weave-scope-agent-r8vft            1/1     Running   0          24m</span><br><span class="line">pod/weave-scope-agent-rph5p            1/1     Running   0          24m</span><br><span class="line">pod/weave-scope-agent-zfrnc            1/1     Running   0          24m</span><br><span class="line">pod/weave-scope-app-5c46dd7467-s8cp8   1/1     Running   0          24m</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/3489hdnsjkhd8324sd.png" alt="img"></p><h4 id="2-3、查看服务状态"><a href="#2-3、查看服务状态" class="headerlink" title="2.3、查看服务状态"></a>2.3、查看服务状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get services -n weave</span></span><br><span class="line">NAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">weave-scope-app   ClusterIP   10.99.252.207   &lt;none&gt;        80/TCP    27m</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;到这里weave-scope部署完成，但是我们需要进行访问，这里我们通过之前学习的nginx Ingress来对scope配置一个域名，然后吧域名解析到制定的ip地址上进行访问</p><h3 id="3、配置scope域名"><a href="#3、配置scope域名" class="headerlink" title="3、配置scope域名"></a>3、配置scope域名</h3><p>新建立一个yaml文件，如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat scope-ingress.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: scope-ingress</span><br><span class="line">  namespace: weave</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: scope.xxlaila.io</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">        - path: /</span><br><span class="line">          backend:</span><br><span class="line">            serviceName: weave-scope-app</span><br><span class="line">            servicePort: 80</span><br><span class="line"><span class="comment"># kubectl create -f scope-ingress.yaml</span></span><br></pre></td></tr></table></figure><blockquote><p>通过域名访问：<a href="http://scope.xxlaila.io" target="_blank" rel="noopener">http://scope.xxlaila.io</a></p></blockquote><p><img src="https://img.xxlaila.cn/287346jskbdjy784kjs.png" alt="img"><br><img src="https://img.xxlaila.cn/3o4wndk9234sd.png" alt="img"><br><img src="https://img.xxlaila.cn/34873i24dfsd.png" alt="img"><br><img src="https://img.xxlaila.cn/458dskjfhu2y4skdsds.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>Weave Scope</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署zookeeper集群</title>
    <url>/2019/08/24/k8s%E9%83%A8%E7%BD%B2zookeeper%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>zk属于有状态服务，需要连接外部存储，吧数据存放在数据盘里面，否则容器挂了，数据没有了</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>准备zk的yaml文件</p><a id="more"></a><h3 id="1、配置zk-data文件"><a href="#1、配置zk-data文件" class="headerlink" title="1、配置zk-data文件"></a>1、配置zk-data文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat zk-data.yaml</span></span><br><span class="line">kind: PersistentVolume</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: k8s-pv-zk1</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"anything"</span></span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">local</span></span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 3Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  hostPath:</span><br><span class="line">    path: <span class="string">"/var/lib/zookeeper"</span></span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="line">---</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: k8s-pv-zk2</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"anything"</span></span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">local</span></span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 3Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  hostPath:</span><br><span class="line">    path: <span class="string">"/var/lib/zookeeper"</span></span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="line">---</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: k8s-pv-zk3</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"anything"</span></span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">local</span></span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 3Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  hostPath:</span><br><span class="line">    path: <span class="string">"/var/lib/zookeeper"</span></span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="line"><span class="comment"># cat zookeeper.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: zk-hs</span><br><span class="line">  labels:</span><br><span class="line">    app: zk</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 2888</span><br><span class="line">    name: server</span><br><span class="line">  - port: 3888</span><br><span class="line">    name: leader-election</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: zk</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: zk-cs</span><br><span class="line">  labels:</span><br><span class="line">    app: zk</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 2181</span><br><span class="line">    name: client</span><br><span class="line">  selector:</span><br><span class="line">    app: zk</span><br><span class="line">---</span><br><span class="line">apiVersion: policy/v1beta1</span><br><span class="line">kind: PodDisruptionBudget</span><br><span class="line">metadata:</span><br><span class="line">  name: zk-pdb</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: zk</span><br><span class="line">  maxUnavailable: 1</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: zk</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: zk</span><br><span class="line">  serviceName: zk-hs</span><br><span class="line">  replicas: 3</span><br><span class="line">  updateStrategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">  podManagementPolicy: Parallel</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: zk</span><br><span class="line">    spec:</span><br><span class="line">      affinity:</span><br><span class="line">        podAntiAffinity:</span><br><span class="line">          requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">            - labelSelector:</span><br><span class="line">                matchExpressions:</span><br><span class="line">                  - key: <span class="string">"app"</span></span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                    - zk</span><br><span class="line">              topologyKey: <span class="string">"kubernetes.io/hostname"</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: kubernetes-zookeeper</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        image: <span class="string">"xxlaila/kubernetes-zookeeper:1.0-3.4.10"</span></span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            memory: <span class="string">"1Gi"</span></span><br><span class="line">            cpu: <span class="string">"0.5"</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 2181</span><br><span class="line">          name: client</span><br><span class="line">        - containerPort: 2888</span><br><span class="line">          name: server</span><br><span class="line">        - containerPort: 3888</span><br><span class="line">          name: leader-election</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - sh</span><br><span class="line">        - -c</span><br><span class="line">        - <span class="string">"start-zookeeper \</span></span><br><span class="line"><span class="string">          --servers=3 \</span></span><br><span class="line"><span class="string">          --data_dir=/var/lib/zookeeper/data \</span></span><br><span class="line"><span class="string">          --data_log_dir=/var/lib/zookeeper/data/log \</span></span><br><span class="line"><span class="string">          --conf_dir=/opt/zookeeper/conf \</span></span><br><span class="line"><span class="string">          --client_port=2181 \</span></span><br><span class="line"><span class="string">          --election_port=3888 \</span></span><br><span class="line"><span class="string">          --server_port=2888 \</span></span><br><span class="line"><span class="string">          --tick_time=2000 \</span></span><br><span class="line"><span class="string">          --init_limit=10 \</span></span><br><span class="line"><span class="string">          --sync_limit=5 \</span></span><br><span class="line"><span class="string">          --heap=512M \</span></span><br><span class="line"><span class="string">          --max_client_cnxns=60 \</span></span><br><span class="line"><span class="string">          --snap_retain_count=3 \</span></span><br><span class="line"><span class="string">          --purge_interval=12 \</span></span><br><span class="line"><span class="string">          --max_session_timeout=40000 \</span></span><br><span class="line"><span class="string">          --min_session_timeout=4000 \</span></span><br><span class="line"><span class="string">          --log_level=INFO"</span></span><br><span class="line">        readinessProbe:</span><br><span class="line">          <span class="built_in">exec</span>:</span><br><span class="line">            <span class="built_in">command</span>:</span><br><span class="line">            - sh</span><br><span class="line">            - -c</span><br><span class="line">            - <span class="string">"zookeeper-ready 2181"</span></span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">        livenessProbe:</span><br><span class="line">          <span class="built_in">exec</span>:</span><br><span class="line">            <span class="built_in">command</span>:</span><br><span class="line">            - sh</span><br><span class="line">            - -c</span><br><span class="line">            - <span class="string">"zookeeper-ready 2181"</span></span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: datadir</span><br><span class="line">          mountPath: /var/lib/zookeeper</span><br><span class="line">      securityContext:</span><br><span class="line">        runAsUser: 1000</span><br><span class="line">        fsGroup: 1000</span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: datadir</span><br><span class="line">      annotations:</span><br><span class="line">        volume.beta.kubernetes.io/storage-class: <span class="string">"managed-nfs-storage"</span></span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [ <span class="string">"ReadWriteOnce"</span> ]</span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 3Gi</span><br></pre></td></tr></table></figure><h3 id="2、执行部署"><a href="#2、执行部署" class="headerlink" title="2、执行部署"></a>2、执行部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f zookeeper.yaml -n kube-dev</span></span><br></pre></td></tr></table></figure><h3 id="3、查看部署"><a href="#3、查看部署" class="headerlink" title="3、查看部署"></a>3、查看部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod -o wide -n kube-dev</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE     IP            NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">zk-0                            1/1     Running   0          6m13s   10.254.62.4   172.21.17.15    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">zk-1                            1/1     Running   0          6m12s   10.254.21.4   172.21.16.96    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">zk-2                            1/1     Running   0          6m12s   10.254.96.4   172.21.16.193   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="4、查看持久卷申明"><a href="#4、查看持久卷申明" class="headerlink" title="4、查看持久卷申明"></a>4、查看持久卷申明</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pv -o wide -n kube-dev</span></span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                             STORAGECLASS          REASON   AGE</span><br><span class="line">pvc-d1cb6a1c-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            Delete           Bound    kube-dev/datadir-zk-0             managed-nfs-storage            6m18s</span><br><span class="line">pvc-d20a95ec-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            Delete           Bound    kube-dev/datadir-zk-1             managed-nfs-storage            6m18s</span><br><span class="line">pvc-d23577af-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            Delete           Bound    kube-dev/datadir-zk-2             managed-nfs-storage            6m23s</span><br></pre></td></tr></table></figure><h3 id="5、查看pvc"><a href="#5、查看pvc" class="headerlink" title="5、查看pvc"></a>5、查看pvc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pvc -o wide -n kube-dev</span></span><br><span class="line">NAME                     STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">datadir-zk-0             Bound    pvc-d1cb6a1c-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            managed-nfs-storage   6m38s</span><br><span class="line">datadir-zk-1             Bound    pvc-d20a95ec-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            managed-nfs-storage   6m37s</span><br><span class="line">datadir-zk-2             Bound    pvc-d23577af-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            managed-nfs-storage   6m37s</span><br></pre></td></tr></table></figure><h3 id="6、验证集群是否工作正常"><a href="#6、验证集群是否工作正常" class="headerlink" title="6、验证集群是否工作正常"></a>6、验证集群是否工作正常</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for i in 0 1 2; do kubectl exec zk-$i zkServer.sh status -n kube-dev; done</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/bin/../etc/zookeeper/zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/bin/../etc/zookeeper/zoo.cfg</span><br><span class="line">Mode: leader</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/bin/../etc/zookeeper/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><h3 id="7、集群的访问地址"><a href="#7、集群的访问地址" class="headerlink" title="7、集群的访问地址"></a>7、集群的访问地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server.1=zk-0.zk-hs.kube-dev.svc.cluster.local.:2888:3888</span><br><span class="line">server.2=zk-1.zk-hs.kube-dev.svc.cluster.local.:2888:3888</span><br><span class="line">server.3=zk-2.zk-hs.kube-dev.svc.cluster.local.:2888:3888</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署coredns</title>
    <url>/2019/08/24/k8s%E9%83%A8%E7%BD%B2coredns/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;k8s集群中的应用通常是通过ingress实现微服务发布的，前文介绍过在K8S集群中使用traefik实现服务的自动发布，其实现方式是traefik通过集群的DNS服务来解析service对应的集群地址（clusterip），从而将用户的访问请求转发到集群地址上。因此，在部署完集群后的第一件事情应该是配置DNS服务，目前可选的方案有skydns, kube-dns, coredns。<br>&nbsp;&nbsp;&nbsp;&nbsp;kubedns是Kubernetes中的一个内置插件，目前作为一个独立的开源项目维护，见<a href="https://github.com/kubernetes/dns。该DNS服务器利用SkyDNS的库来为Kubernetes" target="_blank" rel="noopener">https://github.com/kubernetes/dns。该DNS服务器利用SkyDNS的库来为Kubernetes</a> pod和服务提供DNS请求。CoreDNS项目是SkyDNS2的作者，Miek Gieben采用更模块化，可扩展的框架构建,将此DNS服务器作为KubeDNS的替代品。CoreDNS作为CNCF中的托管的一个项目，在Kuberentes1.9版本中，使用kubeadm方式安装的集群可以通过以下命令直接安装CoreDNS。kubeadm init –feature-gates=CoreDNS=true</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>准备coredns的<a href="https://github.com/coredns/deployment.git" target="_blank" rel="noopener">yaml文件</a></p><a id="more"></a><p>首先我们的查看<code>cat /etc/kubernetes/kubelet</code> dns的ip地址是多少，这里我的是<code>10.254.0.2</code>，根据自己的情况进行修改</p><ul><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./deploy.sh -i 10.254.0.2 | kubectl apply -f -</span></span><br><span class="line">serviceaccount/coredns created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:coredns created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:coredns created</span><br><span class="line">configmap/coredns created</span><br><span class="line">deployment.apps/coredns created</span><br><span class="line">service/kube-dns created</span><br></pre></td></tr></table></figure></li><li><p>擦看coredns信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod,svc,deployment,rc -n kube-system|grep dns</span></span><br><span class="line">pod/coredns-799775f9b6-mgdc9                1/1     Running   0          12m</span><br><span class="line">pod/coredns-799775f9b6-v95lp                1/1     Running   0          12m</span><br><span class="line">service/kube-dns               ClusterIP   10.254.0.2       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   12m</span><br><span class="line"></span><br><span class="line">deployment.extensions/coredns                2/2     2            2           12m</span><br></pre></td></tr></table></figure></li></ul><h3 id="部署-DNS-自动扩容"><a href="#部署-DNS-自动扩容" class="headerlink" title="部署 DNS 自动扩容"></a>部署 DNS 自动扩容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在大规模集群的情况下，可能需要集群 DNS 自动扩容，具体文档请参考 DNS Horizontal Autoscaler，DNS 扩容算法可参考 Github，如有需要请自行修改；以下为具体配置</p><ul><li><p>dns-horizontal-autoscaler.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kind: ServiceAccount</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns-autoscaler</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: system:kube-dns-autoscaler</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"nodes"</span>]</span><br><span class="line">    verbs: [<span class="string">"list"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"replicationcontrollers/scale"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"extensions"</span>]</span><br><span class="line">    resources: [<span class="string">"deployments/scale"</span>, <span class="string">"replicasets/scale"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"update"</span>]</span><br><span class="line"><span class="comment"># Remove the configmaps rule once below issue is fixed:</span></span><br><span class="line"><span class="comment"># kubernetes-incubator/cluster-proportional-autoscaler#16</span></span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"configmaps"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"create"</span>]</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: system:kube-dns-autoscaler</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: kube-dns-autoscaler</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:kube-dns-autoscaler</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns-autoscaler</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns-autoscaler</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kube-dns-autoscaler</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kube-dns-autoscaler</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">    spec:</span><br><span class="line">      priorityClassName: system-cluster-critical</span><br><span class="line">      containers:</span><br><span class="line">      - name: autoscaler</span><br><span class="line">        image: gcr.azk8s.cn/google_containers/cluster-proportional-autoscaler-amd64:1.1.2-r2</span><br><span class="line">        resources:</span><br><span class="line">            requests:</span><br><span class="line">                cpu: <span class="string">"20m"</span></span><br><span class="line">                memory: <span class="string">"10Mi"</span></span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">          - /cluster-proportional-autoscaler</span><br><span class="line">          - --namespace=kube-system</span><br><span class="line">          - --configmap=kube-dns-autoscaler</span><br><span class="line">          <span class="comment"># Should keep target in sync with cluster/addons/dns/kube-dns.yaml.base</span></span><br><span class="line">          - --target=Deployment/coredns</span><br><span class="line">          <span class="comment"># When cluster is using large nodes(with more cores), "coresPerReplica" should dominate.</span></span><br><span class="line">          <span class="comment"># If using small nodes, "nodesPerReplica" should dominate.</span></span><br><span class="line">          - --default-params=&#123;<span class="string">"linear"</span>:&#123;<span class="string">"coresPerReplica"</span>:256,<span class="string">"nodesPerReplica"</span>:16,<span class="string">"preventSinglePointFailure"</span>:<span class="literal">true</span>&#125;&#125;</span><br><span class="line">          - --logtostderr=<span class="literal">true</span></span><br><span class="line">          - --v=2</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: <span class="string">"CriticalAddonsOnly"</span></span><br><span class="line">        operator: <span class="string">"Exists"</span></span><br><span class="line">      serviceAccountName: kube-dns-autoscaler</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f dns-horizontal-autoscaler.yaml </span></span><br><span class="line">serviceaccount/kube-dns-autoscaler created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:kube-dns-autoscaler created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:kube-dns-autoscaler created</span><br><span class="line">deployment.apps/kube-dns-autoscaler created</span><br></pre></td></tr></table></figure></li></ul><p>执行创建以后我们可以看到pod 创建了两个dns</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n kube-system|grep coredns</span></span><br><span class="line">coredns-68676b6b88-pw9c2                1/1     Running   0          7m18s</span><br><span class="line">coredns-68676b6b88-tgbbv                1/1     Running   0          100m</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>coredns</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署mysql</title>
    <url>/2019/08/24/k8s%E9%83%A8%E7%BD%B2mysql/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;后端存储利用nfs来进行存储数据，nfs安装不阐述，需要注意注意的是在创建mysql 的共享目录的时候参数设定<code>/data/mysql *(rw,sync,no_root_squash,no_subtree_check)</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl  restart nfs.service</span><br><span class="line">$ sudo exportfs -arv</span><br></pre></td></tr></table></figure><h3 id="1、创建mysql存储"><a href="#1、创建mysql存储" class="headerlink" title="1、创建mysql存储"></a>1、创建mysql存储</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat mysql-pvc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pvc001</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 10Gi</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteMany</span><br><span class="line">  persistentVolumeReclaimPolicy: Delete</span><br><span class="line">  nfs:</span><br><span class="line">    server: 172.21.16.240</span><br><span class="line">    path: /data/mysql</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-pvc</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 10Gi</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、部署mysql"><a href="#2、部署mysql" class="headerlink" title="2、部署mysql"></a>2、部署mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat mysql-deploy.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-deploy</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: mysql-ops</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        name: mysql-ops</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: mysql</span><br><span class="line">          image: mysql:8.0.12</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          env:</span><br><span class="line">          - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">            value: <span class="string">"noc-mysql"</span></span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 3306</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: mysql-persistent-storage</span><br><span class="line">              mountPath: <span class="string">"/var/lib/mysql"</span></span><br><span class="line">      volumes:</span><br><span class="line">        - name: mysql-persistent-storage</span><br><span class="line">          persistentVolumeClaim:</span><br><span class="line">            claimName: mysql-pvc</span><br></pre></td></tr></table></figure><h3 id="3、设置端口映射"><a href="#3、设置端口映射" class="headerlink" title="3、设置端口映射"></a>3、设置端口映射</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat mysql-svc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-svc</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  labels: </span><br><span class="line">    name: mysql-svc</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 3306</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 3306</span><br><span class="line">    name: http</span><br><span class="line">    nodePort: 30003</span><br><span class="line">  selector:</span><br><span class="line">    name: mysql-ops</span><br></pre></td></tr></table></figure><h3 id="4、查看pod部署"><a href="#4、查看pod部署" class="headerlink" title="4、查看pod部署"></a>4、查看pod部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod -n kube-ops</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/8364iqhkdaskda.png" alt="img"></p><h3 id="5、查看mysql部署哪个node节点"><a href="#5、查看mysql部署哪个node节点" class="headerlink" title="5、查看mysql部署哪个node节点"></a>5、查看mysql部署哪个node节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod -o wide -n kube-ops</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/42joud02jef24.png" alt="img"></p><h3 id="6、进入mysql容器"><a href="#6、进入mysql容器" class="headerlink" title="6、进入mysql容器"></a>6、进入mysql容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker ps -a</span><br><span class="line">$ sudo docker <span class="built_in">exec</span> -it ded7f2990db5 /bin/bash</span><br><span class="line">root@mysql-deploy-6dc5d9786b-lgkxk:/<span class="comment"># mysql -h127.0.0.1 -uroot -pnoc-mysql</span></span><br></pre></td></tr></table></figure><h4 id="6-1、设置mysql"><a href="#6-1、设置mysql" class="headerlink" title="6.1、设置mysql"></a>6.1、设置mysql</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter user <span class="string">'root'</span>@<span class="string">'%'</span> identified with mysql_native_password by<span class="string">'root'</span>;</span><br><span class="line">mysql&gt; alter  user <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'mysql'</span>;</span><br><span class="line">mysql&gt; alter  user <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'noc-mysql'</span>;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;退出mysql和容器，执行quit;退出mysql，按ctrl+p+q从容器中返回node主机。利用navicat 通过node主机的ip地址和端口30003连接mysql数据库<br><img src="https://img.xxlaila.cn/2348wndssmadklj3.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s角色访问RBAC</title>
    <url>/2019/08/24/k8s%E8%A7%92%E8%89%B2%E8%AE%BF%E9%97%AERBAC/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="1、rbac介绍"><a href="#1、rbac介绍" class="headerlink" title="1、rbac介绍"></a>1、rbac介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes中的两个用于配置信息的重要资源对象：ConfigMap和Secret，其实到这里我们基本上学习的内容已经覆盖到Kubernetes中一些重要的资源对象了，来部署一个应用程序是完全没有问题的了。在我们演示一个完整的示例之前，我们还需要给大家讲解一个重要的概念：RBAC - 基于角色的访问控制。<br>&nbsp;&nbsp;&nbsp;&nbsp;RBAC使用rbac.authorization.k8s.io API Group 来实现授权决策，允许管理员通过 Kubernetes API 动态配置策略，要启用RBAC，需要在 apiserver 中添加参数–authorization-mode=RBAC，如果使用的kubeadm安装的集群，1.6 版本以上的都默认开启了RBAC，可以通过查看 Master 节点上 apiserver 的静态Pod定义文件：</p><h3 id="2、-kubernetes-关于空间权限赋予"><a href="#2、-kubernetes-关于空间权限赋予" class="headerlink" title="2、 kubernetes 关于空间权限赋予"></a>2、 kubernetes 关于空间权限赋予</h3><h4 id="1、获取并查看"><a href="#1、获取并查看" class="headerlink" title="1、获取并查看"></a>1、获取并查看</h4><ul><li>Role</li><li>ClusterRole</li><li>RoleBinding</li><li>ClusterRoleBinding</li></ul><a id="more"></a><ul><li><p>1.1、查看kube-system namespace下的所有role</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get role -n kube-system</span><br></pre></td></tr></table></figure></li><li><p>1.2、查看某个role定义的资源权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get role &lt;role-name&gt; -n kube-system -o yaml</span><br></pre></td></tr></table></figure></li><li><p>1.3、查看kube-system namespace下所有的rolebinding</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get rolebinding -n kube-system</span><br></pre></td></tr></table></figure></li><li><p>1.4、查看kube-system namespace下的某个rolebinding详细信息（绑定的Role和subject）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get rolebinding &lt;rolebind-name&gt; -n kube-system -o yaml</span><br></pre></td></tr></table></figure></li><li><p>1.5、查看集群所有的clusterrole</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get clusterrole</span><br></pre></td></tr></table></figure></li><li><p>1.6、查看某个clusterrole定义的资源权限详细信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get clusterrole &lt;clusterrole-name&gt; -o yaml</span><br></pre></td></tr></table></figure></li><li><p>1.7、查看所有的clusterrolebinding</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get clusterrolebinding</span><br></pre></td></tr></table></figure></li><li><p>1.8、查看某一clusterrolebinding的详细信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get clusterrolebinding &lt;clusterrolebinding-name&gt; -o yaml</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、kubectl命令可以用于在命名空间内或者整个集群内授予角色。"><a href="#2、kubectl命令可以用于在命名空间内或者整个集群内授予角色。" class="headerlink" title="2、kubectl命令可以用于在命名空间内或者整个集群内授予角色。"></a>2、kubectl命令可以用于在命名空间内或者整个集群内授予角色。</h4><ul><li><p>在某一特定名字空间内授予Role或者ClusterRole。示例如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create rolebinding</span><br></pre></td></tr></table></figure></li><li><p>在名为”acme”的名字空间中将admin ClusterRole授予用户”bob”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create rolebinding bob-admin-binding --clusterrole=admin --user=bob --namespace=acme</span><br></pre></td></tr></table></figure></li><li><p>在名为”acme”的名字空间中将view ClusterRole授予服务账户”myapp”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create rolebinding myapp-view-binding --clusterrole=view --serviceaccount=acme:myapp --namespace=acme</span><br><span class="line">kubectl create clusterrolebinding</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、在整个集群中授予ClusterRole，包括所有名字空间。示例如下："><a href="#3、在整个集群中授予ClusterRole，包括所有名字空间。示例如下：" class="headerlink" title="3、在整个集群中授予ClusterRole，包括所有名字空间。示例如下："></a>3、在整个集群中授予ClusterRole，包括所有名字空间。示例如下：</h4><ul><li><p>在整个集群范围内将cluster-admin ClusterRole授予用户”root”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding root-cluster-admin-binding --clusterrole=cluster-admin --user=root</span><br></pre></td></tr></table></figure></li><li><p>在整个集群范围内将system:node ClusterRole授予用户”kubelet”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding kubelet-node-binding --clusterrole=system:node --user=kubelet</span><br></pre></td></tr></table></figure></li><li><p>在整个集群范围内将view ClusterRole授予名字空间”acme”内的服务账户”myapp”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding myapp-view-binding --clusterrole=view --serviceaccount=acme:myapp</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、对某一个namespace赋予jenkins部署权限"><a href="#4、对某一个namespace赋予jenkins部署权限" class="headerlink" title="4、对某一个namespace赋予jenkins部署权限"></a>4、对某一个namespace赋予jenkins部署权限</h4><ul><li><p>查看kube-ops 下面的角色</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get role -n kube-ops</span></span><br><span class="line">NAME       AGE</span><br><span class="line">jenkins2   2d6h</span><br></pre></td></tr></table></figure></li><li><p>查看role定义的资源权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get role jenkins2 -n kube-ops -o yaml</span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">"2019-01-14T03:07:25Z"</span></span><br><span class="line">  name: jenkins2</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  resourceVersion: <span class="string">"2389179"</span></span><br><span class="line">  selfLink: /apis/rbac.authorization.k8s.io/v1/namespaces/kube-ops/roles/jenkins2</span><br><span class="line">  uid: 84762132-17a9-11e9-8991-fa163e14c5bd</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  verbs:</span><br><span class="line">  - create</span><br><span class="line">  - delete</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - patch</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods/<span class="built_in">exec</span></span><br><span class="line">  verbs:</span><br><span class="line">  - create</span><br><span class="line">  - delete</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - patch</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods/<span class="built_in">log</span></span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - secrets</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br></pre></td></tr></table></figure></li><li><p>创建jenkins2的权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-zxc-test-3 ~]<span class="comment"># kubectl -n kube-system create sa jenkins2</span></span><br><span class="line">serviceaccount/jenkins2 created</span><br></pre></td></tr></table></figure></li><li><p>授权访问</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-zxc-test-3 ~]<span class="comment"># kubectl create clusterrolebinding jenkins2 --clusterrole cluster-admin --serviceaccount=kube-ops:jenkins2</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/jenkins2 created</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s heapster</title>
    <url>/2019/08/24/k8s-heapster/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="1、heapster-介绍"><a href="#1、heapster-介绍" class="headerlink" title="1、heapster 介绍"></a>1、heapster 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Heapster是容器集群监控和性能分析工具,支持Kubernetes和CoreOS。<br>&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes有个监控agent—cAdvisor。在每个kubernetes Node上都会运行cAdvisor,它会收集本机以及容器的监控数据(cpu,memory,filesystem,network,uptime)。在较新的版本中，K8S已经将cAdvisor功能集成到kubelet组件中。每个Node节点可以直接进行web访问。</p><h3 id="2、heapster-安装"><a href="#2、heapster-安装" class="headerlink" title="2、heapster 安装"></a>2、heapster 安装</h3><p>下载heapster的<a href="https://github.com/kubernetes-retired/heapster/tree/master/deploy/kube-config" target="_blank" rel="noopener">yaml文件</a>，下载完成后我们需要对文件修改，以满足我们的的需求.</p><h4 id="2-1、grafana修改"><a href="#2-1、grafana修改" class="headerlink" title="2.1、grafana修改"></a>2.1、grafana修改</h4><p>grafana添加nodePort: 30003让grafana支持外部访问，我们可以通过这个端口进行但单独的页面配置。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat grafana.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: monitoring-grafana</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        task: monitoring</span><br><span class="line">        k8s-app: grafana</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: grafana</span><br><span class="line">        image: k8s.gcr.io/heapster-grafana-amd64:v5.0.4</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 3000</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /etc/ssl/certs</span><br><span class="line">          name: ca-certificates</span><br><span class="line">          readOnly: <span class="literal">true</span></span><br><span class="line">        - mountPath: /var</span><br><span class="line">          name: grafana-storage</span><br><span class="line">        env:</span><br><span class="line">        - name: INFLUXDB_HOST</span><br><span class="line">          value: monitoring-influxdb</span><br><span class="line">        - name: GF_SERVER_HTTP_PORT</span><br><span class="line">          value: <span class="string">"3000"</span></span><br><span class="line">          <span class="comment"># The following env variables are required to make Grafana accessible via</span></span><br><span class="line">          <span class="comment"># the kubernetes api-server proxy. On production clusters, we recommend</span></span><br><span class="line">          <span class="comment"># removing these env variables, setup auth for grafana, and expose the grafana</span></span><br><span class="line">          <span class="comment"># service using a LoadBalancer or a public IP.</span></span><br><span class="line">        - name: GF_AUTH_BASIC_ENABLED</span><br><span class="line">          value: <span class="string">"false"</span></span><br><span class="line">        - name: GF_AUTH_ANONYMOUS_ENABLED</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">        - name: GF_AUTH_ANONYMOUS_ORG_ROLE</span><br><span class="line">          value: Admin</span><br><span class="line">        - name: GF_SERVER_ROOT_URL</span><br><span class="line">          <span class="comment"># If you're only using the API Server proxy, set this value instead:</span></span><br><span class="line">          <span class="comment"># value: /api/v1/namespaces/kube-system/services/monitoring-grafana/proxy</span></span><br><span class="line">          value: /</span><br><span class="line">      volumes:</span><br><span class="line">      - name: ca-certificates</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /etc/ssl/certs</span><br><span class="line">      - name: grafana-storage</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">'true'</span></span><br><span class="line">    kubernetes.io/name: monitoring-grafana</span><br><span class="line">  name: monitoring-grafana</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># In a production setup, we recommend accessing Grafana through an external Loadbalancer</span></span><br><span class="line">  <span class="comment"># or through a public IP.</span></span><br><span class="line">  <span class="comment"># type: LoadBalancer</span></span><br><span class="line">  <span class="comment"># You could also use NodePort to expose the service at a randomly-generated port</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 3000</span><br><span class="line">    nodePort: 30003</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: grafana</span><br></pre></td></tr></table></figure><h4 id="2-2、heapster文件修改"><a href="#2-2、heapster文件修改" class="headerlink" title="2.2、heapster文件修改"></a>2.2、heapster文件修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- --<span class="built_in">source</span>=kubernetes:https://kubernetes.default?useServiceAccount=<span class="literal">true</span>&amp;kubeletHttps=<span class="literal">true</span>&amp;kubeletPort=10250&amp;insecure=<span class="literal">true</span></span><br><span class="line">连接k8s api的地址，默认是kubernetes.default，后面一段加入用户认证，端口，以及https;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- --sink=influxdb:http://monitoring-influxdb.kube-system.svc:8086</span><br><span class="line">指定 influxdb数据库的地址，这个在infuxdb文件里面有这个域名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat heapster.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        task: monitoring</span><br><span class="line">        k8s-app: heapster</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: heapster</span><br><span class="line">      containers:</span><br><span class="line">      - name: heapster</span><br><span class="line">        image: k8s.gcr.io/heapster-amd64:v1.5.4</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /heapster</span><br><span class="line">        - --<span class="built_in">source</span>=kubernetes:https://kubernetes.default?useServiceAccount=<span class="literal">true</span>&amp;kubeletHttps=<span class="literal">true</span>&amp;kubeletPort=10250&amp;insecure=<span class="literal">true</span></span><br><span class="line">        - --sink=influxdb:http://monitoring-influxdb.kube-system.svc:8086</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    task: monitoring</span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">'true'</span></span><br><span class="line">    kubernetes.io/name: Heapster</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 8082</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: heapster</span><br></pre></td></tr></table></figure><h3 id="3、执行创建heapster"><a href="#3、执行创建heapster" class="headerlink" title="3、执行创建heapster"></a>3、执行创建heapster</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubect create -f ./</span></span><br></pre></td></tr></table></figure><p>在执行创建完成后，等待一会显示图像<br><img src="https://img.xxlaila.cn/459348skndiy923s.png" alt="img"><br><img src="https://img.xxlaila.cn/34293knsdalsk0329.png" alt="img"></p><h4 id="3-1、访问grafana是否正常"><a href="#3-1、访问grafana是否正常" class="headerlink" title="3.1、访问grafana是否正常"></a>3.1、访问grafana是否正常</h4><p>前面在grafana文件里面增加了nodePoer: 30003的端口，我们可以通过任意节点ip:30003进行访问grafana界面。</p><p><img src="https://img.xxlaila.cn/453847sndkniuy234wds.png" alt="img"><br><strong>可以进行配置grafana。</strong></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>heapster</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署eureka集群</title>
    <url>/2019/08/24/k8s%E9%83%A8%E7%BD%B2eureka%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>eureka 不阐述介绍，这里直接开始在kubernetes下部署eureka集群</p><h3 id="1、配置文件的增加"><a href="#1、配置文件的增加" class="headerlink" title="1、配置文件的增加"></a>1、配置文件的增加</h3><p>eureka 只一个有状态的服务，部署有状态服务我们可以使用StatefulSet</p><h4 id="1-1、增加dockerfile"><a href="#1-1、增加dockerfile" class="headerlink" title="1.1、增加dockerfile"></a>1.1、增加dockerfile</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat Dockerfile</span><br><span class="line">FROM docker.io/xxlaila/centos7.6-jdk1.8:latest</span><br><span class="line">MAINTAINER xxlaila <span class="string">"cq_xxlaila@163.com"</span></span><br><span class="line"><span class="comment"># Install dependent plugin</span></span><br><span class="line"></span><br><span class="line">ADD target/kxl-eureka.jar /opt/webapps/kxl-eureka.jar</span><br><span class="line">ADD application.yaml /opt/webapps/application.yaml</span><br><span class="line"></span><br><span class="line">WORKDIR /opt/webapps</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"-Dspring.profiles.active=dev"</span>, <span class="string">"kxl-eureka.jar"</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1-2、修改配置文件"><a href="#1-2、修改配置文件" class="headerlink" title="1.2、修改配置文件"></a>1.2、修改配置文件</h4><p>在做eureka集群的时候，application.yaml的配置文件很重要，配置文件做不好，将会直接影响到eureka的启动，还有集群的模式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat application.yaml</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: kxl-eureka</span><br><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line"><span class="comment">#    prefer-ip-address: true</span></span><br><span class="line">    hostname: <span class="variable">$&#123;EUREKA_HOST_NAME:peer1&#125;</span> <span class="comment">#服务主机名</span></span><br><span class="line">    appname: <span class="variable">$&#123;spring.application.name&#125;</span>  <span class="comment">#服务名称，默认为 unknow 这里直接取 spring.application.name 了</span></span><br><span class="line">    <span class="comment"># server 从最后一次收到心跳到移除废弃服务的超时时间（秒）</span></span><br><span class="line">    lease-expiration-duration-in-seconds: 90</span><br><span class="line">    <span class="comment"># client 给 server 发送心跳的间隔时间（秒），比 lease-expiration-duration-in-seconds 小</span></span><br><span class="line">    lease-renewal-interval-in-seconds: 30</span><br><span class="line"></span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: <span class="variable">$&#123;EUREKA_URL_LIST:http://peer1:8761/eureka/&#125;</span> <span class="comment"># 指定服务中心 eureka server的地址</span></span><br><span class="line">    <span class="comment"># client 是否从eureka上拉取注册信息， server模式可关掉</span></span><br><span class="line">    fetch-registry: <span class="variable">$&#123;BOOL_FETCH:true&#125;</span>   <span class="comment"># 是否拉取 eureka server 的注册信息。 默认为true</span></span><br><span class="line">    <span class="comment"># client 是否注册到eureka上， server模式可关掉</span></span><br><span class="line">    register-with-eureka: <span class="variable">$&#123;BOOL_REGISTER:true&#125;</span>  <span class="comment"># 是否把服务中心本身当做eureka client 注册。默认为true</span></span><br><span class="line">    <span class="comment"># client 间隔多久去拉去服务信息(秒)</span></span><br><span class="line">    registry-fetch-interval-seconds: 30</span><br><span class="line">  server:</span><br><span class="line">    <span class="comment"># 自我保护机制，应对网络闪断情况，大面积丢失过多的client，不删除服务</span></span><br><span class="line">    <span class="built_in">enable</span>-self-preservation: <span class="variable">$&#123;SELF_PRESERVATION:true&#125;</span>     <span class="comment"># 是否开启自我保护。 默认为 true.</span></span><br><span class="line">    <span class="comment"># 每分钟心跳数 实际/期望，如果小于阈值(threshold)，则触发自我保护机制</span></span><br><span class="line">    renewal-percent-threshold: 0.85</span><br><span class="line">    <span class="comment"># 扫描失效服务的间隔时间（毫秒）</span></span><br><span class="line">    eviction-interval-timer-in-ms: 60000</span><br><span class="line"></span><br><span class="line">  application:</span><br><span class="line">    name: <span class="variable">$&#123;EUREKA_APPLICATION_NAME:eureka-server&#125;</span></span><br></pre></td></tr></table></figure><h4 id="1-3、创建-eureka-docker镜像"><a href="#1-3、创建-eureka-docker镜像" class="headerlink" title="1.3、创建 eureka docker镜像"></a>1.3、创建 eureka docker镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t xxlaila/kxl-eureka:v1 .</span><br><span class="line">$ docker push xxlaila/kxl-eureka:v1</span><br></pre></td></tr></table></figure><h3 id="2、在k8s创建eureka集群"><a href="#2、在k8s创建eureka集群" class="headerlink" title="2、在k8s创建eureka集群"></a>2、在k8s创建eureka集群</h3><h4 id="2-1、创建eureka集群"><a href="#2-1、创建eureka集群" class="headerlink" title="2.1、创建eureka集群"></a>2.1、创建eureka集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat kxl-eureka.yaml</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: eureka</span><br><span class="line">  namespace: kube-dev</span><br><span class="line">  labels:</span><br><span class="line">    app: eureka</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8761</span><br><span class="line">    name: eureka</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: eureka</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: eureka</span><br><span class="line">  namespace: kube-dev</span><br><span class="line">spec:</span><br><span class="line">  serviceName: <span class="string">"eureka"</span></span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: eureka</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: eureka</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: eureka</span><br><span class="line">        image:  docker.io/xxlaila/kxl-eureka:v1</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8761</span><br><span class="line">        env:</span><br><span class="line">        - name: MY_POD_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.name</span><br><span class="line">          <span class="comment"># Due to camelcase issues with "defaultZone" and "preferIpAddress", _JAVA_OPTIONS is used here</span></span><br><span class="line">        - name: eureka_client_serviceUrl_defaultZone</span><br><span class="line">          <span class="comment">#value: http://eureka-0.eureka.&lt;namespace&gt;.svc.cluster.local:8761/eureka/,http://eureka-1.eureka.&lt;namespace&gt;.svc.cluster.local:8761/eureka/</span></span><br><span class="line">          value: http://eureka-0.eureka:8761/eureka/,http://eureka-1.eureka:8761/eureka/,http://eureka-2.eureka:8761/eureka/</span><br><span class="line">        - name: EUREKA_CLIENT_REGISTERWITHEUREKA</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">        - name: EUREKA_CLIENT_FETCHREGISTRY</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">          <span class="comment"># In the docker image, this is set to localhost. Otherwise, we could leave this empty.</span></span><br><span class="line">          <span class="comment"># The hostnames must match with the the eureka serviceUrls, otherwise the replicas are reported as unavailable in the eureka dashboard</span></span><br><span class="line">        - name: EUREKA_INSTANCE_HOSTNAME</span><br><span class="line">          <span class="comment">#value: "$(MY_POD_NAME).eureka.&lt;namespace.svc.cluster.local"</span></span><br><span class="line">          value: <span class="string">"<span class="variable">$(MY_POD_NAME)</span>.eureka"</span></span><br><span class="line">          <span class="comment">#value: eureka</span></span><br><span class="line">          <span class="comment"># For the other (stateless) services, this should probably be set to true, since their pods have no DNS-resolvable  hostnames</span></span><br><span class="line">       <span class="comment">#- name: EUREKA_INSTANCE_PREFERIPADDRESS</span></span><br><span class="line">       <span class="comment">#  value: "false"</span></span><br><span class="line">  <span class="comment"># No need to start the pods in order. We just need the stable network identity</span></span><br><span class="line">  podManagementPolicy: <span class="string">"Parallel"</span></span><br></pre></td></tr></table></figure><p>在做这个的时候其实遇到了很多坑，也是参考一些文章才完成的,<a href="https://github.com/kingschan1204/blog/issues/5" target="_blank" rel="noopener">参考文献</a></p><h4 id="2-2、创建eureka-Ingress"><a href="#2-2、创建eureka-Ingress" class="headerlink" title="2.2、创建eureka Ingress"></a>2.2、创建eureka Ingress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat eureka-ingress.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: eureka-ingress</span><br><span class="line">  namespace: kube-dev</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">"nginx"</span></span><br><span class="line">    nginx.ingress.kubernetes.io/secure-backends: <span class="string">"true"</span></span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: eureka.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: eureka</span><br><span class="line">          servicePort: 8761</span><br></pre></td></tr></table></figure><h4 id="2-3、执行创建"><a href="#2-3、执行创建" class="headerlink" title="2.3、执行创建"></a>2.3、执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f .</span><br><span class="line">$ kubectl get pods -n kube-dev</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">eureka-0   1/1     Running   0          21m</span><br><span class="line">eureka-1   1/1     Running   0          21m</span><br><span class="line">eureka-2   1/1     Running   0          21m</span><br><span class="line">$ kubectl get pods,svc,rs -n kube-dev</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/eureka-0   1/1     Running   0          21m</span><br><span class="line">pod/eureka-1   1/1     Running   0          21m</span><br><span class="line">pod/eureka-2   1/1     Running   0          21m</span><br><span class="line"></span><br><span class="line">NAME             TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service/eureka   ClusterIP   None         &lt;none&gt;        8761/TCP   21m</span><br></pre></td></tr></table></figure><h4 id="2-4、访问验证"><a href="#2-4、访问验证" class="headerlink" title="2.4、访问验证"></a>2.4、访问验证</h4><p><img src="https://img.xxlaila.cn/34239uskdnksjda.png" alt="img"><br>通过域名访问：<br><img src="https://img.xxlaila.cn/89745jkndklsajkdhsajkbfa.png" alt="img"></p><h3 id="3、eureka-环境"><a href="#3、eureka-环境" class="headerlink" title="3、eureka 环境"></a>3、eureka 环境</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;根据2.4小节可以看到，enviroonment为test，我们在dockerfile指定的为dev，所以这里就有点差池，但是查看了一下资料，这个要么就写多个application.yaml的配置文件，要么就打多个包，这样就比较麻烦，而且考虑到公司微服务的特殊性，既要满足于公司的微服务架构，有要考虑的模版的通用性，还需要考虑运维维护的便捷性。下面一起来看看基于公司的定制化来改变这个局限性。</p><h4 id="3-1、公司的系统环境变量"><a href="#3-1、公司的系统环境变量" class="headerlink" title="3.1、公司的系统环境变量"></a>3.1、公司的系统环境变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONFIG_API_SERVER=http://api.conf.xxlaila.io</span><br><span class="line">RUN_CLUSTER=default</span><br><span class="line">RUN_MODE=AUTO</span><br><span class="line">RUN_ENV=demo</span><br><span class="line">CONFIG_API_SERVER：公司配置中心api的地址，app拉取配置中心的配置</span><br><span class="line">RUN_CLUSTER：默认集群，做灰度发布使用</span><br><span class="line">RUN_MODE：</span><br><span class="line">RUN_ENV：当前系统所运行的环境</span><br></pre></td></tr></table></figure><h4 id="3-2、修改eureka的配置文件"><a href="#3-2、修改eureka的配置文件" class="headerlink" title="3.2、修改eureka的配置文件"></a>3.2、修改eureka的配置文件</h4><p>增加配置eureka:<code>environment: ${RUN_ENV}</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat application.yaml</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: kxl-eureka</span><br><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">eureka:</span><br><span class="line">  environment: <span class="variable">$&#123;RUN_ENV&#125;</span></span><br><span class="line">  instance:</span><br><span class="line"><span class="comment">#    prefer-ip-address: true</span></span><br><span class="line">    hostname: <span class="variable">$&#123;EUREKA_HOST_NAME:peer1&#125;</span></span><br><span class="line">    appname: <span class="variable">$&#123;spring.application.name&#125;</span></span><br><span class="line">    <span class="comment"># server 从最后一次收到心跳到移除废弃服务的超时时间（秒）</span></span><br><span class="line">    lease-expiration-duration-in-seconds: 90</span><br><span class="line">    <span class="comment"># client 给 server 发送心跳的间隔时间（秒），比 lease-expiration-duration-in-seconds 小</span></span><br><span class="line">    lease-renewal-interval-in-seconds: 30</span><br><span class="line"></span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: <span class="variable">$&#123;EUREKA_URL_LIST:http://peer1:8761/eureka/&#125;</span></span><br><span class="line">    <span class="comment"># client 是否从eureka上拉取注册信息， server模式可关掉</span></span><br><span class="line">    fetch-registry: <span class="variable">$&#123;BOOL_FETCH:true&#125;</span></span><br><span class="line">    <span class="comment"># client 是否注册到eureka上， server模式可关掉</span></span><br><span class="line">    register-with-eureka: <span class="variable">$&#123;BOOL_REGISTER:true&#125;</span></span><br><span class="line">    <span class="comment"># client 间隔多久去拉去服务信息(秒)</span></span><br><span class="line">    registry-fetch-interval-seconds: 30</span><br><span class="line">  server:</span><br><span class="line">    <span class="comment"># 自我保护机制，应对网络闪断情况，大面积丢失过多的client，不删除服务</span></span><br><span class="line">    <span class="built_in">enable</span>-self-preservation: <span class="variable">$&#123;SELF_PRESERVATION:true&#125;</span></span><br><span class="line">    <span class="comment"># 每分钟心跳数 实际/期望，如果小于阈值(threshold)，则触发自我保护机制</span></span><br><span class="line">    renewal-percent-threshold: 0.85</span><br><span class="line">    <span class="comment"># 扫描失效服务的间隔时间（毫秒）</span></span><br><span class="line">    eviction-interval-timer-in-ms: 60000</span><br><span class="line"></span><br><span class="line">  application:</span><br><span class="line">    name: <span class="variable">$&#123;EUREKA_APPLICATION_NAME:eureka-server&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-3、修改eureka部署文件"><a href="#3-3、修改eureka部署文件" class="headerlink" title="3.3、修改eureka部署文件"></a>3.3、修改eureka部署文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat kxl-eureka.yaml </span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: eureka</span><br><span class="line">  namespace: kube-dev</span><br><span class="line">  labels:</span><br><span class="line">    app: eureka</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8761</span><br><span class="line">    name: eureka</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: eureka</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: eureka</span><br><span class="line">  namespace: kube-dev</span><br><span class="line">spec:</span><br><span class="line">  serviceName: <span class="string">"eureka"</span></span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: eureka</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: eureka</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: eureka</span><br><span class="line">        image:  docker.io/xxlaila/kxl-eureka:v2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8761</span><br><span class="line">        env:</span><br><span class="line">        - name: MY_POD_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.name</span><br><span class="line">          <span class="comment"># Due to camelcase issues with "defaultZone" and "preferIpAddress", _JAVA_OPTIONS is used here</span></span><br><span class="line">        - name: eureka_client_serviceUrl_defaultZone</span><br><span class="line">          <span class="comment">#value: http://eureka-0.eureka.&lt;namespace&gt;.svc.cluster.local:8761/eureka/,http://eureka-1.eureka.&lt;namespace&gt;.svc.cluster.local:8761/eureka/</span></span><br><span class="line">          value: http://eureka-0.eureka:8761/eureka/,http://eureka-1.eureka:8761/eureka/,http://eureka-2.eureka:8761/eureka/</span><br><span class="line">        - name: EUREKA_CLIENT_REGISTERWITHEUREKA</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">        - name: EUREKA_CLIENT_FETCHREGISTRY</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">          <span class="comment"># In the docker image, this is set to localhost. Otherwise, we could leave this empty.</span></span><br><span class="line">          <span class="comment"># The hostnames must match with the the eureka serviceUrls, otherwise the replicas are reported as unavailable in the eureka dashboard</span></span><br><span class="line">        - name: EUREKA_INSTANCE_HOSTNAME</span><br><span class="line">          <span class="comment">#value: "$(MY_POD_NAME).eureka.&lt;namespace.svc.cluster.local"</span></span><br><span class="line">          value: <span class="string">"<span class="variable">$(MY_POD_NAME)</span>.eureka"</span></span><br><span class="line">        - name: RUN_ENV</span><br><span class="line">          value: <span class="built_in">test</span></span><br><span class="line">        - name: CONFIG_API_SERVER</span><br><span class="line">          value: http://api.conf.xxlaila.io</span><br><span class="line">        - name: RUN_CLUSTER</span><br><span class="line">          value: default</span><br><span class="line">        - name: RUN_MODE</span><br><span class="line">          value: AUTO</span><br><span class="line">          <span class="comment">#value: eureka</span></span><br><span class="line">          <span class="comment"># For the other (stateless) services, this should probably be set to true, since their pods have no DNS-resolvable  hostnames</span></span><br><span class="line">       <span class="comment">#- name: EUREKA_INSTANCE_PREFERIPADDRESS</span></span><br><span class="line">       <span class="comment">#  value: "false"</span></span><br><span class="line">  <span class="comment"># No need to start the pods in order. We just need the stable network identity</span></span><br><span class="line">  podManagementPolicy: <span class="string">"Parallel"</span></span><br></pre></td></tr></table></figure><h4 id="3-4、重建pod"><a href="#3-4、重建pod" class="headerlink" title="3.4、重建pod"></a>3.4、重建pod</h4><p>pod重建以后我们经过访问可以看到</p><p><img src="https://img.xxlaila.cn/453khskdha324.png" alt="img"><br><img src="https://img.xxlaila.cn/3746dfnks324.png" alt="img"></p><p><em>后续持续优化</em></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>jira接入LDAP</title>
    <url>/2019/08/24/jira%E6%8E%A5%E5%85%A5LDAP/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><blockquote><p>场景:<br>&nbsp;&nbsp;&nbsp;&nbsp;之前介绍了jira 和confluence的账户结合，jira和confluence可以使用一个账户，有人员离职之后直接在jira吧用户禁用即可，一端操作，方便两端，但是随着公司人员越来越多，这样的方式已经不在适合这种了，来一个用户就需要去创建，对运维来说，这是重复的工作，提升不了任何效率，而且枯草无味。这里我们就可以使用ldap，jira和confluence都是支持ldap，ldap的好处，这里不阐述，下面来看看如何配置jira介入ldap。confluence还是接入jira，这样我们就只操作ladp和jira，简单省事。</p></blockquote><blockquote><p>问题点:<br>&nbsp;&nbsp;&nbsp;&nbsp;由于在建立jira和confluence的时候还没有ldap，ldap是后期才接入的，所以这里就存在于怎么吧以前有jira登录的账户认证切换到ldap。而且不影响之前的文档，但是用户权限会影响，问题不大，可以添加。下面开始操作</p></blockquote><a id="more"></a><h3 id="1、进入jira用户管理页面"><a href="#1、进入jira用户管理页面" class="headerlink" title="1、进入jira用户管理页面"></a>1、进入jira用户管理页面</h3><p><img src="https://img.xxlaila.cn/image2018-7-12_11-12-55.png" alt="img"></p><h3 id="2、选择ldap，进入ldap配置页面"><a href="#2、选择ldap，进入ldap配置页面" class="headerlink" title="2、选择ldap，进入ldap配置页面"></a>2、选择ldap，进入ldap配置页面</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-32-32.png" alt="img"><br><img src="https://img.xxlaila.cn/image2019-6-12_15-32-48.png" alt="img"></p><h3 id="3、高级设置"><a href="#3、高级设置" class="headerlink" title="3、高级设置"></a>3、高级设置</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-33-17.png" alt="img"></p><h3 id="4、配置用户模式"><a href="#4、配置用户模式" class="headerlink" title="4、配置用户模式"></a>4、配置用户模式</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-33-35.png" alt="img"></p><h3 id="5、设置组模式"><a href="#5、设置组模式" class="headerlink" title="5、设置组模式"></a>5、设置组模式</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-33-55.png" alt="img"></p><h3 id="6、设置成员模式"><a href="#6、设置成员模式" class="headerlink" title="6、设置成员模式"></a>6、设置成员模式</h3><p>这里ldap一定要存在与ladp的group里面<br><img src="https://img.xxlaila.cn/image2019-6-12_15-34-23.png" alt="img"></p><h3 id="7、测试并保存"><a href="#7、测试并保存" class="headerlink" title="7、测试并保存"></a>7、测试并保存</h3><p>这里测试账户一定是ladp的账户<br><img src="https://img.xxlaila.cn/image2019-6-12_15-34-58.png" alt="img"></p><h3 id="8、同步账户"><a href="#8、同步账户" class="headerlink" title="8、同步账户"></a>8、同步账户</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-35-50.png" alt="img"></p><h3 id="9、用ladp账户登录测试"><a href="#9、用ladp账户登录测试" class="headerlink" title="9、用ladp账户登录测试"></a>9、用ladp账户登录测试</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-36-53.png" alt="img"></p><h2 id="jira账户切换至ldap"><a href="#jira账户切换至ldap" class="headerlink" title="jira账户切换至ldap"></a>jira账户切换至ldap</h2><blockquote><p>jira配置ldap以后默认是本地账户和ldap是同时存在的，用户可以用以前的本地账户和ldap都登录，这里实现ldap登录，禁止本地登录。</p></blockquote><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul><li>jira的本地账户和ldap的账户名称必须一样</li><li>操作前请备份数据库</li><li>用户邮箱保持一致</li><li>密码无所谓，不需要统一</li></ul><h3 id="查看用户信息关联"><a href="#查看用户信息关联" class="headerlink" title="查看用户信息关联"></a>查看用户信息关联</h3><p>登录jira的数据库。然后找到cwd_user表</p><h4 id="cwd-user表"><a href="#cwd-user表" class="headerlink" title="cwd_user表"></a>cwd_user表</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;jira的前台不能直接去更改，只有更改数据库，进入数据库，找到一张cwd_user的表，里面包含了所有用户的登录账号信息，其中有一个字段directory_id的，这个字段我们可以看到本地账户的id是1，ldap同步过来的账户是10001，如下图：<br><img src="https://img.xxlaila.cn/1566617986314.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;继续看该表的credential字段，密码也有区别,本地账户是有一串加密后的字符串，ldap认证的是nopass，包括后面的external_id 也是有区别的，如下图<br><img src="https://img.xxlaila.cn/1566618124910.jpg" alt="img"></p><h4 id="cwd-directory表"><a href="#cwd-directory表" class="headerlink" title="cwd_directory表"></a>cwd_directory表</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在打开cwd_directory表，里面有两条数据，一个对应的是ldap，一个对应的本地，和cwd_user是对应的，如图：<br><img src="https://img.xxlaila.cn/image2019-6-13_10-0-47.png" alt="img"></p><h4 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;记住ldap目录的id，然后在cwd_user表里面删除ldap的相同账户的整条记录，因为要伪装原本系统自带的目录服务器，原来编辑的文件和内容为原先这个用户的id。修改directory_id 为ldap的id，还有一个需要修改的地方为CREDENTIAL的字段，把它修改为nopass。修改完成后需要重启jira，不重启不会生效，而且登录服务器还会报错。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这里jira和confluence是做了关联的，jira修改以后，confluence也可以进行登录，无需在confluence在设置一次ldap;修改完成后，以前用户的管理员权限有问题，重新添加一次即可。不会影响其他的。设置文档，ldap权限要选择为只读，且为本地组。然后吧jia和confluence的普通组添加进去，否则用户进来没有权限</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jira</category>
      </categories>
      <tags>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>confluence与jira账户打通</title>
    <url>/2019/08/24/confluence%E4%B8%8Ejira%E8%B4%A6%E6%88%B7%E6%89%93%E9%80%9A/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p><a href="http://xxlaila.github.io/2019/08/24/confluence-install/" target="_blank" rel="noopener">confluence</a>安装</p><h3 id="登录confluence"><a href="#登录confluence" class="headerlink" title="登录confluence"></a>登录confluence</h3><p>点击用户管理</p><a id="more"></a><p><img src="https://img.xxlaila.cn/1566615435701.jpg" alt="img"></p><ul><li>点击用户目录<br><img src="https://img.xxlaila.cn/1566615500778.jpg" alt="img"></li></ul><h3 id="开始配置和jira的连接"><a href="#开始配置和jira的连接" class="headerlink" title="开始配置和jira的连接"></a>开始配置和jira的连接</h3><ul><li>点击添加目录</li></ul><p><img src="https://img.xxlaila.cn/1566615580951.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1566616502650.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1566616536151.jpg" alt="img"></p><p>点击测试连接，连接成功以后，点击测试保存。回到界面可以点击同步<br><img src="https://img.xxlaila.cn/1566616609967.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>confluence</category>
      </categories>
      <tags>
        <tag>confluence,jira</tag>
      </tags>
  </entry>
  <entry>
    <title>jira安装和配置</title>
    <url>/2019/08/24/jira%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;JIRA是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。</p><ul><li>环境准备</li></ul><table><thead><tr><th>应用</th><th>服务器配置</th><th>操作系统</th><th>插件</th></tr></thead><tbody><tr><td>mysql 5.6 +</td><td>2/4G/50G</td><td>centos 7.4</td><td></td></tr><tr><td>jira</td><td>4/8G/200G</td><td>centos 7.4</td><td>jdk1.8</td></tr></tbody></table><a id="more"></a><h3 id="安装JIRA"><a href="#安装JIRA" class="headerlink" title="安装JIRA"></a>安装JIRA</h3><ul><li>执行可执行文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./atlassian-jira-software-7.2.2-x64.bin</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img.xxlaila.cn/1524710136913-900.png" alt="img"></p><ul><li><p>安装完成后停止JIRA</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃/etc/init.d/jira stop</span><br></pre></td></tr></table></figure></li><li><p>复制破解包和数据库驱动连接器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃cp mysql-connector-java-5.1.39-bin.jar atlassian-extras-3.1.2.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</span><br></pre></td></tr></table></figure></li><li><p>启动JIRA</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃/etc/init.d/jira start</span><br></pre></td></tr></table></figure></li></ul><p>登陆网页控制台进行配置，这里略过，这里这是完成，无法截图(后期有机会安装截图补上)，设置以后的截图<br><img src="https://img.xxlaila.cn/1524710090658-810.png" alt="img"></p><h3 id="配置JIRA的邮件服务器"><a href="#配置JIRA的邮件服务器" class="headerlink" title="配置JIRA的邮件服务器"></a>配置JIRA的邮件服务器</h3><p><img src="https://img.xxlaila.cn/1524710057086-739.png" alt="img"><br><img src="https://img.xxlaila.cn/1524710038583-516.png" alt="img"></p><p>配置完成后点击最下面的测试连接</p><p><img src="https://img.xxlaila.cn/1524710027432-202.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jira</category>
      </categories>
      <tags>
        <tag>jira</tag>
      </tags>
  </entry>
  <entry>
    <title>git清空commit记录方法</title>
    <url>/2019/08/24/git%E6%B8%85%E7%A9%BAcommit%E8%AE%B0%E5%BD%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><blockquote><p>说明:<br>&nbsp;&nbsp;&nbsp;&nbsp;例如将代码提交到git仓库，将一些敏感信息提交，所以需要删除提交记录以彻底清除提交信息，以得到一个干净的仓库且代码不变</p></blockquote><h3 id="1-Checkout"><a href="#1-Checkout" class="headerlink" title="1.Checkout"></a>1.Checkout</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout --orphan latest_branch</span><br></pre></td></tr></table></figure><h3 id="2-Add-all-the-files"><a href="#2-Add-all-the-files" class="headerlink" title="2. Add all the files"></a>2. Add all the files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add -A</span><br></pre></td></tr></table></figure><h3 id="3-Commit-the-changes"><a href="#3-Commit-the-changes" class="headerlink" title="3. Commit the changes"></a>3. Commit the changes</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -am <span class="string">"commit message"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="4-Delete-the-branch"><a href="#4-Delete-the-branch" class="headerlink" title="4. Delete the branch"></a>4. Delete the branch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -D master</span><br></pre></td></tr></table></figure><h3 id="5-Rename-the-current-branch-to-master"><a href="#5-Rename-the-current-branch-to-master" class="headerlink" title="5.Rename the current branch to master"></a>5.Rename the current branch to master</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -m master</span><br></pre></td></tr></table></figure><h3 id="6-Finally-force-update-your-repository"><a href="#6-Finally-force-update-your-repository" class="headerlink" title="6.Finally, force update your repository"></a>6.Finally, force update your repository</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -f origin master</span><br></pre></td></tr></table></figure><h2 id="git-主干和分支同步"><a href="#git-主干和分支同步" class="headerlink" title="git 主干和分支同步"></a>git 主干和分支同步</h2><h3 id="1、远程分支"><a href="#1、远程分支" class="headerlink" title="1、远程分支"></a>1、远程分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看当前的远程分支</span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h3 id="2、增加远程分支"><a href="#2、增加远程分支" class="headerlink" title="2、增加远程分支"></a>2、增加远程分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add latest https://github.com/xxlaila/work.git</span><br></pre></td></tr></table></figure><h3 id="3、更新主库的远程分支"><a href="#3、更新主库的远程分支" class="headerlink" title="3、更新主库的远程分支"></a>3、更新主库的远程分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">更新远程分支</span><br><span class="line">$ git fetch latest</span><br></pre></td></tr></table></figure><h3 id="4、合并主库的最新代码"><a href="#4、合并主库的最新代码" class="headerlink" title="4、合并主库的最新代码"></a>4、合并主库的最新代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">合并主库的最新代码</span><br><span class="line">$ git rebase latest/dev</span><br></pre></td></tr></table></figure><h3 id="5、推送本地代码到自身远程仓库"><a href="#5、推送本地代码到自身远程仓库" class="headerlink" title="5、推送本地代码到自身远程仓库"></a>5、推送本地代码到自身远程仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">推送远程仓库</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h2 id="git-代码信息统计"><a href="#git-代码信息统计" class="headerlink" title="git 代码信息统计"></a>git 代码信息统计</h2><blockquote><p>说明: 公司每个季度都要对公司开发人员的工作量进行整体评估，评估git上所有代码库的commit数量和修改文件的总行数</p></blockquote><h3 id="统计时间区间commit数量"><a href="#统计时间区间commit数量" class="headerlink" title="统计时间区间commit数量"></a>统计时间区间commit数量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --since==2019-04-1 --until=2019-06-30 | wc -l</span><br></pre></td></tr></table></figure><h3 id="统计添加修改的代码行数"><a href="#统计添加修改的代码行数" class="headerlink" title="统计添加修改的代码行数"></a>统计添加修改的代码行数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span> --since=<span class="string">"2019-4-01"</span> --before=<span class="string">"2019-06-30"</span> |perl -ne <span class="string">'END &#123; print $c &#125; $c += $1 if /(\d+) insertions/'</span></span><br></pre></td></tr></table></figure><h2 id="git-stash使用"><a href="#git-stash使用" class="headerlink" title="git stash使用"></a>git stash使用</h2><blockquote><p>场景:<br>&nbsp;&nbsp;&nbsp;&nbsp;今天遇到一个特殊的场景，写的一个python程序到服务器上有一个小bug运行报错，然后就直接在服务器上调试，修改了程序，程序正常跑起，然而本地也要修改，修改的时候同时修改了其他的地方，然后提交了git上，这时，需要在服务器上更新最新的代码，但是服务器上的代码和git上的不一致，这就会导致错误，这时git的强大之处就体现出来了。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">能够将所有未提交的修改（工作区和暂存区）保存至堆栈中，用于后续恢复当前工作目录。</span><br></pre></td></tr></table></figure><ul><li>更新代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure></li></ul><p>将当前stash中的内容弹出，并应用到当前分支对应的工作目录上。</p><blockquote><p>注:<br>&nbsp;&nbsp;&nbsp;&nbsp;该命令将堆栈中最近保存的内容删除（栈是先进后出）</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><p>更多的git stash 命令详解请<a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%EF%BC%88Stashing%EF%BC%89" target="_blank" rel="noopener">点击</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>confluence_install</title>
    <url>/2019/08/24/confluence-install/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;Confluence是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论，信息推送。为团队提供一个协作环境。在这里，团队成员齐心协力，各擅其能，协同地编写文档和管理项目。从此打破不同团队、不同部门以及个人之间信息孤岛的僵局，Confluence真正实现了组织资源共享。</p><p>环境准备</p><table><thead><tr><th>系统版本</th><th>插件</th><th>软件</th><th>版本</th><th>服务配置</th></tr></thead><tbody><tr><td>centos 7.4</td><td></td><td>mysql</td><td>5.6+</td><td>2/4G/50G</td></tr><tr><td>centos 7.4</td><td>jdk 1.8</td><td>confluence</td><td>6.12.2</td><td>4/8G/200G</td></tr></tbody></table><p>confluence 6.12.2安装并破解，mysql 版本这里使用的是5.7.24</p><a id="more"></a><h2 id="安装mysql-5-7-24-版本"><a href="#安装mysql-5-7-24-版本" class="headerlink" title="安装mysql 5.7.24 版本"></a>安装mysql 5.7.24 版本</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</span></span><br><span class="line"><span class="comment"># yum list |grep "mysql"</span></span><br><span class="line"><span class="comment"># yum install -y mysql-community-server</span></span><br></pre></td></tr></table></figure><ul><li><p>动mysql</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl start mysqld.service</span></span><br><span class="line"><span class="comment"># systemctl enable mysqld.service</span></span><br></pre></td></tr></table></figure></li><li><p>修改myslq密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep 'temporary password' /var/log/mysqld.log</span></span><br><span class="line">mysql&gt; SET PASSWORD = PASSWORD(<span class="string">'news password'</span>);</span><br><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> PASSWORD EXPIRE NEVER;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改mysql的配置文件，用于支持confluence的最低安装需求"><a href="#修改mysql的配置文件，用于支持confluence的最低安装需求" class="headerlink" title="修改mysql的配置文件，用于支持confluence的最低安装需求"></a>修改mysql的配置文件，用于支持confluence的最低安装需求</h3><blockquote><p>在my.cnf配置文件[mysqld]里面添加下面配置参数</p></blockquote><ul><li><p>将默认字符集指定为UTF-8</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_bin</span><br></pre></td></tr></table></figure></li><li><p>将默认存储引擎设置为InnoDB</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure></li><li><p>指定值max_allowed_packet至少为256M</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">max_allowed_packet=512M</span><br></pre></td></tr></table></figure></li><li><p>指定值 innodb_log_file_size 至少为2GB</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">innodb_log_file_size=2GB</span><br></pre></td></tr></table></figure></li><li><p>确保数据库的全局事务隔离级别已设置为READ-COMMITTED</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">transaction-isolation=READ-COMMITTED</span><br></pre></td></tr></table></figure></li><li><p>检查二进制日志记录格式是否配置为使用“基于行”的二进制日志记录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">binlog_format=row</span><br></pre></td></tr></table></figure></li><li><p>确保sql_mode参数未指定NO_AUTO_VALUE_ON_ZERO</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sql_mode = <span class="string">"ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span></span><br></pre></td></tr></table></figure></li><li><p>重启mysql数据库</p></li></ul><h3 id="为Confluence创建数据库用户和数据库"><a href="#为Confluence创建数据库用户和数据库" class="headerlink" title="为Confluence创建数据库用户和数据库"></a>为Confluence创建数据库用户和数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE confluence CHARACTER SET utf8 COLLATE utf8_bin;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON confluence.* TO confluence@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'password'</span></span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h2 id="安装Confluence"><a href="#安装Confluence" class="headerlink" title="安装Confluence"></a>安装Confluence</h2><p>下载Confluence，这里下载bin文件进行安装，<a href="https://www.atlassian.com/software/confluence/download-archives" target="_blank" rel="noopener">下载地址</a>,下载的版本为atlassian-confluence-6.12.2-x64.bin,包有点大，需要等待……</p><ul><li><p>赋予权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod a+x atlassian-confluence-6.12.2-x64.bin</span></span><br></pre></td></tr></table></figure></li><li><p>开始安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./atlassian-confluence-6.12.2-x64.bin</span></span><br></pre></td></tr></table></figure></li><li><p>安装过程中需要做一些基本的配置，详情查看我的配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Unpacking JRE ...</span><br><span class="line">Starting Installer ...</span><br><span class="line"></span><br><span class="line">This will install Confluence 6.12.2 on your computer.</span><br><span class="line">OK [o, Enter], Cancel [c]</span><br><span class="line">o （输入o同意）</span><br><span class="line">Click Next to <span class="built_in">continue</span>, or Cancel to <span class="built_in">exit</span> Setup.</span><br><span class="line"></span><br><span class="line">Choose the appropriate installation or upgrade option.</span><br><span class="line">Please choose one of the following:</span><br><span class="line">Express Install (uses default settings) [1], </span><br><span class="line">Custom Install (recommended <span class="keyword">for</span> advanced users) [2, Enter], </span><br><span class="line">Upgrade an existing Confluence installation [3]</span><br><span class="line">2   (选择2自定义安装，我们可以进行一些定制的配置)</span><br></pre></td></tr></table></figure></li><li><p>开始进行安装参数的配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Select the folder <span class="built_in">where</span> you would like Confluence 6.12.2 to be installed,</span><br><span class="line"><span class="keyword">then</span> click Next.</span><br><span class="line">Where should Confluence 6.12.2 be installed?</span><br><span class="line">[/opt/atlassian/confluence](安装目录,目录变化可以在这里输入，这里直接回车)</span><br><span class="line"></span><br><span class="line">Default location <span class="keyword">for</span> Confluence data</span><br><span class="line">[/var/atlassian/application-data/confluence]（数据的存放目录，这里我们修改到我们的数据盘）</span><br><span class="line">/opt/atlassian/confluence-data/</span><br><span class="line"></span><br><span class="line">Configure <span class="built_in">which</span> ports Confluence will use.</span><br><span class="line">Confluence requires two TCP ports that are not being used by any other</span><br><span class="line">applications on this machine. The HTTP port is <span class="built_in">where</span> you will access</span><br><span class="line">Confluence through your browser. The Control port is used to Startup and</span><br><span class="line">Shutdown Confluence.</span><br><span class="line">Use default ports (HTTP: 8090, Control: 8000) - Recommended [1, Enter], Set custom value <span class="keyword">for</span> HTTP and Control ports [2]</span><br><span class="line">（这里是设置使用的端口，默认即可）</span><br><span class="line"></span><br><span class="line">Confluence can be run <span class="keyword">in</span> the background.</span><br><span class="line">You may choose to run Confluence as a service, <span class="built_in">which</span> means it will start</span><br><span class="line">automatically whenever the computer restarts.</span><br><span class="line">Install Confluence as Service?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">Extracting files ...</span><br><span class="line">                                                                           </span><br><span class="line"></span><br><span class="line">Please <span class="built_in">wait</span> a few moments <span class="keyword">while</span> we configure Confluence.</span><br><span class="line"></span><br><span class="line">Installation of Confluence 6.12.2 is complete</span><br><span class="line">Start Confluence now?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">Please <span class="built_in">wait</span> a few moments <span class="keyword">while</span> Confluence starts up.</span><br><span class="line">Launching Confluence ...</span><br><span class="line">输入y回车后Confluence会进行后台安装，这里等待安装完成即可</span><br><span class="line"></span><br><span class="line">Installation of Confluence 6.12.2 is complete</span><br><span class="line">Your installation of Confluence 6.12.2 is now ready and can be accessed via</span><br><span class="line">your browser.</span><br><span class="line">Confluence 6.12.2 can be accessed at http://localhost:8090</span><br><span class="line">安装完成</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>通过浏览器访问试一下: <a href="http://ip:8090" target="_blank" rel="noopener">http://ip:8090</a></p></blockquote><h2 id="进行访问配置"><a href="#进行访问配置" class="headerlink" title="进行访问配置"></a>进行访问配置</h2><h3 id="安装nginx-进行方向代理访问"><a href="#安装nginx-进行方向代理访问" class="headerlink" title="安装nginx 进行方向代理访问"></a>安装nginx 进行方向代理访问</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span></span><br><span class="line"><span class="comment"># yum install nginx -y</span></span><br><span class="line"><span class="comment"># systemctl start nginx.service</span></span><br><span class="line"><span class="comment"># systemctl enable nginx.service</span></span><br><span class="line">配置nginx的upstream这里将不再阐述</span><br></pre></td></tr></table></figure><h3 id="接下来通过浏览器进行配置"><a href="#接下来通过浏览器进行配置" class="headerlink" title="接下来通过浏览器进行配置"></a>接下来通过浏览器进行配置</h3><ul><li>打开页面</li></ul><p><img src="https://img.xxlaila.cn/1566609337530.jpg" alt="img"></p><ul><li>设置语言为中文和产品安装</li></ul><p><img src="https://img.xxlaila.cn/1566609486131.jpg" alt="img"></p><p>在下面的一个界面需要记住服务器的ID，这个ip在后面破解的时候需要的</p><ul><li>停止confluence<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/init.d/confluence stop</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="破解Confluence"><a href="#破解Confluence" class="headerlink" title="破解Confluence"></a>破解Confluence</h3><ul><li>在本地下载破解器</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/xxlaila/work/blob/master/zip/confluence.zip</span></span><br><span class="line"><span class="comment"># unzip confluence.zip</span></span><br></pre></td></tr></table></figure><ul><li><p>在服务器上把atlassian-extras-decoder-v2-3.4.1.jar进行如下操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /opt/atlassian/confluence/confluence/WEB-INF/lib</span></span><br><span class="line"><span class="comment"># cp atlassian-extras-decoder-v2-3.4.1.jar /opt/atlassian-extras-2.4.jar</span></span><br><span class="line"><span class="comment"># mv atlassian-extras-decoder-v2-3.4.1.jar atlassian-extras-decoder-v2-3.4.1.jar.bak</span></span><br></pre></td></tr></table></figure></li><li><p>把/opt/atlassian-extras-2.4.jar下载到本地,在本地启动Confluence破解器</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -jar confluence_keygen.jar</span><br></pre></td></tr></table></figure><ul><li>点击.patch! 选择下载到本地的atlassian-extras-2.4.jar包，文件类型不变，点击打开，自动生产一个新的atlassian-extras-2.4.jar包</li></ul><p><img src="https://img.xxlaila.cn/FA8682F205BB1655E20AAD392DF13417.jpg" alt="img"></p><ul><li>把服务器id输入到server id，name项随便输入，名称不要过短，店家.gen!生成授权吗，然后把授权复制到confluence框里面</li></ul><p><img src="https://img.xxlaila.cn/CB99372F30342EBABC1125510FBC50B9.jpg" alt="img"></p><ul><li>把新生成的包上传到/opt/atlassian/confluence/confluence/WEB-INF/lib/目录下面</li></ul><h3 id="下载mysql驱动"><a href="#下载mysql驱动" class="headerlink" title="下载mysql驱动"></a>下载mysql驱动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.47.zip</span></span><br></pre></td></tr></table></figure><ul><li><p>完成后进行解压，并把mysql-connector-java-5.1.47-bin.jar 复制到lib目录下面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp mysql-connector-java-5.1.47-bin.jar /opt/atlassian/confluence/confluence/WEB-INF/lib</span></span><br><span class="line"><span class="comment"># /etc/init.d/confluence start</span></span><br></pre></td></tr></table></figure></li><li><p>设置数据库</p></li></ul><p><img src="https://img.xxlaila.cn/EFF70DEA9DFBCA88E24BE83BEE9DFFC8.jpg" alt="img"><br><img src="https://img.xxlaila.cn/BF70624FCFA9E5ECFD4E121E02D08FD3.jpg" alt="img"></p><blockquote><p>这是完成以后进行测试，是否联通，在下一步（需要进行等待，后台在生成数据库）,生成完成后，系统会跳转到另外一个页面，这里忘记截图,是进行数据导入、站点恢复等</p></blockquote><ul><li><p>重新打开网址连接<br><img src="https://img.xxlaila.cn/BEE317A48B4CEE0407638F47CDBDF31F.jpg" alt="img"></p></li><li><p>由于这里没有ladp和jira,所以选择在confluence中管理用户和组</p></li><li><p>设置系统管理账户</p></li></ul><p><img src="https://img.xxlaila.cn/93FDD95874C661340531C27CC77298FD.jpg" alt="img"><br><img src="https://img.xxlaila.cn/6B1F3A2EBF1B3DAF1A962317AA59DC15.jpg" alt="img"></p><blockquote><p>这里跳过个人头像设定,头像设定完成后会提示你新建一个空间</p></blockquote><p><img src="https://img.xxlaila.cn/FCE130BD8B121A290010FEA2C2342898.jpg" alt="img"></p><ul><li>查看授权期限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">设置——&gt;一般设置——&gt;管理——&gt;授权细节</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/EEB25C9704F4C76C30E1DF32A2E1EDE0.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>confluence</category>
      </categories>
      <tags>
        <tag>confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>nexus3搭建npm私服</title>
    <url>/2019/08/23/nexus3%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E6%9C%8D/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;公司前端全是nodejs的，nodejs在install的时候往往是连接外网，或者是设置taobao源，即使是设置了taobao源，但是还是解决不了慢的问题，为此搭建了一个内部的npm私服，这里用google一下有很多都可以来进行搭建npm私服，然后也看到了nexus也可以来做，正好maven私服也是用的这个，都是3版本，为此选择了nexus来做npm的私服，和maven一套便于维护。</p><h3 id="nexus安装"><a href="#nexus安装" class="headerlink" title="nexus安装"></a>nexus安装</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;不介绍，安装完成nexus后，在浏览器打开并进行登录，第一次安装登录nexus的默认用户<code>admin</code>,默认密码是<code>admin123</code></p><a id="more"></a><h3 id="1、创建repository"><a href="#1、创建repository" class="headerlink" title="1、创建repository"></a>1、创建repository</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Nexus Repository Manager 3 可以用于多种类型的包管理。此处我们要搭建的是npm包管理私服。登录在界面点击下图所示按钮。<br><img src="https://img.xxlaila.cn/1566524933898.jpg" alt="img"></p><ul><li>进入设置界面<br><img src="https://img.xxlaila.cn/1566525058628.jpg" alt="img"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;上图中左面菜单有很多功能。可以在 Security 下的 Users 可以创建用户并设置用户权限，修改用户信息。Logging 下的 Log Viewer 可以查看运行日志。而本次配置主要用到了 Repository -&gt; Repositories 和 Security -&gt; Realms 两项</p><ul><li>首先在 Repositories 创建仓库</li></ul><p><img src="https://img.xxlaila.cn/1566526054409.jpg" alt="img"></p><ul><li><p>接下来会进入到 Repositorty 的选择：（npm 有三种）<br><img src="https://img.xxlaila.cn/1566526144738.jpg" alt="img"></p></li><li><p>第一种：代理 npm 仓库</p></li></ul><p><a href="https://help.sonatype.com/repomanager3/formats/npm-registry" target="_blank" rel="noopener">Proxying npm Registries</a>可产看官方文档</p><p>&nbsp;&nbsp;&nbsp;&nbsp;将公共 npm 服务器的资源代理缓存，减少重复下载，加快开发人员和CI服务器的下载速度。创建时选择 npm(proxy) ，只需填写 Name 和 Remote storage （公有库域名）即可。<br><img src="https://img.xxlaila.cn/1566526375641.jpg" alt="img"></p><ul><li>第二种：私有 npm 仓库<br><a href="https://help.sonatype.com/repomanager3/formats/npm-registry" target="_blank" rel="noopener">Private npm Registries</a>官方文档</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;用于 上传自己的npm包 以及第三方npm包。同样的创建步骤，只不过选择的 仓库类型为 npm(hosted)。 只填写 Name 即可</p><p><img src="https://img.xxlaila.cn/1566526835511.jpg" alt="img"></p><ul><li>第三种：npm 仓库组<br><a href="https://help.sonatype.com/repomanager3/formats/npm-registry" target="_blank" rel="noopener">Grouping npm Registries</a>官方文档</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;用于将多个内部或外部 npm 仓库统一为一个 npm仓库。被添加到 npm仓库组 中的 其他仓库内的包都能够通过该 npm仓库组 访问到。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;例如：可以新建一个npm仓库组将 上面两个刚刚创建的 npm 仓库都添加进去。这样可以通过这个 npm仓库组，既可以访问 公有npm仓库 又可以访问自己的 私有npm仓库。<br>&nbsp;&nbsp;&nbsp;&nbsp;仓库类型为 npm(group)，起一个名字 Name，然后选择需要添加到组里的 其他 npm 仓库。此处我选择的是 npm-kxl-external 和 npm-kxl-internal</p><p><img src="https://img.xxlaila.cn/1566527053731.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;仓库都创建完毕了。接下来需要验证一下是否可用,在 Repositories 中点击创建的 仓库。可以查看该仓库的 URL。<br>在项目目录下创建 .npmrc 文件。文件内容为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">registry=http://172.21.16.90:8081/repository/npm-kxl-all/</span><br></pre></td></tr></table></figure><p>然后随便安装一个 包 试试（日志级别设置为 info）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm --loglevel info install react</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/1566528241640.jpg" alt="img"></p><p>如图。确实是从设置的 npm 私服下载的react。成功</p><h3 id="发布到-npm-私服"><a href="#发布到-npm-私服" class="headerlink" title="发布到 npm 私服"></a>发布到 npm 私服</h3><p>除了从 npm 仓库安装依赖。我们还需要将公司内部的 代码打包 发布到 npm 的私服。这里没什么特殊的，就是需要设置一下 Nexus Repository Manager 的权限。这样才能使用 npm login 认证登录到我们的私服。</p><p><img src="https://img.xxlaila.cn/1566528346695.jpg" alt="img"></p><p>此处在 Realms 下。将 npm Bearer Token Realm 添加到 Active 列表内保存即可。<br>然后可以执行（登录 私有npm仓库）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm login --registry=http://172.21.16.90:8081/repository/npm-kxl-internal/</span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">Email: (this IS public) 1@qq.com</span><br><span class="line">Logged <span class="keyword">in</span> as admin on http://172.21.16.90:8081/repository/npm-kxl-internal/.</span><br></pre></td></tr></table></figure><p>执行命令，提示填写账号密码和邮箱，验证通过后将会在 用户主目录下的 .npmrc 文件中插入一条 此仓库 url 和对应的 token。</p><p><img src="https://img.xxlaila.cn/1566528452423.jpg" alt="img"></p><p>在确保项目有 package.json 前提下，执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish --registry=http://172.21.16.90:8081/repository/npm-kxl-internal/</span><br></pre></td></tr></table></figure><p>至此，使用 Nexus Repository Manager 3 搭建 npm 私服结束。整体流程并不复杂，文档很详尽,直接读文档可能会遗漏一些东西。可以参考<a href="https://help.sonatype.com/repomanager3/formats/npm-registry" target="_blank" rel="noopener">官方文档</a></p><p><a href="https://xxlaila.github.io/2019/10/15/nexus配置ldap/" target="_blank" rel="noopener">nexus ldap配置</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>nexus</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx URL 斜杠问题</title>
    <url>/2019/08/22/nginx-URL-%E6%96%9C%E6%9D%A0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>今天公司新上的一个前端应用遇到一个问题，那就是在微信登录界面扫码登录之后，微信回调给我们的地址多加了一个斜杠;</p><blockquote><p>错误的地址:<a href="http://a.xxlaila.com/wx.html/?code=011amZet0h1IUf19Fvht0jg4ft0amZeN" target="_blank" rel="noopener">http://a.xxlaila.com/wx.html/?code=011amZet0h1IUf19Fvht0jg4ft0amZeN</a><br>正确的地址:<a href="http://a.xxlaila.com/wx.html?code=011amZet0h1IUf19Fvht0jg4ft0amZeN" target="_blank" rel="noopener">http://a.xxlaila.com/wx.html?code=011amZet0h1IUf19Fvht0jg4ft0amZeN</a></p></blockquote><p>在nginx上配置需要吧这个斜杠删除掉。用户才能正常的访问；</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在配置文件里面增加如下配置项</p><a id="more"></a><ul><li>删除URL结尾的斜杠</li></ul><p><em>rewrite ^/(.</em>)/$ /$1 permanent;*</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  a.xxlaila.com;</span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)/$</span> /<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm index.jsp index.php;</span><br><span class="line">  <span class="attribute">root</span> /opt/webapps/a.xxlaila.com;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* /</span> &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">access_log</span>   /var/log/nginx/a.xxlaila.com.access.log main;</span><br><span class="line"><span class="comment">#  error_log   /var/log/nginx/a.xxlaila.com.error.log debug;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在URL结尾添加斜杠<br>在配置文件增加如下配置项目</li></ul><p><em>rewrite ^(.</em>[^/])$ $1/ permanent;*</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  a.xxlaila.com;</span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^(.*[^/])$</span> <span class="variable">$1</span>/ <span class="literal">permanent</span>;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm index.jsp index.php;</span><br><span class="line">  <span class="attribute">root</span> /opt/webapps/a.xxlaila.com;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* /</span> &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">access_log</span>   /var/log/nginx/a.xxlaila.com.access.log main;</span><br><span class="line"><span class="comment">#  error_log   /var/log/nginx/a.xxlaila.com.error.log debug;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>在浏览器访问某一个url/页面的时候，通常有时候带有.html的一个扩展名，现需求是带<code>.html</code>和不带<code>.html</code>都可以访问</p><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p>增加如下配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;    </span><br><span class="line">       rewrite ^(.*)$ /<span class="variable">$1</span>.html last;</span><br><span class="line">       <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  charset utf-8;</span><br><span class="line">  server_name  a.xxlaila.com;</span><br><span class="line">  rewrite ^/(.*)/$ /<span class="variable">$1</span> permanent;</span><br><span class="line">  index index.html index.htm index.jsp index.php;</span><br><span class="line">  root /opt/webapps/a.xxlaila.com;</span><br><span class="line"></span><br><span class="line">  location ~* / &#123;</span><br><span class="line">    <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">       rewrite ^(.*)$ /<span class="variable">$1</span>.html last;</span><br><span class="line">       <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  access_log   /var/<span class="built_in">log</span>/nginx/a.xxlaila.com.access.log main;</span><br><span class="line"><span class="comment">#  error_log   /var/log/nginx/a.xxlaila.com.error.log debug;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-ci/cd-(四)</title>
    <url>/2019/08/20/kubernetes-ci-cd-%E5%9B%9B/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h2 id="1、Blue-Ocean"><a href="#1、Blue-Ocean" class="headerlink" title="1、Blue Ocean"></a>1、Blue Ocean</h2><p>安装Blue Ocean插件</p><h3 id="1-1、创建pipeline"><a href="#1-1、创建pipeline" class="headerlink" title="1.1、创建pipeline"></a>1.1、创建pipeline</h3><p><img src="https://img.xxlaila.cn/348knfnsdlds.png" alt="img"></p><ul><li>配置代码库的地址</li><li>然后配置授权账户</li></ul><p><img src="https://img.xxlaila.cn/9857jksdhfjkhdsfds.png" alt="img"></p><p>在这儿之前git库里面必须存在于jenkinsfile文件，pipeline会自动去扫描代码库里面的分支，然后根据每一个分支建立一个类似于job的形式，然后我们可以根据每一个分支进行部署，可以执行定时触发，部署</p><p><img src="https://img.xxlaila.cn/382dklfjdskjfs.png" alt="img"></p><p>这儿，只有一个分支存在于jenkinsfile，所以只显示一个分支，如下图：</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>jenkins, ci/cd</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-ci/cd-(三)</title>
    <url>/2019/08/20/kubernetes-ci-cd-%E4%B8%89/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;jenkins 配置完成后，最终实现的是ci/cd，在编译的过程中，经常会遇到后端java的，前端nodejs的，这里就需要进行一个k8s在调度的时候生产pod来进行指定pod进行编译</p><h3 id="1、制作容器"><a href="#1、制作容器" class="headerlink" title="1、制作容器"></a>1、制作容器</h3><p>自定义一个容器，里面包含了 java，nodejs的所需要的环境，同时需要同步容器的时间，包含来jenkins的node</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat Dockerfile</span></span><br><span class="line"><span class="attr">FROM</span> <span class="string">docker.io/centos:latest</span></span><br><span class="line"><span class="attr">MAINTAINER</span> <span class="string">xxlaila "cq_xxlaila@163.com"</span></span><br><span class="line"><span class="comment"># Install dependent plugin</span></span><br><span class="line"><span class="attr">ENV</span> <span class="string">VERSION v10.15.1</span></span><br><span class="line"><span class="attr">RUN</span> <span class="string">yum install -y wget \</span></span><br><span class="line">    <span class="attr">git</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">java-1.8.0-openjdk.x86_64</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">curl -sL https://rpm.nodesource.com/setup_11.x | bash - \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">yum install -y gcc gcc-c++ make \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">yum install -y nodejs \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">yum clean all</span></span><br><span class="line"><span class="comment"># System variable setting</span></span><br><span class="line"><span class="attr">RUN</span> <span class="string">echo "LANG=zh_CN.UTF-8" &gt;&gt; /etc/locale.conf \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">source /etc/locale.conf \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">echo "Asia/shanghai" &gt;&gt; /etc/timezone \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">groupadd -g 10000 jenkins \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">useradd -g jenkins -u 10000 jenkins</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">EXPOSE</span> <span class="string">50000</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>执行容器打包</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="attr"># docker build -t centos7</span><span class="number">.6</span>/<span class="symbol">node11</span>:latest .\</span><br></pre></td></tr></table></figure></li><li><p>推送容器到私有镜像仓库</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># docker tag centos7<span class="number">.6</span>/node11:latest docker.io/xxlaila/centos<span class="number">-7</span>-jdk1<span class="number">.8</span>-nodejs11<span class="number">.10</span>-jenkins:latest</span><br><span class="line"># docker push docker.io/xxlaila/centos<span class="number">-7</span>-jdk1<span class="number">.8</span>-nodejs11<span class="number">.10</span>-jenkins:latest</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、jenkins的配置"><a href="#2、jenkins的配置" class="headerlink" title="2、jenkins的配置"></a>2、jenkins的配置</h3><h4 id="2-1、系统配置"><a href="#2-1、系统配置" class="headerlink" title="2.1、系统配置"></a>2.1、系统配置</h4><p>jenkins——&gt;系统管理——&gt;系统设置<br><strong>名称</strong>：kubernetes<br><strong>地址</strong>：<a href="https://kubernetes.default.svc.cluster.local" target="_blank" rel="noopener">https://kubernetes.default.svc.cluster.local</a><br><strong>jenkins地址</strong>：<a href="http://jenkins2.kube-ops.svc.cluster.local:8080" target="_blank" rel="noopener">http://jenkins2.kube-ops.svc.cluster.local:8080</a><br><img src="https://img.xxlaila.cn/489kdngkdhfkodsmf.png" alt="img"></p><h4 id="2-2、增加一个kubenetes-pod-templates"><a href="#2-2、增加一个kubenetes-pod-templates" class="headerlink" title="2.2、增加一个kubenetes pod templates"></a>2.2、增加一个kubenetes pod templates</h4><p><img src="https://img.xxlaila.cn/83jknfkdslfds.png" alt="img"></p><h4 id="2-3、配置容器环境"><a href="#2-3、配置容器环境" class="headerlink" title="2.3、配置容器环境"></a>2.3、配置容器环境</h4><p><img src="https://img.xxlaila.cn/42clkdsjfkldsfs.png" alt="img"></p><h4 id="2-4、配置权限"><a href="#2-4、配置权限" class="headerlink" title="2.4、配置权限"></a>2.4、配置权限</h4><p><img src="https://img.xxlaila.cn/3486238kmxnfksd.png" alt="img"></p><h3 id="3、测试job"><a href="#3、测试job" class="headerlink" title="3、测试job"></a>3、测试job</h3><p>建立一个test job 的pipeline来进行容器是否正常</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node (<span class="string">'agent-node'</span>)&#123;</span><br><span class="line">    container(<span class="string">'nodejs'</span>) &#123;</span><br><span class="line">        sh <span class="string">'whoami'</span></span><br><span class="line">        sh <span class="string">'hostname'</span></span><br><span class="line">        sh <span class="string">'echo $PATH'</span></span><br><span class="line">        sh <span class="string">'npm version'</span></span><br><span class="line">        sh <span class="string">'node -v'</span></span><br><span class="line">        sh <span class="string">'npx -v'</span></span><br><span class="line">        sh <span class="string">'java -version'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1、建立pipeline"><a href="#3-1、建立pipeline" class="headerlink" title="3.1、建立pipeline"></a>3.1、建立pipeline</h4><h5 id="3-1-1、建立一个后端"><a href="#3-1-1、建立一个后端" class="headerlink" title="3.1.1、建立一个后端"></a>3.1.1、建立一个后端</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node(<span class="string">'agent-build'</span>) &#123;</span><br><span class="line">   stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">      git credentialsId:<span class="string">'gitlabUser'</span>, url: <span class="string">'http://gitlab.xxlaila.com/plat/middleware/kxl-eureka.git'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'build'</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"2. Start build <span class="variable">$&#123;JOB_NAME&#125;</span>"</span></span><br><span class="line">        sh <span class="string">'/opt/bin/mvn clean package'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'show package'</span>) &#123;</span><br><span class="line">        sh <span class="string">'pwd'</span></span><br><span class="line">        sh <span class="string">'ls -ltrh target/'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-2、建立一个前端"><a href="#3-1-2、建立一个前端" class="headerlink" title="3.1.2、建立一个前端"></a>3.1.2、建立一个前端</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">node(<span class="string">'agent-build'</span>) &#123;</span><br><span class="line">    stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">      git credentialsId:<span class="string">'gitlabUser'</span>, ur<span class="variable">l:</span> <span class="string">'http://gitlab.xxlaila.com/front-end/portal/kts-platform.git'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'install'</span>) &#123;</span><br><span class="line">        container(<span class="string">'nodejs'</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"2. Start install $&#123;JOB_NAME&#125;"</span></span><br><span class="line">            <span class="keyword">sh</span> <span class="string">'node -v'</span></span><br><span class="line">            <span class="keyword">sh</span> <span class="string">'npm install'</span></span><br><span class="line">            <span class="keyword">sh</span> <span class="string">'npm run build production'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'show package'</span>) &#123;</span><br><span class="line">        <span class="keyword">sh</span> <span class="string">'pwd'</span></span><br><span class="line">        <span class="keyword">sh</span> <span class="string">'ls -ltrh'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>ci/cd</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-ci/cd-(二)</title>
    <url>/2019/08/20/kubernetes-ci-cd-%E4%BA%8C/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h1 id="基于jenkins-pipeline进行部署"><a href="#基于jenkins-pipeline进行部署" class="headerlink" title="基于jenkins  pipeline进行部署"></a>基于jenkins pipeline进行部署</h1><h2 id="1、jenkins-pipeline介绍"><a href="#1、jenkins-pipeline介绍" class="headerlink" title="1、jenkins pipeline介绍"></a>1、jenkins pipeline介绍</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;要实现在 Jenkins 中的构建工作，可以有多种方式，我们这里采用比较常用的 Pipeline 这种方式。Pipeline，简单来说，就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p><p>Jenkins Pipeline 有几个核心概念:</p><ul><li>Node：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，比如我们之前动态运行的 Jenkins Slave 就是一个 Node 节点</li><li>Stage：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如：Build、Test、Deploy，Stage 是一个逻辑分组的概念，可以跨多个 Node</li><li>Step：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像，由各类 Jenkins 插件提供，比如命令：sh ‘make’，就相当于我们平时 shell 终端中执行 make 命令一样。</li></ul><p>那么我们如何创建 Jenkins Pipline 呢？</p><ul><li>Pipeline 脚本是由 Groovy 语言实现的，但是我们没必要单独去学习 Groovy，当然你会的话最好</li><li>Pipeline 支持两种语法：Declarative(声明式)和 Scripted Pipeline(脚本式)语法</li><li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中</li><li>一般我们都推荐在 Jenkins 中直接从源代码控制(SCMD)中直接载入 Jenkinsfile Pipeline 这种方法创建一个简单的 Pipeline<blockquote><p>我们这里来给大家快速创建一个简单的 Pipeline，直接在 Jenkins 的 Web UI 界面中输入脚本运行。</p></blockquote></li><li>新建 Job：在 Web UI 中点击 New Item -&gt; 输入名称：pipeline-demo -&gt; 选择下面的 Pipeline -&gt; 点击 OK</li><li>配置：在最下方的 Pipeline 区域输入如下 Script 脚本，然后点击保存。</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell node &#123;</span><br><span class="line">    stage(<span class="string">'Clone'</span>) &#123; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"1.Clone Stage"</span> </span><br><span class="line">    &#125; </span><br><span class="line">    stage(<span class="string">'Test'</span>) &#123; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"2.Test Stage"</span> </span><br><span class="line">    &#125; </span><br><span class="line">    stage(<span class="string">'Build'</span>) &#123; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"3.Build Stage"</span> </span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">    stage(<span class="string">'Deploy'</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"4. Deploy Stage"</span> </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构建：点击左侧区域的 Build Now，可以看到 Job 开始构建了<blockquote><p>隔一会儿，构建完成，可以点击左侧区域的 Console Output，我们就可以看到如下输出信息：</p></blockquote></li></ul><p><img src="https://img.xxlaila.cn/sdsdsjid23874823ehsj.png" alt="img"></p><ul><li>在 Slave 中构建任务<br>&nbsp;&nbsp;&nbsp;&nbsp;上面我们创建了一个简单的 Pipeline 任务，但是我们可以看到这个任务并没有在 Jenkins 的 Slave 中运行，那么如何让我们的任务跑在 Slave 中呢？还记得上节课我们在添加 Slave Pod 的时候，一定要记住添加的 label 吗？没错，我们就需要用到这个 label，我们重新编辑上面创建的 Pipeline 脚本，给 node 添加一个 label 属性，如下:</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node(<span class="string">'jnlp-agent'</span>) &#123;</span><br><span class="line">    stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"2.Test Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"3.Build Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Deploy'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"4. Deploy Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只是给 node 添加了一个jnlp-agent这样的一个label，然后我们保存，构建之前查看下 kubernetes 集群中的 Pod：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>] [root@k8s-zxc-test-3 ~]<span class="comment"># kubectl get pods -n kube-ops</span></span><br><span class="line">NAME                        READY   STATUS              RESTARTS   AGE</span><br><span class="line">jenkins2-696b8fbdbb-q24nm   1/1     Running             0          45h</span><br><span class="line">jnlp-agent-342fv            0/1     ContainerCreating   0          0s</span><br><span class="line">[<span class="built_in">test</span>] [root@k8s-zxc-test-3 ~]<span class="comment"># kubectl get pods -n kube-ops</span></span><br><span class="line">NAME                        READY   STATUS              RESTARTS   AGE</span><br><span class="line">jenkins2-696b8fbdbb-q24nm   1/1     Running             0          45h</span><br><span class="line">jnlp-agent-342fv            0/1     ContainerCreating   0          1s</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/dhf482390dsfjkdsg.png" alt="img"></p><ul><li><p>kubernetes 界面显示<br><img src="https://img.xxlaila.cn/9374hkdhskfjsdd.png" alt="img"></p></li><li><p>jenkins执行结果显示<br><img src="https://img.xxlaila.cn/23cvkndiuyriens.png" alt="img"></p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp; 证明我们当前的任务在跑在上面动态生成的这个 Pod 中，也符合我们的预期。我们回到 Job 的主界面，也可以看到大家可能比较熟悉的 Stage View 界面：<br><img src="https://img.xxlaila.cn/45ksfh9whnkxa.png" alt="img"></p><h5 id="部署-Kubernetes-应用"><a href="#部署-Kubernetes-应用" class="headerlink" title="部署 Kubernetes 应用"></a>部署 Kubernetes 应用</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;我们已经知道了如何在 Jenkins Slave 中构建任务了，那么如何来部署一个原生的 Kubernetes 应用呢？ 要部署 Kubernetes 应用，我们就得对我们之前部署应用的流程要非常熟悉才行，我们之前的流程是怎样的：</p><ul><li>1、编写代码</li><li>2、测试</li><li>3、编写 Dockerfile</li><li>4、构建打包 Docker 镜像</li><li>5、推送 Docker 镜像到仓库</li><li>6、编写 Kubernetes YAML 文件</li><li>7、更改 YAML 文件中 Docker 镜像 TAG</li><li>8、利用 kubectl 工具部署应用</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;我们之前在 Kubernetes 环境中部署一个原生应用的流程应该基本上是上面这些流程吧？现在我们就需要把上面这些流程放入 Jenkins 中来自动帮我们完成(当然编码除外)，从测试到更新 YAML 文件属于 CI 流程，后面部署属于 CD 的流程。如果按照我们上面的示例，我们现在要来编写一个 Pipeline 的脚本。</p><ul><li><p>修改test-spring-social-wechat-sample pipeline脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node(<span class="string">'jnlp-agent'</span>) &#123;</span><br><span class="line">   stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"2.Test Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"3.Build Docker Image Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Push'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"4.Push Docker Image Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'YAML'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"5. Change YAML File Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Deploy'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"6. Deploy Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>1）、增加git地址，进行代码的clone</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'Clone'</span>)</span></span> &#123;</span><br><span class="line">   echo <span class="string">"1.Clone Stage"</span></span><br><span class="line">   git url: <span class="string">"https://github.com/xxlaila/jenkins-demo.git"</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>2）、进行测试</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'Test'</span>)</span></span> &#123;</span><br><span class="line">  echo <span class="string">"2.Test Stage"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3）、构建一个docker镜像</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'Build'</span>)</span></span> &#123;</span><br><span class="line">  echo <span class="string">"3.Build Docker Image Stage"</span></span><br><span class="line">  sh <span class="string">"docker build -t xxlaila/jenkins-demo:$&#123;build_tag&#125; ."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;平时构建的时候是不是都是直接使用docker build命令进行构建就行了，那么这个地方呢？我们上节课给大家提供的 Slave Pod 的镜像里面是不是采用的 Docker In Docker 的方式，也就是说我们也可以直接在 Slave 中使用 docker build 命令，所以我们这里直接使用 sh 直接执行 docker build 命令即可，但是镜像的 tag 呢？如果我们使用镜像 tag，则每次都是 latest 的 tag，这对于以后的排查或者回滚之类的工作会带来很大麻烦，我们这里采用和git commit的记录为镜像的 tag，这里有一个好处就是镜像的 tag 可以和 git 提交记录对应起来，也方便日后对应查看。但是由于这个 tag 不只是我们这一个 stage 需要使用，下一个推送镜像是不是也需要，所以这里我们把这个 tag 编写成一个公共的参数，把它放在 Clone 这个 stage 中，修改前面两个 stage:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">      git url: <span class="string">"https://github.com/xxlaila/jenkins-demo.git"</span></span><br><span class="line">      script &#123;</span><br><span class="line">        build_tag = sh(returnStdout: <span class="literal">true</span>, script: <span class="string">'git rev-parse --short HEAD'</span>).trim()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"3.Build Docker Image Stage"</span></span><br><span class="line">      sh <span class="string">"docker build -t xxlaila/jenkins-demo:<span class="variable">$&#123;build_tag&#125;</span> ."</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>4）、推送镜像<br>&nbsp;&nbsp;&nbsp;&nbsp;镜像构建完成了，现在我们就需要将此处构建的镜像推送到镜像仓库中去，当然如果你有私有镜像仓库也可以，这里还没有自己搭建私有的仓库，所以直接使用 docker hub 即可。<br>&nbsp;&nbsp;&nbsp;&nbsp;我们知道 docker hub 是公共的镜像仓库，任何人都可以获取上面的镜像，但是要往上推送镜像我们就需要用到一个帐号了，所以我们需要提前注册一个 docker hub 的帐号，记住用户名和密码，我们这里需要使用。正常来说我们在本地推送 docker 镜像的时候，是不是需要使用docker login命令，然后输入用户名和密码，认证通过后，就可以使用docker push命令来推送本地的镜像到 docker hub 上面去了，如果是这样的话，我们这里的 Pipeline 是不是就该这样写了：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">'Push'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"4.Push Docker Image Stage"</span></span><br><span class="line">      sh <span class="string">"docker login -u cq_xxlaila@163.com -p 111111"</span></span><br><span class="line">      sh <span class="string">"docker push xxlaila/jenkins-demo:<span class="variable">$&#123;build_tag&#125;</span>"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;如果只是在 Jenkins 的 Web UI 界面中来完成这个任务的话，我们这里的 Pipeline 是可以这样写的，但是我们是不是推荐使用 Jenkinsfile 的形式放入源码中进行版本管理，这样的话我们直接把 docker 仓库的用户名和密码暴露给别人这样很显然是非常非常不安全的，更何况我们这里使用的是 github 的公共代码仓库，所有人都可以直接看到我们的源码，所以我们应该用一种方式来隐藏用户名和密码这种私密信息，幸运的是 Jenkins 为我们提供了解决方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;在首页点击 Credentials -&gt; Stores scoped to Jenkins 下面的 Jenkins -&gt; Global credentials (凭据) -&gt;system(系统)-&gt;全局凭据 (unrestricted)-&gt; 左侧的 Add Credentials( 添加凭据)：添加一个 Username with password 类型的认证信息，如下：<br><img src="https://img.xxlaila.cn/374kdjfkskfdsd.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Add Credentials 输入 docker hub 的用户名和密码，ID 部分我们输入dockerHub，注意，这个值非常重要，在后面 Pipeline 的脚本中我们需要使用到这个 ID 值。<br>&nbsp;&nbsp;&nbsp;&nbsp;有了上面的 docker hub 的用户名和密码的认证信息，现在修改 Pipeline 中的第四部，使用这里的用户名和密码：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">stage('Push') &#123;</span><br><span class="line">     echo <span class="string">"4.Push Docker Image Stage"</span></span><br><span class="line">     <span class="keyword">with</span><span class="constructor">Credentials([<span class="params">usernamePassword</span>(<span class="params">credentialsId</span>: '<span class="params">dockerHub</span>', <span class="params">passwordVariable</span>: '<span class="params">dockerHubPassword</span>', <span class="params">usernameVariable</span>: '<span class="params">dockerHubUser</span>')</span>]) &#123;</span><br><span class="line">         sh <span class="string">"docker login -u $&#123;dockerHubUser&#125; -p $&#123;dockerHubPassword&#125;"</span></span><br><span class="line">         sh <span class="string">"docker push xxlaila/jenkins-demo:$&#123;build_tag&#125;"</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p><em>注意</em>:<br>&nbsp;&nbsp;&nbsp;&nbsp;我们这里在 stage 中使用了一个新的函数withCredentials，其中有一个credentialsId值就是我们刚刚创建的 ID 值，然后就可以在脚本中直接使用这里两个变量值来直接替换掉之前的登录 docker hub 的用户名和密码，这样操作就相对来说就很安全了，只是传递进去了两个变量而已，别人并不知道真正用户名和密码，只有我们自己的 Jenkins 平台上添加的才知道。<br><em>测试结果</em>:</p></blockquote><p><img src="https://img.xxlaila.cn/4ykjdbfjdshfkojdsl.png" alt="img"></p><ul><li>5）、更改 YAML<br>&nbsp;&nbsp;&nbsp;&nbsp;上面已经完成了镜像的打包、推送的工作，接下来我们是不是应该更新 Kubernetes 系统中应用的镜像版本了，当然为了方便维护，我们都是用 YAML 文件的形式来编写应用部署规则，比如我们这里的 YAML 文件：(k8s.yaml)<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># cat k8s.yaml</span></span><br><span class="line"><span class="symbol">apiVersion:</span> extensions/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> Deployment</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> jenkins-demo</span><br><span class="line"><span class="symbol">  namespace:</span> default</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line"><span class="symbol">      labels:</span></span><br><span class="line"><span class="symbol">        app:</span> jenkins-demo</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line"><span class="symbol">      containers:</span></span><br><span class="line">      - image: xxlaila/jenkins-demo:<span class="params">&lt;BUILD_TAG&gt;</span></span><br><span class="line"><span class="symbol">        imagePullPolicy:</span> IfNotPresent</span><br><span class="line"><span class="symbol">        name:</span> jenkins-demo</span><br><span class="line"><span class="symbol">        env:</span></span><br><span class="line">        - name: branch</span><br><span class="line"><span class="symbol">          value:</span> <span class="params">&lt;BRANCH_NAME&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;使用一个 Deployment 资源对象来管理 Pod，该 Pod 使用的就是我们上面推送的镜像，唯一不同的地方是 Docker 镜像的 tag 不是我们平常见的具体的 tag，而是一个 的标识，实际上如果我们将这个标识替换成上面的 Docker 镜像的 tag，是不是就是最终我们本次构建需要使用到的镜像？怎么替换呢？其实也很简单，我们使用一个sed命令就可以实现了：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'YAML'</span>)</span></span> &#123;</span><br><span class="line">      echo <span class="string">"5. Change YAML File Stage"</span></span><br><span class="line">      sh <span class="string">"sed -i 's/&lt;BUILD_TAG&gt;/$&#123;build_tag&#125;/' k8s.yaml"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>sed 命令就是将 k8s.yaml 文件中的 标识给替换成变量 build_tag 的值。</p></blockquote><ul><li>6）、部署<br>&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes 应用的 YAML 文件已经更改完成了，之前我们手动的环境下，是不是直接使用 kubectl apply 命令就可以直接更新应用。当然这里只是写入到了 Pipeline 里面，思路都是一样的：</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'Deploy'</span>)</span></span> &#123;</span><br><span class="line">      echo <span class="string">"6. Deploy Stage"</span></span><br><span class="line">      sh <span class="string">"kubectl apply -f k8s.yaml"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>点击jenkins进行构建<br><img src="https://img.xxlaila.cn/56hjkshdfdksnfkldsj.png" alt="img"></li></ul><blockquote><p>当然，这里部署失败，先别管，证明流程是对的，可以这么走</p></blockquote><p><img src="https://img.xxlaila.cn/3947dnfdsflskfjdsf.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;以上的配置基本已经完成，但是我们的实际项目实践过程中，可能还需要一些人工干预的步骤，比如我们提交了一次代码，测试也通过了，镜像也打包上传了，但是这个版本并不一定就是要立刻上线到生产环境的。我们可能需要将该版本先发布到测试环境、QA 环境、或者预览环境之类的，总之直接就发布到线上环境去还是挺少见的，所以我们需要增加人工确认的环节，一般都是在 CD 的环节才需要人工干预，比如我们这里的最后两步，我们就可以在前面加上确认，比如：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">'YAML'</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"5. Change YAML File Stage"</span></span><br><span class="line">      def userInput = <span class="built_in">input</span>(</span><br><span class="line">          id: <span class="string">'userInput'</span>,</span><br><span class="line">          message: <span class="string">'Choose a deploy environment'</span>,</span><br><span class="line">          parameter<span class="variable">s:</span> [</span><br><span class="line">              [</span><br><span class="line">                  #clas<span class="variable">s:</span> <span class="string">'ChoiceParameterDefinition'</span>,</span><br><span class="line">                  choice<span class="variable">s:</span> <span class="string">"Dev\nTest\nUat\nDemo\nPord"</span>,</span><br><span class="line">                  name: <span class="string">'Env'</span></span><br><span class="line">                  ]</span><br><span class="line">              ]</span><br><span class="line">          )</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">"This is a deploy step to $&#123;userInput.Env&#125;"</span></span><br><span class="line">          <span class="keyword">sh</span> <span class="string">"sed -i 's/&lt;BUILD_TAG&gt;/$&#123;build_tag&#125;/' k8s.yaml"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;这里使用了 input 关键字，里面使用一个 Choice 的列表来让用户进行选择，然后在我们选择了部署环境后，我们当然也可以针对不同的环境再做一些操作，比如可以给不同环境的 YAML 文件部署到不同的 namespace 下面去，增加不同的标签等等操作：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'Deploy'</span>)</span></span> &#123;</span><br><span class="line">      echo <span class="string">"6. Deploy Stage"</span></span><br><span class="line">      <span class="keyword">if</span> (userInput<span class="selector-class">.Env</span> == <span class="string">"Dev"</span>)&#123;</span><br><span class="line">          <span class="comment">// deploy dev stuff</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userInput<span class="selector-class">.Env</span> == <span class="string">"Test"</span>)&#123;</span><br><span class="line">          <span class="comment">// deploy test stuff</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// deploy prod stuff</span></span><br><span class="line">      &#125;</span><br><span class="line">      sh <span class="string">"kubectl apply -f k8s.yaml"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于这一步也属于部署的范畴，所以我们可以将最后两步都合并成一步，我们最终的 Pipeline 脚本如下：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">node(<span class="string">'node-jnlp'</span>) &#123;</span><br><span class="line">    stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">        git ur<span class="variable">l:</span> <span class="string">"https://github.com/xxlaila/jenkins-demo.git"</span></span><br><span class="line">        script &#123;</span><br><span class="line">            build_tag = <span class="keyword">sh</span>(returnStdou<span class="variable">t:</span> true, <span class="keyword">scrip</span><span class="variable">t:</span> <span class="string">'git rev-parse --short HEAD'</span>).trim()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"2.Test Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"3.Build Docker Image Stage"</span></span><br><span class="line">        <span class="keyword">sh</span> <span class="string">"docker build -t xxlaila/jenkins-demo:$&#123;build_tag&#125; ."</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Push'</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"4.Push Docker Image Stage"</span></span><br><span class="line">        withCredentials([usernamePassword(credentialsId: <span class="string">'dockerHub'</span>, passwordVariable: <span class="string">'dockerHubPassword'</span>, usernameVariable: <span class="string">'dockerHubUser'</span>)]) &#123;</span><br><span class="line">            <span class="keyword">sh</span> <span class="string">"docker login -u $&#123;dockerHubUser&#125; -p $&#123;dockerHubPassword&#125;"</span></span><br><span class="line">            <span class="keyword">sh</span> <span class="string">"docker push cnych/jenkins-demo:$&#123;build_tag&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Deploy'</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"5. Deploy Stage"</span></span><br><span class="line">        def userInput = <span class="built_in">input</span>(</span><br><span class="line">            id: <span class="string">'userInput'</span>,</span><br><span class="line">            message: <span class="string">'Choose a deploy environment'</span>,</span><br><span class="line">            parameter<span class="variable">s:</span> [</span><br><span class="line">                [</span><br><span class="line">                    $clas<span class="variable">s:</span> <span class="string">'ChoiceParameterDefinition'</span>,</span><br><span class="line">                    choice<span class="variable">s:</span> <span class="string">"Dev\nQA\nProd"</span>,</span><br><span class="line">                    name: <span class="string">'Env'</span></span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"This is a deploy step to $&#123;userInput&#125;"</span></span><br><span class="line">        <span class="keyword">sh</span> <span class="string">"sed -i 's/&lt;BUILD_TAG&gt;/$&#123;build_tag&#125;/' k8s.yaml"</span></span><br><span class="line">        <span class="keyword">if</span> (userInput == <span class="string">"Dev"</span>) &#123;</span><br><span class="line">            // deploy dev stuff</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userInput == <span class="string">"QA"</span>)&#123;</span><br><span class="line">            // deploy <span class="keyword">qa</span> stuff</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            // deploy prod stuff</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">sh</span> <span class="string">"kubectl apply -f k8s.yaml"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>错误</em>: 在jenkins执行构建的时候提示:</p><p><img src="https://img.xxlaila.cn/2846djkfhklsdjdklsd.png" alt="img"></p><blockquote><p>没有权限进行部署，下面进行权限的分配。</p></blockquote><ul><li><p>查看kube-ops 下面的角色</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get role -n kube-ops</span></span><br><span class="line">NAME       AGE</span><br><span class="line">jenkins2   2d6h</span><br></pre></td></tr></table></figure></li><li><p>查看role定义的资源权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get role jenkins2 -n kube-ops -o yaml</span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">"2019-01-14T03:07:25Z"</span></span><br><span class="line">  name: jenkins2</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  resourceVersion: <span class="string">"2389179"</span></span><br><span class="line">  selfLink: /apis/rbac.authorization.k8s.io/v1/namespaces/kube-ops/roles/jenkins2</span><br><span class="line">  uid: 84762132-17a9-11e9-8991-fa163e14c5bd</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  verbs:</span><br><span class="line">  - create</span><br><span class="line">  - delete</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - patch</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods/<span class="built_in">exec</span></span><br><span class="line">  verbs:</span><br><span class="line">  - create</span><br><span class="line">  - delete</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - patch</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods/<span class="built_in">log</span></span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - secrets</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br></pre></td></tr></table></figure></li><li><p>创建jenkins2的权限</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>k8s-zxc-test<span class="number">-3</span> ~]# kubectl -n kube-system create sa jenkins2</span><br><span class="line">serviceaccount/jenkins2 created</span><br></pre></td></tr></table></figure></li><li><p>授权访问</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">[root@k8s-zxc-test<span class="number">-3</span> ~]# kubectl <span class="built_in">create</span> clusterrolebinding jenkins2 <span class="comment">--clusterrole cluster-admin --serviceaccount=kube-ops:jenkins2</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.<span class="built_in">io</span>/jenkins2 created</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>ci/cd</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix企业微信告警</title>
    <url>/2019/08/20/zabbix%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E5%91%8A%E8%AD%A6/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;Zabbix可以通过多种方式把告警信息发送到指定人，常用的有邮件，短信报警方式，但是越来越多的企业开始使用zabbix结合微信作为主要的告警方式，这样可以及时有效的把告警信息推送到接收人，方便告警的及时处理。<br>&nbsp;&nbsp;&nbsp;&nbsp;微信企业号需要先在企业通信录新建该员工，该员工才能关注该企业号，这样就能实现告警信息的私密性。如果使用公众号，则只要所有关注了该公众号的人都能收到告警消息，容易造成信息泄露。而且员工数少于200人的企业号是不用钱的，也没有任何申请限制.</p><h3 id="1、脚本存放目录"><a href="#1、脚本存放目录" class="headerlink" title="1、脚本存放目录"></a>1、脚本存放目录</h3><p>/usr/lib/zabbix/alertscripts，脚本的权限是zabbix 账户，具有可执行权限</p><a id="more"></a><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat wechat.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment">#_*_coding:utf-8 _*_</span></span><br><span class="line"><span class="built_in">import</span> requests,sys,json</span><br><span class="line"><span class="built_in">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding('utf-<span class="number">8</span>')</span><br><span class="line">def GetToken(Corpid,Secret):</span><br><span class="line">    <span class="attr">Url</span> = <span class="string">"https://qyapi.weixin.qq.com/cgi-bin/gettoken"</span></span><br><span class="line">    <span class="attr">Data</span> = &#123;</span><br><span class="line">        <span class="string">"corpid"</span>:Corpid,</span><br><span class="line">        <span class="string">"corpsecret"</span>:Secret</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">r</span> = requests.get(<span class="attr">url=Url,params=Data,verify=False)</span></span><br><span class="line">    <span class="attr">Token</span> = r.json()['access_token']</span><br><span class="line">    return Token</span><br><span class="line">def SendMessage(Token,User,Agentid,Subject,Content):</span><br><span class="line">    <span class="attr">Url</span> = <span class="string">"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s"</span> % Token</span><br><span class="line">    <span class="attr">Data</span> = &#123;</span><br><span class="line">        <span class="string">"touser"</span>: User,                                 <span class="comment"># 企业号中的用户帐号，在zabbix用户Media中配置，如果配置不正常，将按部门发送。</span></span><br><span class="line">        <span class="comment">#"totag": Tagid,                                # 企业号中的标签id，群发使用（推荐）</span></span><br><span class="line">        <span class="string">"toparty"</span>: <span class="string">"2"</span>,                            <span class="comment"># 企业号中的部门id，群发时使用。</span></span><br><span class="line">        <span class="string">"msgtype"</span>: <span class="string">"text"</span>,                              <span class="comment"># 消息类型。</span></span><br><span class="line">        <span class="string">"agentid"</span>: Agentid,                             <span class="comment"># 企业号中的应用id。</span></span><br><span class="line">        <span class="string">"text"</span>: &#123;</span><br><span class="line">            <span class="string">"content"</span>: Subject + '\n' + Content</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"safe"</span>: <span class="string">"0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">r</span> = requests.post(<span class="attr">url=Url,data=json.dumps(Data),verify=False)</span></span><br><span class="line">    return r.text</span><br><span class="line"><span class="keyword">if</span> <span class="attr">__name__</span> == '__main__':</span><br><span class="line">    <span class="attr">User</span> = sys.argv[<span class="number">1</span>]                                                              <span class="comment"># zabbix传过来的第一个参数</span></span><br><span class="line">    <span class="attr">Subject</span> = sys.argv[<span class="number">2</span>]                                                           <span class="comment"># zabbix传过来的第二个参数</span></span><br><span class="line">    <span class="attr">Content</span> = sys.argv[<span class="number">3</span>]                                                           <span class="comment"># zabbix传过来的第三个参数</span></span><br><span class="line">    <span class="attr">Corpid</span> = <span class="string">"wwa9c9999"</span>                                                   <span class="comment"># CorpID是企业号的标识</span></span><br><span class="line">    <span class="attr">Secret</span> = <span class="string">"VGbZvXJ5RiLskdksh2dkhaskdu92uihsjdhjksadh"</span>     <span class="comment"># Secret是管理组凭证密钥</span></span><br><span class="line">    <span class="comment">#Tagid = "1"                                                                     # 通讯录标签ID</span></span><br><span class="line">    <span class="attr">Agentid</span> = <span class="string">"1000001"</span>                                                                   <span class="comment"># 应用ID</span></span><br><span class="line">    <span class="comment">#Partyid = "1"                                                                  # 部门ID</span></span><br><span class="line">    <span class="attr">Token</span> = GetToken(Corpid, Secret)</span><br><span class="line">    <span class="attr">Status</span> = SendMessage(Token,User,Agentid,Subject,Content)</span><br><span class="line">    print Status</span><br></pre></td></tr></table></figure><h3 id="2、重要参数介绍"><a href="#2、重要参数介绍" class="headerlink" title="2、重要参数介绍"></a>2、重要参数介绍</h3><ul><li>toparty：”2” 这个参数是在企业微信里面部门的id</li><li>Corpid：企业的CorpID标示</li><li>Secret：管理组的密钥凭证</li><li>Agentid：新建应用的id</li><li>只需要求修改以上参数即可</li></ul><p><img src="https://img.xxlaila.cn/image2018-8-23_16-8-30.png" alt="img"></p><ul><li>以上部门没有新建，只是在这个应用中新增加了几个用户。最好的方式是增加一个部门组，用户添加到部门组里面，这种方式最科学</li></ul><h3 id="3、登陆zabbix-进行配置"><a href="#3、登陆zabbix-进行配置" class="headerlink" title="3、登陆zabbix 进行配置"></a>3、登陆zabbix 进行配置</h3><h4 id="3-1、创建一个媒介类型"><a href="#3-1、创建一个媒介类型" class="headerlink" title="3.1、创建一个媒介类型"></a>3.1、创建一个媒介类型</h4><p><img src="https://img.xxlaila.cn/image2018-8-23_16-11-59.png" alt="img"></p><h4 id="3-2、创建一个告警类别"><a href="#3-2、创建一个告警类别" class="headerlink" title="3.2、创建一个告警类别"></a>3.2、创建一个告警类别</h4><p><img src="https://img.xxlaila.cn/image2018-8-23_16-12-53.png" alt="img"><br><img src="https://img.xxlaila.cn/image2018-8-23_16-13-9.png" alt="img"></p><blockquote><p>服务器:{HOST.NAME}发生: {TRIGGER.NAME}故障!</p><p>告警主机:{HOST.NAME}<br>告警地址:{HOST.IP}<br>监控项目:{ITEM.NAME}<br>监控取值:{ITEM.LASTVALUE}<br>告警等级:{TRIGGER.SEVERITY}<br>当前状态:{TRIGGER.STATUS}<br>告警信息:{TRIGGER.NAME}<br>告警时间:{EVENT.DATE} {EVENT.TIME}<br>事件ID:{EVENT.ID}</p></blockquote><p><img src="https://img.xxlaila.cn/image2018-8-23_16-13-20.png" alt="img"></p><blockquote><p>服务器:{HOST.NAME}: {TRIGGER.NAME}已恢复!</p><p>告警主机:{HOST.NAME}<br>告警地址:{HOST.IP}<br>监控项目:{ITEM.NAME}<br>监控取值:{ITEM.LASTVALUE}<br>告警等级:{TRIGGER.SEVERITY}<br>当前状态:{TRIGGER.STATUS}<br>告警信息:{TRIGGER.NAME}<br>告警时间:{EVENT.DATE} {EVENT.TIME}<br>恢复时间:{EVENT.RECOVERY.DATE} {EVENT.RECOVERY.TIME}<br>持续时间:{EVENT.AGE}<br>事件ID:{EVENT.ID}</p></blockquote><p><img src="https://img.xxlaila.cn/image2018-8-23_16-13-28.png" alt="img"></p><blockquote><p>服务器:{HOST.NAME}: 报警确认</p><p>确认人:{USER.FULLNAME}<br>时间:{ACK.DATE} {ACK.TIME}<br>确认信息如下:<br>“{ACK.MESSAGE}”<br>问题服务器IP:{HOSTNAME1}<br>问题ID:{EVENT.ID}<br>当前的问题是: {TRIGGER.NAME}</p></blockquote><h4 id="3-3、为用户添加告警类型"><a href="#3-3、为用户添加告警类型" class="headerlink" title="3.3、为用户添加告警类型"></a>3.3、为用户添加告警类型</h4><p><img src="https://img.xxlaila.cn/image2018-8-23_16-21-58.png" alt="img"><br>这里为admin用户添加的 告警方式。注意一下send to 这个参数，这里一定要是@all。否则不成功</p><h3 id="4、企业微信测试"><a href="#4、企业微信测试" class="headerlink" title="4、企业微信测试"></a>4、企业微信测试</h3><p><img src="https://img.xxlaila.cn/image2018-8-23_16-23-14.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>帧中继配置</title>
    <url>/2019/08/19/%E5%B8%A7%E4%B8%AD%E7%BB%A7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="点对点配置"><a href="#点对点配置" class="headerlink" title="点对点配置"></a>点对点配置</h3><p><img src="https://img.xxlaila.cn/1566222269423.jpg" alt="img"></p><ul><li><p>RA配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RA]int s0/<span class="number">0</span></span><br><span class="line">[RA-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">102</span>      设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">102</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RA-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本接口IP地址</span><br><span class="line">[RA-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>RB配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RB]int s0/<span class="number">0</span></span><br><span class="line">[RB-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">201</span>       设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">201</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RB-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本接口IP地址</span><br><span class="line">[RB-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>FRAME-RELAY配置:<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[FRAME-RELAY]frame-relay switching                 允许帧中继进行PVC交换</span><br><span class="line">[FRAME-RELAY]int s0/0</span><br><span class="line">[FRAME-RELAY-s0/0] encap frame-relay    封装帧中继协议 </span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/0]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>102<span class="built_in"> interface </span>s0/1 201    配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/1</span><br><span class="line">[FRAME-RELAY-s0/1] encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/1]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay<span class="built_in"> route </span>pvc 201<span class="built_in"> interface </span>s0/0 102    配置帧中继PVC交换路由</span><br></pre></td></tr></table></figure></li></ul><h3 id="点对多点（星形）"><a href="#点对多点（星形）" class="headerlink" title="点对多点（星形）"></a>点对多点（星形）</h3><p><img src="https://img.xxlaila.cn/1566222529208.jpg" alt="img"></p><ul><li><p>RA配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RA]int s0/<span class="number">0</span></span><br><span class="line">[RA-s0/<span class="number">0</span>] encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">102</span>      设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">103</span>                 </span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">102</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.3</span> <span class="number">103</span>  </span><br><span class="line">[RA-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>     配置本接口IP地址</span><br><span class="line">[RA-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>RB配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RB]int s0/<span class="number">0</span></span><br><span class="line">[RB-s0/<span class="number">0</span>] encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">201</span>       设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">201</span>  建立对端协议地址与本地INTERFACE-DLCI</span><br><span class="line">[RB-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       配置本接口IP地址</span><br><span class="line">[RC-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>RC配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RC]int s0/<span class="number">0</span></span><br><span class="line">[RC-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RC-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">301</span>       设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RC-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">301</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RC-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.3</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       配置本接口IP地址</span><br><span class="line">[RC-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>FRAME-RELAY配置:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[FRAME-RELAY]frame-relay switching      允许帧中继进行PVC交换</span><br><span class="line">[FRAME-RELAY]int s0/0</span><br><span class="line">[FRAME-RELAY-s0/0]encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/0]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>102<span class="built_in"> interface </span>s0/1 201   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>103<span class="built_in"> interface </span>s0/2 301   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/1</span><br><span class="line">[FRAME-RELAY-s0/1]encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/1]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay<span class="built_in"> route </span>201<span class="built_in"> interface </span>s0/0 102   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/2</span><br><span class="line">[FRAME-RELAY-s0/2]encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/2]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay<span class="built_in"> route </span>301<span class="built_in"> interface </span>s0/0 103   配置帧中继PVC交换路由</span><br></pre></td></tr></table></figure></li></ul><h3 id="点对多点子接口（星形）"><a href="#点对多点子接口（星形）" class="headerlink" title="点对多点子接口（星形）"></a>点对多点子接口（星形）</h3><p><img src="https://img.xxlaila.cn/1566222807499.jpg" alt="img"></p><ul><li><p>RA配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RA]int s0/<span class="number">0</span></span><br><span class="line">[RA-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RA]int s0/<span class="number">0.1</span> multipoint</span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay interface-dlci <span class="number">102</span>     设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay interface-dlci <span class="number">103</span>                 </span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">102</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.3</span> <span class="number">103</span>  </span><br><span class="line">[RA-s0/<span class="number">0.1</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本子接口IP地址</span><br></pre></td></tr></table></figure></li><li><p>RB配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RB]int s0/<span class="number">0</span></span><br><span class="line">[RB-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">201</span>       设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">201</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RB-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       配置本接口IP地址</span><br><span class="line">[RB-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>RC配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RC]int s0/<span class="number">0</span></span><br><span class="line">[RC-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RC-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">301</span>       设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RC-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">301</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RC-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.3</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>    配置本接口IP地址</span><br><span class="line">[RC-s0/<span class="number">0</span>]no sh                    打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>FRAME-RELAY配置:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[FRAME-RELAY]frame-relay switching    允许帧中继进行PVC交换</span><br><span class="line">[FRAME-RELAY]int s0/0</span><br><span class="line">[FRAME-RELAY-s0/0]encap frame-relay    封装帧中继协议 </span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/0]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>102<span class="built_in"> interface </span>s0/1 201   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>103<span class="built_in"> interface </span>s0/2 301   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/1</span><br><span class="line">[FRAME-RELAY-s0/1]encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/1]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay<span class="built_in"> route </span>201<span class="built_in"> interface </span>s0/0 102   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/2</span><br><span class="line">[FRAME-RELAY-s0/2]encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/2]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay<span class="built_in"> route </span>301<span class="built_in"> interface </span>s0/0 103   配置帧中继PVC交换路由</span><br></pre></td></tr></table></figure></li></ul><h3 id="点对点子接口（全网状）"><a href="#点对点子接口（全网状）" class="headerlink" title="点对点子接口（全网状）"></a>点对点子接口（全网状）</h3><p><img src="https://img.xxlaila.cn/1566222918549.jpg" alt="img"></p><ul><li><p>RA配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RA]int s0/<span class="number">0</span> </span><br><span class="line">[RA-s0/<span class="number">0</span>]encap frame-relay     封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RA-s0/<span class="number">0</span>]no sh               打开此物理接口</span><br><span class="line">[RA]int s0/<span class="number">0.1</span> point-to-point</span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay interface-dlci <span class="number">102</span>        设置本接口对应的INTERFACE-DLCI号              </span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">102</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RA-s0/<span class="number">0.1</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本子接口IP地址</span><br><span class="line">[RA]int s0/<span class="number">0.2</span> point-to-point</span><br><span class="line">[RA-s0/<span class="number">0.2</span>]frame-relay interface-dlci <span class="number">103</span>        设置本接口对应的INTERFACE-DLCI号              </span><br><span class="line">[RA-s0/<span class="number">0.2</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">103</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RA-s0/<span class="number">0.2</span>]ip add <span class="number">172.16</span><span class="number">.2</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>    配置本子接口IP地址</span><br></pre></td></tr></table></figure></li><li><p>RB配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RB]int s0/<span class="number">0</span></span><br><span class="line">[RB-s0/<span class="number">0</span>]encap frame-relay     封装帧中继协议</span><br><span class="line">[RB-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RB-s0/<span class="number">0</span>]no sh                   打开此物理接口</span><br><span class="line">[RB]int s0/<span class="number">0.1</span> point-to-point</span><br><span class="line">[RB-s0/<span class="number">0.1</span>]frame-relay interface-dlci <span class="number">201</span>     设置本接口对应的INTERFACE-DLCI号             </span><br><span class="line">[RB-s0/<span class="number">0.1</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">201</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RB-s0/<span class="number">0.1</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>     配置本接口IP地址</span><br><span class="line">[RB]int s0/<span class="number">0.2</span> point-to-point</span><br><span class="line">[RB-s0/<span class="number">0.2</span>]frame-relay interface-dlci <span class="number">203</span>      设置本接口对应的INTERFACE-DLCI号             </span><br><span class="line">[RB-s0/<span class="number">0.2</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">203</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RB-s0/<span class="number">0.2</span>]ip add <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本接口IP地址</span><br></pre></td></tr></table></figure></li><li><p>RC配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RC]int s0/<span class="number">0</span></span><br><span class="line">[RC-s0/<span class="number">0</span>]encap frame-relay     封装帧中继协议</span><br><span class="line">[RC-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RC-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br><span class="line">[RC]int s0/<span class="number">0.1</span> point-to-point</span><br><span class="line">[RC-s0/<span class="number">0.1</span>]frame-relay interface-dlci <span class="number">301</span>         设置本接口对应的INTERFACE-DLCI号                </span><br><span class="line">[RC-s0/<span class="number">0.1</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span> <span class="number">301</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RC-s0/<span class="number">0.1</span>]ip add <span class="number">172.16</span><span class="number">.3</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       配置本接口IP地址</span><br><span class="line">[RC]int s0/<span class="number">0.2</span> point-to-point</span><br><span class="line">[RC-s0/<span class="number">0.2</span>]frame-relay interface-dlci <span class="number">302</span>         设置本接口对应的INTERFACE-DLCI号                </span><br><span class="line">[RC-s0/<span class="number">0.2</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.2</span><span class="number">.1</span> <span class="number">302</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RC-s0/<span class="number">0.2</span>]ip add <span class="number">172.16</span><span class="number">.2</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本接口IP地址</span><br></pre></td></tr></table></figure></li><li><p>FRAME-RELAY配置:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[FRAME-RELAY]frame-relay switching                 允许帧中继进行PVC交换</span><br><span class="line">[FRAME-RELAY]int s0/0</span><br><span class="line">[FRAME-RELAY-s0/0]encap frame-relay    封装帧中继协议 </span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/0]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>102<span class="built_in"> interface </span>s0/1 201     配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>103<span class="built_in"> interface </span>s0/2 301     配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/1</span><br><span class="line">[FRAME-RELAY-s0/1]encap frame-relay           封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/1]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay<span class="built_in"> route </span>201<span class="built_in"> interface </span>s0/0 102    配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay<span class="built_in"> route </span>pvc 203<span class="built_in"> interface </span>s0/0 302    配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/2</span><br><span class="line">[FRAME-RELAY-s0/2]encap frame-relay           封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/2]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay<span class="built_in"> route </span>301<span class="built_in"> interface </span>s0/0 103    配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay<span class="built_in"> route </span>302<span class="built_in"> interface </span>s0/0 203    配置帧中继PVC交换路由</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
      <tags>
        <tag>帧中继</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes ci/cd(一)</title>
    <url>/2019/08/12/kubernetes-ci-cd-%E4%B8%80/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><blockquote><p>基于jenkins的CI/CD安装</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jenkins一个流行的持续集成/发布工具，在Kubernetes使用,持续构建与发布是我们日常工作中必不可少的一个步骤，目前大多公司都采用 Jenkins 集群来搭建符合需求的 CI/CD 流程，然而传统的 Jenkins Slave 一主多从方式会存在一些痛点，比如：主 Master 发生单点故障时，整个流程都不可用了；每个 Slave 的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲；资源分配不均衡，有的 Slave 要运行的 job 出现排队等待，而有的 Slave 处于空闲状态；最后资源有浪费，每台 Slave 可能是实体机或者 VM，当 Slave 处于空闲状态时，也不会完全释放掉资源。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提到基于Kubernete的CI/CD，可以使用的工具有很多，比如Jenkins、Gitlab CI已经新兴的drone之类的，我们这里会使用大家最为熟悉的Jenins来做CI/CD的工具。</p><ul><li>优点:<ul><li>Jenkins 安装完成了，接下来我们不用急着就去使用，我们要了解下在 Kubernetes 环境下面使用 Jenkins 有什么好处。都知道持续构建与发布是我们日常工作中必不可少的一个步骤，目前大多公司都采用 Jenkins 集群来搭建符合需求的 CI/CD 流程，然而传统的 Jenkins Slave 一主多从方式会存在一些痛点，比如:<ul><li>E 主 Master 发生单点故障时，整个流程都不可用了。</li><li>E 每个 Slave 的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲。</li><li>E 资源分配不均衡，有的 Slave 要运行的 job 出现排队等待，而有的 Slave 处于空闲状态。</li><li>E 资源有浪费，每台 Slave 可能是物理机或者虚拟机，当 Slave 处于空闲状态时，也不会完全释放掉资源。</li></ul></li><li>正因为这些种种痛点，我们渴望一种更高效更可靠的方式来完成这个 CI/CD 流程，而 Docker 虚拟化容器技术能很好的解决这个痛点，又特别是在 Kubernetes 集群环境下面能够更好来解决上面的问题，下图是基于 Kubernetes 搭建 Jenkins 集群的简单示意图<br><img src="https://img.xxlaila.cn/xjfhs84we.png" alt="img"></li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到 Jenkins Master 和 Jenkins Slave 以 Pod 形式运行在 Kubernetes 集群的 Node 上，Master 运行在其中一个节点，并且将其配置数据存储到一个 Volume 上去，Slave 运行在各个节点上，并且它不是一直处于运行状态，它会按照需求动态的创建并自动删除。</p><a id="more"></a><ul><li>这种方式的工作流程大致为<ul><li>当 Jenkins Master 接受到 Build 请求时，会根据配置的 Label 动态创建一个运行在 Pod 中的 Jenkins Slave 并注册到 Master 上，当运行完 Job 后，这个 Slave 会被注销并且这个 Pod 也会自动删除，恢复到最初状态。那么使用这种方式带来了哪些好处呢？</li><li>E 服务高可用，当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。</li><li>E 动态伸缩，合理使用资源，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。</li><li>E 扩展性好，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。</li></ul></li></ul><h2 id="1、安装jenkins"><a href="#1、安装jenkins" class="headerlink" title="1、安装jenkins"></a>1、安装jenkins</h2><h3 id="1-1、新建一个-Deployment"><a href="#1-1、新建一个-Deployment" class="headerlink" title="1.1、新建一个 Deployment"></a>1.1、新建一个 Deployment</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cat  jenkins-deployment.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-ops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">jenkins/jenkins:lts</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">50000</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">agent</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">1000</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">1</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">500</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">512</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        livenessProbe:</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/login</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line"><span class="attr">          timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">          failureThreshold:</span> <span class="number">12</span></span><br><span class="line"><span class="attr">        readinessProbe:</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/login</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line"><span class="attr">          timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">          failureThreshold:</span> <span class="number">12</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">jenkinshome</span></span><br><span class="line"><span class="attr">          subPath:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/var/jenkins_home</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">LIMITS_MEMORY</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            resourceFieldRef:</span></span><br><span class="line"><span class="attr">              resource:</span> <span class="string">limits.memory</span></span><br><span class="line"><span class="attr">              divisor:</span> <span class="number">1</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">JAVA_OPTS</span></span><br><span class="line"><span class="attr">          value:</span> <span class="bullet">-Xmx$(LIMITS_MEMORY)m</span> <span class="attr">-XshowSettings:vm</span> <span class="bullet">-Dhudson.slaves.NodeProvisioner.initialDelay=0</span> <span class="bullet">-Dhudson.slaves.NodeProvisioner.MARGIN=50</span> <span class="bullet">-Dhudson.slaves.NodeProvisioner.MARGIN0=0.85</span> <span class="bullet">-Duser.timezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">      securityContext:</span></span><br><span class="line"><span class="attr">        fsGroup:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">jenkinshome</span></span><br><span class="line"><span class="attr">        persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">          claimName:</span> <span class="string">opspvc</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-ops</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">30002</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">agent</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">50000</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="string">agent</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;对象资源都放置在一个名为 kube-ops 的 namespace 下面，所以我们需要添加创建一个 namespace,namespace 请参考namspace章节的具体介绍</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"># kubectl <span class="keyword">create</span> <span class="keyword">namespace</span> kube-ops</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;这里使用一个名为 jenkins/jenkins:lts 的官方镜像，这是 jenkins 官方的 Docker 镜像，然后也有一些环境变量，当然我们也可以根据自己的需求来定制一个镜像，比如我们可以将一些插件打包在自定义的镜像当中，<a href="https://github.com/jenkinsci/docker" target="_blank" rel="noopener">可以参考文档</a>。我们这里使用默认的官方镜像就行，另外一个还需要注意的是我们将容器的 /var/jenkins_home 目录挂载到了一个名为 opspvc 的 PVC 对象上面，所以我们同样还得提前创建一个对应的 PVC 对象，当然我们也可以使用我们前面的 StorageClass 对象来自动创建：(jenkins-pvc.yaml)</p><h3 id="1-2-Jenkins-StorageClass-创建"><a href="#1-2-Jenkins-StorageClass-创建" class="headerlink" title="1.2 Jenkins StorageClass 创建"></a>1.2 Jenkins StorageClass 创建</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat jenkins-pvc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">opspv</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-ops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">20</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ReadWriteMany</span></span><br><span class="line"><span class="attr">  persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line"><span class="attr">  nfs:</span></span><br><span class="line"><span class="attr">    server:</span> <span class="number">172.21</span><span class="number">.16</span><span class="number">.231</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/data/jenkins</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">opspvc</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-ops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteMany</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">storage:</span> <span class="number">20</span><span class="string">Gi</span></span><br></pre></td></tr></table></figure><ul><li>创建pvc对象<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># kubectl create -f jenkins-pvc.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;另外这里还需要使用到一个拥有相关权限的 serviceAccount：jenkins2，我们这里只是给jenkins 赋予了一些必要的权限，当然如果你对 serviceAccount 的权限不是很熟悉的话，我们给这个 sa 绑定一个 cluster-admin 的集群角色权限也是可以的，当然这样具有一定的安全风险：（jenkins-rbac.yaml）</p><h3 id="1-3-Jenkins-serviceAccount"><a href="#1-3-Jenkins-serviceAccount" class="headerlink" title="1.3 Jenkins serviceAccount"></a>1.3 Jenkins serviceAccount</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># cat jenkins-rbac.yaml</span></span><br><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> ServiceAccount</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> jenkins2</span><br><span class="line"><span class="symbol">  namespace:</span> kube-ops</span><br><span class="line"> </span><br><span class="line">---</span><br><span class="line"> </span><br><span class="line"><span class="symbol">kind:</span> Role</span><br><span class="line"><span class="symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> jenkins2</span><br><span class="line"><span class="symbol">  namespace:</span> kube-ops</span><br><span class="line"><span class="symbol">rules:</span></span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"pods"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"create"</span>,<span class="string">"delete"</span>,<span class="string">"get"</span>,<span class="string">"list"</span>,<span class="string">"patch"</span>,<span class="string">"update"</span>,<span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"pods/exec"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"create"</span>,<span class="string">"delete"</span>,<span class="string">"get"</span>,<span class="string">"list"</span>,<span class="string">"patch"</span>,<span class="string">"update"</span>,<span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"pods/log"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"get"</span>,<span class="string">"list"</span>,<span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"secrets"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"get"</span>]</span><br><span class="line"> </span><br><span class="line">---</span><br><span class="line"><span class="symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> RoleBinding</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> jenkins2</span><br><span class="line"><span class="symbol">  namespace:</span> kube-ops</span><br><span class="line"><span class="symbol">roleRef:</span></span><br><span class="line"><span class="symbol">  apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line"><span class="symbol">  kind:</span> Role</span><br><span class="line"><span class="symbol">  name:</span> jenkins2</span><br><span class="line"><span class="symbol">subjects:</span></span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line"><span class="symbol">    name:</span> jenkins2</span><br><span class="line"><span class="symbol">namespace:</span> kube-ops</span><br></pre></td></tr></table></figure><ul><li>创建 rbac 相关的资源对象<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># kubectl create -f jenkins-rbac.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;这里通过 ingress的形式来访问Jenkins 的 web 服务，Jenkins 服务端口为8080，50000 端口为agent，这个端口主要是用于 Jenkins 的 master 和 slave 之间通信使用的。(jenkins-ingress.yaml)</p><h3 id="1-4-Jenkins-对外提供访问"><a href="#1-4-Jenkins-对外提供访问" class="headerlink" title="1.4 Jenkins 对外提供访问"></a>1.4 Jenkins 对外提供访问</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat jenkins-ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">jenkins-ingress</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-ops</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">ci.xxlaila.cn</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><ul><li>创建 Jenkins 服务<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># kubectl create -f jenkins-deployment.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>创建完成后docke回去拉去镜像，需要等待一会，我们可以通过命令来进行查看jenkins是否部署成功</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># kubectl <span class="keyword">get</span> pods -n kube-ops</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">jenkins2<span class="number">-84f</span>476cbb-vz4b2   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">2</span>d19h</span><br></pre></td></tr></table></figure><p>部署完成以后我么可以通过在jenkins-ingress.yaml里面绑定过的域名进行访问，然后进行安装配置：<br><img src="https://img.xxlaila.cn/sfdsfdsf38432.png" alt="img"></p><blockquote><p>初始化的密码我们可以在 jenkins 的容器的日志中进行查看，也可以直接在 nfs 的共享数据目录中查看</p><p>$ cat /data/jenkins/jenkins2/secrets/initialAdminPassword</p></blockquote><p>完成配置，就可以到jenkins的界面，就和我们在vm下安装的jenkins没有任何的区别。<br><img src="https://img.xxlaila.cn/isdy823723894324.png" alt="img"></p><h2 id="2-配置jenkins"><a href="#2-配置jenkins" class="headerlink" title="2 配置jenkins"></a>2 配置jenkins</h2><p>接下来我们需要来配置 Jenkins，让他能够动态的生成 Slave 的 Pod，安装jenkins的插件清单</p><p><code>Kubernetes This plugin integrates Jenkins with Kubernetes</code><br>2.1 Kubernetes和Jenkins的结合<br>&nbsp;&nbsp;&nbsp;&nbsp;点击 系统管理(Manage Jenkins) —&gt; 系统配置(Configure System) —&gt; (拖到最下方)Add a new cloud —&gt; 选择 Kubernetes，然后填写 Kubernetes 和 Jenkins 配置信息。</p><p><img src="https://img.xxlaila.cn/di32sdsf.png" alt="img"></p><blockquote><p>注意 namespace，我们这里填 kube-ops，然后点击Test Connection，如果出现 Connection test successful 的提示信息证明Jenkins 已经可以和 Kubernetes 系统正常通信了，然后下方的 Jenkins URL 地址：<a href="http://jenkins2.kube-ops.svc.cluster.local:8080，这里的格式为服务名.namespace.svc.cluster.local:8080，根据上面创建的jenkins的服务名填写，我这里是之前创建的名为jenkins，如果是用上面我们创建的就应该是jenkins2" target="_blank" rel="noopener">http://jenkins2.kube-ops.svc.cluster.local:8080，这里的格式为服务名.namespace.svc.cluster.local:8080，根据上面创建的jenkins的服务名填写，我这里是之前创建的名为jenkins，如果是用上面我们创建的就应该是jenkins2</a></p></blockquote><h3 id="2-2、配置-Pod-Template"><a href="#2-2、配置-Pod-Template" class="headerlink" title="2.2、配置 Pod Template"></a>2.2、配置 Pod Template</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;配置 Jenkins Slave 运行的 Pod 模板，命名空间我们同样是用kube-ops，Labels 这里也非常重要，对于后面执行 Job 的时候需要用到该值，然后我们这里使用的是 cnych/jenkins:jnlp 这个镜像，这个镜像是在官方的 jnlp 镜像基础上定制的，加入了 kubectl 等一些实用的工具。<br><img src="https://img.xxlaila.cn/897kdfhgdkjb4.png" alt="img"><br><img src="https://img.xxlaila.cn/kjgsadsad8234632.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;另外需要注意我们这里需要在下面挂载一个主机目录，一个是 /var/run/docker.sock，该文件是用于 Pod 中的容器能够共享宿主机的 Docker，这就是说的 docker in docker 的方式，Docker 二进制文件我们已经打包到上面的镜像中了。如果在slave agent中想要访问kubernetes 集群中其他资源，我们还需要绑定之前创建的Service Account 账号:jenkins2</p><p><img src="https://img.xxlaila.cn/khsdif28734knsdfkds.png" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;另外还有几个参数需要注意，上图有一个pod寿命代理的空闲存活时间（分），意思是当处于空闲状态的时候保留 Slave Pod多长时间，这个参数最好我们保存默认就行了，如果你设置过大的话，Job 任务执行完成后，对应的 Slave Pod 就不会立即被销毁删除。到这里我们的 Kubernetes Plugin插件就算配置完成了</p><h3 id="2-3-Jenkins-测试"><a href="#2-3-Jenkins-测试" class="headerlink" title="2.3 Jenkins 测试"></a>2.3 Jenkins 测试</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes 插件的配置工作完成了，接下来我们就来添加一个 Job 任务，看是否能够在 Slave Pod 中执行，任务执行完成后看 Pod 是否会被销毁在 Jenkins 首页点击create new jobs，创建一个测试的任务，输入任务名称，然后我们选择 Freestyle project 类型的任务<br>&nbsp;&nbsp;&nbsp;&nbsp;新建一个job为simple-test，增加一个shell模块，shell模块里面增加简单的echo来测试slave的动态部署：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"测试 Kubernetes 动态生成 jenkins slave"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"==============docker in docker==========="</span></span><br><span class="line">docker info</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"=============kubectl============="</span></span><br><span class="line">kubectl <span class="built_in">get</span> pods -n kube-<span class="built_in">system</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/s94uskljdslfd.png" alt="img"></p><p>现在我们直接在页面点击做成的 Build now 触发构建即可，然后观察 Kubernetes 集群中 Pod 的变化</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># kubectl get pods -n kube-ops</span></span><br></pre></td></tr></table></figure><p>Kubernetes 界面也会出现jenkins agent的进行pod的进行部署。部署完成后随及删除pod。</p><p><img src="https://img.xxlaila.cn/sakhd89234klmds.png" alt="img"><br><img src="https://img.xxlaila.cn/nslkfhio3rsd.png" alt="img"></p><h2 id="3、Jenkins错误解决"><a href="#3、Jenkins错误解决" class="headerlink" title="3、Jenkins错误解决"></a>3、Jenkins错误解决</h2><p>第一次学习安装jenkins踩了很多坑，但是同时也学习了很多的，下面是在k8s上安装jenkins遇到的一些错误：</p><ul><li>打开jenkins页面的时候提示dns不能解析，洁面如下图：</li></ul><p><img src="https://img.xxlaila.cn/skajdh823648uesd.png" alt="img"></p><ul><li>查看jenkins的日志提示</li></ul><p><img src="https://img.xxlaila.cn/8243ihkdfnklsads.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;导致的问题有https、网络连接不通畅，这里我们需要吧https修改为http，需要修改jenkins的配置文件。然后再重新建立jenkins的pod。进入jenkins的目录修改hudson.model.UpdateCenter.xml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ cat hudson.model.UpdateCenter.xml</span><br><span class="line"><span class="meta">&lt;?xml version='1.1' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sites</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://updates.jenkins.io/update-center.json<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;在做k8s的时候一定要用证书，不然后期在做各种服务的时候都会遇到错误，因为docker默认去私有registory要https，kuber-api要https。当然没有使用https都可以换成http，在次重新部署jenkins以后提示系列信息。访问目录没有权限。</p><p><img src="https://img.xxlaila.cn/2864jksfhjdsh.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;进入nfs目录，需要修改下目录权限, 因为当映射本地数据卷时，/home/docker/jenkins目录的拥有者为root用户，而容器中jenkins user的uid为1000</p><p><code>$ sudo chown -R 1000:1000 /data/jenkins</code></p><blockquote><p>这里吧https解决了还是遇到提示网络不通。下图</p></blockquote><p><img src="https://img.xxlaila.cn/xnks94uoildsfs.png" alt="img"></p><blockquote><p>这里是dns的不能解析的问题，以下排错思路：登陆jenkins的容器里面查看路由是否正确</p></blockquote><p><img src="https://img.xxlaila.cn/382468365324.png" alt="img"></p><blockquote><p>然后在确认容器是否可以联通外网，还是dns不能解析<br><img src="https://img.xxlaila.cn/fnijwy4nkdsfkhdsf.png" alt="img"></p></blockquote><blockquote><p>这里ping 114没有问题，ping域名不能解析，说明是dns解析有问题。接着我们在查看容器的dns配置</p></blockquote><p><img src="https://img.xxlaila.cn/dkjfsg328943242.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;这里是dns问题。这里不阐述dns，参考第二章k8s dns,jenkins 在执行编译的时候提示: <code>‘Jenkins’ doesn’t have label ‘jnlp-agent’</code>,在系统配置配置里面进行测试连接k8s 的api提示如下错误</p><p><img src="https://img.xxlaila.cn/324768ksdjsfhds.png" alt="img"></p><ul><li>添加jenkins的secret认证</li></ul><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># kubectl get secret  -<span class="keyword">n</span> kube-ops</span><br><span class="line">NAME                     <span class="keyword">TYPE</span>                                  DATA   AGE</span><br><span class="line">default-<span class="keyword">token</span>-4gzkv      kubernetes.io/service-account-<span class="keyword">token</span>   3      13d</span><br><span class="line">jenkins2-<span class="keyword">token</span>-mjnw4     kubernetes.io/service-account-<span class="keyword">token</span>   3      14m</span><br><span class="line">prometheus-<span class="keyword">token</span>-84p87   kubernetes.io/service-account-<span class="keyword">token</span>   3      13d</span><br><span class="line"># kubectl <span class="keyword">describe</span> secret jenkins2-<span class="keyword">token</span>-mjnw4 -<span class="keyword">n</span> kube-ops</span><br><span class="line">Name:         jenkins2-<span class="keyword">token</span>-mjnw4</span><br><span class="line">Namespace:    kube-ops</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: jenkins2</span><br><span class="line">              kubernetes.io/service-account.uid: ffced652-2f6c-11e9-98a4-fa163e14c5bd</span><br><span class="line"></span><br><span class="line"><span class="keyword">Type</span>:  kubernetes.io/service-account-<span class="keyword">token</span></span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line"><span class="keyword">ca</span>.crt:     1025 bytes</span><br><span class="line">namespace:  8 bytes</span><br><span class="line"><span class="keyword">token</span>:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLW9wcyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJqZW5raW5zMi10b2tlbi1tam53NCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJqZW5raW5zMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImZmY2VkNjUyLTJmNmMtMTFlOS05OGE0LWZhMTYzZTE0YzViZCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLW9wczpqZW5raW5zMiJ9.PlPvO_AST4Q6tJJ2i2zGFfufFN1xjWLlHZ5ipTK0aU5CdR49OAropPQhQ0TjLRWf4Z66h847g28OCABmxO1cSG_-8UpwVsohFROTCOjx9Ka3KACmaIkw9Bvihm_lPQlaLykdyXxVDrfI6TobtG0Y5KnKPFj8CjkIFPk5ewTKpOm5pDKVDKu4W_4uOhSnISfLVUvHp8A_ojK_JCVnBBr0Py3UeuEF8vjJES0_yKNxPUtXQq-vkWEZecnAC_x5sfFJTA5aB18sEnxCaeMzgUxzi4IflNxxyVjdZrbq0UdS8llmfnGg5Ur7Zf-lu2ajdOlRdQp6VRPMcQmQaWoHUuoevg</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/2372837934232.png" alt="img"><br><img src="https://img.xxlaila.cn/djfjsr3897493432.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>ci/cd</tag>
      </tags>
  </entry>
  <entry>
    <title>kube nfs 动态存储</title>
    <url>/2019/08/12/kube-nfs-%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;nfs-client-provisioner是一个automatic provisioner，使用NFS作为存储，自动创建PV和对应的PVC，本身不提供NFS存储，需要外部先有一套NFS存储服务。</p><ul><li>PV以 ${namespace}-${pvcName}-${pvName}的命名格式提供（在NFS服务器上）</li><li>PV回收的时候以 archieved-${namespace}-${pvcName}-${pvName} 的命名格式（在NFS服务器上）</li></ul><p><a href="https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client" target="_blank" rel="noopener">官方访问地址</a></p><h2 id="1、权限体系构建"><a href="#1、权限体系构建" class="headerlink" title="1、权限体系构建"></a>1、权限体系构建</h2><h3 id="1-1、创建serviceaccount"><a href="#1-1、创建serviceaccount" class="headerlink" title="1.1、创建serviceaccount"></a>1.1、创建serviceaccount</h3><p>ServiceAccount也是一种账号, 供运行在pod中的进程使用, 为pod中的进程提供必要的身份证明.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat serviceaccount.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">  namespace: kube-test</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-2、创建role"><a href="#1-2、创建role" class="headerlink" title="1.2、创建role"></a>1.2、创建role</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat  clusterrole.yaml</span></span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  namespace: kube-test</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumes"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"delete"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumeclaims"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"storage.k8s.io"</span>]</span><br><span class="line">    resources: [<span class="string">"storageclasses"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"events"</span>]</span><br><span class="line">    verbs: [<span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"services"</span>, <span class="string">"endpoints"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"create"</span>,<span class="string">"list"</span>, <span class="string">"watch"</span>,<span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"extensions"</span>]</span><br><span class="line">    resources: [<span class="string">"podsecuritypolicies"</span>]</span><br><span class="line">    resourceNames: [<span class="string">"nfs-client-provisioner"</span>]</span><br><span class="line">    verbs: [<span class="string">"use"</span>]</span><br></pre></td></tr></table></figure><h3 id="1-3、账户和角色绑定"><a href="#1-3、账户和角色绑定" class="headerlink" title="1.3、账户和角色绑定"></a>1.3、账户和角色绑定</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat clusterrolebinding.yaml </span></span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: run-nfs-client-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nfs-client-provisioner</span><br><span class="line">    namespace: kube-test</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">执行创建</span><br><span class="line">kubectl create -f serviceaccount.yaml -f clusterrole.yaml -f clusterrolebinding.yaml</span><br></pre></td></tr></table></figure><h2 id="2、安装部署"><a href="#2、安装部署" class="headerlink" title="2、安装部署"></a>2、安装部署</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;下载deployment.yaml文件,需要修改NFS服务器所在的IP地址（10.10.10.60），以及NFS服务器共享的路径（/ifs/kubernetes），两处都需要修改为你实际的NFS服务器和共享目录</p><h3 id="2-1、部署存储供应卷"><a href="#2-1、部署存储供应卷" class="headerlink" title="2.1、部署存储供应卷"></a>2.1、部署存储供应卷</h3><blockquote><p>根据PVC的请求, 动态创建PV存储.</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat deployment.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">---</span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nfs-client-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nfs-client-provisioner</span><br><span class="line">      containers:</span><br><span class="line">        - name: nfs-client-provisioner</span><br><span class="line">          image: quay.io/external_storage/nfs-client-provisioner:latest</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: nfs-client-root</span><br><span class="line">              mountPath: /persistentvolumes</span><br><span class="line">          env:</span><br><span class="line">            - name: PROVISIONER_NAME</span><br><span class="line">              value: fuseim.pri/ifs</span><br><span class="line">            - name: NFS_SERVER</span><br><span class="line">              value: 172.21.16.244</span><br><span class="line">            - name: NFS_PATH</span><br><span class="line">              value: /data</span><br><span class="line">      volumes:</span><br><span class="line">        - name: nfs-client-root</span><br><span class="line">          nfs:</span><br><span class="line">            server: 10.10.10.60</span><br><span class="line">            path: /ifs/kubernetes</span><br></pre></td></tr></table></figure><pre><code>* 修改StorageClass文件并部署class.yaml</code></pre><p>此处可以不修改，或者修改provisioner的名字，需要与上面的deployment的PROVISIONER_NAME名字一致</p><h3 id="2-2、创建storageclass"><a href="#2-2、创建storageclass" class="headerlink" title="2.2、创建storageclass"></a>2.2、创建storageclass</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat class.yaml</span></span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: managed-nfs-storage</span><br><span class="line">provisioner: fuseim.pri/ifs <span class="comment"># or choose another name, must match deployment's env PROVISIONER_NAME'</span></span><br><span class="line">parameters:</span><br><span class="line">  archiveOnDelete: <span class="string">"false"</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1、查看StorageClass"><a href="#2-2-1、查看StorageClass" class="headerlink" title="2.2.1、查看StorageClass"></a>2.2.1、查看StorageClass</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get sc</span></span><br><span class="line"><span class="comment"># kubectl get storageclass</span></span><br><span class="line">NAME                  PROVISIONER      AGE</span><br><span class="line">managed-nfs-storage   fuseim.pri/ifs   19h</span><br></pre></td></tr></table></figure><h4 id="2-2-2、设置默认后端存储"><a href="#2-2-2、设置默认后端存储" class="headerlink" title="2.2.2、设置默认后端存储"></a>2.2.2、设置默认后端存储</h4><p>设置这个default名字的SC为Kubernetes的默认存储后端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl patch storageclass managed-nfs-storage -p '&#123;"metadata": &#123;"annotations":&#123;"storageclass.kubernetes.io/is-default-class":"true"&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3、测试创建PVC"><a href="#2-2-3、测试创建PVC" class="headerlink" title="2.2.3、测试创建PVC"></a>2.2.3、测试创建PVC</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat test-claim.yaml </span></span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-claim</span><br><span class="line">  namespace: kube-test</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"managed-nfs-storage"</span></span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Mi</span><br></pre></td></tr></table></figure><h4 id="2-2-4、启动测试POD"><a href="#2-2-4、启动测试POD" class="headerlink" title="2.2.4、启动测试POD"></a>2.2.4、启动测试POD</h4><p>POD文件如下，作用就是在test-claim的PV里touch一个SUCCESS文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat test-pod.yaml </span></span><br><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-pod</span><br><span class="line">  namespace: kube-test</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: <span class="built_in">test</span>-pod</span><br><span class="line">    image: docker.io/busybox:1.24</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - <span class="string">"/bin/sh"</span></span><br><span class="line">    args:</span><br><span class="line">      - <span class="string">"-c"</span></span><br><span class="line">      - <span class="string">"touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1"</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">      - name: nfs-pvc</span><br><span class="line">        mountPath: <span class="string">"/mnt"</span></span><br><span class="line">  restartPolicy: <span class="string">"Never"</span></span><br><span class="line">  volumes:</span><br><span class="line">    - name: nfs-pvc</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: <span class="built_in">test</span>-claim</span><br></pre></td></tr></table></figure><h4 id="2-2-5、校验是否成功"><a href="#2-2-5、校验是否成功" class="headerlink" title="2.2.5、校验是否成功"></a>2.2.5、校验是否成功</h4><p>去NFS共享目录查看有没有SUCCESS文件<br><img src="https://img.xxlaila.cn/%E6%88%AA%E5%9B%BE.png" alt="img"><br><img src="https://img.xxlaila.cn/8934nsdlsa.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pvc -n kube-test</span></span><br><span class="line">NAME         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line"><span class="built_in">test</span>-claim   Bound    pvc-f8e08fa5-2de2-11e9-8991-fa163e14c5bd   1Mi        RWX            managed-nfs-storage   20h</span><br></pre></td></tr></table></figure><h3 id="2-3、更改PersistentVolumes-中的一个回收策略"><a href="#2-3、更改PersistentVolumes-中的一个回收策略" class="headerlink" title="2.3、更改PersistentVolumes 中的一个回收策略"></a>2.3、更改PersistentVolumes 中的一个回收策略</h3><ul><li><p>查看集群中PersistentVolumes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pv</span></span><br></pre></td></tr></table></figure></li><li><p>更改PersistentVolumes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl patch pv pvc-f8e08fa5-2de2-11e9-8991-fa163e14c5bd -p '&#123;"spec":&#123;"persistentVolumeReclaimPolicy":"Retain"&#125;&#125;'</span></span><br><span class="line">persistentvolume/pvc-f8e08fa5-2de2-11e9-8991-fa163e14c5bd patched</span><br></pre></td></tr></table></figure></li><li><p>查看更改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pv</span></span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>nfs</tag>
      </tags>
  </entry>
  <entry>
    <title>pvc pv</title>
    <url>/2019/08/12/pvc-pv/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;PersistentVolume（pv）和PersistentVolumeClaim（pvc）是k8s提供的两种API资源，用于抽象存储细节。管理员关注于如何通过pv提供存储功能而无需关注用户如何使用，同样的用户只需要挂载pvc到容器中而不需要关注存储卷采用何种技术实现。<br>&nbsp;&nbsp;&nbsp;&nbsp;pvc和pv的关系与pod和node关系类似，前者消耗后者的资源。pvc可以向pv申请指定大小的存储资源并设置访问模式,这就可以通过Provision -&gt; Claim 的方式，来对存储资源进行控制。</p><h2 id="2、生命周期"><a href="#2、生命周期" class="headerlink" title="2、生命周期"></a>2、生命周期</h2><p>pv和pvc遵循以下生命周期：</p><ul><li>供应准备。通过集群外的存储系统或者云平台来提供存储持久化支持。</li></ul><ul><li><p>静态提供：管理员手动创建多个PV，供PVC使用。</p></li><li><p>动态提供：动态创建PVC特定的PV，并绑定。</p><ul><li>绑定。用户创建pvc并指定需要的资源和访问模式。在找到可用pv之前，pvc会保持未绑定状态。</li><li>使用。用户可在pod中像volume一样使用pvc。</li><li>释放。用户删除pvc来回收存储资源，pv将变成“released”状态。由于还保留着之前的数据，这些数据需要根据不同的策略来处理，否则这些存储资源无法被其他pvc使用。</li><li>回收(Reclaiming)。pv可以设置三种回收策略：保留（Retain），回收（Recycle）和删除（Delete）。</li></ul></li><li><p>保留策略：允许人工处理保留的数据。</p></li><li><p>删除策略：将删除pv和外部关联的存储资源，需要插件支持。</p></li><li><p>回收策略：将执行清除操作，之后可以被新的pvc使用，需要插件支持。</p></li></ul><blockquote><p><em>目前只有NFS和HostPath类型卷支持回收策略，AWS EBS,GCE PD,Azure Disk和Cinder支持删除(Delete)策略。</em></p></blockquote><h3 id="2-1、Provisioning"><a href="#2-1、Provisioning" class="headerlink" title="2.1、Provisioning"></a>2.1、Provisioning</h3><p>两种方式提供的PV资源供给</p><a id="more"></a><p>static</p><ul><li>通过集群管理者创建多个PV，为集群“使用者”提供存储能力而隐藏真实存储的细节。并且存在于kubenretes api中，可被直接使用。</li></ul><p>dynamic</p><ul><li>动态卷供给是kubernetes独有的功能，这一功能允许按需创建存储建。在此之前，集群管理员需要事先在集群外由存储提供者或者云提供商创建</li><li>存储卷，成功之后再创建PersistentVolume对象，才能够在kubernetes中使用。动态卷供给能让集群管理员不必进行预先创建存储卷，而是随着用户需求进行创建。在1.5版本提高了动态卷的弹性和可用性。</li></ul><h2 id="3、PV类型"><a href="#3、PV类型" class="headerlink" title="3、PV类型"></a>3、PV类型</h2><p>pv支持以下类型:</p><pre><code>* GCEPersistentDisk
* AWSElasticBlockStore
* NFS
* iSCSI
* RBD (Ceph Block Device)
* Glusterfs
* AzureFile
* AzureDisk
* CephFS
* cinder
* FC
* FlexVolume
* Flocker
* PhotonPersistentDisk
* Quobyte
* VsphereVolume
* HostPath (single node testing only – local storage is not supported in any way and WILL NOT WORK in a multi-node cluster)</code></pre><h3 id="3-1、PV属性"><a href="#3-1、PV属性" class="headerlink" title="3.1、PV属性"></a>3.1、PV属性</h3><ul><li>访问模式,与pv的语义相同。在请求资源时使用特定模式。</li><li>资源,申请的存储资源数额。</li></ul><h3 id="3-2、PV卷阶段状态"><a href="#3-2、PV卷阶段状态" class="headerlink" title="3.2、PV卷阶段状态"></a>3.2、PV卷阶段状态</h3><ul><li>Available – 资源尚未被claim使用</li><li>Bound – 卷已经被绑定到claim了</li><li>Released – claim被删除，卷处于释放状态，但未被集群回收。</li><li>Failed – 卷自动回收失败</li></ul><h2 id="4、利用nfs创建pv-pvc"><a href="#4、利用nfs创建pv-pvc" class="headerlink" title="4、利用nfs创建pv_pvc"></a>4、利用nfs创建pv_pvc</h2><p>准备一台机器，搭建NFS服务，nfs搭建这里不阐述，</p><h3 id="4-1、在master节点创建pv"><a href="#4-1、在master节点创建pv" class="headerlink" title="4.1、在master节点创建pv"></a>4.1、在master节点创建pv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat pv.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: opspv</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 20Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/jenkins</span><br><span class="line">    server: 172.21.16.236</span><br><span class="line"><span class="comment"># kubectl create -f pv.yaml</span></span><br><span class="line"><span class="comment"># kubectl get pv</span></span><br></pre></td></tr></table></figure><h3 id="4-2、在master节点上创建pvc"><a href="#4-2、在master节点上创建pvc" class="headerlink" title="4.2、在master节点上创建pvc"></a>4.2、在master节点上创建pvc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat pvc.yaml</span></span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: opspv</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 20Gi</span><br><span class="line"><span class="comment"># kubectl create -f pvc.yaml</span></span><br><span class="line"><span class="comment"># kubectl get pvc</span></span><br></pre></td></tr></table></figure><h3 id="4-3、创建pod挂载pv-pvc"><a href="#4-3、创建pod挂载pv-pvc" class="headerlink" title="4.3、创建pod挂载pv_pvc"></a>4.3、创建pod挂载pv_pvc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat jenkins-deployment.yaml </span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins2</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: jenkins2</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 10</span><br><span class="line">      containers:</span><br><span class="line">      - name: jenkins</span><br><span class="line">        image: jenkins/jenkins:lts</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          name: web</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 50000</span><br><span class="line">          name: agent</span><br><span class="line">          protocol: TCP</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">            memory: 1Gi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 512Mi</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /login</span><br><span class="line">            port: 8080</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          failureThreshold: 12</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /login</span><br><span class="line">            port: 8080</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          failureThreshold: 12</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: jenkinshome</span><br><span class="line">          subPath: jenkins2</span><br><span class="line">          mountPath: /var/jenkins_home</span><br><span class="line">        env:</span><br><span class="line">        - name: LIMITS_MEMORY</span><br><span class="line">          valueFrom:</span><br><span class="line">            resourceFieldRef:</span><br><span class="line">              resource: limits.memory</span><br><span class="line">              divisor: 1Mi</span><br><span class="line">        - name: JAVA_OPTS</span><br><span class="line">          value: -Xmx$(LIMITS_MEMORY)m -XshowSettings:vm -Dhudson.slaves.NodeProvisioner.initialDelay=0 -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85 -Duser.timezone=Asia/Shanghai</span><br><span class="line">      securityContext:</span><br><span class="line">        fsGroup: 1000</span><br><span class="line">      volumes:</span><br><span class="line">      - name: jenkinshome</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: opspvc</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins2</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  labels:</span><br><span class="line">    app: jenkins2</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: jenkins2</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 30002</span><br><span class="line">  - name: agent</span><br><span class="line">    port: 50000</span><br><span class="line">    targetPort: agent</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>pvc,pv,kubernetes,存储</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes 单机安装</title>
    <url>/2019/08/12/kubernetes-%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><blockquote><p>一个master节点，四个node节点<br>master节点ip</p><ul><li>172.21.16.244<br>node节点ip</li><li>172.21.16.24</li><li>172.21.16.231</li><li>172.21.16.202</li><li>172.21.16.55</li></ul></blockquote><ul><li>以下是每一个节点上均进行操作</li></ul><h2 id="2、服务器添加阿里云yum源"><a href="#2、服务器添加阿里云yum源" class="headerlink" title="2、服务器添加阿里云yum源"></a>2、服务器添加阿里云yum源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">  http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="3、重新建立yum缓存"><a href="#3、重新建立yum缓存" class="headerlink" title="3、重新建立yum缓存"></a>3、重新建立yum缓存</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install epel-release &amp;&amp;yum clean all &amp;&amp;yum makecach</span></span><br></pre></td></tr></table></figure><ul><li>记得同步系统的时间</li></ul><h2 id="3、配置转发请求"><a href="#3、配置转发请求" class="headerlink" title="3、配置转发请求"></a>3、配置转发请求</h2><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">关闭swap</span><br><span class="line"><span class="comment"># sudo swapoff -a</span></span><br><span class="line"><span class="comment"># cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># sysctl --system</span></span><br></pre></td></tr></table></figure><h2 id="4、安装docker"><a href="#4、安装docker" class="headerlink" title="4、安装docker"></a>4、安装docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install docker</span></span><br><span class="line"><span class="comment"># systemctl enable docker &amp;&amp; systemctl start docker</span></span><br></pre></td></tr></table></figure><h2 id="5、安装k8s-需要的插件"><a href="#5、安装k8s-需要的插件" class="headerlink" title="5、安装k8s 需要的插件"></a>5、安装k8s 需要的插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install kubelet kubeadm kubectl kubernetes-cni</span></span><br><span class="line"><span class="comment"># systemctl enable kubelet &amp;&amp; systemctl start kubelet</span></span><br></pre></td></tr></table></figure><ul><li>修改为 kubelet 为Cgroup模式</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span></span><br><span class="line">Environment=<span class="string">"KUBELET_CGROUP_ARGS=--cgroup-driver=systemd"</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure><h2 id="6、拉取镜像"><a href="#6、拉取镜像" class="headerlink" title="6、拉取镜像"></a>6、拉取镜像</h2><p>新建一个shell 拉取镜像到本地(所有节点均操作)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">images=(kube-proxy:v1.13.0 kube-scheduler:v1.13.0 kube-controller-manager:v1.13.0 kube-apiserver:v1.13.0 etcd:3.2.24 coredns:1.2.6 pause:3.1 kubernetes-dashboard-amd64:v1.10.0 kubernetes-dashboard-init-amd64:v1.0.1  k8s-dns-sidecar-amd64:1.14.9 k8s-dns-kube-dns-amd64:1.14.9 k8s-dns-dnsmasq-nanny:1.15.0 heapster:v1.5.2 kubernetes-dashboard-arm:v1.10.0)</span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">docker pull xxlaila/<span class="variable">$imageName</span></span><br><span class="line">docker tag xxlaila/<span class="variable">$imageName</span> k8s.gcr.io/<span class="variable">$imageName</span></span><br><span class="line">docker rmi xxlaila/<span class="variable">$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>以下操作是在k8s的master进行操作</li></ul><h2 id="7、初始化相关镜像"><a href="#7、初始化相关镜像" class="headerlink" title="7、初始化相关镜像"></a>7、初始化相关镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm init --kubernetes-version=v1.13.0 --pod-network-cidr=10.244.0.0/16</span></span><br><span class="line"><span class="comment"># 记下这句话，后面node节点加入需要</span></span><br><span class="line"><span class="comment"># kubeadm join 172.21.17.4:6443 --token 0mdk7x.du3cn19qm1jl2b0e --discovery-token-ca-cert-hash sha256:19bf79b41a931735b1f2f5138e1daa436ab26a4f19781ccf2015cff749ddb4b9</span></span><br></pre></td></tr></table></figure><h3 id="7-1、执行创建目录"><a href="#7-1、执行创建目录" class="headerlink" title="7.1、执行创建目录"></a>7.1、执行创建目录</h3><p>后面在生成证书的时候需要</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="7-2、查看验证"><a href="#7-2、查看验证" class="headerlink" title="7.2、查看验证"></a>7.2、查看验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get componentstatus</span></span><br><span class="line">NAME                 STATUS    MESSAGE              ERROR</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>: <span class="string">"true"</span>&#125;</span><br><span class="line"><span class="comment"># kubectl get cs</span></span><br><span class="line">NAME                 STATUS    MESSAGE              ERROR</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>: <span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="8、安装flannel-网络"><a href="#8、安装flannel-网络" class="headerlink" title="8、安装flannel 网络"></a>8、安装flannel 网络</h2><blockquote><p>(配置文件和目录每个node都要建立)</p></blockquote><h3 id="8-1-创建flannel配置文件"><a href="#8-1-创建flannel配置文件" class="headerlink" title="8.1 创建flannel配置文件"></a>8.1 创建flannel配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /etc/cni/net.d/</span></span><br><span class="line"><span class="comment"># cat &lt;&lt;EOF&gt; /etc/cni/net.d/10-flannel.conf</span></span><br><span class="line">&#123;</span><br><span class="line">“name”: “cbr0”,</span><br><span class="line">“<span class="built_in">type</span>”: “flannel”,</span><br><span class="line">“delegate”: &#123;</span><br><span class="line">“isDefaultGateway”: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="8-2-创建网络配置"><a href="#8-2-创建网络配置" class="headerlink" title="8.2 创建网络配置"></a>8.2 创建网络配置</h3><blockquote><p>(只需要在主节点操作即可)</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.extensions/kube-flannel-ds-amd64 created</span><br><span class="line">daemonset.extensions/kube-flannel-ds-arm64 created</span><br><span class="line">daemonset.extensions/kube-flannel-ds-arm created</span><br><span class="line">daemonset.extensions/kube-flannel-ds-ppc64le created</span><br><span class="line">daemonset.extensions/kube-flannel-ds-s390x created</span><br></pre></td></tr></table></figure><h2 id="9、查看命名空间"><a href="#9、查看命名空间" class="headerlink" title="9、查看命名空间"></a>9、查看命名空间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get ns</span></span><br><span class="line">NAME          STATUS   AGE</span><br><span class="line">default       Active   27m</span><br><span class="line">kube-public   Active   27m</span><br><span class="line">kube-system   Active   27m</span><br></pre></td></tr></table></figure><h2 id="10、查看system的pod"><a href="#10、查看system的pod" class="headerlink" title="10、查看system的pod"></a>10、查看system的pod</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n kube-system</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-86c58d9df4-4gfvd                     1/1     Running   0          27m</span><br><span class="line">coredns-86c58d9df4-cxtz5                     1/1     Running   0          27m</span><br><span class="line">etcd-k8s-zxc-test-3.kxl                      1/1     Running   0          26m</span><br><span class="line">kube-apiserver-k8s-zxc-test-3.kxl            1/1     Running   0          26m</span><br><span class="line">kube-controller-manager-k8s-zxc-test-3.kxl   1/1     Running   0          26m</span><br><span class="line">kube-flannel-ds-nh95x                        1/1     Running   0          15m</span><br><span class="line">kube-proxy-kvlng                             1/1     Running   0          27m</span><br><span class="line">kube-scheduler-k8s-zxc-test-3.kxl            1/1     Running   0          27m</span><br></pre></td></tr></table></figure><h2 id="11、节点加入到kuberneter"><a href="#11、节点加入到kuberneter" class="headerlink" title="11、节点加入到kuberneter"></a>11、节点加入到kuberneter</h2><ul><li>以下是每个node节点执行</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm join 172.21.17.4:6443 --token 0mdk7x.du3cn19qm1jl2b0e --discovery-token-ca-cert-hash sha256:19bf79b41a931735b1f2f5138e1daa436ab26a4f19781ccf2015cff749ddb4b9</span></span><br></pre></td></tr></table></figure><ul><li>查看节点是否加入</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line"><span class="comment"># 使用kubectl get pods命令来查看部署状态</span></span><br><span class="line"><span class="comment"># kubectl get pods --all-namespaces</span></span><br></pre></td></tr></table></figure><h2 id="12、安装kubernetes-dashboard"><a href="#12、安装kubernetes-dashboard" class="headerlink" title="12、安装kubernetes dashboard"></a>12、安装kubernetes dashboard</h2><p>下载官网的dashboard文件修改kubernetes-dashboard.yaml文件,用修改之后的kubernetes-dashboard.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/xxlaila/kubernetes-yaml.git</span></span><br><span class="line"><span class="comment"># 执行创建dashboard</span></span><br><span class="line"><span class="comment"># cd kubernetes-yaml/kubernetes-dashboard</span></span><br><span class="line"><span class="comment"># kubectl apply -f kubernetes-dashboard.yaml</span></span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br></pre></td></tr></table></figure><h2 id="13、查看dashboard部署是否成功"><a href="#13、查看dashboard部署是否成功" class="headerlink" title="13、查看dashboard部署是否成功"></a>13、查看dashboard部署是否成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n kube-system</span></span><br></pre></td></tr></table></figure><h3 id="13-1、查看dashboard-info"><a href="#13-1、查看dashboard-info" class="headerlink" title="13.1、查看dashboard info"></a>13.1、查看dashboard info</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe svc kubernetes-dashboard -n kube-system</span></span><br></pre></td></tr></table></figure><h3 id="13-2、查看dashboard部署在那个节点"><a href="#13-2、查看dashboard部署在那个节点" class="headerlink" title="13.2、查看dashboard部署在那个节点"></a>13.2、查看dashboard部署在那个节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl  get pods -n kube-system -o wide</span></span><br></pre></td></tr></table></figure><h3 id="13-3、查看service-节点端口"><a href="#13-3、查看service-节点端口" class="headerlink" title="13.3、查看service 节点端口"></a>13.3、查看service 节点端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get service -n kube-system -o wide</span></span><br></pre></td></tr></table></figure><h3 id="13-4、创建dashboard-admin-账户"><a href="#13-4、创建dashboard-admin-账户" class="headerlink" title="13.4、创建dashboard admin 账户"></a>13.4、创建dashboard admin 账户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f admin-user.yaml</span></span><br><span class="line">获取tokens</span><br><span class="line"><span class="comment"># kubectl describe serviceaccount admin -n kube-system</span></span><br><span class="line">Name:                admin</span><br><span class="line">Namespace:           kube-system</span><br><span class="line">Labels:              k8s-app=kubernetes-dashboard</span><br><span class="line">Annotations:         kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                       &#123;<span class="string">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="string">"kind"</span>:<span class="string">"ServiceAccount"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"labels"</span>:&#123;<span class="string">"k8s-app"</span>:<span class="string">"kubernetes-dashboard"</span>&#125;,<span class="string">"name"</span>:<span class="string">"admin"</span>,<span class="string">"namesp...</span></span><br><span class="line"><span class="string">Image pull secrets:  &lt;none&gt;</span></span><br><span class="line"><span class="string">Mountable secrets:   admin-token-kxs6k</span></span><br><span class="line"><span class="string">Tokens:              admin-token-kxs6k</span></span><br><span class="line"><span class="string">Events:              &lt;none&gt;</span></span><br><span class="line"><span class="string">查看token 信息</span></span><br><span class="line"><span class="string"># kubectl describe secret admin-token-kxs6k -n kube-system</span></span><br></pre></td></tr></table></figure><h2 id="14、dashboard-访问"><a href="#14、dashboard-访问" class="headerlink" title="14、dashboard 访问"></a>14、dashboard 访问</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;利用节点ip+30001 端口进行访问。访问之前需要在master节点生成证书，把证书(kubecfg.p12)下载到本地，进行导入到浏览器，这里使用火狐浏览器，google浏览器导入,不成功，生产证书之前记得第9步已操作</p><h3 id="14-1、生成证书"><a href="#14-1、生成证书" class="headerlink" title="14.1、生成证书"></a>14.1、生成证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep 'client-certificate-data' ~/.kube/config | head -n 1 | awk '&#123;print $2&#125;' | base64 -d &gt;&gt; kubecfg.crt</span></span><br><span class="line"><span class="comment"># grep 'client-key-data' ~/.kube/config | head -n 1 | awk '&#123;print $2&#125;' | base64 -d &gt;&gt; kubecfg.key</span></span><br><span class="line"><span class="comment"># openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name "kubernetes-client"</span></span><br></pre></td></tr></table></figure><h3 id="14-2、dashboard-配置修改"><a href="#14-2、dashboard-配置修改" class="headerlink" title="14.2、dashboard 配置修改"></a>14.2、dashboard 配置修改</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;kubernetes dashboard v1.10.0使用的是双因子登陆，默认token失效的时间是900秒，15分钟，每15分钟就要进行一次认证。我们可以功过修改token-ttl参数来设置，主要是修改dashboard.yaml文件，并重新建立即可</p><ul><li>在配置文件里面添加<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ports:</span><br><span class="line">- containerPort: 8443</span><br><span class="line">  protocol: TCP</span><br><span class="line">args:</span><br><span class="line">  - --auto-generate-certificates</span><br><span class="line">  - --token-ttl=43200</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>重建dashboard,通过利用http添加端口30001，然后利用tonken进行验证登陆,安装失败清理环境</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm reset</span></span><br><span class="line">查看加入集群token</span><br><span class="line"><span class="comment"># kubeadm token list</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 5.5 安装DRBD</title>
    <url>/2019/08/11/Centos-5-5-%E5%AE%89%E8%A3%85DRBD/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>Centos5.5 32bit安装DRBD</p><ul><li>安装前准备</li></ul><table><thead><tr><th>节点类型</th><th>IP地址规划</th><th>主机名</th></tr></thead><tbody><tr><td>主用节点</td><td>192.168.1.101</td><td>node2</td></tr><tr><td>备用节点</td><td>192.168.1.102</td><td>node1</td></tr><tr><td>磁盘</td><td>两台10G磁盘</td><td></td></tr></tbody></table><h2 id="在主节点安装DRBD"><a href="#在主节点安装DRBD" class="headerlink" title="在主节点安装DRBD"></a>在主节点安装DRBD</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># yum -y install kmod-drbd83 drbd83</span></span><br></pre></td></tr></table></figure><p>安装成功之后/sbin目录下面有drbdadm，drbdmeta，drbdsetup命令，以及/etc /init.d/drbd启动脚本。</p><ul><li>备用节点安装DRBD</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># yum -y install kmod-drbd83 drbd83</span></span><br></pre></td></tr></table></figure><blockquote><p>安装完成后。默认配置文件/etc/drbd.conf，以下是两台的主机配置实例:</p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># cat /etc/drbd.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># please have a a look at the example configuration file in</span></span><br><span class="line"><span class="comment"># /usr/share/doc/drbd83/drbd.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># drbd.conf</span></span><br><span class="line"><span class="comment"># create by dba.gao@gmail.com at 2010-10-11</span></span><br><span class="line">global &#123;</span><br><span class="line">    <span class="comment"># minor-count 64;</span></span><br><span class="line">    <span class="comment"># dialog-refresh 5; # 5 seconds</span></span><br><span class="line">    <span class="comment"># disable-ip-verification;</span></span><br><span class="line">usage-count no; <span class="comment">#是否参加DRBD使用者统计，默认yes</span></span><br><span class="line">&#125;</span><br><span class="line">common &#123;</span><br><span class="line">    syncer &#123; rate <span class="comment">#设置主备节点同步时的网络速率最大值，单位是字节。</span></span><br><span class="line">        200M; &#125;</span><br><span class="line">&#125;</span><br><span class="line">resource r0 &#123;</span><br><span class="line">protocol C;</span><br><span class="line"><span class="comment"># 使用drbd的第三种同步协议,表示收到远程主机的写入确认后,则认为写入完成</span></span><br><span class="line">handlers &#123;</span><br><span class="line">    pri-on-incon-degr <span class="string">"echo o &gt; /proc/sysrq-trigger ; halt -f"</span>;</span><br><span class="line">    pri-lost-after-sb <span class="string">"echo o &gt; /proc/sysrq-trigger ; halt -f"</span>;</span><br><span class="line">    <span class="built_in">local</span>-io-error <span class="string">"echo o &gt; /proc/sysrq-trigger ; halt -f"</span>;</span><br><span class="line">fence-peer <span class="string">"/usr/lib64/heartbeat/drbd-peer-outdater -t 5"</span>;</span><br><span class="line">pri-lost <span class="string">"echo pri-lost. Have a look at the log files. | mail -s 'DRBD Alert' root"</span>;</span><br><span class="line">    split-brain <span class="string">"/usr/lib/drbd/notify-split-brain.sh root"</span>;</span><br><span class="line">    out-of-sync <span class="string">"/usr/lib/drbd/notify-out-of-sync.sh root"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">net &#123;</span><br><span class="line"><span class="comment"># timeout 60;</span></span><br><span class="line"><span class="comment"># connect-int 10;</span></span><br><span class="line"><span class="comment"># ping-int 10;</span></span><br><span class="line"><span class="comment"># max-buffers 2048;</span></span><br><span class="line"><span class="comment"># max-epoch-size 2048;</span></span><br><span class="line">cram-hmac-alg <span class="string">"sha1"</span>;</span><br><span class="line">shared-secret <span class="string">"MySQL-HA"</span>;</span><br><span class="line"><span class="comment"># DRBD同步时使用的验证方式和密码信息。</span></span><br><span class="line">&#125;</span><br><span class="line">disk &#123;</span><br><span class="line">    on-io-error detach;</span><br><span class="line">fencing resource-only;</span><br><span class="line">&#125;</span><br><span class="line">startup &#123;</span><br><span class="line">    wfc-timeout 120;</span><br><span class="line">    degr-wfc-timeout 120;</span><br><span class="line">  &#125;</span><br><span class="line">  device        /dev/drbd0;</span><br><span class="line"><span class="comment">#这里配置档我们挂在的系统的磁盘标示驱动盘符; on node2 &#123;</span></span><br><span class="line"><span class="comment">#每个主机的说明以on开头,后面是hostname(uname - n)，在后面的&#123;&#125;中为这个主机的配置。</span></span><br><span class="line">disk /dev/sdb5;</span><br><span class="line"><span class="comment">#/dev/drbd0使用的磁盘分区是/dev/sdb5</span></span><br><span class="line">address     192.168.1.101:7788;</span><br><span class="line">IP地址以及DRBD使用的端口 meta-disk internal;</span><br><span class="line">&#125;</span><br><span class="line">on node1 &#123;</span><br><span class="line">disk /dev/sdb5;</span><br><span class="line">address 192.168.1.102:7788; 和上述一样</span><br><span class="line">meta-disk internal; <span class="comment">#drbd的元数据存放方式 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;配置完成后启动节点，在启动DRBD之前,你需要分别在两台主机的hd分区上,创建供DRBD记录信息的数据块.分别在两台主机上执行(这里注意:在创建分区之前我们需要吧磁盘的分区分好)</p><p><img src alt="img"></p><p>分区分好以后先不要挂在和格式化(挂在以后创建会报错)，然后创建供DRBD记 录信息的数据块</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># drbdadm create-md r0</span></span><br><span class="line">[root@node1 ~]<span class="comment"># drbdadm create-md r0</span></span><br><span class="line">或者执行drbdadm create-md all</span><br></pre></td></tr></table></figure><ul><li><p>在两个节点启动服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># /etc/init.d/drbd start</span></span><br><span class="line">[root@node1 ~]<span class="comment"># /etc/init.d/drbd start</span></span><br></pre></td></tr></table></figure></li><li><p>在任意节点查看节点状态</p></li></ul><blockquote><p>1: cs:Connected ro:Secondary/Secondary ds:Inconsistent/Inconsistent C r—-<br>ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:b oos:2007644</p></blockquote><blockquote><p>对输出的含义解释如下:<br>ro表示角色信息，第一次启动drbd时，两个drbd节点默认都处于Secondary状态,<br>ds是磁盘状态信息，“Inconsistent/Inconsisten”，即为“不一致/不一致” 状态，表示两个节点的磁盘数据处于不一致状态。<br>Ns表示网络发送的数据包信息。</p></blockquote><h3 id="这里我设置是node2"><a href="#这里我设置是node2" class="headerlink" title="这里我设置是node2"></a>这里我设置是node2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># drbdsetup /dev/drbd1 primary –o 或者执行下面命令也是可以的</span></span><br><span class="line">[root@node2 ~]<span class="comment">#drbdadm -- --overwrite-data-of-peer primary all</span></span><br></pre></td></tr></table></figure><p>第一次执行完此命令后，在后面如果需要设置哪个是主节点时，就可以使用另 外一个命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment">#/sbin/drbdadm primary r0或者/sbin/drbdadm primary all</span></span><br></pre></td></tr></table></figure><blockquote><p>执行此命令后，开始同步两台机器对应磁盘的数据</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ node2 ~]<span class="comment">#cat /proc/drbd</span></span><br><span class="line">1: cs:SyncSource ro:Primary/Secondary ds:UpToDate/Inconsistent C r--- -</span><br><span class="line">ns:576224 nr:0 dw:0 dr:581760 al:0 bm:34 lo:84 pe:369 ua:256 ap:0 ep:1 wo:b oos:1443196</span><br><span class="line">[====&gt;...............] sync<span class="string">'ed: 28.4% (1443196/2007644)K delay_probe: 69</span></span><br><span class="line"><span class="string">finish: 0:03:56 speed: 6,024 (5,876) K/sec</span></span><br></pre></td></tr></table></figure><blockquote><p>最后格式化文件系统,由于mount操作只能在主节点进行，所以只有设置了主节点后才能格式化磁盘分 区，然后挂载:</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># mkfs -t ext3 /dev/drbd0</span></span><br><span class="line">[root@node2 ~]<span class="comment"># mount /dev/drbd0 /data/</span></span><br><span class="line">[root@node2 ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem</span><br><span class="line">/dev/sda3</span><br><span class="line">/dev/sda1</span><br><span class="line">tmpfs</span><br><span class="line">/dev/drbd0</span><br><span class="line">Size  Used Avail Use% Mounted on</span><br><span class="line"> 28G  3.7G   23G  15% /</span><br><span class="line">487M   22M  440M   5% /boot</span><br><span class="line">125M     0  125M   0% /dev/shm</span><br><span class="line">9.9G  151M  9.2G   2% /data</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;Dw是磁盘写信息;Dr是磁盘读信息;启动DRBD后设置主次节点，选择需要设置主机的主节点，然后执行如下命令: 这里我设置是node2</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>存储,Centos</category>
      </categories>
      <tags>
        <tag>drdb</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle ORA-12519</title>
    <url>/2019/08/10/oracle-ORA-12519/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><blockquote><p>oracle ORA-12519错误解决<br>今天遇到做系统压力测试的时候，系统报了一个错误<br>OERR: ORA-12519 TNS:no appropriate service handler found</p></blockquote><p><img src="https://img.xxlaila.cn/ORA-12519-error.png" alt="img"></p><p>在网上搜索了一下oralc的错误信息ORA-12519，解决办法挺多的，这里记录一下</p><h3 id="登陆oracle的服务器，在登陆oracle数据库"><a href="#登陆oracle的服务器，在登陆oracle数据库" class="headerlink" title="登陆oracle的服务器，在登陆oracle数据库"></a>登陆oracle的服务器，在登陆oracle数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlplus <span class="string">"/as sysdba"</span></span><br></pre></td></tr></table></figure><blockquote><p>首先检查process和session的使用情况</p></blockquote><p><img src="https://img.xxlaila.cn/parameter_%20processes_1.png" alt="img"><br><img src="https://img.xxlaila.cn/parameter_%20session_3.png" alt="img"></p><a id="more"></a><ul><li>这里可以看到process几乎已经满了</li></ul><h3 id="修改oracle的process和session值"><a href="#修改oracle的process和session值" class="headerlink" title="修改oracle的process和session值"></a>修改oracle的process和session值</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这里我们把这些值修改为1000和1135</span><br><span class="line">SQL&gt; alter system <span class="built_in">set</span> processes=1000 scope=spfile;</span><br><span class="line">系统已更改。</span><br><span class="line">SQL&gt; alter system <span class="built_in">set</span> sessions=1135 scope=spfile;</span><br><span class="line">系统已更改。</span><br></pre></td></tr></table></figure><h3 id="重启数据库后参数修改完成"><a href="#重启数据库后参数修改完成" class="headerlink" title="重启数据库后参数修改完成"></a>重启数据库后参数修改完成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SQL&gt; shutdown abort;</span><br><span class="line">ORACLE 例程已经关闭。</span><br><span class="line">SQL&gt; startup;</span><br><span class="line">ORACLE 例程已经启动。</span><br><span class="line">Total System Global Area  534462464 bytes</span><br><span class="line">Fixed Size                  2215064 bytes</span><br><span class="line">Variable Size             234881896 bytes</span><br><span class="line">Database Buffers          289406976 bytes</span><br><span class="line">Redo Buffers                7958528 bytes</span><br><span class="line">数据库装载完毕。</span><br><span class="line">数据库已经打开。</span><br></pre></td></tr></table></figure><h2 id="查看并验证"><a href="#查看并验证" class="headerlink" title="查看并验证"></a>查看并验证</h2><p><img src="https://img.xxlaila.cn/W.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx https</title>
    <url>/2019/08/10/nginx-https/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>nginx http 强制跳转到https</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$scheme</span> = http ) &#123;</span><br><span class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>列子</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name xxx.test.com;</span><br><span class="line">    index index.html index.php index.htm;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$scheme</span> = http ) &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$server_port</span> = 80 ) &#123;</span><br><span class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>列子</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name xxx.test.com;</span><br><span class="line">    index index.html index.php index.htm;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$server_port</span> = 80 ) &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$ssl_protocol</span> = <span class="string">""</span>) &#123; <span class="built_in">return</span> 301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$host</span> != xxx.test.com) &#123; <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://xxx.test.com<span class="variable">$request_uri</span>; &#125;</span><br></pre></td></tr></table></figure><ul><li>列子</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name xxx.test.com;</span><br><span class="line">    index index.html index.php index.htm;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$ssl_protocol</span> = <span class="string">""</span>) &#123; <span class="built_in">return</span> 301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$host</span> != xxx.test.com) &#123; <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://xxx.test.com<span class="variable">$request_uri</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name test.com www.test.com;</span><br><span class="line">    rewrite ^(.*) https://www.test.com<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name test.com www.test.com;</span><br><span class="line">    rewrite ^(.*) https://www.test.com<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name test.com www.test.com;</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    root ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法五"><a href="#方法五" class="headerlink" title="方法五"></a>方法五</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name test.com www.test.com;</span><br><span class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>haproxy keepalived </title>
    <url>/2019/08/10/haproxy-keepalived/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>本文主要是代理kubernetes master的高可用。</p><h2 id="安装haproxy和keepalived"><a href="#安装haproxy和keepalived" class="headerlink" title="安装haproxy和keepalived"></a>安装haproxy和keepalived</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install keepalived.x86_64</span></span><br><span class="line"><span class="comment"># yum -y install haproxy18u.x86_64</span></span><br></pre></td></tr></table></figure><h2 id="2、配置haproxy"><a href="#2、配置haproxy" class="headerlink" title="2、配置haproxy"></a>2、配置haproxy</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/haproxy/haproxy.cfg</span></span><br><span class="line">global</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  uid 99</span><br><span class="line">  gid 99</span><br><span class="line">  <span class="comment">#daemon</span></span><br><span class="line">  nbproc 1</span><br><span class="line">  pidfile haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  retries 3</span><br><span class="line">  timeout connect 5s</span><br><span class="line">  timeout client 30s</span><br><span class="line">  timeout server 30s</span><br><span class="line">  timeout check 2s</span><br><span class="line"></span><br><span class="line">listen admin_stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:1080</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  stats refresh 30s</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats realm   Haproxy\ Statistics</span><br><span class="line">  stats auth    admin:admin1</span><br><span class="line">  stats hide-version</span><br><span class="line">  stats admin <span class="keyword">if</span> TRUE</span><br><span class="line"></span><br><span class="line">frontend k8s-https</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:8443</span><br><span class="line">  mode tcp</span><br><span class="line">  default_backend k8s-http</span><br><span class="line"></span><br><span class="line">backend k8s-http</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server k8s-master-01 172.21.17.4:6443</span><br><span class="line">  server k8s-master-02 172.21.16.230:6443</span><br><span class="line">  server k8s-master-03 172.21.240:6443</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="3、keepalived配置"><a href="#3、keepalived配置" class="headerlink" title="3、keepalived配置"></a>3、keepalived配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat keepalived.conf </span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">  notification_email &#123;</span><br><span class="line">    cq_xxlaila@163.com</span><br><span class="line">    &#125;</span><br><span class="line">  notification_email_from cq_xxlaila@163.com</span><br><span class="line">  smtp_server 127.0.0.1</span><br><span class="line">  smtp_connect_timeout 30</span><br><span class="line">  router_id haproxy-01</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">  script <span class="string">"/etc/keepalived/haproxy_check.sh"</span></span><br><span class="line">  interval 2</span><br><span class="line">  timeout 2</span><br><span class="line">  fall 3</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">    dont_track_primary</span><br><span class="line">    nopreempt</span><br><span class="line">    authentication &#123;</span><br><span class="line">      auth_type PASS</span><br><span class="line">      auth_pass 57D0BC82E074C9D6</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">      172.21.16.45</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">      chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>监测脚本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat haproxy_check.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">A=`ps -C haproxy --no-header | wc -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$A</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    systemctl start haproxy</span><br><span class="line">    sleep 3</span><br><span class="line">    <span class="keyword">if</span> [ `ps -C haproxy --no-header | wc -l ` -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        systemctl stop haproxy</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable haproxy &amp;&amp;systemctl enable keepalived</span></span><br><span class="line"><span class="comment"># systemctl start keepalived &amp;&amp;systemctl start haproxy</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>haproxy,keepalived,kubernetes</category>
      </categories>
      <tags>
        <tag>haproxy,keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-prometheus</title>
    <url>/2019/08/10/k8s-prometheus/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p><a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a>是一个集数据收集存储、数据查询和数据图表显示于一身的开源监控组件。本文主要讲解如何搭建Prometheus，并使用它监控Kubernetes集群。</p><h2 id="1、下载相关yaml"><a href="#1、下载相关yaml" class="headerlink" title="1、下载相关yaml"></a>1、下载相关yaml</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/xxlaila/kubernetes-yaml/tree/master/prometheus-grafana</span></span><br><span class="line"><span class="comment"># ls -l</span></span><br><span class="line">configmap.yaml</span><br><span class="line">grafana-deploy.yaml</span><br><span class="line">grafana-ingress.yaml</span><br><span class="line">grafana-svc.yaml</span><br><span class="line">node-exporter.yaml</span><br><span class="line">prometheus-deploy.yaml</span><br><span class="line">prometheus-svc.yaml</span><br><span class="line">rbac-setup.yaml</span><br><span class="line">prometheus-ingress.yaml</span><br></pre></td></tr></table></figure><h2 id="2、开始部署"><a href="#2、开始部署" class="headerlink" title="2、开始部署"></a>2、开始部署</h2><h3 id="2-1、采用daemonset方式部署node-exporter组件"><a href="#2-1、采用daemonset方式部署node-exporter组件" class="headerlink" title="2.1、采用daemonset方式部署node-exporter组件"></a>2.1、采用daemonset方式部署node-exporter组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f  node-exporter.yaml</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-2、部署prometheus组件"><a href="#2-2、部署prometheus组件" class="headerlink" title="2.2、部署prometheus组件"></a>2.2、部署prometheus组件</h3><h4 id="2-2-1、rbac文件"><a href="#2-2-1、rbac文件" class="headerlink" title="2.2.1、rbac文件"></a>2.2.1、rbac文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f rbac-setup.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2、以configmap的形式管理prometheus组件的配置文件"><a href="#2-2-2、以configmap的形式管理prometheus组件的配置文件" class="headerlink" title="2.2.2、以configmap的形式管理prometheus组件的配置文件"></a>2.2.2、以configmap的形式管理prometheus组件的配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f configmap.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3、Prometheus-deployment-文件"><a href="#2-2-3、Prometheus-deployment-文件" class="headerlink" title="2.2.3、Prometheus deployment 文件"></a>2.2.3、Prometheus deployment 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f  prometheus-deploy.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4、Prometheus-service文件"><a href="#2-2-4、Prometheus-service文件" class="headerlink" title="2.2.4、Prometheus service文件"></a>2.2.4、Prometheus service文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f prometheus-svc.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-2-5、配置Ingress"><a href="#2-2-5、配置Ingress" class="headerlink" title="2.2.5、配置Ingress"></a>2.2.5、配置Ingress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f prometheus-ingress.yaml</span></span><br></pre></td></tr></table></figure><h3 id="2-3、部署grafana组件"><a href="#2-3、部署grafana组件" class="headerlink" title="2.3、部署grafana组件"></a>2.3、部署grafana组件</h3><h4 id="2-3-1、grafana-deployment配置文件"><a href="#2-3-1、grafana-deployment配置文件" class="headerlink" title="2.3.1、grafana deployment配置文件"></a>2.3.1、grafana deployment配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f grafana-deploy.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2、grafana-service配置文件"><a href="#2-3-2、grafana-service配置文件" class="headerlink" title="2.3.2、grafana service配置文件"></a>2.3.2、grafana service配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f grafana-svc.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3、grafana-ingress配置文件"><a href="#2-3-3、grafana-ingress配置文件" class="headerlink" title="2.3.3、grafana ingress配置文件"></a>2.3.3、grafana ingress配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f grafana-ingress.yaml</span></span><br></pre></td></tr></table></figure><h3 id="2-4、WEB界面配置"><a href="#2-4、WEB界面配置" class="headerlink" title="2.4、WEB界面配置"></a>2.4、WEB界面配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc,pods -n kube-ops</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/46ds9824.png" alt="img"></p><h4 id="2-4-1-查看node-exporter"><a href="#2-4-1-查看node-exporter" class="headerlink" title="2.4.1 查看node-exporter"></a>2.4.1 查看node-exporter</h4><p><img src="https://img.xxlaila.cn/8764kjfnks.png" alt="img"></p><h4 id="2-4-2、查看promethues"><a href="#2-4-2、查看promethues" class="headerlink" title="2.4.2、查看promethues"></a>2.4.2、查看promethues</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;prometheus对应的nodeport端口为30005，通过访问<a href="http://172.21.17.4:30005/targets" target="_blank" rel="noopener">http://172.21.17.4:30005/targets</a> 可以看到prometheus已经成功连接上了k8s的apiserver,这里我们前面增加了prometheus的ingress，这里可以直接通过域名进行访问</p><p><img src="https://img.xxlaila.cn/skd9234342.png" alt="img"></p><h4 id="2-4-3、访问grafana"><a href="#2-4-3、访问grafana" class="headerlink" title="2.4.3、访问grafana"></a>2.4.3、访问grafana</h4><p>通过域名访问grafana，默认用户名密码均为admin，配置数据源<br><img src="https://img.xxlaila.cn/sld023423.png" alt="img"></p><ul><li>到grafana官方<a href="https://grafana.com/dashboards/315" target="_blank" rel="noopener">下载模版</a>，导入json模版</li></ul><p><img src="https://img.xxlaila.cn/kf24skdsfds.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>kubedns插件配置</title>
    <url>/2019/08/10/kubedns%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h1 id="安装和配置kubedns插件"><a href="#安装和配置kubedns插件" class="headerlink" title="安装和配置kubedns插件"></a>安装和配置kubedns插件</h1><h2 id="1、配置文件准备"><a href="#1、配置文件准备" class="headerlink" title="1、配置文件准备"></a>1、配置文件准备</h2><p>下载官方的yaml文件目录：kubernetes/cluster/addons/dns。该插件直接使用kubernetes部署,yaml文件经过修改完成部署</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/xxlaila/kubernetes-yaml.git</span></span><br><span class="line"><span class="comment"># cd kubernetes-yaml/coredns</span></span><br><span class="line"><span class="comment"># sed -i 's/10.96.0.10/10.254.0.2/g' coredns-service.yaml</span></span><br><span class="line"><span class="comment"># kubectl create -f ./</span></span><br><span class="line"><span class="comment"># kubectl get pods,svc,rs -n kube-system</span></span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/coredns-68676b6b88-l7b5g   1/1     Running   0          16m</span><br><span class="line"></span><br><span class="line">NAME              TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">service/coredns   ClusterIP   10.254.0.2   &lt;none&gt;        53/UDP,53/TCP   16m</span><br><span class="line"></span><br><span class="line">NAME                                       DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.extensions/coredns-68676b6b88   1         1         1       16m</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get pods -o wide -n kube-system</span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE     IP            NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-68676b6b88-l7b5g                1/1     Running   0          40m     10.254.28.2   172.21.16.248   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="2、安装和配置dashboard"><a href="#2、安装和配置dashboard" class="headerlink" title="2、安装和配置dashboard"></a>2、安装和配置dashboard</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;官方配置文件kubernetes/cluster/addons/dashboard，这里已经修改过了，经过测试部署，直接进入dashboard目录，修改inages参数进行部署</p><a id="more"></a><h3 id="2-1、安装dashboard"><a href="#2-1、安装dashboard" class="headerlink" title="2.1、安装dashboard"></a>2.1、安装dashboard</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd ../kubernetes-dashboard</span></span><br><span class="line"><span class="comment"># kubectl create -f kubernetes-dashboard.yaml </span></span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line"><span class="comment"># kubectl get pods -o wide -n kube-system</span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE     IP            NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">kubernetes-dashboard-6c655d9445-4557x   1/1     Running   0          6m54s   10.254.90.2   172.21.16.110   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2、配置账户授权"><a href="#2-2、配置账户授权" class="headerlink" title="2.2、配置账户授权"></a>2.2、配置账户授权</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f admin-user.yaml </span></span><br><span class="line">serviceaccount/admin created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/admin created</span><br><span class="line"><span class="comment"># kubectl describe serviceaccount admin -n kube-system</span></span><br><span class="line">Name:                admin</span><br><span class="line">Namespace:           kube-system</span><br><span class="line">Labels:              k8s-app=kubernetes-dashboard</span><br><span class="line">Annotations:         &lt;none&gt;</span><br><span class="line">Image pull secrets:  &lt;none&gt;</span><br><span class="line">Mountable secrets:   admin-token-wwjw8</span><br><span class="line">Tokens:              admin-token-wwjw8</span><br><span class="line">Events:              &lt;none&gt;</span><br><span class="line"><span class="comment"># kubectl describe secret admin-token-wwjw8 -n kube-system</span></span><br><span class="line">在浏览器访问任意节点IP地址http://&lt;node_ip&gt;:30001</span><br></pre></td></tr></table></figure><h2 id="3、监控安装"><a href="#3、监控安装" class="headerlink" title="3、监控安装"></a>3、监控安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd ../heapster-influxdb-grafana</span></span><br><span class="line"><span class="comment"># kubectl create -f ./</span></span><br><span class="line"><span class="comment"># kubectl get pods -o wide -n kube-system</span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE   IP            NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">heapster-658646db69-lh5tx               1/1     Running   0          11m   10.254.28.3   172.21.16.248   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">monitoring-grafana-7bfc56ffcd-kgh56     1/1     Running   0          11m   10.254.90.3   172.21.16.110   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">monitoring-influxdb-7478d7675c-9255v    1/1     Running   0          11m   10.254.85.2   172.21.16.244   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;这里遇到一个怪事情；heapster安装以后图始终无法出来，这里折腾差不多大半天。最后在dashboard的yaml文件里面添加了以下参数，图就可以了，</p><p><img src="https://img.xxlaila.cn/4udfs93.png" alt="img"></p><p>args:<br>- –auto-generate-certificates<br>- –token-ttl=43200<br><em>- –heapster-host=<a href="http://heapster" target="_blank" rel="noopener">http://heapster</a></em></p><p><img src="https://img.xxlaila.cn/ds832948dk.png" alt="img"></p><p>Prometheus的安装请参考<a href="http://xxlaila.github.io/2019/08/10/k8s-prometheus/" target="_blank" rel="noopener">《Prometheus 入门》</a>文章，grafana不需要重复部署。只需要在grafana里面增加目录挂在，吧kube-ops 修改kube-system即可</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kube-dns,dashboard</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes node节点安装</title>
    <url>/2019/08/10/kubernetes-node%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>More: <a href="https://xxlaila.github.io/2019/08/09/kubernetes-v1-13-3%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">master节点安装请参考</a></p><h2 id="1、部署kubernetes-node节点"><a href="#1、部署kubernetes-node节点" class="headerlink" title="1、部署kubernetes node节点"></a>1、部署kubernetes node节点</h2><p>Kubernetes node节点包含如下组件：</p><ul><li><strong>Flanneld</strong>: 之前单机节点安装没有配置TLS，现在需要在service配置文件中增加TLS配置</li><li><strong>Docker</strong>: version 18.06.2-ce</li><li><strong>kubelet</strong></li><li><strong>kube-proxy</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /etc/kubernetes/</span></span><br><span class="line">bootstrap.kubeconfig  kubelet   kube-proxy.kubeconfig  proxy  ssl</span><br><span class="line"><span class="comment"># ls /etc/kubernetes/ssl</span></span><br><span class="line">admin-key.pem  kube-apiserver-key.pem  kube-controller-manager-key.pem  kubelet-api-admin-key.pem   kube-proxy-key.pem  kubernetes-ca-key.pem  kube-scheduler-key.pem</span><br><span class="line">admin.pem      kube-apiserver.pem      kube-controller-manager.pem      kubelet-api-admin.pem       kube-proxy.pem      kubernetes-ca.pem      kube-scheduler.pem</span><br></pre></td></tr></table></figure><h3 id="增加docker-源"><a href="#增加docker-源" class="headerlink" title="增加docker 源"></a>增加docker 源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum-config-manager \</span></span><br><span class="line">  --add-repo \</span><br><span class="line">  https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ul><li><p>根据实际查找当前版本 (可选)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum list docker-ce --showduplicates | sort -r</span></span><br></pre></td></tr></table></figure></li><li><p>如果确定了版本,直接安装,如果要装17。03直接修改下面数字即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install docker-ce-18.06.2.ce-3.el7  # 主意版本填写包名的格式.</span></span><br></pre></td></tr></table></figure></li><li><p>启docker服务,和开机启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl start docker &amp;&amp; systemctl enable docker</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-1、安装flanneld"><a href="#1-1、安装flanneld" class="headerlink" title="1.1、安装flanneld"></a>1.1、安装flanneld</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv kubernetes  /etc/ &amp;&amp; chown -R root: /etc/kubernetes</span></span><br><span class="line"><span class="comment"># wget https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar zxf flannel-v0.11.0-linux-amd64.tar.gz &amp;&amp; mv flanneld mk-docker-opts.sh /usr/bin/ &amp;&amp; rm -rf flannel-v0.11.0-linux-amd64.tar.gz</span></span><br></pre></td></tr></table></figure><h4 id="1-1-1、flanneld启动配置文件"><a href="#1-1-1、flanneld启动配置文件" class="headerlink" title="1.1.1、flanneld启动配置文件"></a>1.1.1、flanneld启动配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /lib/systemd/system/flanneld.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=etcd.service</span><br><span class="line">Before=docker.service</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/etc/sysconfig/flanneld</span><br><span class="line">ExecStart=/usr/bin/flanneld -etcd-endpoints=<span class="variable">$&#123;FLANNEL_ETCD&#125;</span> <span class="variable">$FLANNEL_OPTIONS</span></span><br><span class="line">ExecStartPost=/usr/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/subnet.env</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">RequiredBy=docker.service</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1-1-2、flanneld配置文件"><a href="#1-1-2、flanneld配置文件" class="headerlink" title="1.1.2、flanneld配置文件"></a>1.1.2、flanneld配置文件</h4><p>flanneld 配置文件连接了etcd，而在配置etcd的时候需要证书，所以记的吧证书copy到node节点上去</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/sysconfig/flanneld</span></span><br><span class="line"><span class="comment"># Flanneld configuration options</span></span><br><span class="line"><span class="comment"># etcd url location.  Point this to the server where etcd runs</span></span><br><span class="line">FLANNEL_ETCD=<span class="string">"https://172.21.17.4:2379,https://172.21.16.230:2379,https://172.21.16.240:2379"</span></span><br><span class="line"><span class="comment"># etcd config key.  This is the configuration key that flannel queries</span></span><br><span class="line"><span class="comment"># For address range assignment</span></span><br><span class="line">FLANNEL_ETCD_PREFIX=<span class="string">"/coreos.com/network"</span></span><br><span class="line"><span class="comment"># Any additional options that you want to pass</span></span><br><span class="line">FLANNEL_OPTIONS=<span class="string">"-etcd-cafile=/etc/etcd/ssl/etcd-ca.pem -etcd-certfile=/etc/etcd/ssl/etcd.pem -etcd-keyfile=/etc/etcd/ssl/etcd-key.pem"</span></span><br></pre></td></tr></table></figure><ul><li>在启动flanneld之前，需要在etcd中添加一条网络配置记录，这个配置将用于flanneld分配给每个docker的虚拟ip地址段,</li><li>在任意一台master执行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl set /coreos.com/network/config '&#123; "Network": "10.254.0.0/16" &#125;'</span></span><br><span class="line">&#123; <span class="string">"Network"</span>: <span class="string">"10.254.0.0/16"</span> &#125;</span><br><span class="line"><span class="comment"># etcdctl get  /coreos.com/network/config </span></span><br><span class="line">&#123; <span class="string">"Network"</span>: <span class="string">"10.254.0.0/16"</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;在执行的时候我们需要创建一个配置文件，因为前面etcd是启用了https的，否则的话，会报<code>Error: client: etcd cluster is unavailable or misconfigured; error #0: x509: certificate signed by unknown authority</code>的错误。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcd.rc</span></span><br><span class="line"><span class="built_in">export</span> ETCDCTL_ENDPOINT=https://172.21.17.4:2379,https://172.21.16.230:2379,https://172.21.16.240:2379</span><br><span class="line"><span class="built_in">export</span> ETCDCTL_CERT_FILE=/etc/etcd/ssl/etcd.pem</span><br><span class="line"><span class="built_in">export</span> ETCDCTL_KEY_FILE=/etc/etcd/ssl/etcd-key.pem</span><br><span class="line"><span class="built_in">export</span> ETCDCTL_CA_FILE=/etc/etcd/ssl/etcd-ca.pem</span><br></pre></td></tr></table></figure><h3 id="1-1-3、启动flanneld"><a href="#1-1-3、启动flanneld" class="headerlink" title="1.1.3、启动flanneld"></a>1.1.3、启动flanneld</h3><p>在启动flanneld之前，我们需要修改docker的配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /lib/systemd/system/docker.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/run/flannel/subnet.env</span><br><span class="line">ExecStart=/usr/bin/dockerd <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable flanneld &amp;&amp;systemctl start flanneld &amp;&amp;systemctl status flanneld</span></span><br></pre></td></tr></table></figure><p>重启了docker和flanneld以后，我们在任意一台node节点上通过ip add s可以查看。flanneld 和docker 网络绑定的情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip add s</span></span><br></pre></td></tr></table></figure><h2 id="2、安装和配置kubelet"><a href="#2、安装和配置kubelet" class="headerlink" title="2、安装和配置kubelet"></a>2、安装和配置kubelet</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;kubelet启动时向kube-apiserver发送tls bootstrapping请求，需要将bootstrap token文件中kube-bootsrap用户授予system:node-bootstrapper cluster角色（role），然后kubelet才能有权限创建认证请求（certificate signing requests）</p><h3 id="2-1、安装kubelet"><a href="#2-1、安装kubelet" class="headerlink" title="2.1、安装kubelet"></a>2.1、安装kubelet</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://dl.k8s.io/v1.13.3/kubernetes-server-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar -xzf kubernetes-server-linux-amd64.tar.gz &amp;&amp;cp -r ./kubernetes/server/bin/&#123;kube-proxy,kubelet&#125; /usr/bin/ &amp;&amp; rm -rf ./kubernetes*</span></span><br></pre></td></tr></table></figure><h3 id="2-2、创建kubelet启动文件"><a href="#2-2、创建kubelet启动文件" class="headerlink" title="2.2、创建kubelet启动文件"></a>2.2、创建kubelet启动文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kubelet.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/lib/kubelet</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/kubelet</span><br><span class="line">ExecStart=/usr/bin/kubelet \</span><br><span class="line">           <span class="variable">$KUBE_LOGTOSTDERR</span> \</span><br><span class="line">           <span class="variable">$KUBE_LOG_LEVEL</span> \</span><br><span class="line">           <span class="variable">$KUBELET_API_SERVER</span> \</span><br><span class="line">           <span class="variable">$KUBELET_ADDRESS</span> \</span><br><span class="line">           <span class="variable">$KUBELET_PORT</span> \</span><br><span class="line">           <span class="variable">$KUBELET_HOSTNAME</span> \</span><br><span class="line">           <span class="variable">$KUBE_ALLOW_PRIV</span> \</span><br><span class="line">           <span class="variable">$KUBELET_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="2-3、kubelet配置文件"><a href="#2-3、kubelet配置文件" class="headerlink" title="2.3、kubelet配置文件"></a>2.3、kubelet配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/kubelet</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes kubelet (minion) config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The address for the info server to serve on (set to 0.0.0.0 or "" for all interfaces)</span></span><br><span class="line">KUBELET_ADDRESS=<span class="string">"--node-ip=&#123;node_ip&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The port for the info server to serve on</span></span><br><span class="line"><span class="comment"># KUBELET_PORT="--port=10250"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You may leave this blank to use the actual hostname</span></span><br><span class="line">KUBELET_HOSTNAME=<span class="string">"--hostname-override=&#123;node_ip&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># location of the api-server</span></span><br><span class="line"><span class="comment"># KUBELET_API_SERVER=""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBELET_ARGS=<span class="string">"  --address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                --allow-privileged \</span></span><br><span class="line"><span class="string">                --anonymous-auth=false \</span></span><br><span class="line"><span class="string">                --authorization-mode=Webhook \</span></span><br><span class="line"><span class="string">                --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span></span><br><span class="line"><span class="string">                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --cgroup-driver=cgroupfs \</span></span><br><span class="line"><span class="string">                --cert-dir=/etc/kubernetes/ssl \</span></span><br><span class="line"><span class="string">                --cluster-dns=10.254.0.2 \</span></span><br><span class="line"><span class="string">                --cluster-domain=cluster.local \</span></span><br><span class="line"><span class="string">                --eviction-soft=imagefs.available&lt;15%,memory.available&lt;512Mi,nodefs.available&lt;15%,nodefs.inodesFree&lt;10% \</span></span><br><span class="line"><span class="string">                --eviction-soft-grace-period=imagefs.available=3m,memory.available=1m,nodefs.available=3m,nodefs.inodesFree=1m \</span></span><br><span class="line"><span class="string">                --eviction-hard=imagefs.available&lt;10%,memory.available&lt;256Mi,nodefs.available&lt;10%,nodefs.inodesFree&lt;5% \</span></span><br><span class="line"><span class="string">                --eviction-max-pod-grace-period=30 \</span></span><br><span class="line"><span class="string">                --image-gc-high-threshold=80 \</span></span><br><span class="line"><span class="string">                --image-gc-low-threshold=70 \</span></span><br><span class="line"><span class="string">                --image-pull-progress-deadline=30s \</span></span><br><span class="line"><span class="string">                --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span></span><br><span class="line"><span class="string">                --max-pods=100 \</span></span><br><span class="line"><span class="string">                --minimum-image-ttl-duration=720h0m0s \</span></span><br><span class="line"><span class="string">                --node-labels=node.kubernetes.io/k8s-node=true \</span></span><br><span class="line"><span class="string">                --pod-infra-container-image=docker.io/kubernetes/pause:latest \</span></span><br><span class="line"><span class="string">                --port=10250 \</span></span><br><span class="line"><span class="string">                --read-only-port=0 \</span></span><br><span class="line"><span class="string">                --rotate-certificates \</span></span><br><span class="line"><span class="string">                --rotate-server-certificates \</span></span><br><span class="line"><span class="string">                --fail-swap-on=false \</span></span><br><span class="line"><span class="string">                --v=2"</span></span><br></pre></td></tr></table></figure><h3 id="2-4、启动kubelet"><a href="#2-4、启动kubelet" class="headerlink" title="2.4、启动kubelet"></a>2.4、启动kubelet</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir /var/lib/kubelet -p</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kubelet &amp;&amp;systemctl start kubelet &amp;&amp; systemctl status kubelet</span></span><br><span class="line"><span class="comment"># journalctl -fxeu kubelet</span></span><br></pre></td></tr></table></figure><h2 id="3、通过kubelet的tls请求"><a href="#3、通过kubelet的tls请求" class="headerlink" title="3、通过kubelet的tls请求"></a>3、通过kubelet的tls请求</h2><p>kubelet首次启动时像kube-apiserver发送证书签名请求，必须通过后kubernetes系统才会将该node加入集群：</p><h3 id="3-1、查看未授权csr请求"><a href="#3-1、查看未授权csr请求" class="headerlink" title="3.1、查看未授权csr请求"></a>3.1、查看未授权csr请求</h3><ul><li>任意master节点均可</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get csr</span></span><br><span class="line">NAME                                                   AGE   REQUESTOR                   CONDITION</span><br><span class="line">csr-kxfql                                              78m   system:node:172.21.16.204   Pending</span><br><span class="line">node-csr-QptfMgAu2y4GmUZX1Ph9B0XomA0Rg-fxcgs0Yzd-XRU   79m   system:bootstrap:ff90fd     Approved,Issued</span><br><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line">No resources found.</span><br></pre></td></tr></table></figure><h3 id="3-2、通过csr请求"><a href="#3-2、通过csr请求" class="headerlink" title="3.2、通过csr请求"></a>3.2、通过csr请求</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl certificate approve csr-kxfql</span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/csr-kxfql approved</span><br></pre></td></tr></table></figure><ul><li>自动生成kubelet kubeconfig文件和公私钥,新版本 kubelet server 的证书自动签发已经被关闭,所以对于 kubelet server 的证书仍需要手动签署</li></ul><h2 id="4、配置kube-proxy"><a href="#4、配置kube-proxy" class="headerlink" title="4、配置kube-proxy"></a>4、配置kube-proxy</h2><h3 id="4-1、kupe-proxy-启动文件"><a href="#4-1、kupe-proxy-启动文件" class="headerlink" title="4.1、kupe-proxy 启动文件"></a>4.1、kupe-proxy 启动文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-proxy.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kube-Proxy Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/proxy</span><br><span class="line">ExecStart=/usr/bin/kube-proxy \</span><br><span class="line">       <span class="variable">$KUBE_LOGTOSTDERR</span> \</span><br><span class="line">       <span class="variable">$KUBE_LOG_LEVEL</span> \</span><br><span class="line">       <span class="variable">$KUBE_MASTER</span> \</span><br><span class="line">       <span class="variable">$KUBE_PROXY_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="4-2、kube-proxy配置文件"><a href="#4-2、kube-proxy配置文件" class="headerlink" title="4.2、kube-proxy配置文件"></a>4.2、kube-proxy配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/proxy</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes proxy config</span></span><br><span class="line"><span class="comment"># default config should be adequate</span></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_PROXY_ARGS=<span class="string">"   --bind-address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                    --cleanup-ipvs=true \</span></span><br><span class="line"><span class="string">                    --cluster-cidr=10.254.0.0/16 \</span></span><br><span class="line"><span class="string">                    --hostname-override=docker4.node \</span></span><br><span class="line"><span class="string">                    --healthz-bind-address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                    --healthz-port=10256 \</span></span><br><span class="line"><span class="string">                    --masquerade-all=true \</span></span><br><span class="line"><span class="string">                    --proxy-mode=ipvs \</span></span><br><span class="line"><span class="string">                    --ipvs-min-sync-period=5s \</span></span><br><span class="line"><span class="string">                    --ipvs-sync-period=5s \</span></span><br><span class="line"><span class="string">                    --ipvs-scheduler=wrr \</span></span><br><span class="line"><span class="string">                    --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig \</span></span><br><span class="line"><span class="string">                    --logtostderr=true \</span></span><br><span class="line"><span class="string">                    --v=2"</span></span><br></pre></td></tr></table></figure><h3 id="4-3、启动kube-proxy"><a href="#4-3、启动kube-proxy" class="headerlink" title="4.3、启动kube-proxy"></a>4.3、启动kube-proxy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kube-proxy &amp;&amp; systemctl start kube-proxy &amp;&amp; systemctl status kube-proxy</span></span><br></pre></td></tr></table></figure><h3 id="4-4-在kube-proxy和kubelet启动之前"><a href="#4-4-在kube-proxy和kubelet启动之前" class="headerlink" title="4.4 在kube-proxy和kubelet启动之前"></a>4.4 在kube-proxy和kubelet启动之前</h3><p>由于 kubelet 组件是采用 TLS Bootstrap 启动，所以需要预先创建相关配置</p><ul><li>创建用于 tls bootstrap 的 token secret<blockquote><p>master节点操作</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f bootstrap.secret.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>为了能让 kubelet 实现自动更新证书，需要配置相关 clusterrolebinding</p><ul><li><p>允许 kubelet tls bootstrap 创建 csr 请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding create-csrs-for-bootstrapping \</span><br><span class="line">    --clusterrole=system:node-bootstrapper \</span><br><span class="line">    --group=system:bootstrappers</span><br></pre></td></tr></table></figure></li><li><p>自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding auto-approve-csrs-for-group \</span><br><span class="line">    --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient \</span><br><span class="line">    --group=system:bootstrappers</span><br></pre></td></tr></table></figure></li><li><p>自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding auto-approve-renewals-for-nodes \</span><br><span class="line">    --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient \</span><br><span class="line">    --group=system:nodes</span><br></pre></td></tr></table></figure></li><li><p>在 kubelet server 开启 api 认证的情况下，apiserver 反向访问 kubelet 10250 需要此授权(eg: kubectl logs)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding system:kubelet-api-admin \</span><br><span class="line">    --clusterrole=system:kubelet-api-admin \</span><br><span class="line">    --user=system:kubelet-api-admin</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>问题</strong>:<br>在启动kubelet的时候，node节点在master节点无法查看，查看kubelet的日志提示如下：</li><li>查看kubelet的日志方式有两种</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># journalctl -f -u kubelet</span></span><br><span class="line"><span class="comment"># systemctl  status kubelet -l</span></span><br></pre></td></tr></table></figure><ul><li>查看nodes<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME            STATUS   ROLES    AGE   VERSION</span><br><span class="line">172.21.16.244   Ready    &lt;none&gt;   12m   v1.13.3</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>验证测试集群</strong><br>创建一个nginx测试集群是否可用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl run nginx --image=docker.io/nginx:latest --replicas=2 --labels run=nginx</span></span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">deployment.apps/nginx created</span><br><span class="line"><span class="comment"># kubectl expose deployment nginx --port=80 --type=NodePort</span></span><br><span class="line">service/nginx exposed</span><br></pre></td></tr></table></figure></li><li><p>查看pod情况</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod -o wide</span></span><br><span class="line">NAME                     READY   STATUS              RESTARTS   AGE   IP            NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-766994fc9f-gcv4n   0/1     ContainerCreating   0          55s   &lt;none&gt;        172.21.16.248   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-766994fc9f-w2j8p   1/1     Running             0          55s   10.254.45.2   172.21.16.83    &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><ul><li>查看对外的服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc nginx</span></span><br><span class="line">NAME    TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">nginx   NodePort   10.254.11.147   &lt;none&gt;        80:48713/TCP   31s</span><br></pre></td></tr></table></figure><p>部署完成后，通过任意node节点IP的地址加端口48713即可访问<br><a href="http://node-ip:48713/" target="_blank" rel="noopener">http://node-ip:48713/</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes v13.3 node</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes v1.13.3安装</title>
    <url>/2019/08/09/kubernetes-v1-13-3%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h2 id="1、-环境准备"><a href="#1、-环境准备" class="headerlink" title="1、 环境准备"></a>1、 环境准备</h2><table><thead><tr><th>ip</th><th>type</th><th>docker</th><th>os</th><th>k8s version</th></tr></thead><tbody><tr><td>172.21.17.4</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td>v1.13.3</td></tr><tr><td>172.21.16.230</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.240</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.244</td><td>node,flanneld,ha+kee</td><td>18.06.2-ce</td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.248</td><td>node,flanneld,ha+kee</td><td>18.06.2-ce</td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.45</td><td>vip</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr></tbody></table><h2 id="2、部署ETC集群"><a href="#2、部署ETC集群" class="headerlink" title="2、部署ETC集群"></a>2、部署ETC集群</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;etcd的正常运行是k8s集群运行的提前条件，因此部署k8s集群首先部署etcd集群。安装CA证书，安装CFSSL证书管理工具。直接下载二进制安装包</p><a id="more"></a><h3 id="2-1、下载cfssl"><a href="#2-1、下载cfssl" class="headerlink" title="2.1、下载cfssl"></a>2.1、下载cfssl</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -o cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span></span><br><span class="line"><span class="comment"># curl -o cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span></span><br><span class="line"><span class="comment"># curl -o cfssl-certinfo https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span></span><br><span class="line"><span class="comment"># chmod +x * &amp;&amp;mv cfssl* /usr/bin/</span></span><br></pre></td></tr></table></figure><h3 id="2-2-、创建etcd证书"><a href="#2-2-、创建etcd证书" class="headerlink" title="2.2 、创建etcd证书"></a>2.2 、创建etcd证书</h3><ul><li><p>etcd-ca-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir etcd_ssl &amp;&amp; cd etcd_ssl</span></span><br><span class="line"><span class="comment"># cat etcd-ca-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"etcd-ca"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 4096</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"etcd Security"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"Beijing"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"Beijing"</span>,</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"ca"</span>: &#123;</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>etcd-gencert.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat etcd-gencert.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"signing"</span>: &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"usages"</span>: [</span><br><span class="line">          <span class="string">"signing"</span>,</span><br><span class="line">          <span class="string">"key encipherment"</span>,</span><br><span class="line">          <span class="string">"server auth"</span>,</span><br><span class="line">          <span class="string">"client auth"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>etcd-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat etcd-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"etcd Security"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"Beijing"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"Beijing"</span>,</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">        <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="string">"172.21.17.4"</span>,</span><br><span class="line">        <span class="string">"172.21.16.231"</span>,</span><br><span class="line">        <span class="string">"172.21.16.240"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接下来执行生成即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert --initca=true etcd-ca-csr.json | cfssljson --bare etcd-ca</span></span><br><span class="line"><span class="comment"># cfssl gencert --ca etcd-ca.pem --ca-key etcd-ca-key.pem --config etcd-gencert.json etcd-csr.json | cfssljson --bare etcd</span></span><br><span class="line"><span class="comment"># mkdir -p /etc/etcd/ssl &amp;&amp;mkdir -p /var/lib/etcd</span></span><br><span class="line"><span class="comment"># cp *.pem /etc/etcd/ssl</span></span><br><span class="line"><span class="comment"># ls /etc/etcd/ssl/</span></span><br><span class="line">etcd-ca-key.pem  etcd-ca.pem  etcd-key.pem  etcd.pem</span><br><span class="line"><span class="comment"># scp -r /etc/etcd k8s-master-02:/etc</span></span><br><span class="line"><span class="comment"># scp -r /etc/etcd k8s-master-03:/etc</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3、开始配置etcd"><a href="#2-3、开始配置etcd" class="headerlink" title="2.3、开始配置etcd"></a>2.3、开始配置etcd</h3><h4 id="2-3-1、下载etcd"><a href="#2-3-1、下载etcd" class="headerlink" title="2.3.1、下载etcd"></a>2.3.1、下载etcd</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/etcd-io/etcd/releases/download/v3.3.15/etcd-v3.3.15-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar zxf etcd-v3.3.15-linux-amd64.tar.gz &amp;&amp;cd etcd-v3.3.15-linux-amd64 &amp;&amp;cp -arp etcd* /usr/bin/</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2、创建etcd的Systemd-unit-文件"><a href="#2-3-2、创建etcd的Systemd-unit-文件" class="headerlink" title="2.3.2、创建etcd的Systemd unit 文件"></a>2.3.2、创建etcd的Systemd unit 文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Etcd 这里采用最新的 3.3.15 版本，安装方式直接复制二进制文件、systemd service 配置即可，不过需要注意相关用户权限问题，以下脚本配置等参考了 etcd rpm 安装包</p><h4 id="2-3-3、配置etcd-conf"><a href="#2-3-3、配置etcd-conf" class="headerlink" title="2.3.3、配置etcd.conf"></a>2.3.3、配置etcd.conf</h4><ul><li>k8s-master-01<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/etcd/etcd.conf</span></span><br><span class="line"><span class="comment"># [member]</span></span><br><span class="line">ETCD_NAME=etcd1</span><br><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd"</span></span><br><span class="line">ETCD_SNAPSHOT_COUNT=<span class="string">"100"</span></span><br><span class="line">ETCD_HEARTBEAT_INTERVAL=<span class="string">"100"</span></span><br><span class="line">ETCD_ELECTION_TIMEOUT=<span class="string">"1000"</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"https://172.21.17.4:2380"</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"https://172.21.17.4:2379,http://127.0.0.1:2379"</span></span><br><span class="line">ETCD_MAX_SNAPSHOTS=<span class="string">"5"</span></span><br><span class="line">ETCD_MAX_WALS=<span class="string">"5"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [cluster]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"https://172.21.17.4:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd1=https://172.21.17.4:2380,etcd2=https://172.21.16.231:2380,etcd3=https://172.21.16.240:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"new"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"https://172.21.17.4:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [security]</span></span><br><span class="line">ETCD_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_AUTO_TLS=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_PEER_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_PEER_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_PEER_AUTO_TLS=<span class="string">"true"</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>k8s-master-02</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/etcd/etcd.conf</span></span><br><span class="line"><span class="comment"># [member]</span></span><br><span class="line">ETCD_NAME=etcd2</span><br><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd"</span></span><br><span class="line">ETCD_SNAPSHOT_COUNT=<span class="string">"100"</span></span><br><span class="line">ETCD_HEARTBEAT_INTERVAL=<span class="string">"100"</span></span><br><span class="line">ETCD_ELECTION_TIMEOUT=<span class="string">"1000"</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"https://172.21.16.231:2380"</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"https://172.21.16.231:2379,http://127.0.0.1:2379"</span></span><br><span class="line">ETCD_MAX_SNAPSHOTS=<span class="string">"5"</span></span><br><span class="line">ETCD_MAX_WALS=<span class="string">"5"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [cluster]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"https://172.21.16.231:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd1=https://172.21.17.4:2380,etcd2=https://172.21.16.231:2380,etcd3=https://172.21.16.240:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"new"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"https://172.21.16.231:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [security]</span></span><br><span class="line">ETCD_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_AUTO_TLS=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_PEER_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_PEER_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_PEER_AUTO_TLS=<span class="string">"true"</span></span><br></pre></td></tr></table></figure></li><li><p>k8s-master-03</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/etcd/etcd.conf</span></span><br><span class="line"><span class="comment"># [member]</span></span><br><span class="line">ETCD_NAME=etcd3</span><br><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd"</span></span><br><span class="line">ETCD_SNAPSHOT_COUNT=<span class="string">"100"</span></span><br><span class="line">ETCD_HEARTBEAT_INTERVAL=<span class="string">"100"</span></span><br><span class="line">ETCD_ELECTION_TIMEOUT=<span class="string">"1000"</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"https://172.21.16.240:2380"</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"https://172.21.16.240:2379,http://127.0.0.1:2379"</span></span><br><span class="line">ETCD_MAX_SNAPSHOTS=<span class="string">"5"</span></span><br><span class="line">ETCD_MAX_WALS=<span class="string">"5"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [cluster]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"https://172.21.16.240:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd1=https://172.21.17.4:2380,etcd2=https://172.21.16.231:2380,etcd3=https://172.21.16.240:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"new"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"https://172.21.16.240:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [security]</span></span><br><span class="line">ETCD_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_AUTO_TLS=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_PEER_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_PEER_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_PEER_AUTO_TLS=<span class="string">"true"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-4、配置etcd启动文件"><a href="#2-3-4、配置etcd启动文件" class="headerlink" title="2.3.4、配置etcd启动文件"></a>2.3.4、配置etcd启动文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /lib/systemd/system/etcd.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line">User=etcd</span><br><span class="line"><span class="comment"># set GOMAXPROCS to number of processors</span></span><br><span class="line">ExecStart=/bin/bash -c <span class="string">"GOMAXPROCS=<span class="variable">$(nproc)</span> /usr/bin/etcd --name=\"<span class="variable">$&#123;ETCD_NAME&#125;</span>\" --data-dir=\"<span class="variable">$&#123;ETCD_DATA_DIR&#125;</span>\" --listen-client-urls=\"<span class="variable">$&#123;ETCD_LISTEN_CLIENT_URLS&#125;</span>\""</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="2-3-5、etcd授权"><a href="#2-3-5、etcd授权" class="headerlink" title="2.3.5、etcd授权"></a>2.3.5、etcd授权</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># groupadd -r etcd</span></span><br><span class="line"><span class="comment"># useradd -r -g etcd -d /var/lib/etcd -s /sbin/nologin -c "etcd user" etcd</span></span><br><span class="line"><span class="comment"># chown -R etcd:etcd /etc/etcd &amp;&amp; chmod -R 755 /etc/etcd/ssl &amp;&amp;chown -R etcd:etcd /var/lib/etcd</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable etcd &amp;&amp;systemctl start etcd &amp;&amp; systemctl status etcd</span></span><br></pre></td></tr></table></figure><h4 id="2-3-6、验证etcd"><a href="#2-3-6、验证etcd" class="headerlink" title="2.3.6、验证etcd"></a>2.3.6、验证etcd</h4><p>由于etcd使用了证书，所以etcd命令需要带上证书</p><ul><li><p>查看成员列表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl --key-file /etc/etcd/ssl/etcd-key.pem --cert-file /etc/etcd/ssl/etcd.pem --ca-file /etc/etcd/ssl/etcd-ca.pem member list</span></span><br><span class="line">93c04a995ff8aa8: name=etcd3 peerURLs=https://172.21.16.240:2380 clientURLs=https://172.21.16.240:2379 isLeader=<span class="literal">false</span></span><br><span class="line">7cc4daf6e4db3a8a: name=etcd2 peerURLs=https://172.21.16.231:2380 clientURLs=https://172.21.16.231:2379 isLeader=<span class="literal">false</span></span><br><span class="line">ec7ea930930d012e: name=etcd1 peerURLs=https://172.21.17.4:2380 clientURLs=https://172.21.17.4:2379 isLeader=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>查看集群状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl --key-file /etc/etcd/ssl/etcd-key.pem --cert-file /etc/etcd/ssl/etcd.pem --ca-file /etc/etcd/ssl/etcd-ca.pem cluster-health</span></span><br><span class="line">member 93c04a995ff8aa8 is healthy: got healthy result from https://172.21.16.240:2379</span><br><span class="line">member 7cc4daf6e4db3a8a is healthy: got healthy result from https://172.21.16.231:2379</span><br><span class="line">member ec7ea930930d012e is healthy: got healthy result from https://172.21.17.4:2379</span><br><span class="line">cluster is healthy</span><br></pre></td></tr></table></figure></li></ul><h2 id="3、部署kubernetes"><a href="#3、部署kubernetes" class="headerlink" title="3、部署kubernetes"></a>3、部署kubernetes</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;新版本已经越来越趋近全面 TLS + RBAC 配置，所以本次安装将会启动大部分 TLS + RBAC 配置，包括 kube-controler-manager、kube-scheduler 组件不再连接本地 kube-apiserver 的 8080 非认证端口，kubelet 等组件 API 端点关闭匿名访问，启动 RBAC 认证等；为了满足这些认证，需要签署以下证书</p><h3 id="3-2、创建CA"><a href="#3-2、创建CA" class="headerlink" title="3.2、创建CA"></a>3.2、创建CA</h3><h4 id="3-2-1、创建CA配置文件"><a href="#3-2-1、创建CA配置文件" class="headerlink" title="3.2.1、创建CA配置文件"></a>3.2.1、创建CA配置文件</h4><ul><li><p>kubernetes-ca-csr.json集群CA根证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir ssl &amp;&amp; cd ssl/</span></span><br><span class="line"><span class="comment"># cat kubernetes-ca-csr.json </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 4096</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"ca"</span>: &#123;</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>“CN”</strong>: Common Name，kube-apiserver 从该证书中提取该字段作为请求的用户名（User Name）;浏览器使用该字段验证网站合法性；</li><li><strong>“O”</strong>: Organization，kube-apiserver从该证书中提取该字段作为请求用户所属组（Group）；</li></ul></li><li><p>kubernetes-gencert.json<br>用于生成其他证书的标准</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kubernetes-gencert.json </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"signing"</span>: &#123;</span><br><span class="line">        <span class="string">"default"</span>: &#123;</span><br><span class="line">            <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"profiles"</span>: &#123;</span><br><span class="line">            <span class="string">"kubernetes"</span>: &#123;</span><br><span class="line">                <span class="string">"usages"</span>: [</span><br><span class="line">                    <span class="string">"signing"</span>,</span><br><span class="line">                    <span class="string">"key encipherment"</span>,</span><br><span class="line">                    <span class="string">"server auth"</span>,</span><br><span class="line">                    <span class="string">"client auth"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>kube-apiserver-csr.json<br>apiserver TLS 认证端口需要的证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kube-apiserver-csr.json </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">        <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"10.254.0.1"</span>,</span><br><span class="line">        <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="string">"172.21.16.45"</span>,</span><br><span class="line">        <span class="string">"*.master.kubernetes.node"</span>,</span><br><span class="line">        <span class="string">"kubernetes"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>172.21.16.45</strong>: vip地址</li><li>如果hosts字段不为空则需要指定授权使用该证书的ip或域名列表,kube-apiserver指定的service-cluster-ip-range网段的第一个ip，如10.254.0.1</li></ul><ul><li><p>kube-controller-manager-csr.json<br>controller manager 连接 apiserver 需要使用的证书，同时本身 10257 端口也会使用此证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kube-controller-manager-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"localhost"</span>,</span><br><span class="line">    <span class="string">"*.master.kubernetes.node"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>kube-scheduler-csr.json<br>scheduler连接 apiserver 需要使用的证书，同时本身 10259 端口也会使用此证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kube-scheduler-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"localhost"</span>,</span><br><span class="line">    <span class="string">"*.master.kubernetes.node"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>kube-proxy-csr.json<br>proxy 组件连接 apiserver 需要使用的证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kube-proxy-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>kubelet-api-admin-csr.json<br>apiserver 反向连接 kubelet 组件 10250 端口需要使用的证书(例如执行 kubectl logs)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kubelet-api-admin-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kubelet-api-admin"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:kubelet-api-admin"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>admin-csr.json<br>集群管理员(kubectl)连接 apiserver 需要使用的证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat admin-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:masters"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:masters"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>: 证书文件里面的CN、O字段，两个比较特殊的字段，基本都是system:开头，是为了匹配RBAC规则,<a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#default-roles-and-role-bindings" target="_blank" rel="noopener">详情参考</a></p><h4 id="3-3、使用命令生成即可"><a href="#3-3、使用命令生成即可" class="headerlink" title="3.3、使用命令生成即可"></a>3.3、使用命令生成即可</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert --initca=true kubernetes-ca-csr.json | cfssljson --bare kubernetes-ca</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for targetName in kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet-api-admin admin; do</span></span><br><span class="line">  cfssl gencert --ca kubernetes-ca.pem --ca-key kubernetes-ca-key.pem --config kubernetes-gencert.json --profile kubernetes <span class="variable">$targetName</span>-csr.json | cfssljson --bare <span class="variable">$targetName</span>; </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="3-4、分发证书"><a href="#3-4、分发证书" class="headerlink" title="3.4、分发证书"></a>3.4、分发证书</h4><p>将生成的证书和秘钥文件（后缀名为.pem）拷贝到所有机器；kubernetes系统的各个组建需要使用tls证书对通信进行加密。</p><h5 id="1）、生成的证书ca证书和秘钥文件如下："><a href="#1）、生成的证书ca证书和秘钥文件如下：" class="headerlink" title="1）、生成的证书ca证书和秘钥文件如下："></a>1）、生成的证书ca证书和秘钥文件如下：</h5><ul><li>admin-key.pem</li><li>admin.pem</li><li>kube-apiserver-key.pem</li><li>kube-apiserver.pem</li><li>kube-controller-manager-key.pem</li><li>kube-controller-manager.pem</li><li>kubelet-api-admin-key.pem</li><li>kubelet-api-admin.pem</li><li>kube-proxy-key.pem</li><li>kube-proxy.pem</li><li>kubernetes-ca-key.pem</li><li>kubernetes-ca.pem</li><li>kube-scheduler-key.pem</li><li>kube-scheduler.pem</li></ul><h5 id="3）、证书拷贝"><a href="#3）、证书拷贝" class="headerlink" title="3）、证书拷贝"></a>3）、证书拷贝</h5><ul><li><p><strong>master 节点拷贝</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /etc/kubernetes/ssl</span></span><br><span class="line"><span class="comment"># cp *.pem /etc/kubernetes/ssl/</span></span><br><span class="line"><span class="comment"># scp -r /etc/kubernetes k8s-master-02:/etc</span></span><br><span class="line"><span class="comment"># scp -r /etc/kubernetes k8s-master-03:/etc</span></span><br><span class="line"><span class="comment"># scp -r /etc/kubernetes node-01:/etc</span></span><br><span class="line"><span class="comment"># scp -r /etc/kubernetes node-02:/etc</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建目录</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /var/log/kube-audit &amp;&amp; mkdir /var/lib/kubelet -p &amp;&amp; mkdir /usr/libexec -p</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4、创建kube-config文件"><a href="#4、创建kube-config文件" class="headerlink" title="4、创建kube config文件"></a>4、创建kube config文件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;kubelet、kube-proxy等Node机器上的经常与master机器的kube-apiserver进程通信时需要认证和授权；kubernetes 1.4 开始支持有kube-apiserver为客户端生成tls证书的 TLS Bootstrapping功能，这样就不需要为每个客户端生成证书了，该功能当前仅支持为kuelet生成证书；</p><h3 id="4-1、生成配置文件"><a href="#4-1、生成配置文件" class="headerlink" title="4.1、生成配置文件"></a>4.1、生成配置文件</h3><ul><li>bootstrap.kubeconfig kubelet TLS Bootstarp 引导阶段需要使用的配置文件</li><li>kube-controller-manager.kubeconfig controller manager 组件开启安全端口及 RBAC 认证所需配置</li><li>kube-scheduler.kubeconfig scheduler 组件开启安全端口及 RBAC 认证所需配置</li><li>kube-proxy.kubeconfig proxy 组件连接 apiserver 所需配置文件</li><li>audit-policy.yaml apiserver RBAC 审计日志配置文件</li><li>bootstrap.secret.yaml kubelet TLS Bootstarp 引导阶段使用 Bootstrap Token 方式引导，需要预先创建此 Token</li></ul><h3 id="4-2、创建kubelet-bootstrapping-kubeconfig文件"><a href="#4-2、创建kubelet-bootstrapping-kubeconfig文件" class="headerlink" title="4.2、创建kubelet bootstrapping kubeconfig文件"></a>4.2、创建kubelet bootstrapping kubeconfig文件</h3><p>在这之前我们需要下载kubernetes 相关的二进制包，把对应的工具和命令拷贝到/usr/bin目录下面;下载二进制包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://dl.k8s.io/v1.13.3/kubernetes-server-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar zxf kubernetes-server-linux-amd64.tar.gz &amp;&amp; cd kubernetes/server/bin</span></span><br></pre></td></tr></table></figure><ul><li>master节点拷贝</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv apiextensions-apiserver cloud-controller-manager hyperkube kube-apiserver kube-controller-manager kube-proxy kube-scheduler kubectl kubelet mounter kubeadm /usr/bin/ &amp;&amp; cd &amp;&amp;rm -rf kubernetes kubernetes-server-linux-amd64.tar.gz</span></span><br></pre></td></tr></table></figure><h4 id="4-2-1、生成文件bootstrapping"><a href="#4-2-1、生成文件bootstrapping" class="headerlink" title="4.2.1、生成文件bootstrapping"></a>4.2.1、生成文件bootstrapping</h4><ul><li>master-01<br>&nbsp;&nbsp;&nbsp;&nbsp;config 是一个通用配置文件要连接本地的 6443 加密端口；而这个变量将会覆盖 kubeconfig 中指定的master_vip地址172.21.16.45:6443 地址</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export KUBE_APISERVER="https://172.21.16.45:6443"</span></span><br></pre></td></tr></table></figure><ul><li>生成 Bootstrap Token<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BOOTSTRAP_TOKEN_ID=$(head -c 6 /dev/urandom | md5sum | head -c 6)</span></span><br><span class="line"><span class="comment"># BOOTSTRAP_TOKEN_SECRET=$(head -c 16 /dev/urandom | md5sum | head -c 16)</span></span><br><span class="line"><span class="comment"># BOOTSTRAP_TOKEN="$&#123;BOOTSTRAP_TOKEN_ID&#125;.$&#123;BOOTSTRAP_TOKEN_SECRET&#125;"</span></span><br><span class="line"><span class="comment"># echo "Bootstrap Tokne: $&#123;BOOTSTRAP_TOKEN&#125;"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-2-2、生成-kubelet-tls-bootstrap-配置"><a href="#4-2-2、生成-kubelet-tls-bootstrap-配置" class="headerlink" title="4.2.2、生成 kubelet tls bootstrap 配置"></a>4.2.2、生成 kubelet tls bootstrap 配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=kubernetes-ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-credentials "system:bootstrap:$&#123;BOOTSTRAP_TOKEN_ID&#125;" \</span></span><br><span class="line">  --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-context default \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=<span class="string">"system:bootstrap:<span class="variable">$&#123;BOOTSTRAP_TOKEN_ID&#125;</span>"</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3、生成-kube-controller-manager-配置文件"><a href="#4-2-3、生成-kube-controller-manager-配置文件" class="headerlink" title="4.2.3、生成 kube-controller-manager 配置文件"></a>4.2.3、生成 kube-controller-manager 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=kubernetes-ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-credentials "system:kube-controller-manager" \</span></span><br><span class="line">  --client-certificate=kube-controller-manager.pem \</span><br><span class="line">  --client-key=kube-controller-manager-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-context default \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-controller-manager \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig</span></span><br></pre></td></tr></table></figure><h4 id="4-2-4、生成-kube-scheduler-配置文件"><a href="#4-2-4、生成-kube-scheduler-配置文件" class="headerlink" title="4.2.4、生成 kube-scheduler 配置文件"></a>4.2.4、生成 kube-scheduler 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=kubernetes-ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-credentials "system:kube-scheduler" \</span></span><br><span class="line">  --client-certificate=kube-scheduler.pem \</span><br><span class="line">  --client-key=kube-scheduler-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-context default \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-scheduler \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig</span></span><br></pre></td></tr></table></figure><h4 id="4-2-5、生成-kube-proxy-配置文件"><a href="#4-2-5、生成-kube-proxy-配置文件" class="headerlink" title="4.2.5、生成 kube-proxy 配置文件"></a>4.2.5、生成 kube-proxy 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=kubernetes-ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-credentials "system:kube-proxy" \</span></span><br><span class="line">  --client-certificate=kube-proxy.pem \</span><br><span class="line">  --client-key=kube-proxy-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-context default \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-proxy \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span></span><br></pre></td></tr></table></figure><h4 id="4-2-6、生成-apiserver-RBAC-审计配置文件"><a href="#4-2-6、生成-apiserver-RBAC-审计配置文件" class="headerlink" title="4.2.6、生成 apiserver RBAC 审计配置文件"></a>4.2.6、生成 apiserver RBAC 审计配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;&gt; audit-policy.yaml &lt;&lt;EOF</span></span><br><span class="line"><span class="comment"># Log all requests at the Metadata level.</span></span><br><span class="line">apiVersion: audit.k8s.io/v1</span><br><span class="line">kind: Policy</span><br><span class="line">rules:</span><br><span class="line">- level: Metadata</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="4-2-7、生成-tls-bootstrap-token-secret-配置文件"><a href="#4-2-7、生成-tls-bootstrap-token-secret-配置文件" class="headerlink" title="4.2.7、生成 tls bootstrap token secret 配置文件"></a>4.2.7、生成 tls bootstrap token secret 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;&gt; bootstrap.secret.yaml &lt;&lt;EOF</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  <span class="comment"># Name MUST be of form "bootstrap-token-&lt;token id&gt;"</span></span><br><span class="line">  name: bootstrap-token-<span class="variable">$&#123;BOOTSTRAP_TOKEN_ID&#125;</span></span><br><span class="line">  namespace: kube-system</span><br><span class="line"><span class="comment"># Type MUST be 'bootstrap.kubernetes.io/token'</span></span><br><span class="line"><span class="built_in">type</span>: bootstrap.kubernetes.io/token</span><br><span class="line">stringData:</span><br><span class="line">  <span class="comment"># Human readable description. Optional.</span></span><br><span class="line">  description: <span class="string">"The default bootstrap token."</span></span><br><span class="line">  <span class="comment"># Token ID and secret. Required.</span></span><br><span class="line">  token-id: <span class="variable">$&#123;BOOTSTRAP_TOKEN_ID&#125;</span></span><br><span class="line">  token-secret: <span class="variable">$&#123;BOOTSTRAP_TOKEN_SECRET&#125;</span></span><br><span class="line">  <span class="comment"># Expiration. Optional.</span></span><br><span class="line">  expiration: $(date -d<span class="string">'+2 day'</span> -u +<span class="string">"%Y-%m-%dT%H:%M:%SZ"</span>)</span><br><span class="line">  <span class="comment"># Allowed usages.</span></span><br><span class="line">  usage-bootstrap-authentication: <span class="string">"true"</span></span><br><span class="line">  usage-bootstrap-signing: <span class="string">"true"</span></span><br><span class="line">  <span class="comment"># Extra groups to authenticate the token as. Must start with "system:bootstrappers:"</span></span><br><span class="line"><span class="comment">#  auth-extra-groups: system:bootstrappers:worker,system:bootstrappers:ingress</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="4-3、复制文件"><a href="#4-3、复制文件" class="headerlink" title="4.3、复制文件"></a>4.3、复制文件</h4><p>把刚生成的文件复制到<code>/etc/kubernetes</code>目录下面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master 节点</span></span><br><span class="line"><span class="comment"># cp audit-policy.yaml bootstrap.kubeconfig  bootstrap.secret.yaml kube-proxy.kubeconfig  kube-scheduler.kubeconfig /etc/kubernetes</span></span><br><span class="line"><span class="comment"># scp -r audit-policy.yaml bootstrap.kubeconfig  bootstrap.secret.yaml kube-proxy.kubeconfig  kube-scheduler.kubeconfig k8s-master-02:/etc/kubernetes</span></span><br><span class="line"><span class="comment"># scp -r audit-policy.yaml bootstrap.kubeconfig  bootstrap.secret.yaml kube-proxy.kubeconfig  kube-scheduler.kubeconfig k8s-master-03:/etc/kubernetes</span></span><br><span class="line"><span class="comment"># node 节点</span></span><br><span class="line"><span class="comment"># scp -r  bootstrap.kubeconfig kube-proxy.kubeconfig node-01:/etc/kubernetes</span></span><br><span class="line"><span class="comment"># scp -r  bootstrap.kubeconfig kube-proxy.kubeconfig node-02:/etc/kubernetes</span></span><br></pre></td></tr></table></figure><h4 id="4-4、处理-ipvs-及依赖"><a href="#4-4、处理-ipvs-及依赖" class="headerlink" title="4.4、处理 ipvs 及依赖"></a>4.4、处理 ipvs 及依赖</h4><p>&nbsp;&nbsp;&nbsp;&nbsp; 新版本目前 kube-proxy 组件全部采用 ipvs 方式负载，所以为了 kube-proxy 能正常工作需要预先处理一下 ipvs 配置以及相关依赖(每台 node 都要处理)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;&gt; /etc/sysctl.conf &lt;&lt;EOF</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># sysctl -p</span></span><br></pre></td></tr></table></figure><p>kubernetes 中启用 ipvs,详细介绍，<a href="https://github.com/kubernetes/kubernetes/tree/master/pkg/proxy/ipvs" target="_blank" rel="noopener">官方</a>,<a href="https://juejin.im/entry/5b7e409ce51d4538b35c03df" target="_blank" rel="noopener">参考文献</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install ipvsadm</span></span><br><span class="line"><span class="comment"># cat &gt;&gt; /etc/modules &lt;&lt;EOF</span></span><br><span class="line">ip_vs</span><br><span class="line">ip_vs_lc</span><br><span class="line">ip_vs_wlc</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_lblc</span><br><span class="line">ip_vs_lblcr</span><br><span class="line">ip_vs_dh</span><br><span class="line">ip_vs_sh</span><br><span class="line">ip_vs_fo</span><br><span class="line">ip_vs_nq</span><br><span class="line">ip_vs_sed</span><br><span class="line">ip_vs_ftp</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="5、配置和启动kube-apiserver"><a href="#5、配置和启动kube-apiserver" class="headerlink" title="5、配置和启动kube-apiserver"></a>5、配置和启动kube-apiserver</h2><h3 id="5-1、设置启动文件"><a href="#5-1、设置启动文件" class="headerlink" title="5.1、设置启动文件"></a>5.1、设置启动文件</h3><ul><li><strong>kube-apiserver.service</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-apiserver.service</span></span><br><span class="line">[Unit]</span><br><span class="line">  Description=Kubernetes API Service</span><br><span class="line">  Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">  After=network.target</span><br><span class="line">  After=etcd.service</span><br><span class="line">[Service]</span><br><span class="line">  EnvironmentFile=-/etc/kubernetes/apiserver</span><br><span class="line">  ExecStart=/usr/bin/kube-apiserver \</span><br><span class="line">          <span class="variable">$KUBE_LOGTOSTDERR</span> \</span><br><span class="line">          <span class="variable">$KUBE_LOG_LEVEL</span> \</span><br><span class="line">          <span class="variable">$KUBE_ETCD_SERVERS</span> \</span><br><span class="line">          <span class="variable">$KUBE_API_ADDRESS</span> \</span><br><span class="line">          <span class="variable">$KUBE_API_PORT</span> \</span><br><span class="line">          <span class="variable">$KUBELET_PORT</span> \</span><br><span class="line">          <span class="variable">$KUBE_ALLOW_PRIV</span> \</span><br><span class="line">          <span class="variable">$KUBE_SERVICE_ADDRESSES</span> \</span><br><span class="line">          <span class="variable">$KUBE_ADMISSION_CONTROL</span> \</span><br><span class="line">          <span class="variable">$KUBE_API_ARGS</span></span><br><span class="line">  Restart=on-failure</span><br><span class="line">  Type=notify</span><br><span class="line">  LimitNOFILE=65536</span><br><span class="line">[Install]</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-2、apiserver配置文件"><a href="#5-2、apiserver配置文件" class="headerlink" title="5.2、apiserver配置文件"></a>5.2、apiserver配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/apiserver</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes system config</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following values are used to configure the kube-apiserver</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The address on the local server to listen to.</span></span><br><span class="line">KUBE_API_ADDRESS=<span class="string">"--advertise-address=172.21.17.4 --bind-address=0.0.0.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The port on the local server to listen on.</span></span><br><span class="line">KUBE_API_PORT=<span class="string">"--secure-port=6443"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Port minions listen on</span></span><br><span class="line"><span class="comment"># KUBELET_PORT="--kubelet-port=10250"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Comma separated list of nodes in the etcd cluster</span></span><br><span class="line">KUBE_ETCD_SERVERS=<span class="string">"--etcd-servers=https://172.21.17.4:2379,https://172.21.16.230:2379,https://172.21.16.240:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Address range to use for services</span></span><br><span class="line">KUBE_SERVICE_ADDRESSES=<span class="string">"--service-cluster-ip-range=10.254.0.0/16"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default admission control policies</span></span><br><span class="line">KUBE_ADMISSION_CONTROL=<span class="string">"--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,Priority,ResourceQuota"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_API_ARGS=<span class="string">" --allow-privileged=true \</span></span><br><span class="line"><span class="string">                --anonymous-auth=false \</span></span><br><span class="line"><span class="string">                --alsologtostderr \</span></span><br><span class="line"><span class="string">                --apiserver-count=3 \</span></span><br><span class="line"><span class="string">                --audit-log-maxage=30 \</span></span><br><span class="line"><span class="string">                --audit-log-maxbackup=3 \</span></span><br><span class="line"><span class="string">                --audit-log-maxsize=100 \</span></span><br><span class="line"><span class="string">                --audit-log-path=/var/log/kube-audit/audit.log \</span></span><br><span class="line"><span class="string">                --audit-policy-file=/etc/kubernetes/audit-policy.yaml \</span></span><br><span class="line"><span class="string">                --authorization-mode=Node,RBAC \</span></span><br><span class="line"><span class="string">                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --enable-bootstrap-token-auth \</span></span><br><span class="line"><span class="string">                --enable-garbage-collector \</span></span><br><span class="line"><span class="string">                --enable-logs-handler \</span></span><br><span class="line"><span class="string">                --endpoint-reconciler-type=lease \</span></span><br><span class="line"><span class="string">                --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem \</span></span><br><span class="line"><span class="string">                --etcd-certfile=/etc/etcd/ssl/etcd.pem \</span></span><br><span class="line"><span class="string">                --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</span></span><br><span class="line"><span class="string">                --etcd-compaction-interval=0s \</span></span><br><span class="line"><span class="string">                --event-ttl=168h0m0s \</span></span><br><span class="line"><span class="string">                --kubelet-https=true \</span></span><br><span class="line"><span class="string">                --kubelet-certificate-authority=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --kubelet-client-certificate=/etc/kubernetes/ssl/kubelet-api-admin.pem \</span></span><br><span class="line"><span class="string">                --kubelet-client-key=/etc/kubernetes/ssl/kubelet-api-admin-key.pem \</span></span><br><span class="line"><span class="string">                --kubelet-timeout=3s \</span></span><br><span class="line"><span class="string">                --runtime-config=api/all=true \</span></span><br><span class="line"><span class="string">                --service-node-port-range=30000-50000 \</span></span><br><span class="line"><span class="string">                --service-account-key-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem \</span></span><br><span class="line"><span class="string">                --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span></span><br><span class="line"><span class="string">                --v=2"</span></span><br></pre></td></tr></table></figure><ul><li><strong>–client-ca-file</strong>: 定义客户端 CA</li><li><strong>–endpoint-reconciler-type</strong>: master endpoint 策略</li><li><strong>–kubelet-client-certificate、–kubelet-client-key</strong>: master 反向连接 kubelet 使用的证书</li><li><strong>–service-account-key-file</strong>: service account 签名 key(用于有效性验证)</li><li><strong>–tls-cert-file、–tls-private-key-file</strong>: master apiserver 6443 端口证书<br>详细参数<a href="https://www.jianshu.com/p/36ad3028a710" target="_blank" rel="noopener">介绍</a></li></ul><h3 id="5-2-1、启动kube-apiserver"><a href="#5-2-1、启动kube-apiserver" class="headerlink" title="5.2.1、启动kube-apiserver"></a>5.2.1、启动kube-apiserver</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kube-apiserver &amp;&amp;systemctl start kube-apiserver &amp;&amp;systemctl status kube-apiserver</span></span><br></pre></td></tr></table></figure><h3 id="5-3、配置kube-controller-manager"><a href="#5-3、配置kube-controller-manager" class="headerlink" title="5.3、配置kube-controller-manager"></a>5.3、配置kube-controller-manager</h3><p>创建kube-controller-manager的service配置文件</p><h3 id="5-3-1、配置kube-controller-manager启动文件"><a href="#5-3-1、配置kube-controller-manager启动文件" class="headerlink" title="5.3.1、配置kube-controller-manager启动文件"></a>5.3.1、配置kube-controller-manager启动文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-controller-manager.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/controller-manager</span><br><span class="line">ExecStart=/usr/bin/kube-controller-manager \</span><br><span class="line">	    <span class="variable">$KUBE_LOGTOSTDERR</span> \</span><br><span class="line">	    <span class="variable">$KUBE_LOG_LEVEL</span> \</span><br><span class="line">	    <span class="variable">$KUBE_MASTER</span> \</span><br><span class="line">	    <span class="variable">$KUBE_CONTROLLER_MANAGER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="5-3-2、配置controller-manager文件"><a href="#5-3-2、配置controller-manager文件" class="headerlink" title="5.3.2、配置controller-manager文件"></a>5.3.2、配置controller-manager文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/controller-manager</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># The following values are used to configure the kubernetes controller-manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># defaults from config and apiserver should be adequate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_CONTROLLER_MANAGER_ARGS=<span class="string">"  --address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                                --authentication-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --authorization-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --bind-address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                                --cluster-name=kubernetes \</span></span><br><span class="line"><span class="string">                                --cluster-signing-cert-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --cluster-signing-key-file=/etc/kubernetes/ssl/kubernetes-ca-key.pem \</span></span><br><span class="line"><span class="string">                                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --controllers=*,bootstrapsigner,tokencleaner \</span></span><br><span class="line"><span class="string">                                --deployment-controller-sync-period=10s \</span></span><br><span class="line"><span class="string">                                --experimental-cluster-signing-duration=87600h0m0s \</span></span><br><span class="line"><span class="string">                                --enable-garbage-collector=true \</span></span><br><span class="line"><span class="string">                                --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --leader-elect=true \</span></span><br><span class="line"><span class="string">                                --node-monitor-grace-period=20s \</span></span><br><span class="line"><span class="string">                                --node-monitor-period=5s \</span></span><br><span class="line"><span class="string">                                --port=10252 \</span></span><br><span class="line"><span class="string">                                --pod-eviction-timeout=2m0s \</span></span><br><span class="line"><span class="string">                                --requestheader-client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --terminated-pod-gc-threshold=50 \</span></span><br><span class="line"><span class="string">                                --tls-cert-file=/etc/kubernetes/ssl/kube-controller-manager.pem \</span></span><br><span class="line"><span class="string">                                --tls-private-key-file=/etc/kubernetes/ssl/kube-controller-manager-key.pem \</span></span><br><span class="line"><span class="string">                                --root-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --secure-port=10257 \</span></span><br><span class="line"><span class="string">                                --service-cluster-ip-range=10.254.0.0/16 \</span></span><br><span class="line"><span class="string">                                --service-account-private-key-file=/etc/kubernetes/ssl/kubernetes-ca-key.pem \</span></span><br><span class="line"><span class="string">                                --use-service-account-credentials=true \</span></span><br><span class="line"><span class="string">                                --v=2"</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;controller manager 将不安全端口 10252 绑定到 127.0.0.1 确保 kuebctl get cs 有正确返回；将安全端口 10257 绑定到 0.0.0.0 公开，提供服务调用；由于 controller manager 开始连接 apiserver 的 6443 认证端口，所以需要 –use-service-account-credentials 选项来让 controller manager 创建单独的 service account(默认 system:kube-controller-manager 用户没有那么高权限)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get componentstatuses</span></span><br><span class="line">NAME                 STATUS      MESSAGE                                                                                     ERROR</span><br><span class="line">controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: connect: connection refused   </span><br><span class="line">scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused   </span><br><span class="line">etcd-0               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;                                                                           </span><br><span class="line">etcd-1               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;                                                                           </span><br><span class="line">etcd-2               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-3、启动kube-controller-manager"><a href="#5-3-3、启动kube-controller-manager" class="headerlink" title="5.3.3、启动kube-controller-manager"></a>5.3.3、启动kube-controller-manager</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl enable kube-controller-manager &amp;&amp;systemctl start kube-controller-manager &amp;&amp;systemctl status kube-controller-manager</span></span><br></pre></td></tr></table></figure><h3 id="5-4、配置kube-scheduler"><a href="#5-4、配置kube-scheduler" class="headerlink" title="5.4、配置kube-scheduler"></a>5.4、配置kube-scheduler</h3><p>创建kube-scheduler的service配置文件</p><h4 id="5-4-1、创建kube-scheduler启动文件"><a href="#5-4-1、创建kube-scheduler启动文件" class="headerlink" title="5.4.1、创建kube-scheduler启动文件"></a>5.4.1、创建kube-scheduler启动文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /lib/systemd/system/kube-scheduler.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler Plugin</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/scheduler</span><br><span class="line">ExecStart=/usr/bin/kube-scheduler \</span><br><span class="line">	    <span class="variable">$KUBE_LOGTOSTDERR</span> \</span><br><span class="line">	    <span class="variable">$KUBE_LOG_LEVEL</span> \</span><br><span class="line">	    <span class="variable">$KUBE_MASTER</span> \</span><br><span class="line">	    <span class="variable">$KUBE_SCHEDULER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="5-4-2、创建scheduler配置文件"><a href="#5-4-2、创建scheduler配置文件" class="headerlink" title="5.4.2、创建scheduler配置文件"></a>5.4.2、创建scheduler配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/scheduler </span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes scheduler config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default config should be adequate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_SCHEDULER_ARGS=<span class="string">"   --address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                        --authentication-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span></span><br><span class="line"><span class="string">                        --authorization-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span></span><br><span class="line"><span class="string">                        --bind-address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                        --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                        --kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span></span><br><span class="line"><span class="string">                        --requestheader-client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                        --secure-port=10259 \</span></span><br><span class="line"><span class="string">                        --leader-elect=true \</span></span><br><span class="line"><span class="string">                        --port=10251 \</span></span><br><span class="line"><span class="string">                        --tls-cert-file=/etc/kubernetes/ssl/kube-scheduler.pem \</span></span><br><span class="line"><span class="string">                        --tls-private-key-file=/etc/kubernetes/ssl/kube-scheduler-key.pem \</span></span><br><span class="line"><span class="string">                        --v=2"</span></span><br></pre></td></tr></table></figure><p>shceduler 同 controller manager 一样将不安全端口绑定在本地，安全端口对外公开</p><h4 id="5-4-3、启动kube-scheduler"><a href="#5-4-3、启动kube-scheduler" class="headerlink" title="5.4.3、启动kube-scheduler"></a>5.4.3、启动kube-scheduler</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kube-scheduler &amp;&amp;systemctl start kube-scheduler &amp;&amp;systemctl status kube-scheduler</span></span><br></pre></td></tr></table></figure><h3 id="5-4、验证master节点"><a href="#5-4、验证master节点" class="headerlink" title="5.4、验证master节点"></a>5.4、验证master节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get componentstatuses</span></span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">scheduler            Healthy   ok                  </span><br><span class="line">controller-manager   Healthy   ok                  </span><br><span class="line">etcd-2               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;   </span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;   </span><br><span class="line">etcd-1               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><p>至此master节点部署完毕</p><p>kubernetes高可用使用haproxy进行代理,<a href="https://xxlaila.github.io/2019/08/10/haproxy-keepalived/" target="_blank" rel="noopener">haproxy</a>代理安装</p><p><a href="https://xxlaila.github.io/2019/08/10/kubernetes-node%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">node节点安装</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes v1.13.3</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftpd安装</title>
    <url>/2019/08/09/vsftpd%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;Centos下ftp的安装一般采用的是vsftpd，但是在ftp的模式中又有几个用户配置项需要注意，有些人喜欢用本地用户去登陆FTP，虽然在建立本地用户的时候加了/sbin/nologin参数，但是这个还是不够安全，而且这样权限控制也不是很好，他们都是统一的控制权限，这里采用虚拟用户前来配置。虚拟用户配合防火墙selinux还有单个用户的权限，这使得FTP有着足够的安全。而且权限控制特别灵活，修改一个用户的权限不会影响到其他用户。<br>centos 系统版本(5.5、5.3、6.0、6.5)<br>centos 7.4 已经验证</p><h3 id="首先我们安装vsftpd"><a href="#首先我们安装vsftpd" class="headerlink" title="首先我们安装vsftpd"></a>首先我们安装vsftpd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># yum –y install vsftpd</span></span><br></pre></td></tr></table></figure><h3 id="2、启动和加载vsftp"><a href="#2、启动和加载vsftp" class="headerlink" title="2、启动和加载vsftp"></a>2、启动和加载vsftp</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># service vsftpd restart</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># chkconfig –level 35 vsftpd on</span></span><br></pre></td></tr></table></figure><h3 id="3、开始配置vsftpd"><a href="#3、开始配置vsftpd" class="headerlink" title="3、开始配置vsftpd"></a>3、开始配置vsftpd</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Vsftpd的配置文件在/etc/vsftpd下面，在配置之前我们先cp一份做备份用以免发生意外(做什么都要随手备份，因为没有一万，只有万一。)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment">#  cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># vim /etc/vsftpd/vsftpd.conf</span></span><br></pre></td></tr></table></figure><ul><li><strong>vsftpd的参数介绍</strong></li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reverse_lookup_enable=NO <span class="comment">#添加此行，解决客户端登陆缓慢问题！重要！默认vsftpd开启了DNS反响解析！这里需要关闭，如果启动有错误，请注销！</span></span><br><span class="line">listen_port=21 <span class="comment">#默认无此行，ftp端口为21，添加listen_port=2222把默认端口修改为2222，注意：防火墙同时要开启2222端口</span></span><br><span class="line">anonymous_enable=NO　　 <span class="comment">#禁止匿名用户</span></span><br><span class="line">local_enable=YES</span><br><span class="line">设定本地用户可以访问。注意：主要是为虚拟宿主用户，如果该项目设定为NO那么所有虚拟用户将无法访问</span><br><span class="line">write_enable=YES <span class="comment">#全局设置，是否容许写入（无论是匿名用户还是本地用户，若要启用上传权限的话，就要开启他）</span></span><br><span class="line">local_umask=022 设定上传后文件的权限掩码。</span><br><span class="line">anon_upload_enable=NO 禁止匿名用户上传。</span><br><span class="line">anon_mkdir_write_enable=NO 禁止匿名用户建立目录。</span><br><span class="line">dirmessage_enable=YES 设定开启目录标语功能。</span><br><span class="line">xferlog_enable=YES 设定开启日志记录功能。</span><br><span class="line">connect_from_port_20=YES 设定端口20进行数据连接。</span><br><span class="line">chown_uploads=NO 设定禁止上传文件更改宿主。</span><br><span class="line">xferlog_file=/var/<span class="built_in">log</span>/vsftpd.log 日志保存路径（先创建好文件）</span><br><span class="line">xferlog_std_format=YES　　 <span class="comment">#使用标准格式</span></span><br><span class="line">async_abor_enable=YES 设定支持异步传输功能。</span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES 设定支持ASCII模式的上传和下载功能。</span><br><span class="line">ftpd_banner=Welcome to Awei FTP servers 设定Vsftpd的登陆标语。</span><br><span class="line">chroot_local_user=YES 禁止本地用户登出自己的FTP主目录。</span><br><span class="line">pam_service_name=vsftpd 设定PAM服务下Vsftpd的验证配置文件名。因此，PAM验证将参考/etc/pam.d/下的vsftpd文件配置。</span><br><span class="line">userlist_enable=YES 设为YES的时候，如果一个用户名是在userlist_file参数指定的文件中，</span><br><span class="line"> 那么在要求他们输入密码之前，会直接拒绝他们登陆。</span><br><span class="line">tcp_wrappers=YES 是否支持tcp_wrappers</span><br></pre></td></tr></table></figure><ul><li><strong>以下是我使用的参数,使用的是被动模式</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anonymous_enable=No</span><br><span class="line">listen_port=21</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line"><span class="comment">#chown_uploads=YES</span></span><br><span class="line">xferlog_file=/var/<span class="built_in">log</span>/vsftpd.log</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">async_abor_enable=YES</span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES</span><br><span class="line">ftpd_banner=Welcome to blah FTP service.</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">listen=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line">reverse_lookup_enable=No</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=vsftpd</span><br><span class="line">user_config_dir=/etc/vsftpd/vconf</span><br><span class="line">virtual_use_local_privs=YES</span><br><span class="line">pasv_min_port=9000</span><br><span class="line">pasv_max_port=9045</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_enable=NO</span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line"><span class="comment">#port_enable=YES</span></span><br><span class="line"><span class="comment">#connect_from_port_20=YES</span></span><br><span class="line">pasv_enable=yes</span><br></pre></td></tr></table></figure></li></ul><ul><li>备注: 这里vsftp采用的被动模式，被动模式开放了一个端口段，公司路由器上需要开放这一个端口端，<a href="https://xxlaila.github.io/2019/09/10/路由器端口映射/" target="_blank" rel="noopener">路由器端口映射</a></li></ul><h3 id="4、建立虚拟用户名单文件"><a href="#4、建立虚拟用户名单文件" class="headerlink" title="4、建立虚拟用户名单文件"></a>4、建立虚拟用户名单文件</h3><p>编辑虚拟用户的名单：（第一行用户名。第二行密码。不能使用root）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># vim /etc/vsftpd/xuniusers</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">23123213</span><br><span class="line">test1</span><br><span class="line">34dsfds</span><br><span class="line">test2</span><br><span class="line">df43sd</span><br></pre></td></tr></table></figure><h3 id="5、开始建立生成虚拟用户数据文件"><a href="#5、开始建立生成虚拟用户数据文件" class="headerlink" title="5、开始建立生成虚拟用户数据文件"></a>5、开始建立生成虚拟用户数据文件</h3><p>这里需要安装db4,设置PAM文件权限，并制定虚拟用户数据库文件读取</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># yum –y install db4-utils</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># db_load -T -t hash -f /etc/vsftpd/xuniusers /etc/vsftpd/xuniusers.db</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># chmod 600 /etc/vsftpd/xuniusers.db</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;在/etc/pam.d/vsftpd的文件头部加入以下信息（<strong>注</strong>: 这里一定要在前面，不能再后面，刚开始我也加载到后面登陆的时候提示错误）,修改前先备份</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># cp /etc/pam.d/vsftpd /etc/pam.d/vsftpd.bak</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># vi /etc/pam.d/vsftpd</span></span><br><span class="line">auth sufficient /lib/security/pam_userdb.so db=/etc/vsftpd/xuniusers</span><br><span class="line">account sufficient /lib/security/pam_userdb.so db=/etc/vsftpd/xuniusers</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/%E5%9B%BE%E7%89%87%201.png" alt="img"></p><ul><li><strong>注</strong>: 64位的操作系统，则上面lib改为64。不然配置也会无效</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auth sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/xuniusers</span><br><span class="line">account sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/xuniusers</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;建立一个系统用户vsftpd，用户的主目录可以自己设置，/home/wwwroot，设置用户登陆的终端为/bin/false</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># useradd vsftpd -d /home/wwwroot -s /bin/false</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># chown vsftpd:vsftpd /home/wwwroot -R</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># chown www:www /home/wwwroot –R #如果虚拟用户的宿主用户为nginx，需要这样设置。</span></span><br></pre></td></tr></table></figure><h3 id="6、建立虚拟用户个人vsftp的配置文件"><a href="#6、建立虚拟用户个人vsftp的配置文件" class="headerlink" title="6、建立虚拟用户个人vsftp的配置文件"></a>6、建立虚拟用户个人vsftp的配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># mkdir /etc/vsftpd/vconf</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># cd /etc/vsftpd/vconf</span></span><br><span class="line">touch test1 test2 test3 <span class="comment">#这里创建三个虚拟用户配置文件</span></span><br><span class="line">vi web1 <span class="comment">#编辑用户test1配置文件，其他的跟这个配置文件类似</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># vim test1</span></span><br><span class="line">local_root=/home/wwwroot/test1/</span><br><span class="line">write_enable=YES</span><br><span class="line">anon_umask=022</span><br><span class="line">anon_world_readable_only=NO</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod u-w /home/wwwroot</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;最后重启vsftpd服务,不关闭Selinux可以执行以下命令通过FTP。防火墙开放端口<code>setsebool -P ftpd_disable_trans 1</code><br>&nbsp;&nbsp;&nbsp;&nbsp;上述配置完成后还可以通过#adduser -d /目录路径 -g vsftpd -s /sbin/nologin 用户名 这个命令来添加一个用户，不需要配置任何权限都可以进行FTP的访问,最后补充说明，需要安装的其他插件</p><ul><li><p>需要安装的的是pan</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># yum install -y pam</span></span><br></pre></td></tr></table></figure></li><li><p>这里我们还可以查看日志，可以根据提示的提示来判断。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># cat /var/log/secure</span></span><br></pre></td></tr></table></figure></li></ul><p>测试用户登录虚拟用户只能看到自己本身的目录 ，不能去其他目录查看(到这里vsftpd配置结束)</p><p><strong>注</strong>: 如果这里配置的被动模式，且用的是<a href="http://localhost:4000/2019/09/25/iptables/" target="_blank" rel="noopener">iptables</a>来进行对外代理提供访问，那么需要在vsftpd.conf 的配置文件里面增加一行配置: <code>pasv_promiscuous=YES</code>。否则用户在连接的时候会提示 <code>425 Security: Bad IP connecting.</code>。</p><h3 id="7-pasv-promiscuous选项参数说明"><a href="#7-pasv-promiscuous选项参数说明" class="headerlink" title="7. pasv_promiscuous选项参数说明"></a>7. pasv_promiscuous选项参数说明</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此选项激活时，将关闭PASV模式的安全检查。该检查确保数据连接和控制连接是来自同一个IP地址。小心打开此选项。此选项唯一合理的用法是存在于由安全隧道方案构成的组织中。默认值为NO。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合理的用法是：在一些安全隧道配置环境下，或者更好地支持FXP时(才启用它)</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title>TeamViewer mac破解</title>
    <url>/2019/08/09/TeamViewer-mac%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h2 id="TeamViewer14-4-MAC破解"><a href="#TeamViewer14-4-MAC破解" class="headerlink" title="TeamViewer14.4 MAC破解"></a>TeamViewer14.4 MAC破解</h2><h3 id="在终端执行以下命令"><a href="#在终端执行以下命令" class="headerlink" title="在终端执行以下命令"></a>在终端执行以下命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python TeamViewer-id-changer.py</span><br><span class="line">使用mac自带python2.7 执行即可</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim TeamViewer-id-changer.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/8/1 14:57</span></span><br><span class="line"><span class="comment"># @Author  : xxlaila</span></span><br><span class="line"><span class="comment"># @Site    : </span></span><br><span class="line"><span class="comment"># @File    : TeamViewer-id-changer.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import platform</span><br><span class="line">import random</span><br><span class="line">import re</span><br><span class="line">import string</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">--------------------------------</span></span><br><span class="line"><span class="string">TeamViewer 14 ID Changer for MAC OS</span></span><br><span class="line"><span class="string">Version: 0.2 2019</span></span><br><span class="line"><span class="string">--------------------------------</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> platform.system() != <span class="string">"Darwin"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This script can be run only on MAC OS."</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.geteuid() != 0:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This script must be run form root."</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"SUDO_USER"</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    USERNAME = os.environ[<span class="string">"SUDO_USER"</span>]</span><br><span class="line">    <span class="keyword">if</span> USERNAME == <span class="string">"root"</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Can not find user name. Run this script via sudo from regular user"</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Can not find user name. Run this script via sudo from regular user"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">HOMEDIRLIB = <span class="string">"/Users/"</span> + USERNAME + <span class="string">"/library/preferences/"</span></span><br><span class="line">GLOBALLIB = <span class="string">"/library/preferences/"</span></span><br><span class="line"></span><br><span class="line">CONFIGS = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Find config files</span></span><br><span class="line"></span><br><span class="line">def listdir_fullpath(d):</span><br><span class="line">    <span class="built_in">return</span> [os.path.join(d, f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(d)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> listdir_fullpath(HOMEDIRLIB):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'teamviewer'</span> <span class="keyword">in</span> file.lower():</span><br><span class="line">        CONFIGS.append(file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> listdir_fullpath(GLOBALLIB):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'teamviewer'</span> <span class="keyword">in</span> file.lower():</span><br><span class="line">        CONFIGS.append(file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not CONFIGS:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">            There is no TemViewer configs found.</span></span><br><span class="line"><span class="string">            Maybe you have deleted it manualy or never run TeamViewer after installation.</span></span><br><span class="line"><span class="string">            Nothing to delete.</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># Delete config files</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Configs found:\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> CONFIGS:</span><br><span class="line">        <span class="built_in">print</span>(file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        This files will be DELETED permanently.</span></span><br><span class="line"><span class="string">        All TeamViewer settings will be lost</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span>)</span><br><span class="line">        raw_input(<span class="string">"Press Enter to continue or CTR+C to abort..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> CONFIGS:</span><br><span class="line">        try:</span><br><span class="line">            os.remove(file)</span><br><span class="line">        except:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Cannot delete config files. Permission denied?"</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Done."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find binaryes</span></span><br><span class="line"></span><br><span class="line">TMBINARYES = [</span><br><span class="line">    <span class="string">'/Applications/TeamViewer.app/Contents/MacOS/TeamViewer'</span>,</span><br><span class="line">    <span class="string">'/Applications/TeamViewer.app/Contents/MacOS/TeamViewer_Service'</span>,</span><br><span class="line">    <span class="string">'/Applications/TeamViewer.app/Contents/Helpers/TeamViewer_Desktop'</span>,</span><br><span class="line">    <span class="string">'/Applications/TeamViewer.app/Contents/Helpers/TeamViewer_Assignment'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> TMBINARYES:</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file):</span><br><span class="line">        pass</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"File not found: "</span> + file)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">"Install TeamViewer correctly"</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Patch files</span></span><br><span class="line"></span><br><span class="line">def idpatch(fpath, platf, serial):</span><br><span class="line">    file = open(fpath, <span class="string">'r+b'</span>)</span><br><span class="line">    binary = file.read()</span><br><span class="line">    PlatformPattern = <span class="string">"IOPlatformExpert.&#123;6&#125;"</span></span><br><span class="line">    SerialPattern = <span class="string">"IOPlatformSerialNumber%s%s%s"</span></span><br><span class="line"></span><br><span class="line">    binary = re.sub(PlatformPattern, platf, binary)</span><br><span class="line">    binary = re.sub(SerialPattern % (chr(0), <span class="string">"[0-9a-zA-Z]&#123;8,8&#125;"</span>, chr(0)), SerialPattern % (chr(0), serial, chr(0)), binary)</span><br><span class="line"></span><br><span class="line">    file = open(fpath, <span class="string">'wb'</span>).write(binary)</span><br><span class="line">    <span class="built_in">return</span> True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def random_generator(size=8, chars=string.ascii_uppercase + string.ascii_lowercase + string.digits):</span><br><span class="line">    <span class="built_in">return</span> <span class="string">''</span>.join(random.choice(chars) <span class="keyword">for</span> _ <span class="keyword">in</span> range(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RANDOMSERIAL = random_generator(8)</span><br><span class="line">RANDOMPLATFORM = <span class="string">"IOPlatformExpert"</span> + random_generator(6)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> TMBINARYES:</span><br><span class="line">    try:</span><br><span class="line">        idpatch(file, RANDOMPLATFORM, RANDOMSERIAL)</span><br><span class="line">    except:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Error: can not patch file "</span> + file)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"PlatformDevice: "</span> + RANDOMPLATFORM)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"PlatformSerial: "</span> + RANDOMSERIAL)</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">"sudo codesign -f -s - /Applications/TeamViewer.app/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">ID changed sucessfully.</span></span><br><span class="line"><span class="string">!!! Restart computer before using TeamViewer !!!!</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span>)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>TeamViewer</category>
      </categories>
      <tags>
        <tag>TeamViewer</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins job管理</title>
    <url>/2019/08/09/jenkins-job%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul><li><strong>介绍</strong>: 由于公司的ci用于编译的环境比较多，为了更好的区分，为每一个环境建立了一个view</li><li><strong>痛点</strong>: 运维人员在建立job的时候需要到对应的view下面建立，虽然这不是狠痛苦，但是还是不太方便。</li><li><strong>解决</strong>: 人员登陆默认是在all view下面，每个运维人员在这下面建立job，然后每个view根据自己的规则吧对应的job添加进来。job规则自己提前定义好</li></ul><h2 id="1、安装jenkins插件"><a href="#1、安装jenkins插件" class="headerlink" title="1、安装jenkins插件"></a>1、安装jenkins插件</h2><p>view job 过滤插件view-job-filters，安装过程不累赘</p><h2 id="2、配置view规则"><a href="#2、配置view规则" class="headerlink" title="2、配置view规则"></a>2、配置view规则</h2><p>这里设置两个前端和一个后端实例</p><a id="more"></a><h3 id="2-1、前端1"><a href="#2-1、前端1" class="headerlink" title="2.1、前端1"></a>2.1、前端1</h3><p><img src="https://img.xxlaila.cn/image2018-5-29_10-47-20.png" alt="img"></p><h3 id="2-2、前端test"><a href="#2-2、前端test" class="headerlink" title="2.2、前端test"></a>2.2、前端test</h3><p>test 我们用安装的这个插件来进行配置,点击Add Job Filter——&gt;会有很多的规则，可以根据不同的状态、栏目来进行却分，这里我们选择</p><p><img src="https://img.xxlaila.cn/image2018-5-29_10-49-46.png" alt="img"><br><img src="https://img.xxlaila.cn/image2018-5-29_10-52-49.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;这里添加了两条规则，这个是建立job的时候有点特殊性，用第一种方式实现就会有问题，第一条规则是现实所有test类的job，但是吧下面的一条给加进来了，不现实这类job。保持即可</p><h2 id="后端java程序"><a href="#后端java程序" class="headerlink" title="后端java程序"></a>后端java程序</h2><p>dev环境为例子</p><p><img src="https://img.xxlaila.cn/image2018-5-29_10-54-54.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins job</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins用户权限配置</title>
    <url>/2019/08/09/jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><h3 id="1、jenkins用户权限"><a href="#1、jenkins用户权限" class="headerlink" title="1、jenkins用户权限"></a>1、jenkins用户权限</h3><ul><li>可以集成gitlab、jenkins专有账户、LDAP、Servlet容器代理、Unix用户/组数据库</li></ul><h3 id="2、授权策略"><a href="#2、授权策略" class="headerlink" title="2、授权策略"></a>2、授权策略</h3><ul><li>Gitlab Commiter Authorization Strategy</li><li>Role-Based Strategy</li><li>任何用户可以做任何事(没有任何限制)</li><li>安全矩阵</li><li>登录用户可以做任何事</li><li>遗留模式</li><li>项目矩阵授权策略</li></ul><h3 id="3、插件安装"><a href="#3、插件安装" class="headerlink" title="3、插件安装"></a>3、插件安装</h3><p>安装插件：Role-based Authorization Strategy</p><a id="more"></a><h3 id="4、jenkins设置"><a href="#4、jenkins设置" class="headerlink" title="4、jenkins设置"></a>4、jenkins设置</h3><p>系统管理——&gt;全局安全配置——&gt;<br><img src="https://img.xxlaila.cn/image2018-5-11_14-26-37.png" alt="img"></p><p>回到系统管理界面，就可以看到多出来一个插件: Mangge and Assing Roles</p><h3 id="5、权限设置"><a href="#5、权限设置" class="headerlink" title="5、权限设置"></a>5、权限设置</h3><p>进入Manager and Assign Roles——&gt;Manage Roles,这里建立了四个权限，分别来对应不同的人员<br><img src="https://img.xxlaila.cn/image2018-5-24_11-35-15.png" alt="img"></p><ul><li>创建项目角色:</li></ul><p><img src="https://img.xxlaila.cn/image2018-5-24_11-35-27.png" alt="img"></p><p>回到Manage and Assign Roles界面</p><h3 id="6、配置角色"><a href="#6、配置角色" class="headerlink" title="6、配置角色"></a>6、配置角色</h3><p>选择Assign Roles,用户新建以后，根据用户不同类型的勾选不同的权限,</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb副本集</title>
    <url>/2019/08/09/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86/</url>
    <content><![CDATA[<!-- build time:Fri Nov 29 2019 16:18:32 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mongodb replica set安装加认证，这里使用的是keyFile进行认证，之前看过很多文章，坑一大堆，这里是看了两天的官方文档进行的安装，并用户生产，配置文件参数贴一部分,三个带有数据集的节点组成的复制集拥有，架构图如下，参考官方</p><p><img src="https://img.xxlaila.cn/image2018-8-13_15-27-53.png" alt="img"><br>一个主节点，两个从节点，这两个从节点都可以在选举中升级为主节点</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>三台服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">primary: 192.168.32.7</span><br><span class="line">secaodray: 192.168.32.11</span><br><span class="line">secondary: 192.168.32.14</span><br></pre></td></tr></table></figure><h2 id="1、安装mongodb"><a href="#1、安装mongodb" class="headerlink" title="1、安装mongodb"></a>1、安装mongodb</h2><h3 id="1-1、每个节点都需要操作"><a href="#1-1、每个节点都需要操作" class="headerlink" title="1.1、每个节点都需要操作"></a>1.1、每个节点都需要操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo vim /etc/yum.repos.d/mongodb-enterprise.repo</span></span><br><span class="line">[mongodb-enterprise]</span><br><span class="line">name=MongoDB Enterprise Repository</span><br><span class="line">baseurl=https://repo.mongodb.com/yum/redhat/<span class="variable">$releasever</span>/mongodb-enterprise/3.4/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc   </span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo yum install -y mongodb-enterprise</span></span><br></pre></td></tr></table></figure><p>注意：如果采用源码包方式安装需要安装一下插件</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo yum install cyrus-sasl cyrus-sasl-plain cyrus-sasl-gssapi krb5-libs lm_sensors-libs net-snmp-agent-libs net-snmp openssl rpm-libs tcp_wrappers-libs libcurl</span></span><br></pre></td></tr></table></figure><h2 id="2、修改mongodb的配置文件-每个节点均操作"><a href="#2、修改mongodb的配置文件-每个节点均操作" class="headerlink" title="2、修改mongodb的配置文件(每个节点均操作)"></a>2、修改mongodb的配置文件(每个节点均操作)</h2><h3 id="自定义mongodb的目录"><a href="#自定义mongodb的目录" class="headerlink" title="自定义mongodb的目录"></a>自定义mongodb的目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir /opt/mongodb/&#123;data,conf,logs&#125; -p</span></span><br><span class="line"><span class="comment"># sudo vim /etc/mongod.conf</span></span><br><span class="line"> systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line">  path: /opt/mongodb/logs/mongod.log</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /opt/mongodb/data</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /opt/mongodb/logs/mongod.pid</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0</span><br></pre></td></tr></table></figure><h3 id="3、生成密钥文件-在mong01上操作"><a href="#3、生成密钥文件-在mong01上操作" class="headerlink" title="3、生成密钥文件(在mong01上操作)"></a>3、生成密钥文件(在mong01上操作)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openssl rand -base64 756 &gt; ／opt/mongodb/conf/mongo-keyfile</span></span><br><span class="line"><span class="comment"># sudo chmod 400 /opt/mongo/mongo-keyfile</span></span><br><span class="line"><span class="comment"># scp –r mongo-keyfile user@192.168.32.11:/opt/mongodb/conf</span></span><br><span class="line"><span class="comment"># scp –r mongo-keyfile user@192.168.32.14:/opt/mongodb/conf</span></span><br></pre></td></tr></table></figure><h3 id="4、修改mongodb的配置"><a href="#4、修改mongodb的配置" class="headerlink" title="4、修改mongodb的配置"></a>4、修改mongodb的配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">security:</span><br><span class="line">  keyFile: /opt/mongodb/conf/mongo-keyfile</span><br><span class="line">replication:</span><br><span class="line">  replSetName: xxlaila01（可变化，自定义）</span><br></pre></td></tr></table></figure><p>分别在三台服务器上启动mongodb</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mongod --config /etc/mongod.conf</span></span><br></pre></td></tr></table></figure><h3 id="5、建立集群"><a href="#5、建立集群" class="headerlink" title="5、建立集群"></a>5、建立集群</h3><p>在你需要认为是主节点的服务器进行mongodb的登陆，和账户权限的建立，这里我选择的192.168.32.7</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --shell --host 127.0.0.1</span><br></pre></td></tr></table></figure><p>登陆进去以后可以进行一个简单的命令进行查看</p><p><img src="https://img.xxlaila.cn/image2018-8-13_15-37-2.png" alt="img"></p><h3 id="6、把服务器加入副本集"><a href="#6、把服务器加入副本集" class="headerlink" title="6、把服务器加入副本集"></a>6、把服务器加入副本集</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MongoDB Enterprise &gt; config = &#123; _id:<span class="string">"kxlprod01"</span>,members:[ &#123;_id:0,host:<span class="string">"192.168.32.7:27017"</span>&#125;,</span><br><span class="line">...   &#123;_id:1,host:<span class="string">"192.168.32.11:27017"</span>&#125; ,&#123;_id:2,host:<span class="string">"192.168.32.14:27017"</span>&#125;] &#125;</span><br></pre></td></tr></table></figure><p>config = { _id:”kxlprod01”,members:[ {_id:0,host:”192.168.32.7:27017”},{_id:1,host:”192.168.32.11:27017”} ,{_id:2,host:”192.168.32.14:27017”}] }，增加内容</p><h4 id="6-1-看当前副本集的状态"><a href="#6-1-看当前副本集的状态" class="headerlink" title="6.1 看当前副本集的状态"></a>6.1 看当前副本集的状态</h4><p>利用rs.status()命令可以查看当前副本集的状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; rs.status()</span><br></pre></td></tr></table></figure><p>这里提示配置还没有加载到mongodb副本里面</p><h4 id="6-2、加载配置到副本集"><a href="#6-2、加载配置到副本集" class="headerlink" title="6.2、加载配置到副本集"></a>6.2、加载配置到副本集</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; rs.initiate(config)</span><br></pre></td></tr></table></figure><p>再次查看副本的状态就可以看到mongodb的副本集已建立，如果此时主节点未被选举出来，稍微等一会就成功</p><h3 id="7、创建mongodb副本集认证"><a href="#7、创建mongodb副本集认证" class="headerlink" title="7、创建mongodb副本集认证"></a>7、创建mongodb副本集认证</h3><p>下面两行我们可以看到第一次主节点没有选举成功，随即我们在回车PRIMARY节点选举成功了，下面我们创建一个管理员账户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MongoDB Enterprise xxlaila01:SECONDARY&gt; admin = db.getSiblingDB(<span class="string">"admin"</span>)</span><br><span class="line">MongoDB Enterprise xxlaila01:PRIMARY&gt;</span><br><span class="line">admin.createUser(</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    user: <span class="string">"root"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">"123456"</span>,</span><br><span class="line"></span><br><span class="line">    roles: [ &#123; role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span> &#125; ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">db.getSiblingDB(<span class="string">"admin"</span>).auth(<span class="string">"root"</span>, <span class="string">"123456"</span> )</span><br></pre></td></tr></table></figure><h4 id="7-1、创建集群账户"><a href="#7-1、创建集群账户" class="headerlink" title="7.1、创建集群账户"></a>7.1、创建集群账户</h4><p>创建一个集群管理账户，集群账户具有管理整个副本集的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongo -u <span class="string">"root"</span> -p <span class="string">"123456"</span> --authenticationDatabase <span class="string">"admin"</span></span><br><span class="line"></span><br><span class="line">db.getSiblingDB(<span class="string">"admin"</span>).createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"user"</span> : <span class="string">"manger"</span>,</span><br><span class="line">    <span class="string">"pwd"</span> : <span class="string">"123456"</span>,</span><br><span class="line">    roles: [ &#123; <span class="string">"role"</span> : <span class="string">"clusterAdmin"</span>, <span class="string">"db"</span> : <span class="string">"admin"</span> &#125; ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="7-2-创建一个程序连接的账户"><a href="#7-2-创建一个程序连接的账户" class="headerlink" title="7.2 创建一个程序连接的账户"></a>7.2 创建一个程序连接的账户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.getSiblingDB(<span class="string">"admin"</span>).createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"user"</span> : <span class="string">"systemprod"</span>,</span><br><span class="line">    <span class="string">"pwd"</span> : <span class="string">"123456"</span>,</span><br><span class="line">    roles: [ &#123; <span class="string">"role"</span> : <span class="string">"root"</span>, <span class="string">"db"</span> : <span class="string">"admin"</span> &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>至此mongodb的副本集创建完成。测试没有问题,登陆其中一台SECONDARY服务器进行测试,这里测试192.168.32.11服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongo</span><br><span class="line"></span><br><span class="line">&gt; rs.status()    <span class="comment"># 这里提示没有权限（登录进来以后如果不是主几点，mognodb就会默认显示未secondary）</span></span><br><span class="line"></span><br><span class="line">&gt; use admin 	<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">&gt; db.getSiblingDB(<span class="string">"admin"</span>).auth(<span class="string">"manger"</span>, <span class="string">"123456"</span>)</span><br></pre></td></tr></table></figure><p>完成后我们在执行rs.status()就可以看到副本集的信息</p><h4 id="7-3-测试程序连接账户"><a href="#7-3-测试程序连接账户" class="headerlink" title="7.3 测试程序连接账户"></a>7.3 测试程序连接账户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MongoDB Enterprise xxlaila01:SECONDARY&gt; db.getSiblingDB(<span class="string">"admin"</span>).auth(<span class="string">"systemprod"</span>, <span class="string">"123456"</span> )</span><br><span class="line">&gt; show dbs;	<span class="comment">#会提示 “not master and slaveok=false”</span></span><br><span class="line"></span><br><span class="line">&gt; db.getMongo().setSlaveOk()</span><br><span class="line">&gt; show dbs;	<span class="comment">#在次执行会显示出结果</span></span><br></pre></td></tr></table></figure><p>副本集没有读的权限，需要执行db.getMongo().setSlaveOk()</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
</search>
