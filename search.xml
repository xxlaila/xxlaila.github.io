<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>alertmanager告警配置</title>
    <url>/2019/12/06/alertmanager%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 前篇文章做了kubernetes 的 监控，基于<a href="https://www.xxlaila.cn/2019/12/04/k8s-v1-14-prometheus%E4%B8%8Egrafana%E9%83%A8%E7%BD%B2/">prometheus与grafana部署</a>，监控是做好了，但是还缺乏告警机制，没有告警机制监控就白做了，prometheus的告警就是alertmanager来做。<a id="more"></a> 而在部署kube-prometheus的时候，alertmanager也是部署完成，这里只需要稍加修改alertmanager即可实现告警</p><h3 id="配置-alertmanager"><a href="#配置-alertmanager" class="headerlink" title="配置 alertmanager"></a>配置 alertmanager</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开之前部署<a href="https://www.xxlaila.cn/2019/12/04/k8s-v1-14-prometheus%E4%B8%8Egrafana%E9%83%A8%E7%BD%B2/">prometheus与grafana部署</a>，里面有alertmanager的地址<code>http://alertmanager.xxlaila.cn/</code>，打开界面点击 <code>Status</code> 按钮我们可以查看到alertmanager的默认配置。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">  http_config: &#123;&#125;</span><br><span class="line">  smtp_hello: localhost</span><br><span class="line">  smtp_require_tls: <span class="literal">true</span></span><br><span class="line">  pagerduty_url: https://events.pagerduty.com/v2/enqueue</span><br><span class="line">  hipchat_api_url: https://api.hipchat.com/</span><br><span class="line">  opsgenie_api_url: https://api.opsgenie.com/</span><br><span class="line">  wechat_api_url: https://qyapi.weixin.qq.com/cgi-bin/</span><br><span class="line">  victorops_api_url: https://alert.victorops.com/integrations/generic/20131114/alert/</span><br><span class="line">route:</span><br><span class="line">  receiver: <span class="string">"null"</span></span><br><span class="line">  group_by:</span><br><span class="line">  - job</span><br><span class="line">  routes:</span><br><span class="line">  - receiver: <span class="string">"null"</span></span><br><span class="line">    match:</span><br><span class="line">      alertname: Watchdog</span><br><span class="line">  group_wait: 30s</span><br><span class="line">  group_interval: 5m</span><br><span class="line">  repeat_interval: 12h</span><br><span class="line">receivers:</span><br><span class="line">- name: <span class="string">"null"</span></span><br><span class="line">templates: []</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个默认配置是alertmanager目录下<code>alertmanager-secret.yaml</code>文件生成的，这个配置文件是通过base64加密过的，可以使用base64解密查看</p><ul><li><p>原alertmanager-secret.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  alertmanager.yaml: Imdsb2JhbCI6CiAgInJlc29sdmVfdGltZW91dCI6ICI1bSIKInJlY2VpdmVycyI6Ci0gIm5hbWUiOiAibnVsbCIKInJvdXRlIjoKICAiZ3JvdXBfYnkiOgogIC0gImpvYiIKICAiZ3JvdXBfaW50ZXJ2YWwiOiAiNW0iCiAgImdyb3VwX3dhaXQiOiAiMzBzIgogICJyZWNlaXZlciI6ICJudWxsIgogICJyZXBlYXRfaW50ZXJ2YWwiOiAiMTJoIgogICJyb3V0ZXMiOgogIC0gIm1hdGNoIjoKICAgICAgImFsZXJ0bmFtZSI6ICJXYXRjaGRvZyIKICAgICJyZWNlaXZlciI6ICJudWxsIg==</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: alertmanager-main</span><br><span class="line">  namespace: monitoring</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br></pre></td></tr></table></figure></li><li><p>解密alertmanager-secret.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo "Imdsb2JhbCI6CiAgInJlc29sdmVfdGltZW91dCI6ICI1bSIKInJlY2VpdmVycyI6Ci0gIm5hbWUiOiAibnVsbCIKInJvdXRlIjoKICAiZ3JvdXBfYnkiOgogIC0gImpvYiIKICAiZ3JvdXBfaW50ZXJ2YWwiOiAiNW0iCiAgImdyb3VwX3dhaXQiOiAiMzBzIgogICJyZWNlaXZlciI6ICJudWxsIgogICJyZXBlYXRfaW50ZXJ2YWwiOiAiMTJoIgogICJyb3V0ZXMiOgogIC0gIm1hdGNoIjoKICAgICAgImFsZXJ0bmFtZSI6ICJXYXRjaGRvZyIKICAgICJyZWNlaXZlciI6ICJudWxsIg==" |base64 -d</span></span><br><span class="line"><span class="string">"global"</span>:</span><br><span class="line">  <span class="string">"resolve_timeout"</span>: <span class="string">"5m"</span></span><br><span class="line"><span class="string">"receivers"</span>:</span><br><span class="line">- <span class="string">"name"</span>: <span class="string">"null"</span></span><br><span class="line"><span class="string">"route"</span>:</span><br><span class="line">  <span class="string">"group_by"</span>:</span><br><span class="line">  - <span class="string">"job"</span></span><br><span class="line">  <span class="string">"group_interval"</span>: <span class="string">"5m"</span></span><br><span class="line">  <span class="string">"group_wait"</span>: <span class="string">"30s"</span></span><br><span class="line">  <span class="string">"receiver"</span>: <span class="string">"null"</span></span><br><span class="line">  <span class="string">"repeat_interval"</span>: <span class="string">"12h"</span></span><br><span class="line">  <span class="string">"routes"</span>:</span><br><span class="line">  - <span class="string">"match"</span>:</span><br><span class="line">      <span class="string">"alertname"</span>: <span class="string">"Watchdog"</span></span><br><span class="line">    <span class="string">"receiver"</span>: <span class="string">"null"</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置的结构差不多是一致的，内容嘛都是默认的。这里我们要实现自己的通知，就需要改改啦，这里我使用了企业微信来进行告警，<a href="https://www.xxlaila.cn/2019/08/20/zabbix%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E5%91%8A%E8%AD%A6/">企业微信</a>申请参考。这里我们要新建一个alertmanager.yaml 文件，这个文件名不能随便命名，可以看到alertmanager-secret.yaml是这么定义的。也可以在kubernetes的dashbord界面看到alertmanager 的安装参数也是这个。可以进入容器看到这个文件，默认路径在/etc/alertmanager/config/alertmanager.yaml。</p><h4 id="新建alertmanager-yaml"><a href="#新建alertmanager-yaml" class="headerlink" title="新建alertmanager.yaml"></a>新建alertmanager.yaml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  resolve_timeout: 5m</span><br><span class="line">  smtp_smarthost: <span class="string">'smtp.exmail.qq.com:465'</span></span><br><span class="line">  smtp_from: <span class="string">'admin@admin.com'</span></span><br><span class="line">  smtp_auth_username: <span class="string">'admin@admin.com'</span></span><br><span class="line">  smtp_auth_password: <span class="string">'123456'</span></span><br><span class="line">  smtp_require_tls: <span class="literal">true</span></span><br><span class="line">  hipchat_api_url: <span class="string">'https://hipchat.foobar.org/'</span></span><br><span class="line">  wechat_api_url: <span class="string">'https://qyapi.weixin.qq.com/cgi-bin/'</span> <span class="comment"># 企业微信地址</span></span><br><span class="line">  wechat_api_secret: <span class="string">'KJfj93rijk903240i--234jsnjkhf23sjkfjsfsd'</span> <span class="comment"># 企业微信Secret</span></span><br><span class="line">  wechat_api_corp_id: <span class="string">'wwa98457kdsnfk8'</span> <span class="comment"># 企业微信CorpId</span></span><br><span class="line">templates:</span><br><span class="line">- <span class="string">'*.tmpl'</span></span><br><span class="line">route:</span><br><span class="line">  group_by: [<span class="string">'alertname'</span>]</span><br><span class="line">  group_wait: 30s</span><br><span class="line">  group_interval: 5m</span><br><span class="line">  repeat_interval: 1h</span><br><span class="line">  receiver: default</span><br><span class="line">  routes:</span><br><span class="line">  - receiver: <span class="string">'wechat'</span></span><br><span class="line">    <span class="built_in">continue</span>: <span class="literal">true</span></span><br><span class="line">inhibit_rules:</span><br><span class="line">- source_match:</span><br><span class="line">receivers:</span><br><span class="line">- name: <span class="string">'default'</span></span><br><span class="line">  email_configs:</span><br><span class="line">  - to: <span class="string">'hahah@admin.com'</span></span><br><span class="line">    send_resolved: <span class="literal">true</span></span><br><span class="line">- name: <span class="string">'wechat'</span></span><br><span class="line">  wechat_configs:</span><br><span class="line">  - send_resolved: <span class="literal">true</span></span><br><span class="line">    corp_id: <span class="string">'wwa98457kdsnfk8'</span> <span class="comment"># 企业微信CorpId</span></span><br><span class="line">    to_user: <span class="string">'@all'</span> <span class="comment"># 接受人，都是all</span></span><br><span class="line">    to_party: <span class="string">''</span> <span class="comment"># 接收组的id</span></span><br><span class="line">    message: <span class="string">'&#123;&#123; template "wechat.default.message" . &#125;&#125;'</span> <span class="comment"># 发送消息的模版</span></span><br><span class="line">    agent_id: <span class="string">'1000021'</span> <span class="comment"># 企业微信自定义应用的id</span></span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li>global: 全局配置。定义一些全局的公共参数，如全局的SMTP配置，企业微信，钉钉，这里配置了企业邮箱和企业微信。</li><li>templates: 模版。定义告警通知时的模板，如邮件模板、企业微信告警模版。</li><li>route: 告警路由。根据标签匹配，确定当前告警应该如何处理。</li><li>receivers: 接收人，可以是一个邮箱也可以是企业微信，也可以是一个webhook，这里我配置的企业微信的运维部门。是一个抽象的东西。</li><li>inhibit_rules: 抑制规则。设置合理的抑制规则可以减少垃圾告警的产生</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里要定义一个默认的接受方式<code>- name: &#39;default&#39;</code>，否则会出错误。错误如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">level=error ts=2019-12-06T08:36:25.005Z <span class="built_in">caller</span>=coordinator.go:124 component=configuration msg=<span class="string">"Loading configuration file failed"</span> file=/etc/alertmanager/config/alertmanager.yaml err=<span class="string">"root route must specify a default receiver"</span></span><br></pre></td></tr></table></figure><h4 id="tmpl模板的配置"><a href="#tmpl模板的配置" class="headerlink" title=".tmpl模板的配置"></a>.tmpl模板的配置</h4><ul><li>wechat.default.message.tmpl<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; wechat.default.message.tmpl &lt;&lt;EOF</span></span><br><span class="line">&#123;&#123; define <span class="string">"wechat.default.message"</span> &#125;&#125;</span><br><span class="line">&#123;&#123;- <span class="keyword">if</span> gt (len .Alerts.Firing) 0 -&#125;&#125;</span><br><span class="line">&#123;&#123;- range <span class="variable">$index</span>, <span class="variable">$alert</span> := .Alerts -&#125;&#125;</span><br><span class="line">&#123;&#123;- <span class="keyword">if</span> eq <span class="variable">$index</span> 0 -&#125;&#125;</span><br><span class="line">告警类型: &#123;&#123; <span class="variable">$alert</span>.Labels.alertname &#125;&#125;</span><br><span class="line">告警级别: &#123;&#123; <span class="variable">$alert</span>.Labels.severity &#125;&#125;</span><br><span class="line"></span><br><span class="line">=====================</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">===告警详情===</span><br><span class="line">告警详情: &#123;&#123; <span class="variable">$alert</span>.Annotations.message &#125;&#125;</span><br><span class="line">故障时间: &#123;&#123; <span class="variable">$alert</span>.StartsAt.Format <span class="string">"2019-11-06 17:01:01"</span> &#125;&#125;</span><br><span class="line">===参考信息===</span><br><span class="line">&#123;&#123; <span class="keyword">if</span> gt (len <span class="variable">$alert</span>.Labels.instance) 0 -&#125;&#125;故障实例ip: &#123;&#123; <span class="variable">$alert</span>.Labels.instance &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- <span class="keyword">if</span> gt (len <span class="variable">$alert</span>.Labels.namespace) 0 -&#125;&#125;故障实例所在namespace: &#123;&#123; <span class="variable">$alert</span>.Labels.namespace &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- <span class="keyword">if</span> gt (len <span class="variable">$alert</span>.Labels.node) 0 -&#125;&#125;故障物理机ip: &#123;&#123; <span class="variable">$alert</span>.Labels.node &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- <span class="keyword">if</span> gt (len <span class="variable">$alert</span>.Labels.pod_name) 0 -&#125;&#125;故障pod名称: &#123;&#123; <span class="variable">$alert</span>.Labels.pod_name &#125;&#125;&#123;&#123;- end &#125;&#125;</span><br><span class="line">=====================</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;- <span class="keyword">if</span> gt (len .Alerts.Resolved) 0 -&#125;&#125;</span><br><span class="line">&#123;&#123;- range <span class="variable">$index</span>, <span class="variable">$alert</span> := .Alerts -&#125;&#125;</span><br><span class="line">&#123;&#123;- <span class="keyword">if</span> eq <span class="variable">$index</span> 0 -&#125;&#125;</span><br><span class="line">告警类型: &#123;&#123; <span class="variable">$alert</span>.Labels.alertname &#125;&#125;</span><br><span class="line">告警级别: &#123;&#123; <span class="variable">$alert</span>.Labels.severity &#125;&#125;</span><br><span class="line"></span><br><span class="line">=====================</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">===告警详情===</span><br><span class="line">告警详情: &#123;&#123; <span class="variable">$alert</span>.Annotations.message &#125;&#125;</span><br><span class="line">故障时间: &#123;&#123; <span class="variable">$alert</span>.StartsAt.Format <span class="string">"2019-11-06 17:01:01"</span> &#125;&#125;</span><br><span class="line">恢复时间: &#123;&#123; <span class="variable">$alert</span>.EndsAt.Format <span class="string">"2019-11-06 17:01:01"</span> &#125;&#125;</span><br><span class="line">===参考信息===</span><br><span class="line">&#123;&#123; <span class="keyword">if</span> gt (len <span class="variable">$alert</span>.Labels.instance) 0 -&#125;&#125;故障实例ip: &#123;&#123; <span class="variable">$alert</span>.Labels.instance &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- <span class="keyword">if</span> gt (len <span class="variable">$alert</span>.Labels.namespace) 0 -&#125;&#125;故障实例所在namespace: &#123;&#123; <span class="variable">$alert</span>.Labels.namespace &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- <span class="keyword">if</span> gt (len <span class="variable">$alert</span>.Labels.node) 0 -&#125;&#125;故障物理机ip: &#123;&#123; <span class="variable">$alert</span>.Labels.node &#125;&#125;;&#123;&#123;- end -&#125;&#125;</span><br><span class="line">&#123;&#123;- <span class="keyword">if</span> gt (len <span class="variable">$alert</span>.Labels.pod_name) 0 -&#125;&#125;故障pod名称: &#123;&#123; <span class="variable">$alert</span>.Labels.pod_name &#125;&#125;;&#123;&#123;- end &#125;&#125;</span><br><span class="line">=====================</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">&#123;&#123;- end &#125;&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><h3 id="建立alertmanager-main"><a href="#建立alertmanager-main" class="headerlink" title="建立alertmanager-main"></a>建立alertmanager-main</h3><h4 id="删除原有的配置项"><a href="#删除原有的配置项" class="headerlink" title="删除原有的配置项"></a>删除原有的配置项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl delete secret alertmanager-main -n monitoring</span></span><br></pre></td></tr></table></figure><h4 id="部署alertmanager-secret"><a href="#部署alertmanager-secret" class="headerlink" title="部署alertmanager secret"></a>部署alertmanager secret</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重新部署alertmanager secret有两种方式，第一种是把建立好的alertmanager.yaml 通过base64加密以后覆盖之前文件的base64内容，wechat.default.message.tmpl模版文件也是一样。整体格式如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat alertmanager-secret.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  alertmanager.yaml: bash64</span><br><span class="line">  template_1.tmpl: bash64</span><br><span class="line">  template_2.tmpl: bash64</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: alertmanager-main</span><br><span class="line">  namespace: monitoring</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种创建比较麻烦，每次修改文件都要去生成一次。不方便。所以可以使用以下方式，简单快捷。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create secret generic alertmanager-main --from-file=alertmanager.yaml,wechat.default.message.tmpl -n monitoring</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;部署完成以后，Secret 对象将会挂载到 AlertManager 对象创建的 AlertManager Pod 中去。等一小会就企业微信就可以收到告警信息</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="alertmanager-web界面的config信息会发生变化"><a href="#alertmanager-web界面的config信息会发生变化" class="headerlink" title="alertmanager web界面的config信息会发生变化"></a>alertmanager web界面的config信息会发生变化</h4><p><img src="https://img.xxlaila.cn/1575624600073.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1575624706636.jpg" alt="img"></p><h4 id="企业微信"><a href="#企业微信" class="headerlink" title="企业微信"></a>企业微信</h4><p><img src="https://img.xxlaila.cn/1575624815597.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>alertmanager</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 prometheus与grafana部署</title>
    <url>/2019/12/04/k8s-v1-14-prometheus%E4%B8%8Egrafana%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kube-prometheus是读取Metrcs、etcd、api的其中数据。<a id="more"></a></p><h4 id="查看etcd的metrics输出信息"><a href="#查看etcd的metrics输出信息" class="headerlink" title="查看etcd的metrics输出信息"></a>查看etcd的metrics输出信息</h4><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># curl --cacert <span class="regexp">/etc/</span>kubernetes<span class="regexp">/ssl/</span>ca.pem --cert <span class="regexp">/etc/</span>etcd<span class="regexp">/ssl/</span>etcd.pem --key <span class="regexp">/etc/</span>etcd<span class="regexp">/ssl/</span>etcd-key.pem https:<span class="comment">//172.21.17.30:2379/metrics</span></span><br></pre></td></tr></table></figure><h4 id="查看kube-apiserver的metrics信息"><a href="#查看kube-apiserver的metrics信息" class="headerlink" title="查看kube-apiserver的metrics信息"></a>查看kube-apiserver的metrics信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get --raw /metrics</span></span><br></pre></td></tr></table></figure><h4 id="下载官方的yaml文件"><a href="#下载官方的yaml文件" class="headerlink" title="下载官方的yaml文件"></a>下载官方的yaml文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/coreos/kube-prometheus</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd kube-prometheus/manifests</span></span><br><span class="line"><span class="comment"># mkdir -p operator node-exporter alertmanager grafana kube-state-metrics prometheus serviceMonitor adapter</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mv *-serviceMonitor* serviceMonitor/</span></span><br><span class="line"><span class="comment"># mv grafana-* grafana/</span></span><br><span class="line"><span class="comment"># mv kube-state-metrics-* kube-state-metrics/</span></span><br><span class="line"><span class="comment"># mv alertmanager-* alertmanager/</span></span><br><span class="line"><span class="comment"># mv node-exporter-* node-exporter/</span></span><br><span class="line"><span class="comment"># mv prometheus-adapter* adapter/</span></span><br><span class="line"><span class="comment"># mv prometheus-* prometheus/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd setup/</span></span><br><span class="line"><span class="comment"># mv prometheus-operator* ../operator/</span></span><br><span class="line"><span class="comment"># mv 0namespace-namespace.yaml ../</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cd ..</span></span><br><span class="line"><span class="comment"># ls -ltrh</span></span><br><span class="line">-rw-r--r-- 1 root root   60 Dec  3 17:45 0namespace-namespace.yaml</span><br><span class="line">drwxr-xr-x 2 root root  219 Dec  3 17:46 grafana</span><br><span class="line">drwxr-xr-x 2 root root  305 Dec  3 17:46 kube-state-metrics</span><br><span class="line">drwxr-xr-x 2 root root  200 Dec  3 17:46 node-exporter</span><br><span class="line">drwxr-xr-x 2 root root 4.0K Dec  3 17:47 operator</span><br><span class="line">drwxr-xr-x 2 root root  149 Dec  4 13:40 alertmanager</span><br><span class="line">drwxr-xr-x 2 root root 4.0K Dec  5 09:56 prometheus</span><br><span class="line">drwxr-xr-x 2 root root 4.0K Dec  5 10:01 adapter</span><br><span class="line">drwxr-xr-x 2 root root 4.0K Dec  5 11:55 serviceMonitor</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;部署前需要修改文件；</p><h4 id="创建监控etcd-secret"><a href="#创建监控etcd-secret" class="headerlink" title="创建监控etcd secret"></a>创建监控etcd secret</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;etcd 监控要用到证书同时需要修改prometheus-prometheus.yaml。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -n monitoring create secret generic etcd-certs --from-file=/etc/kubernetes/ssl/ca.pem --from-file=etcd-key.pem --from-file=etcd.pem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get secret -n monitoring</span></span><br><span class="line">etcd-certs                        Opaque                                3      5d15h</span><br></pre></td></tr></table></figure><h4 id="修改prometheus-prometheus-yaml"><a href="#修改prometheus-prometheus-yaml" class="headerlink" title="修改prometheus-prometheus.yaml"></a>修改prometheus-prometheus.yaml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd prometheus/</span></span><br><span class="line"><span class="comment"># vim prometheus-prometheus.yaml</span></span><br><span class="line">apiVersion: monitoring.coreos.com/v1</span><br><span class="line">kind: Prometheus</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    prometheus: k8s</span><br><span class="line">  name: k8s</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  alerting:</span><br><span class="line">    alertmanagers:</span><br><span class="line">    - name: alertmanager-main</span><br><span class="line">      namespace: monitoring</span><br><span class="line">      port: web</span><br><span class="line">  baseImage: quay.io/prometheus/prometheus</span><br><span class="line">  nodeSelector:</span><br><span class="line">    kubernetes.io/os: linux</span><br><span class="line">  podMonitorSelector: &#123;&#125;</span><br><span class="line">  replicas: 2</span><br><span class="line">  <span class="comment"># 添加etcd 证书</span></span><br><span class="line">  secrets:</span><br><span class="line">  - etcd-certs</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      memory: 400Mi</span><br><span class="line">  <span class="comment"># 设置数据保留天数</span></span><br><span class="line">  retention: 7d</span><br><span class="line">  <span class="comment"># 创建外部存储pvc</span></span><br><span class="line">  storage:</span><br><span class="line">    volumeClaimTemplate:</span><br><span class="line">      spec:</span><br><span class="line">        accessModes:</span><br><span class="line">        - ReadWriteOnce</span><br><span class="line">        metadata:</span><br><span class="line">          annotations:</span><br><span class="line">            storageclass.kubernetes.io/is-default-class: <span class="literal">true</span></span><br><span class="line">          labels:</span><br><span class="line">            prometheus: prometheus-data-pvc</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            storage: 25Gi</span><br><span class="line">  ruleSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      prometheus: k8s</span><br><span class="line">      role: alert-rules</span><br><span class="line">  securityContext:</span><br><span class="line">    fsGroup: 2000</span><br><span class="line">    runAsNonRoot: <span class="literal">true</span></span><br><span class="line">    runAsUser: 1000</span><br><span class="line">  serviceAccountName: prometheus-k8s</span><br><span class="line">  serviceMonitorNamespaceSelector: &#123;&#125;</span><br><span class="line">  serviceMonitorSelector: &#123;&#125;</span><br><span class="line">  version: v2.11.0</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>storageclass.kubernetes.io/is-default-class: true</code> 是设置的默认动态存储，可以参考<a href="https://www.xxlaila.cn/2019/08/12/kube-nfs-%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8/">kube-nfs-动态存储</a></p><h4 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;部署前吧adapter 目录下面的 <code>prometheus-adapter-apiService.yaml</code> 重命名，因为前面安装了metrics。如果这里在覆盖安装，就会导致<code>metrics.k8s.io</code>报错。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># kubectl apply -f 0namespace-namespace.yaml</span></span><br><span class="line"><span class="keyword">namespace</span>/monitoring created</span><br><span class="line"></span><br><span class="line"><span class="meta"># kubectl apply -f operator/</span></span><br><span class="line"><span class="meta"># kubectl -n monitoring get pod|grep operator</span></span><br><span class="line">prometheus-<span class="keyword">operator</span><span class="number">-548</span>c6dc45c-vz6l6   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">40</span>h</span><br><span class="line"></span><br><span class="line"><span class="meta"># kubectl apply -f adapter/</span></span><br><span class="line"><span class="meta"># kubectl apply -f alertmanager/</span></span><br><span class="line"><span class="meta"># kubectl apply -f node-exporter/</span></span><br><span class="line"><span class="meta"># kubectl apply -f kube-state-metrics/</span></span><br><span class="line"><span class="meta"># kubectl apply -f grafana/</span></span><br><span class="line"><span class="meta"># kubectl apply -f prometheus/</span></span><br><span class="line"><span class="meta"># kubectl apply -f serviceMonitor/</span></span><br></pre></td></tr></table></figure><h4 id="查看部署状态"><a href="#查看部署状态" class="headerlink" title="查看部署状态"></a>查看部署状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get all -n monitoring</span></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/alertmanager-main-0                    2/2     Running   0          40h</span><br><span class="line">pod/alertmanager-main-1                    2/2     Running   0          40h</span><br><span class="line">pod/alertmanager-main-2                    2/2     Running   0          40h</span><br><span class="line">pod/grafana-5db74b88f4-7mt8c               1/1     Running   0          40h</span><br><span class="line">pod/kube-state-metrics-54f98c4687-mz5lq    3/3     Running   0          18h</span><br><span class="line">pod/node-exporter-hb66c                    2/2     Running   0          40h</span><br><span class="line">pod/node-exporter-l2s8g                    2/2     Running   0          40h</span><br><span class="line">pod/node-exporter-sjbmg                    2/2     Running   0          40h</span><br><span class="line">pod/node-exporter-vw87m                    2/2     Running   0          40h</span><br><span class="line">pod/node-exporter-zr8fk                    2/2     Running   0          40h</span><br><span class="line">pod/node-exporter-zxcwl                    2/2     Running   0          40h</span><br><span class="line">pod/prometheus-adapter-8667948d79-tcz47    1/1     Running   0          18h</span><br><span class="line">pod/prometheus-k8s-0                       3/3     Running   1          20h</span><br><span class="line">pod/prometheus-k8s-1                       3/3     Running   1          20h</span><br><span class="line">pod/prometheus-operator-548c6dc45c-vz6l6   1/1     Running   0          40h</span><br><span class="line"></span><br><span class="line">NAME                            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">service/alertmanager-main       ClusterIP   10.254.101.249   &lt;none&gt;        9093/TCP                     40h</span><br><span class="line">service/alertmanager-operated   ClusterIP   None             &lt;none&gt;        9093/TCP,9094/TCP,9094/UDP   40h</span><br><span class="line">service/etcd                    ClusterIP   None             &lt;none&gt;        2379/TCP                     17h</span><br><span class="line">service/grafana                 ClusterIP   10.254.214.6     &lt;none&gt;        3000/TCP                     40h</span><br><span class="line">service/kube-state-metrics      ClusterIP   None             &lt;none&gt;        8443/TCP,9443/TCP            18h</span><br><span class="line">service/node-exporter           ClusterIP   None             &lt;none&gt;        9100/TCP                     40h</span><br><span class="line">service/prometheus-adapter      ClusterIP   10.254.60.49     &lt;none&gt;        443/TCP                      18h</span><br><span class="line">service/prometheus-k8s          ClusterIP   10.254.41.152    &lt;none&gt;        9090/TCP                     40h</span><br><span class="line">service/prometheus-operated     ClusterIP   None             &lt;none&gt;        9090/TCP                     20h</span><br><span class="line">service/prometheus-operator     ClusterIP   None             &lt;none&gt;        8080/TCP                     40h</span><br><span class="line"></span><br><span class="line">NAME                           DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE</span><br><span class="line">daemonset.apps/node-exporter   6         6         6       6            6           kubernetes.io/os=linux   40h</span><br><span class="line"></span><br><span class="line">NAME                                  READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/grafana               1/1     1            1           40h</span><br><span class="line">deployment.apps/kube-state-metrics    1/1     1            1           18h</span><br><span class="line">deployment.apps/prometheus-adapter    1/1     1            1           18h</span><br><span class="line">deployment.apps/prometheus-operator   1/1     1            1           40h</span><br><span class="line"></span><br><span class="line">NAME                                             DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/grafana-5db74b88f4               1         1         1       40h</span><br><span class="line">replicaset.apps/kube-state-metrics-54f98c4687    1         1         1       18h</span><br><span class="line">replicaset.apps/prometheus-adapter-8667948d79    1         1         1       18h</span><br><span class="line">replicaset.apps/prometheus-operator-548c6dc45c   1         1         1       40h</span><br><span class="line"></span><br><span class="line">NAME                                 READY   AGE</span><br><span class="line">statefulset.apps/alertmanager-main   3/3     40h</span><br><span class="line">statefulset.apps/prometheus-k8s      2/2     20h</span><br></pre></td></tr></table></figure><h4 id="配置ingress"><a href="#配置ingress" class="headerlink" title="配置ingress"></a>配置ingress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;ingress-monitor.yaml &lt;&lt;EOF </span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-web-ui</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: prometheus.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: prometheus-k8s</span><br><span class="line">          servicePort: 9090</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana-web-ui</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: grafana.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: grafana</span><br><span class="line">          servicePort: 3000</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: alertmanager-web-ui</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: alertmanager.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: alertmanager-main</span><br><span class="line">          servicePort: 9093</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f ingress-monitor.yaml</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在浏览器打开域名即可访问</p><h3 id="常用应用监控"><a href="#常用应用监控" class="headerlink" title="常用应用监控"></a>常用应用监控</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kubernetes 自身常见的监控有kube-apiserver、kube-scheduler、kube-controller-manager、etcd。node节点常见的有kubelet、kube-proxy。在serviceMonitor目录下面默认的文件只能满足kube-apiserver、kubelet两个，其他的修改单独修改文件才能监控。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 上面阐述的是集群是二进制方式安装，而不是以pod形式进行安装。</p><h4 id="kube-scheduler监控"><a href="#kube-scheduler监控" class="headerlink" title="kube-scheduler监控"></a>kube-scheduler监控</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kube-scheduler的service、endpoints不在kubernetes集群内，可以通过<code>kubectl get ep -n kube-system</code> 进行查看，修改 <code>prometheus-serviceMonitorKubeScheduler.yaml</code>，在该文件添加如下内容或者新起一个文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;&gt; prometheus-serviceMonitorKubeScheduler.yaml &lt;&lt;EOF</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-scheduler</span><br><span class="line">  name: kube-scheduler</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-metrics</span><br><span class="line">    port: 10251</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 10251</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-scheduler</span><br><span class="line">  name: kube-scheduler</span><br><span class="line">  namespace: kube-system</span><br><span class="line">subsets:</span><br><span class="line">- addresses:</span><br><span class="line">  - ip: 172.21.17.30</span><br><span class="line">  - ip: 172.21.17.31</span><br><span class="line">  - ip: 172.21.16.110</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-metrics</span><br><span class="line">    port: 10251</span><br><span class="line">    protocol: TCP</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f prometheus-serviceMonitorKubeScheduler.yaml</span></span><br></pre></td></tr></table></figure><h4 id="kube-controller-manager-监控"><a href="#kube-controller-manager-监控" class="headerlink" title="kube-controller-manager 监控"></a>kube-controller-manager 监控</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kube-controller-manager修改，因为kubernetes 集群是采用ssl证书安装，默认的kube-controller-manager是没有使用ssl加密的，所以这里需要使用ssl证书，及https，否则不能监控。就会提示什么403、x509、400错误。</p><ul><li><p>prometheus-serviceMonitorKubeControllerManager.yaml 修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat prometheus-serviceMonitorKubeControllerManager.yaml</span></span><br><span class="line">apiVersion: monitoring.coreos.com/v1</span><br><span class="line">kind: ServiceMonitor</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-controller-manager</span><br><span class="line">  name: kube-controller-manager</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  endpoints:</span><br><span class="line">  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line">    interval: 30s</span><br><span class="line">    port: https-metrics</span><br><span class="line">    scheme: https</span><br><span class="line">    tlsConfig:</span><br><span class="line">      insecureSkipVerify: <span class="literal">true</span></span><br><span class="line">    metricRelabelings:</span><br><span class="line">    - action: drop</span><br><span class="line">      regex: etcd_(debugging|disk|request|server).*</span><br><span class="line">      sourceLabels:</span><br><span class="line">      - __name__</span><br><span class="line">  jobLabel: k8s-app</span><br><span class="line">  namespaceSelector:</span><br><span class="line">    matchNames:</span><br><span class="line">    - kube-system</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kube-controller-manager</span><br></pre></td></tr></table></figure></li><li><p>新建kube-controller-manager-service.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;kube-controller-manager-service.yaml &lt;&lt;EOF</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-controller-manager</span><br><span class="line">  name: kube-controller-manager</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">  - name: https-metrics</span><br><span class="line">    port: 10252</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 10252</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-controller-manager</span><br><span class="line">  name: kube-controller-manager</span><br><span class="line">  namespace: kube-system</span><br><span class="line">subsets:</span><br><span class="line">- addresses:</span><br><span class="line">  - ip: 172.21.17.30</span><br><span class="line">  - ip: 172.21.17.31</span><br><span class="line">  - ip: 172.21.16.110</span><br><span class="line">  ports:</span><br><span class="line">  - name: https-metrics</span><br><span class="line">    port: 10252</span><br><span class="line">    protocol: TCP</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f prometheus-serviceMonitorKubeControllerManager.yaml</span></span><br><span class="line"><span class="comment"># kubectl apply -f kube-controller-manager-service.yaml</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="etcd-监控"><a href="#etcd-监控" class="headerlink" title="etcd 监控"></a>etcd 监控</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; etcd 不在k8s集群内部所以要创建Endpoints、Service</p><ul><li>prometheus-serviceMonitoretcd.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; prometheus-serviceMonitoretcd.yaml&lt;&lt;EOF</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: etcd</span><br><span class="line">  name: etcd</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">  - name: https-metrics</span><br><span class="line">    port: 2379</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 2379</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: etcd</span><br><span class="line">  name: etcd</span><br><span class="line">  namespace: kube-system</span><br><span class="line">subsets:</span><br><span class="line">- addresses:</span><br><span class="line">  - ip: 172.21.17.30</span><br><span class="line">  - ip: 172.21.17.31</span><br><span class="line">  - ip: 172.21.16.110</span><br><span class="line">  ports:</span><br><span class="line">  - name: https-metrics</span><br><span class="line">    port: 2379</span><br><span class="line">    protocol: TCP</span><br><span class="line">---</span><br><span class="line">apiVersion: monitoring.coreos.com/v1</span><br><span class="line">kind: ServiceMonitor</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: etcd</span><br><span class="line">  name: etcd</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  endpoints:</span><br><span class="line">  - interval: 10s</span><br><span class="line">    port: https-metrics</span><br><span class="line">    scheme: https</span><br><span class="line">    tlsConfig:</span><br><span class="line">      caFile: /etc/prometheus/secrets/etcd-certs/ca.pem</span><br><span class="line">      certFile: /etc/prometheus/secrets/etcd-certs/etcd.pem</span><br><span class="line">      keyFile: /etc/prometheus/secrets/etcd-certs/etcd-key.pem</span><br><span class="line">      insecureSkipVerify: <span class="literal">true</span></span><br><span class="line">  namespaceSelector:</span><br><span class="line">    matchNames:</span><br><span class="line">    - kube-system</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: etcd</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f prometheus-serviceMonitoretcd.yaml</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="kube-proxy-监控"><a href="#kube-proxy-监控" class="headerlink" title="kube-proxy 监控"></a>kube-proxy 监控</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kube-proxy的metrics收集端口为10249，可以查看kub-proxy的安装文档。使用的是http方式，不需要ssl加密</p><ul><li><p>新建 kube-proxy.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;  kube-proxy.yaml &lt;&lt;EOF</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-proxy</span><br><span class="line">  name: kube-proxy</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-metrics</span><br><span class="line">    port: 10249</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 10249</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-proxy</span><br><span class="line">  name: kube-proxy</span><br><span class="line">  namespace: kube-system</span><br><span class="line">subsets:</span><br><span class="line">- addresses:</span><br><span class="line">  - ip: 172.21.16.204</span><br><span class="line">  - ip: 172.21.16.231</span><br><span class="line">  - ip: ……</span><br><span class="line">  ports:</span><br><span class="line">  - name: http-metrics</span><br><span class="line">    port: 10249</span><br><span class="line">    protocol: TCP</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>新建 prometheus-serviceMonitorProxy.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; prometheus-serviceMonitorProxy.yaml &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: monitoring.coreos.com/v1</span><br><span class="line">kind: ServiceMonitor</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-proxy</span><br><span class="line">  name: kube-proxy</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  endpoints:</span><br><span class="line">  - interval: 30s</span><br><span class="line">    port: http-metrics</span><br><span class="line">  jobLabel: k8s-app</span><br><span class="line">  namespaceSelector:</span><br><span class="line">    matchNames:</span><br><span class="line">    - kube-system</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kube-proxy</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f prometheus-serviceMonitorProxy.yaml</span></span><br><span class="line"><span class="comment"># kubectl apply -f kube-proxy.yaml</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="traefik-监控"><a href="#traefik-监控" class="headerlink" title="traefik 监控"></a>traefik 监控</h4><ul><li>新建prometheus-serviceMonitorTraefix.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; prometheus-serviceMonitorTraefix.yaml &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: monitoring.coreos.com/v1</span><br><span class="line">kind: ServiceMonitor</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress</span><br><span class="line">  name: traefik-ingress</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  jobLabel: k8s-app</span><br><span class="line">  endpoints:</span><br><span class="line">  - port: admin  <span class="comment">#---设置为traefik 8080端口名称 admin</span></span><br><span class="line">    interval: 30s</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: traefik-ingress</span><br><span class="line">  namespaceSelector:</span><br><span class="line">    matchNames:</span><br><span class="line">    - kube-system</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f prometheus-serviceMonitorTraefix.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前提是能打开traefix 的metrics页面，跟着我前面的文档安装，默认是开启的。</p><h3 id="grafana-修改"><a href="#grafana-修改" class="headerlink" title="grafana 修改"></a>grafana 修改</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grafana默认安装后，需要安装插件，否则饼状图无法显示。而且我们还需要倒入官方的一些dashbord 模版，默认grafana安装如果pod 重建之后什么都没有了，这时候我们需要建立一个pvc，吧数据保存到磁盘里面，即使grafana重建之后数据还在。不受任何影响。</p><h4 id="新建grafana-pvc-yaml"><a href="#新建grafana-pvc-yaml" class="headerlink" title="新建grafana-pvc.yaml"></a>新建grafana-pvc.yaml</h4><ul><li>grafana-pvc.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; grafana-pvc.yaml &lt;&lt;EOF</span></span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana-pvc</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  storageClassName: xxlaila-nfs-storage</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 5Gi</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f grafana-pvc.yaml</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="修改granfana-deployment-yaml"><a href="#修改granfana-deployment-yaml" class="headerlink" title="修改granfana-deployment.yaml"></a>修改granfana-deployment.yaml</h4><ul><li>granfana-deployment.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改</span></span><br><span class="line">    volumes:</span><br><span class="line">      <span class="comment">#- emptyDir: &#123;&#125;</span></span><br><span class="line">      - name: grafana-storage</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: grafana-pvc</span><br><span class="line">      - name: grafana-datasources</span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line">        - mountPath: /grafana-dashboard-definitions/0/grafana-dashboard-k8s-traefik-ingress</span><br><span class="line">          name: grafana-dashboard-k8s-traefik-ingress</span><br><span class="line">          readOnly: <span class="literal">false</span></span><br><span class="line">        - mountPath: /grafana-dashboard-definitions/0/grafana-dashboard-k8s-etcd-clusters-as-service</span><br><span class="line">          name: grafana-dashboard-k8s-etcd-clusters-as-service</span><br><span class="line">          readOnly: <span class="literal">false</span></span><br><span class="line">        - mountPath: /grafana-dashboard-definitions/0/grafana-dashboard-k8s-etcd-cluster-as-pod</span><br><span class="line">          name: grafana-dashboard-k8s-etcd-cluster-as-pod</span><br><span class="line">          readOnly: <span class="literal">false</span></span><br><span class="line">        - mountPath: /grafana-dashboard-definitions/0/grafana-dashboard-k8s-etcd-server</span><br><span class="line">          name: grafana-dashboard-k8s-etcd-server</span><br><span class="line">          readOnly: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line">    - configMap:</span><br><span class="line">          name: grafana-dashboard-k8s-etcd-clusters-as-service</span><br><span class="line">        name: grafana-dashboard-k8s-etcd-clusters-as-service</span><br><span class="line">      - configMap:</span><br><span class="line">          name: grafana-dashboard-k8s-etcd-cluster-as-pod</span><br><span class="line">        name: grafana-dashboard-k8s-etcd-cluster-as-pod</span><br><span class="line">      - configMap:</span><br><span class="line">          name: grafana-dashboard-k8s-etcd-server</span><br><span class="line">        name: grafana-dashboard-k8s-etcd-server</span><br><span class="line">      - configMap:</span><br><span class="line">          name: grafana-dashboard-k8s-traefik-ingress</span><br><span class="line">        name: grafana-dashboard-k8s-traefik-ingress</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述新增值需要吧dashbord的模版倒入grafana-dashboardDefinitions.yaml文件里面，格式可以参考里面的格式，记住数据库需要修改，否则无法链接数据库，dashbord无法显示。</p><h4 id="查看service、endpoints"><a href="#查看service、endpoints" class="headerlink" title="查看service、endpoints"></a>查看service、endpoints</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc,endpoints -n kube-system</span></span><br><span class="line">NAME                              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">service/etcd                      ClusterIP   None             &lt;none&gt;        2379/TCP                 3m41s</span><br><span class="line">service/kube-controller-manager   ClusterIP   None             &lt;none&gt;        10252/TCP                16h</span><br><span class="line">service/kube-dns                  ClusterIP   10.254.0.2       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   7d16h</span><br><span class="line">service/kube-proxy                ClusterIP   None             &lt;none&gt;        10249/TCP                37m</span><br><span class="line">service/kube-scheduler            ClusterIP   None             &lt;none&gt;        10251/TCP                18h</span><br><span class="line">service/kubelet                   ClusterIP   None             &lt;none&gt;        10250/TCP                40h</span><br><span class="line">service/kubernetes-dashboard      NodePort    10.254.139.196   &lt;none&gt;        443:31417/TCP            6d18h</span><br><span class="line">service/metrics-server            ClusterIP   10.254.196.151   &lt;none&gt;        443/TCP                  2d23h</span><br><span class="line"></span><br><span class="line">NAME                                ENDPOINTS                                                                 AGE</span><br><span class="line">endpoints/etcd                      172.21.16.110:2379,172.21.17.30:2379,172.21.17.31:2379                    3m41s</span><br><span class="line">endpoints/kube-controller-manager   172.21.16.110:10252,172.21.17.30:10252,172.21.17.31:10252                 16h</span><br><span class="line">endpoints/kube-dns                  10.244.1.46:53,10.244.4.36:53,10.244.1.46:53 + 3 more...                  7d16h</span><br><span class="line">endpoints/kube-proxy                172.21.16.204:10249,172.21.16.231:10249,172.21.17.34:10249 + 3 more...    37m</span><br><span class="line">endpoints/kube-scheduler            172.21.16.110:10251,172.21.17.30:10251,172.21.17.31:10251                 7d16h</span><br><span class="line">endpoints/kubelet                   172.21.16.204:10255,172.21.16.231:10255,172.21.17.34:10255 + 15 more...   40h</span><br><span class="line">endpoints/kubernetes-dashboard      10.244.6.27:8443                                                          6d18h</span><br><span class="line">endpoints/metrics-server            172.21.17.34:4443                                                         2d23h</span><br></pre></td></tr></table></figure><h4 id="查看接口信息"><a href="#查看接口信息" class="headerlink" title="查看接口信息"></a>查看接口信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl api-versions| grep monitoring</span></span><br><span class="line">monitoring.coreos.com/v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get --raw "/apis/monitoring.coreos.com/v1"|jq .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get --raw "/apis/monitoring.coreos.com/v1/servicemonitors"|jq .</span></span><br></pre></td></tr></table></figure><h3 id="查看验证"><a href="#查看验证" class="headerlink" title="查看验证"></a>查看验证</h3><h4 id="Prometheus-的Targets监控"><a href="#Prometheus-的Targets监控" class="headerlink" title="Prometheus 的Targets监控"></a>Prometheus 的Targets监控</h4><p><img src="https://img.xxlaila.cn/1575513127483.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1575513184822.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1575513219480.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1575517225144.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1575519980419.jpg" alt="img"></p><h4 id="granfa-查看"><a href="#granfa-查看" class="headerlink" title="granfa 查看"></a>granfa 查看</h4><p><img src="https://img.xxlaila.cn/1575513263070.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1575513304800.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1575513339328.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 7 升级内核</title>
    <url>/2019/12/03/centos-7-%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="centos-7-升级内核版本"><a href="#centos-7-升级内核版本" class="headerlink" title="centos 7 升级内核版本"></a>centos 7 升级内核版本</h3><h4 id="查看当前内核版本"><a href="#查看当前内核版本" class="headerlink" title="查看当前内核版本"></a>查看当前内核版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uname -r</span></span><br><span class="line">3.10.0-693.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># uname -a</span></span><br><span class="line">Linux k8s-master-01-3.kxl 3.10.0-693.el7.x86_64 <span class="comment">#1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="更新yum源仓库和插件"><a href="#更新yum源仓库和插件" class="headerlink" title="更新yum源仓库和插件"></a>更新yum源仓库和插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reboot</span></span><br></pre></td></tr></table></figure><h3 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h3><h4 id="导入ELRepo仓库的公共密钥"><a href="#导入ELRepo仓库的公共密钥" class="headerlink" title="导入ELRepo仓库的公共密钥"></a>导入ELRepo仓库的公共密钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></span><br></pre></td></tr></table></figure><h4 id="安装ELRepo仓库的yum源"><a href="#安装ELRepo仓库的yum源" class="headerlink" title="安装ELRepo仓库的yum源"></a>安装ELRepo仓库的yum源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm</span></span><br></pre></td></tr></table></figure><h4 id="查看可用的系统内核包"><a href="#查看可用的系统内核包" class="headerlink" title="查看可用的系统内核包"></a>查看可用的系统内核包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum --disablerepo="*" --enablerepo="elrepo-kernel" list available</span></span><br><span class="line">elrepo-kernel                                                                                                                                                                      | 2.9 kB  00:00:00     </span><br><span class="line">elrepo-kernel/primary_db                                                                                                                                                           | 1.8 MB  00:00:00     </span><br><span class="line">Available Packages</span><br><span class="line">kernel-lt.x86_64                                                                                     4.4.205-1.el7.elrepo                                                                    elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-devel.x86_64                                                                               4.4.205-1.el7.elrepo                                                                    elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-doc.noarch                                                                                 4.4.205-1.el7.elrepo                                                                    elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-headers.x86_64                                                                             4.4.205-1.el7.elrepo                                                                    elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-tools.x86_64                                                                               4.4.205-1.el7.elrepo                                                                    elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-tools-libs.x86_64                                                                          4.4.205-1.el7.elrepo                                                                    elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-tools-libs-devel.x86_64                                                                    4.4.205-1.el7.elrepo                                                                    elrepo-kernel</span><br><span class="line">kernel-ml.x86_64                                                                                     5.4.1-1.el7.elrepo                                                                      elrepo-kernel</span><br><span class="line">kernel-ml-devel.x86_64                                                                               5.4.1-1.el7.elrepo                                                                      elrepo-kernel</span><br><span class="line">kernel-ml-doc.noarch                                                                                 5.4.1-1.el7.elrepo                                                                      elrepo-kernel</span><br><span class="line">kernel-ml-headers.x86_64                                                                             5.4.1-1.el7.elrepo                                                                      elrepo-kernel</span><br><span class="line">kernel-ml-tools.x86_64                                                                               5.4.1-1.el7.elrepo                                                                      elrepo-kernel</span><br><span class="line">kernel-ml-tools-libs.x86_64                                                                          5.4.1-1.el7.elrepo                                                                      elrepo-kernel</span><br><span class="line">kernel-ml-tools-libs-devel.x86_64                                                                    5.4.1-1.el7.elrepo                                                                      elrepo-kernel</span><br><span class="line">perf.x86_64                                                                                          5.4.1-1.el7.elrepo                                                                      elrepo-kernel</span><br><span class="line">python-perf.x86_64                                                                                   5.4.1-1.el7.elrepo                                                                      elrepo-kernel</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结果为长期维护版本lt为4.4，最新主线稳定版ml为5.4，这里安装的是4.4</p><h4 id="安装kernel"><a href="#安装kernel" class="headerlink" title="安装kernel"></a>安装kernel</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y --enablerepo=elrepo-kernel install kernel-lt.x86_64-4.4.205-1.el7.elrepo kernel-lt-devel.x86_64-4.4.205-1.el7.elrepo</span></span><br></pre></td></tr></table></figure><h3 id="设置-grub2"><a href="#设置-grub2" class="headerlink" title="设置 grub2"></a>设置 grub2</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内核安装好后，需要设置为默认启动选项并重启后才会生效</p><h4 id="查看系统上的所有可用内核"><a href="#查看系统上的所有可用内核" class="headerlink" title="查看系统上的所有可用内核"></a>查看系统上的所有可用内核</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># awk -F\' '$1=="menuentry " &#123;print i++ " : " $2&#125;' /etc/grub2.cfg</span></span><br><span class="line">0 : CentOS Linux (4.4.205-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">1 : CentOS Linux (3.10.0-957.12.1.el7.x86_64) 7 (Core)</span><br><span class="line">2 : CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)</span><br><span class="line">3 : CentOS Linux (0-rescue-d1f142097d497f24c021d7de9b81cab4) 7 (Core)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务器上存在4 个内核，我们要使用 4.4 这个版本，可以通过 grub2-set-default 0 命令或编辑 /etc/default/grub 文件来设置</p><h4 id="设置新的内核为grub2的默认版本"><a href="#设置新的内核为grub2的默认版本" class="headerlink" title="设置新的内核为grub2的默认版本"></a>设置新的内核为grub2的默认版本</h4><ul><li><p>方法1<br>通过 grub2-set-default 0 命令设置，其中 0 是上面查询出来的可用内核</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grub2-set-default 0</span></span><br></pre></td></tr></table></figure></li><li><p>方法2<br>编辑 /etc/default/grub 文件，设置 GRUB_DEFAULT=0，通过上面查询显示的编号为 0 的内核作为默认内核。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/default/grub</span></span><br><span class="line">GRUB_TIMEOUT=1</span><br><span class="line">GRUB_DISTRIBUTOR=<span class="string">"<span class="variable">$(sed 's, release .*$,,g' /etc/system-release)</span>"</span></span><br><span class="line">GRUB_DEFAULT=0</span><br><span class="line">GRUB_DISABLE_SUBMENU=<span class="literal">true</span></span><br><span class="line">GRUB_TERMINAL=<span class="string">"serial console"</span></span><br><span class="line">GRUB_SERIAL_COMMAND=<span class="string">"serial --speed=115200"</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">"console=tty0 crashkernel=auto console=ttyS0,115200"</span></span><br><span class="line">GRUB_DISABLE_RECOVERY=<span class="string">"true"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="生成-grub-配置文件并重启"><a href="#生成-grub-配置文件并重启" class="headerlink" title="生成 grub 配置文件并重启"></a>生成 grub 配置文件并重启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br><span class="line">Generating grub configuration file ...</span><br><span class="line">Found linux image: /boot/vmlinuz-4.4.205-1.el7.elrepo.x86_64</span><br><span class="line">Found initrd image: /boot/initramfs-4.4.205-1.el7.elrepo.x86_64.img</span><br><span class="line">Found linux image: /boot/vmlinuz-3.10.0-957.12.1.el7.x86_64</span><br><span class="line">Found initrd image: /boot/initramfs-3.10.0-957.12.1.el7.x86_64.img</span><br><span class="line">Found linux image: /boot/vmlinuz-3.10.0-693.el7.x86_64</span><br><span class="line">Found initrd image: /boot/initramfs-3.10.0-693.el7.x86_64.img</span><br><span class="line">Found linux image: /boot/vmlinuz-0-rescue-d1f142097d497f24c021d7de9b81cab4</span><br><span class="line">Found initrd image: /boot/initramfs-0-rescue-d1f142097d497f24c021d7de9b81cab4.img</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reboot</span></span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uname -r</span></span><br><span class="line">4.4.205-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure><h3 id="删除旧内核"><a href="#删除旧内核" class="headerlink" title="删除旧内核"></a>删除旧内核</h3><h4 id="查看系统中全部的内核"><a href="#查看系统中全部的内核" class="headerlink" title="查看系统中全部的内核"></a>查看系统中全部的内核</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -qa | grep kernel</span></span><br><span class="line">kernel<span class="_">-lt</span>-devel-4.4.205-1.el7.elrepo.x86_64</span><br><span class="line">kernel-3.10.0-693.el7.x86_64</span><br><span class="line">kernel-3.10.0-957.12.1.el7.x86_64</span><br><span class="line">kernel<span class="_">-lt</span>-4.4.205-1.el7.elrepo.x86_64</span><br><span class="line">kernel-tools-libs-3.10.0-1062.4.3.el7.x86_64</span><br><span class="line">kernel-3.10.0-1062.4.3.el7.x86_64</span><br><span class="line">kernel-tools-3.10.0-1062.4.3.el7.x86_64</span><br></pre></td></tr></table></figure><h4 id="yum-remove-删除旧内核的-RPM-包"><a href="#yum-remove-删除旧内核的-RPM-包" class="headerlink" title="yum remove 删除旧内核的 RPM 包"></a>yum remove 删除旧内核的 RPM 包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum remove kernel-3.10.0-693.el7.x86_64 kernel-3.10.0-957.12.1.el7.x86_64 kernel-tools-libs-3.10.0-1062.4.3.el7.x86_64 kernel-3.10.0-1062.4.3.el7.x86_64 kernel-tools-3.10.0-1062.4.3.el7.x86_64</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>flannel cni容器部署</title>
    <url>/2019/11/29/flannel-cni%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="flannel-cni-配置"><a href="#flannel-cni-配置" class="headerlink" title="flannel cni 配置"></a>flannel cni 配置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除原有的网络组件，采用容器方式进行部署。</p><h3 id="kube-controller-manager修改"><a href="#kube-controller-manager修改" class="headerlink" title="kube-controller-manager修改"></a>kube-controller-manager修改</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;启动参数增加如下两项<a id="more"></a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--allocate-node-cidrs=<span class="literal">true</span></span><br><span class="line">--cluster-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><p><strong>参数</strong>:</p><ul><li>1.是否应在云提供商上分配和设置Pod的CIDR</li><li>2.集群中Pod的CIDR范围。要求–allocate-node-cidrs为true</li></ul><p>kube-controller-manager参数<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/" target="_blank" rel="noopener">详细说明</a></p><h3 id="kubelet-修改"><a href="#kubelet-修改" class="headerlink" title="kubelet 修改"></a>kubelet 修改</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet修改两个配置文件，kubelet-config.yaml 文件已更新</p><h4 id="kubelet-service启动文件"><a href="#kubelet-service启动文件" class="headerlink" title="kubelet.service启动文件"></a>kubelet.service启动文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--network-plugin=cni</span><br><span class="line">--cni-conf-dir=/etc/cni/net.d</span><br><span class="line">--cni-bin-dir=/opt/cni/bin</span><br></pre></td></tr></table></figure><p>kubele参数<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/" target="_blank" rel="noopener">详细说明</a></p><h4 id="kube-proxy-修改子网"><a href="#kube-proxy-修改子网" class="headerlink" title="kube-proxy 修改子网"></a>kube-proxy 修改子网</h4><ul><li>kube-proxy-config.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clusterCIDR: 10.244.0.0/16</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k8s<a href="https://www.xxlaila.cn/2019/09/11/kubernetes-v1-14%E5%AE%89%E8%A3%85/">集群安装文档</a>已经更新，node<a href="https://www.xxlaila.cn/2019/09/16/kubernetes-v1-14-node%E5%AE%89%E8%A3%85/">节点安装文档</a>已经更新。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先停止node 的flananel、 kubelet、kube-proxy。在删除/etc/cni/net.d/、/run/flannel/subnet.env、/var/lib/cni/flannel 的历史文件，重启网卡，除了flannel不启动，其他均启动。全新安装不需要这么操作，flannel证书也不需要复制。<a href="https://github.com/containernetworking/cni" target="_blank" rel="noopener">二进制安装参考</a></p><h3 id="下载cni插件"><a href="#下载cni插件" class="headerlink" title="下载cni插件"></a>下载cni插件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cni <a href="https://github.com/containernetworking/plugins/releases" target="_blank" rel="noopener">插件下载</a>，解压后，放在各个节点的 /opt/cni/bin 下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /opt/cni/bin/</span><br><span class="line">total 70144</span><br><span class="line">-rwxr-xr-x 1 root root  4159253 Nov 26 16:32 bandwidth</span><br><span class="line">-rwxr-xr-x 1 root root  4628074 Nov 26 16:32 bridge</span><br><span class="line">-rwxr-xr-x 1 root root 12124236 Nov 26 16:32 dhcp</span><br><span class="line">-rwxr-xr-x 1 root root  5894275 Nov 26 16:32 firewall</span><br><span class="line">-rwxr-xr-x 1 root root  3069556 Nov 26 16:32 flannel</span><br><span class="line">-rwxr-xr-x 1 root root  4113837 Nov 26 16:32 host-device</span><br><span class="line">-rwxr-xr-x 1 root root  3614305 Nov 26 16:32 host-local</span><br><span class="line">-rwxr-xr-x 1 root root  4275320 Nov 26 16:32 ipvlan</span><br><span class="line">-rwxr-xr-x 1 root root  3209373 Nov 26 16:32 loopback</span><br><span class="line">-rwxr-xr-x 1 root root  4346248 Nov 26 16:32 macvlan</span><br><span class="line">-rwxr-xr-x 1 root root  3895553 Nov 26 16:32 portmap</span><br><span class="line">-rwxr-xr-x 1 root root  4546828 Nov 26 16:32 ptp</span><br><span class="line">-rwxr-xr-x 1 root root  3392736 Nov 26 16:32 sbr</span><br><span class="line">-rwxr-xr-x 1 root root  2885430 Nov 26 16:32 static</span><br><span class="line">-rwxr-xr-x 1 root root  3356497 Nov 26 16:32 tuning</span><br><span class="line">-rwxr-xr-x 1 root root  4275168 Nov 26 16:32 vlan</span><br></pre></td></tr></table></figure><h3 id="flannel-部署"><a href="#flannel-部署" class="headerlink" title="flannel 部署"></a>flannel 部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/v0.11.0/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line">kubectl apply -f ./kube-flannel.yml</span><br></pre></td></tr></table></figure><h3 id="查看flannel安装情况"><a href="#查看flannel安装情况" class="headerlink" title="查看flannel安装情况"></a>查看flannel安装情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get po,svc -o wide</span></span><br><span class="line">NAME                 READY   STATUS    RESTARTS   AGE   IP           NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">pod/nginx-ds-b9wgm   1/1     Running   0          43h   10.244.6.2   172.21.17.41    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx-ds-dd9mb   1/1     Running   0          43h   10.244.1.3   172.21.17.34    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx-ds-lcrn5   1/1     Running   0          43h   10.244.4.2   172.21.16.231   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx-ds-n52vr   1/1     Running   0          43h   10.244.2.2   172.21.17.40    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx-ds-twdxm   1/1     Running   0          43h   10.244.5.2   172.21.16.204   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx-ds-z72mx   1/1     Running   0          43h   10.244.3.2   172.21.17.38    &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE   SELECTOR</span><br><span class="line">service/kubernetes   ClusterIP   10.254.0.1      &lt;none&gt;        443/TCP        44h   &lt;none&gt;</span><br><span class="line">service/nginx-ds     NodePort    10.254.230.34   &lt;none&gt;        80:31286/TCP   43h   app=nginx-ds</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get po,svc -o wide -n kube-system</span></span><br><span class="line">NAME                                              READY   STATUS    RESTARTS   AGE     IP              NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">pod/coredns-5579b8778b-dlk4c                      1/1     Running   4          43h     10.244.1.2      172.21.17.34    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-2t8rn                   1/1     Running   0          44h     172.21.17.41    172.21.17.41    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-9sb8v                   1/1     Running   0          44h     172.21.16.231   172.21.16.231   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-npl5k                   1/1     Running   0          44h     172.21.17.34    172.21.17.34    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-r5n8r                   1/1     Running   0          44h     172.21.16.204   172.21.16.204   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-wpfxw                   1/1     Running   0          44h     172.21.17.40    172.21.17.40    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kube-flannel-ds-amd64-x2v8z                   1/1     Running   0          44h     172.21.17.38    172.21.17.38    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/kubernetes-dashboard-65dfbf6f4f-sc92h         1/1     Running   0          21h     10.244.6.10     172.21.17.41    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/metrics-server-v0.3.4-5cd6d6b55f-psq2z        2/2     Running   0          3h20m   172.21.17.34    172.21.17.34    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/traefik-ingress-controller-56b6d5b864-srnmm   1/1     Running   0          155m    172.21.17.41    172.21.17.41    &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE     SELECTOR</span><br><span class="line">service/kube-dns                  ClusterIP   10.254.0.2       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   43h     k8s-app=kube-dns</span><br><span class="line">service/kubernetes-dashboard      NodePort    10.254.139.196   &lt;none&gt;        443:31417/TCP            21h     k8s-app=kubernetes-dashboard</span><br><span class="line">service/metrics-server            ClusterIP   10.254.201.191   &lt;none&gt;        443/TCP                  3h56m   k8s-app=metrics-server</span><br><span class="line">service/traefik-ingress-service   ClusterIP   None             &lt;none&gt;        80/TCP,8080/TCP          154m    k8s-app=traefik-ingress-lb</span><br><span class="line">service/traefik-web-ui            ClusterIP   10.254.78.17     &lt;none&gt;        80/TCP                   23h     k8s-app=traefik-ingress-lb</span><br></pre></td></tr></table></figure><h3 id="查看节点的网络"><a href="#查看节点的网络" class="headerlink" title="查看节点的网络"></a>查看节点的网络</h3><ul><li><p>node-01</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ifconfig</span></span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.6.1  netmask 255.255.255.0  broadcast 10.244.6.255</span><br><span class="line">        ether 42:56:73:73:c5:69  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 121976  bytes 48185929 (45.9 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 143012  bytes 112170228 (106.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.21.17.41  netmask 255.255.240.0  broadcast 172.21.31.255</span><br><span class="line">        ether fa:16:3e:a0:b1:af  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1878425  bytes 997129342 (950.9 MiB)</span><br><span class="line">        RX errors 0  dropped 29  overruns 0  frame 0</span><br><span class="line">        TX packets 1014950  bytes 378435170 (360.9 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.6.0  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        ether 32:83:f7:e6:de:77  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 207502  bytes 36217464 (34.5 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 242424  bytes 246992876 (235.5 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 15889  bytes 7196484 (6.8 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 15889  bytes 7196484 (6.8 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">vethb26f5960: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        ether a6:a8:18:c3:f0:16  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 23  bytes 2075 (2.0 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 49  bytes 4330 (4.2 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></li><li><p>node-02</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ifconfig</span></span><br><span class="line">cni0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.4.1  netmask 255.255.255.0  broadcast 10.244.4.255</span><br><span class="line">        ether 82:14:33:5c:b0:b7  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 150228  bytes 747318135 (712.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 214837  bytes 209342880 (199.6 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.21.16.231  netmask 255.255.240.0  broadcast 172.21.31.255</span><br><span class="line">        ether fa:16:3e:d8:23:fe  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 10290258  bytes 3436274673 (3.2 GiB)</span><br><span class="line">        RX errors 0  dropped 19  overruns 0  frame 0</span><br><span class="line">        TX packets 9490095  bytes 3777352983 (3.5 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">flannel.1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 10.244.4.0  netmask 255.255.255.255  broadcast 0.0.0.0</span><br><span class="line">        ether ee:a3:ff:37:3a:61  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 280851  bytes 31096456 (29.6 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 262931  bytes 968429571 (923.5 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 653134  bytes 200562497 (191.2 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 653134  bytes 200562497 (191.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">veth8aa15f82: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        ether fa:23:1e:b0:65:20  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 49191  bytes 4622232 (4.4 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 53647  bytes 19011709 (18.1 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>flannel</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-dashboard v2.0.0部署</title>
    <url>/2019/11/28/k8s-dashboard-v2-0-0%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes Dashboard 从v2.0.0-beta1版本开始，集成了一个metrics-scraper的组件，可以通过 Kubernetes 的 Metrics API 收集一些基础资源的监控信息，并在web页面展示</p><a id="more"></a><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta6/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><h3 id="使用-openssl-签发证书"><a href="#使用-openssl-签发证书" class="headerlink" title="使用 openssl 签发证书"></a>使用 openssl 签发证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir certs</span><br><span class="line">openssl req -nodes -newkey rsa:2048 -keyout certs/dashboard.key -out certs/dashboard.csr -subj <span class="string">"/C=/ST=/L=/O=/OU=/CN=kubernetes-dashboard"</span></span><br><span class="line">openssl x509 -req -sha256 -days 10000 -<span class="keyword">in</span> certs/dashboard.csr -signkey certs/dashboard.key -out certs/dashboard.crt</span><br></pre></td></tr></table></figure><h3 id="安装-Dashboard"><a href="#安装-Dashboard" class="headerlink" title="安装 Dashboard"></a>安装 Dashboard</h3><h4 id="创建namespace"><a href="#创建namespace" class="headerlink" title="创建namespace"></a>创建namespace</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create namespace kubernetes-dashboard</span><br></pre></td></tr></table></figure><h4 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic kubernetes-dashboard-certs --from-file=certs -n kubernetes-dashboard</span><br></pre></td></tr></table></figure><h4 id="修改recommended-yaml"><a href="#修改recommended-yaml" class="headerlink" title="修改recommended.yaml"></a>修改recommended.yaml</h4><ul><li><p>注释namespace</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br></pre></td></tr></table></figure></li><li><p>使用自签发的证书<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用自签发的证书,注释掉 kubernetes-dashboard-certs 的 Secret 定义</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-certs</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create -f recommended.yaml</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用-NodePort-暴露服务"><a href="#使用-NodePort-暴露服务" class="headerlink" title="使用 NodePort 暴露服务"></a>使用 NodePort 暴露服务</h4><ul><li><p>新建 external-https-svc.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;external-https-svc.yaml&lt;&lt;EOF</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard-external</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create -f external-https-svc.yaml</span><br></pre></td></tr></table></figure></li><li><p>查看验证</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># kubectl <span class="keyword">get</span> svc,pods -n kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">NAME                                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">service/dashboard-metrics-scraper       ClusterIP   <span class="number">10.254</span><span class="number">.199</span><span class="number">.169</span>   &lt;none&gt;        <span class="number">8000</span>/TCP        <span class="number">9</span>m50s</span><br><span class="line">service/kubernetes-dashboard            ClusterIP   <span class="number">10.254</span><span class="number">.73</span><span class="number">.119</span>    &lt;none&gt;        <span class="number">443</span>/TCP         <span class="number">9</span>m51s</span><br><span class="line">service/kubernetes-dashboard-<span class="keyword">external</span>   NodePort    <span class="number">10.254</span><span class="number">.169</span><span class="number">.250</span>   &lt;none&gt;        <span class="number">443</span>:<span class="number">32318</span>/TCP   <span class="number">11</span>m</span><br><span class="line"></span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/dashboard-metrics-scraper<span class="number">-69f</span>cc6d9df<span class="number">-4</span>lctd   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">9</span>m49s</span><br><span class="line">pod/kubernetes-dashboard<span class="number">-77</span>d4694b5f-vkgfz        <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">9</span>m49s</span><br></pre></td></tr></table></figure></li></ul><p>使用之前的密钥认证登录，未出图，查了一下，说的是兼容问题，v1.15.0以上就没问题<br><img src="https://img.xxlaila.cn/1574927727171.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>dashboard v2.0.0</tag>
      </tags>
  </entry>
  <entry>
    <title>logstash详解</title>
    <url>/2019/11/21/logstash%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前篇文件<a href="http://www.xxlaila.cn/2019/11/15/elk%E9%83%A8%E7%BD%B2/">elk部署</a>粗略的完成了部署，但是真正是批量使用的时候发现还是有很多不足，优化的点还是非常的多。<a id="more"></a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用ElasticSearch时一般需要自己创建ElasticSearch的索引的Mapping，当索引非常多的时候，可能需要配置一个索引模板Template来对类似的索引做统一配置，让索引模板Template中配置匹配索引的规则，来确定该Template会被应用到哪些索引上。</p><h3 id="Template配置方式"><a href="#Template配置方式" class="headerlink" title="Template配置方式"></a>Template配置方式</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logstash在整合ElasticSearch的时候，有三种方式可以来进行Template的配置。</p><h4 id="使用ElasticSearch默认自带的索引模板"><a href="#使用ElasticSearch默认自带的索引模板" class="headerlink" title="使用ElasticSearch默认自带的索引模板"></a>使用ElasticSearch默认自带的索引模板</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ElasticSearch默认自带了一个名字为”logstash”的模板，默认应用于Logstash写入数据到ElasticSearch使用，我们可以在通过es的api接口、或者在kibana dev tools窗口通过GET /_template/来进行查看</p><ul><li><p>api 查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET http://127.0.0.1:9200/_template  -s | python -m json.tool</span><br><span class="line"></span><br><span class="line">$ curl -XGET http://127.0.0.1:9200/_template?pretty</span><br></pre></td></tr></table></figure></li><li><p>kibana 查看<br><img src="https://img.xxlaila.cn/1574314182454.jpg" alt="img"></p></li><li><p>优点: 最简单，无须任何配置</p></li><li><p>缺点: 无法自定义一些配置，例如：分词方式</p></li></ul><h4 id="在Logstash-Indexer端自定义配置索引模板"><a href="#在Logstash-Indexer端自定义配置索引模板" class="headerlink" title="在Logstash Indexer端自定义配置索引模板"></a>在Logstash Indexer端自定义配置索引模板</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logstash的output插件中使用template指定本机器上的一个模板json文件路径，可以在json文件中设置对应的Template模板信息。前面的章节就使用的这种方式。</p><ul><li>优点：配置简单</li><li>缺点：因为分散在Logstash Indexer机器上，维护起来比较麻烦</li></ul><h4 id="在ElasticSearch服务端自定义配置索引模板"><a href="#在ElasticSearch服务端自定义配置索引模板" class="headerlink" title="在ElasticSearch服务端自定义配置索引模板"></a>在ElasticSearch服务端自定义配置索引模板</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由ElasticSearch负责加载模板。这种方式需要在ElasticSearch的集群中的config/templates路径下配置模板json。而且ElasticSearch提供了Restful API接口维护索引模板信息。</p><ul><li>优点：维护比较容易，可动态更改，全局生效。</li><li>缺点：需要注意模板的命名规则，比较容易通过看Template名字就能够确定模板应用到哪些索引</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;三种索引方式都有优缺点；但是使用第三种方式是最好的，就像之前<a href="http://www.xxlaila.cn/2019/11/15/elk%E9%83%A8%E7%BD%B2/">elk部署</a>就使用的是第二种方式，然后是在用的时候发现，logstash是多台服务器，维护起来非常非常的麻烦。如果logstash 和ElasticSearch只有一台服务器，可以使用第二种方式，在Logstash Indexer端维护Template文件即可。</p><h3 id="模版类型"><a href="#模版类型" class="headerlink" title="模版类型"></a>模版类型</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ElasticSearch的模板类型主要由两种：静态模板和动态模板</p><h4 id="静态模板"><a href="#静态模板" class="headerlink" title="静态模板"></a>静态模板</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;适合索引字段数据固定的场景，一旦配置完成，不能向里面加入多余的字段，否则会报错</p><ul><li>优点：scheam已知，业务场景明确，不容易出现因字段随便映射从而造成元数据撑爆es内存，从而导致es集群全部宕机</li><li>缺点：字段数多的情况下配置稍繁琐，针对于每个索引可能需要的模板都不同，很有可能需要配置很多个模板</li></ul><h4 id="动态模板"><a href="#动态模板" class="headerlink" title="动态模板"></a>动态模板</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;适合字段数不明确，大量字段的配置类型相同的场景，可以按照类型规则动态添加新字段，新加字段不会报错。主要需要配置 <code>dynamic_templates</code>。</p><ul><li>优点：可动态添加任意字段，无须改动schema</li><li>缺点：无标准schema导致数据不规则，如果添加的字段非常多，有可能造成ES集群宕机</li></ul><p><strong>注</strong>: 模板在设置生效后，仅对ES集群中新建立的索引生效，而对已存在的索引及时索引名满足模板的匹配规则，也不会生效，因此如果需要改变现有索引的Mapping信息，仍需要在正确的Mapping基础上建立新的索引，并将数据从原索引拷贝至新索引，变更新索引别名为原索引这种方式来实现。</p><h3 id="模板结构"><a href="#模板结构" class="headerlink" title="模板结构"></a>模板结构</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模版的结构如<a href="http://www.xxlaila.cn/2019/11/15/elk%E9%83%A8%E7%BD%B2/">elk部署</a>里面所提到的。分四部分</p><ul><li>通用设置: 主要是模板匹配索引的过滤规则，影响该模板对哪些索引生效；</li><li>settings: 配置索引的公共参数，比如索引的replicas，以及分片数shards等参数；</li><li>mappings: 最重要的一部分，在这部分中配置每个type下的每个field的相关属性，比如field类型（string,long,date等等），是否分词，是否在内存中缓存等等属性都在这部分配置；</li><li>aliases: 索引别名，索引别名可用在索引数据迁移等用途上。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我们在定制索引模版的时候，这时候我们需要参考研发给的日志标准和需要的日志标准格式，以及日志样本等，给出一些运维的见解。否则做出来的东西不一定满足需求，又要重新来做。着重参考如下:</p><ul><li>是否存储</li><li>是否分词</li><li>以什么来建立索引</li><li>字段类型是什么</li><li>如何排序</li><li>字段数是否固定</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结合这些，我们还可以参考词库的维护，ElasticSearch后期结构的变化调整，如果这些不考虑，在后期量起来以后，改动任何一项都需要去重新建立索引。是非常蛋疼的。</p><h3 id="创建模版"><a href="#创建模版" class="headerlink" title="创建模版"></a>创建模版</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里采用第三种三种方式建立模版，登录kibana，在dev tools栏下面，删除默认的logstash-<em>模版，然后创建一个logstash-</em>的模版，这样当新的索引来了以后，就会加载这个模版。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>logstash监控</title>
    <url>/2019/11/19/logstash%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="logstash-api-监控"><a href="#logstash-api-监控" class="headerlink" title="logstash api 监控"></a>logstash api 监控</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logstash 5.0 开始，提供了输出自身进程的指标和状态监控的 API。这大大降低了我们监控 Logstash 的难度。<a id="more"></a>可以使用Logstash提供的监视API来检索这些指标。默认情况下api可用，不需任何额外的配置，或者可以配置X-Pack监视以将数据发送到监视群集。这个直接在kibana页面进行配置。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logstash收集的指标包括:</p><ul><li>节点信息: 接口目前支持三种类型：pipeline、os、jvm。</li><li>插件信息: 包括已安装插件的列表。</li><li>节点统计指标: JVM统计信息，进程统计信息，与事件相关的统计信息和管道运行时统计信息。</li><li>热线程统计</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;检索常规信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"build_date"</span> : <span class="string">"2018-08-18T00:25:22Z"</span>,</span><br><span class="line">  <span class="string">"build_sha"</span> : <span class="string">"f8014ac54e6c8ff6c071c0960ca1b00e9735f43a"</span>,</span><br><span class="line">  <span class="string">"build_snapshot"</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pipeline-指标"><a href="#pipeline-指标" class="headerlink" title="pipeline 指标"></a>pipeline 指标</h3><h4 id="工作程序数量，批处理大小和批处理延迟"><a href="#工作程序数量，批处理大小和批处理延迟" class="headerlink" title="工作程序数量，批处理大小和批处理延迟"></a>工作程序数量，批处理大小和批处理延迟</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/pipelines?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"pipelines"</span> : &#123;</span><br><span class="line">    <span class="string">"main"</span> : &#123;</span><br><span class="line">      <span class="string">"workers"</span> : 4,</span><br><span class="line">      <span class="string">"batch_size"</span> : 125,</span><br><span class="line">      <span class="string">"batch_delay"</span> : 50,</span><br><span class="line">      <span class="string">"config_reload_automatic"</span> : <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"config_reload_interval"</span> : 3000000000,</span><br><span class="line">      <span class="string">"dead_letter_queue_enabled"</span> : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特定管道的信息"><a href="#特定管道的信息" class="headerlink" title="特定管道的信息"></a>特定管道的信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/pipelines/main?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"pipelines"</span> : &#123;</span><br><span class="line">    <span class="string">"main"</span> : &#123;</span><br><span class="line">      <span class="string">"workers"</span> : 4,</span><br><span class="line">      <span class="string">"batch_size"</span> : 125,</span><br><span class="line">      <span class="string">"batch_delay"</span> : 50,</span><br><span class="line">      <span class="string">"config_reload_automatic"</span> : <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"config_reload_interval"</span> : 3000000000,</span><br><span class="line">      <span class="string">"dead_letter_queue_enabled"</span> : <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OS-信息"><a href="#OS-信息" class="headerlink" title="OS 信息"></a>OS 信息</h3><h4 id="显示了操作系统名称，体系结构，版本和可用处理器"><a href="#显示了操作系统名称，体系结构，版本和可用处理器" class="headerlink" title="显示了操作系统名称，体系结构，版本和可用处理器"></a>显示了操作系统名称，体系结构，版本和可用处理器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/os?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"os"</span> : &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"Linux"</span>,</span><br><span class="line">    <span class="string">"arch"</span> : <span class="string">"amd64"</span>,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"3.10.0-693.11.1.el7.x86_64"</span>,</span><br><span class="line">    <span class="string">"available_processors"</span> : 4</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jvm-信息"><a href="#jvm-信息" class="headerlink" title="jvm 信息"></a>jvm 信息</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显示节点级别的JVM统计信息，例如JVM进程ID，版本，VM信息，内存使用情况以及有关垃圾收集器的信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/jvm?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"jvm"</span> : &#123;</span><br><span class="line">    <span class="string">"pid"</span> : 20827,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"1.8.0_144"</span>,</span><br><span class="line">    <span class="string">"vm_version"</span> : <span class="string">"1.8.0_144"</span>,</span><br><span class="line">    <span class="string">"vm_vendor"</span> : <span class="string">"Oracle Corporation"</span>,</span><br><span class="line">    <span class="string">"vm_name"</span> : <span class="string">"Java HotSpot(TM) 64-Bit Server VM"</span>,</span><br><span class="line">    <span class="string">"start_time_in_millis"</span> : 1574066157917,</span><br><span class="line">    <span class="string">"mem"</span> : &#123;</span><br><span class="line">      <span class="string">"heap_init_in_bytes"</span> : 3221225472,</span><br><span class="line">      <span class="string">"heap_max_in_bytes"</span> : 3186360320,</span><br><span class="line">      <span class="string">"non_heap_init_in_bytes"</span> : 2555904,</span><br><span class="line">      <span class="string">"non_heap_max_in_bytes"</span> : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"gc_collectors"</span> : [ <span class="string">"ParNew"</span>, <span class="string">"ConcurrentMarkSweep"</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件信息"><a href="#插件信息" class="headerlink" title="插件信息"></a>插件信息</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;插件信息API获取有关当前安装的所有Logstash插件的信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/plugins?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"total"</span> : 98,</span><br><span class="line">  <span class="string">"plugins"</span> : [ &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"logstash-codec-cef"</span>,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"5.0.3"</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"logstash-codec-collectd"</span>,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"3.0.8"</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"logstash-codec-dots"</span>,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"3.0.6"</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"name"</span> : <span class="string">"logstash-codec-edn"</span>,</span><br><span class="line">    <span class="string">"version"</span> : <span class="string">"3.0.6"</span></span><br><span class="line">  &#125;,……………………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节点统计指表"><a href="#节点统计指表" class="headerlink" title="节点统计指表"></a>节点统计指表</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;节点统计信息API检索有关Logstash的运行时统计信息。</p><h4 id="jvm统计"><a href="#jvm统计" class="headerlink" title="jvm统计"></a>jvm统计</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/jvm?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"jvm"</span> : &#123;</span><br><span class="line">    <span class="string">"threads"</span> : &#123;</span><br><span class="line">      <span class="string">"count"</span> : 55,</span><br><span class="line">      <span class="string">"peak_count"</span> : 56</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"mem"</span> : &#123;</span><br><span class="line">      <span class="string">"heap_used_percent"</span> : 10,</span><br><span class="line">      <span class="string">"heap_committed_in_bytes"</span> : 3186360320,</span><br><span class="line">      <span class="string">"heap_max_in_bytes"</span> : 3186360320,</span><br><span class="line">      <span class="string">"heap_used_in_bytes"</span> : 348033216,</span><br><span class="line">      <span class="string">"non_heap_used_in_bytes"</span> : 170512848,</span><br><span class="line">      <span class="string">"non_heap_committed_in_bytes"</span> : 201850880,</span><br><span class="line">      <span class="string">"pools"</span> : &#123;</span><br><span class="line">        <span class="string">"survivor"</span> : &#123;</span><br><span class="line">          <span class="string">"peak_used_in_bytes"</span> : 34865152,</span><br><span class="line">          <span class="string">"used_in_bytes"</span> : 1629704,</span><br><span class="line">          <span class="string">"peak_max_in_bytes"</span> : 34865152,</span><br><span class="line">          <span class="string">"max_in_bytes"</span> : 34865152,</span><br><span class="line">          <span class="string">"committed_in_bytes"</span> : 34865152</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"old"</span> : &#123;</span><br><span class="line">          <span class="string">"peak_used_in_bytes"</span> : 230612312,</span><br><span class="line">          <span class="string">"used_in_bytes"</span> : 230612312,</span><br><span class="line">          <span class="string">"peak_max_in_bytes"</span> : 2872311808,</span><br><span class="line">          <span class="string">"max_in_bytes"</span> : 2872311808,</span><br><span class="line">          <span class="string">"committed_in_bytes"</span> : 2872311808</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"young"</span> : &#123;</span><br><span class="line">          <span class="string">"peak_used_in_bytes"</span> : 279183360,</span><br><span class="line">          <span class="string">"used_in_bytes"</span> : 115791200,</span><br><span class="line">          <span class="string">"peak_max_in_bytes"</span> : 279183360,</span><br><span class="line">          <span class="string">"max_in_bytes"</span> : 279183360,</span><br><span class="line">          <span class="string">"committed_in_bytes"</span> : 279183360</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"gc"</span> : &#123;</span><br><span class="line">      <span class="string">"collectors"</span> : &#123;</span><br><span class="line">        <span class="string">"old"</span> : &#123;</span><br><span class="line">          <span class="string">"collection_time_in_millis"</span> : 301,</span><br><span class="line">          <span class="string">"collection_count"</span> : 2</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"young"</span> : &#123;</span><br><span class="line">          <span class="string">"collection_time_in_millis"</span> : 2536,</span><br><span class="line">          <span class="string">"collection_count"</span> : 98</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"uptime_in_millis"</span> : 66149287</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进程统计"><a href="#进程统计" class="headerlink" title="进程统计"></a>进程统计</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/process?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"process"</span> : &#123;</span><br><span class="line">    <span class="string">"open_file_descriptors"</span> : 169,</span><br><span class="line">    <span class="string">"peak_open_file_descriptors"</span> : 170,</span><br><span class="line">    <span class="string">"max_file_descriptors"</span> : 16384,</span><br><span class="line">    <span class="string">"mem"</span> : &#123;</span><br><span class="line">      <span class="string">"total_virtual_in_bytes"</span> : 7337734144</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"cpu"</span> : &#123;</span><br><span class="line">      <span class="string">"total_in_millis"</span> : 593350,</span><br><span class="line">      <span class="string">"percent"</span> : 0,</span><br><span class="line">      <span class="string">"load_average"</span> : &#123;</span><br><span class="line">        <span class="string">"1m"</span> : 0.01,</span><br><span class="line">        <span class="string">"5m"</span> : 0.07,</span><br><span class="line">        <span class="string">"15m"</span> : 0.1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="events"><a href="#events" class="headerlink" title="events"></a>events</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s localhost:9600/_node/stats/events?pretty=<span class="literal">true</span></span><br><span class="line">&#123; </span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"events"</span> : &#123;</span><br><span class="line">    <span class="string">"in"</span> : 103628,</span><br><span class="line">    <span class="string">"filtered"</span> : 103628,</span><br><span class="line">    <span class="string">"out"</span> : 103628,</span><br><span class="line">    <span class="string">"duration_in_millis"</span> : 96810,</span><br><span class="line">    <span class="string">"queue_push_duration_in_millis"</span> : 5104</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="管道统计"><a href="#管道统计" class="headerlink" title="管道统计"></a>管道统计</h3><ul><li>每个管道输入，过滤或输出的事件数</li><li>每个已配置的滤波器或输出级的统计信息</li><li>有关配置重新加载成功和失败的信息（启用配置重新加载时）</li><li>关于持久性队列信息（当 永久队列被启用）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/pipelines?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">………………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过包含管道ID来查看特定管道的统计信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/pipelines/main?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">………………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="刷新统计"><a href="#刷新统计" class="headerlink" title="刷新统计"></a>刷新统计</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显示有关配置重新加载成功和失败的信息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/reloads?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"reloads"</span> : &#123;</span><br><span class="line">    <span class="string">"successes"</span> : 0,</span><br><span class="line">    <span class="string">"failures"</span> : 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="os-统计"><a href="#os-统计" class="headerlink" title="os 统计"></a>os 统计</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当Logstash在容器中运行时，请求将返回一个包含cgroup信息的JSON文档，提供CPU负载的更准确视图，包括是否对容器进行了限制。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/stats/os?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"os"</span> : &#123;</span><br><span class="line">    <span class="string">"cgroup"</span> : &#123;</span><br><span class="line">      <span class="string">"cpuacct"</span> : &#123;</span><br><span class="line">        <span class="string">"usage_nanos"</span> : 20928023701495776,</span><br><span class="line">        <span class="string">"control_group"</span> : <span class="string">"/"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"cpu"</span> : &#123;</span><br><span class="line">        <span class="string">"cfs_quota_micros"</span> : -1,</span><br><span class="line">        <span class="string">"control_group"</span> : <span class="string">"/"</span>,</span><br><span class="line">        <span class="string">"stat"</span> : &#123;</span><br><span class="line">          <span class="string">"number_of_times_throttled"</span> : 0,</span><br><span class="line">          <span class="string">"time_throttled_nanos"</span> : 0,</span><br><span class="line">          <span class="string">"number_of_elapsed_periods"</span> : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"cfs_period_micros"</span> : 100000</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="热线程api"><a href="#热线程api" class="headerlink" title="热线程api"></a>热线程api</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;热线程API获取Logstash的当前热线程。热线程是Java线程，具有很高的CPU使用率，并且执行时间比正常时间长。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/hot_threads?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"host"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">  <span class="string">"http_address"</span> : <span class="string">"127.0.0.1:9600"</span>,</span><br><span class="line">  <span class="string">"id"</span> : <span class="string">"57c08022-8064-4bce-8c9b-e6db6e005479"</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"prod-elk-logstash-02"</span>,</span><br><span class="line">  <span class="string">"hot_threads"</span> : &#123;</span><br><span class="line">    <span class="string">"time"</span> : <span class="string">"2019-11-19T11:07:05+08:00"</span>,</span><br><span class="line">    <span class="string">"busiest_threads"</span> : 3,</span><br><span class="line">    <span class="string">"threads"</span> : [ &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"Ruby-0-Thread-23@[main]&gt;worker1"</span>,</span><br><span class="line">      <span class="string">"thread_id"</span> : 42,</span><br><span class="line">      <span class="string">"percent_of_cpu_time"</span> : 0.1,</span><br><span class="line">      <span class="string">"state"</span> : <span class="string">"timed_waiting"</span>,</span><br><span class="line">      <span class="string">"path"</span> : <span class="string">":1"</span>,</span><br><span class="line">      <span class="string">"traces"</span> : [ <span class="string">"sun.misc.Unsafe.park(Native Method)"</span>, <span class="string">"java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)"</span>, <span class="string">"java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)"</span> ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"Ruby-0-Thread-24@[main]&gt;worker2"</span>,</span><br><span class="line">      <span class="string">"thread_id"</span> : 43,</span><br><span class="line">      <span class="string">"percent_of_cpu_time"</span> : 0.06,</span><br><span class="line">      <span class="string">"state"</span> : <span class="string">"timed_waiting"</span>,</span><br><span class="line">      <span class="string">"path"</span> : <span class="string">":1"</span>,</span><br><span class="line">      <span class="string">"traces"</span> : [ <span class="string">"sun.misc.Unsafe.park(Native Method)"</span>, <span class="string">"java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)"</span>, <span class="string">"java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)"</span> ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"Ruby-0-Thread-22@[main]&gt;worker0"</span>,</span><br><span class="line">      <span class="string">"thread_id"</span> : 41,</span><br><span class="line">      <span class="string">"percent_of_cpu_time"</span> : 0.06,</span><br><span class="line">      <span class="string">"state"</span> : <span class="string">"timed_waiting"</span>,</span><br><span class="line">      <span class="string">"path"</span> : <span class="string">":1"</span>,</span><br><span class="line">      <span class="string">"traces"</span> : [ <span class="string">"sun.misc.Unsafe.park(Native Method)"</span>, <span class="string">"java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)"</span>, <span class="string">"java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)"</span> ]</span><br><span class="line">    &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可执行的参数:</p><ul><li>threads: 返回的热线程数。预设值为10。</li><li>stacktrace_size: 要为每个线程报告的堆栈跟踪的深度。默认值为50。</li><li>human: 如果为true，则返回纯文本而不是JSON格式。默认为false。</li><li>ignore_idle_threads: 如果为true，则不返回空闲线程。默认值为true。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET <span class="string">'localhost:9600/_node/hot_threads?human=true'</span></span><br><span class="line">Hot threads at 2019-11-19T11:07:43+08:00, busiestThreads=3:</span><br><span class="line">================================================================================</span><br><span class="line">0.1 % of cpu usage, state: timed_waiting, thread name: <span class="string">'Ruby-0-Thread-23@[main]&gt;worker1'</span>, thread id: 42</span><br><span class="line">:1</span><br><span class="line">        sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)</span><br><span class="line">        java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0.06 % of cpu usage, state: timed_waiting, thread name: <span class="string">'Ruby-0-Thread-24@[main]&gt;worker2'</span>, thread id: 43</span><br><span class="line">:1</span><br><span class="line">        sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)</span><br><span class="line">        java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0.06 % of cpu usage, state: timed_waiting, thread name: <span class="string">'Ruby-0-Thread-22@[main]&gt;worker0'</span>, thread id: 41</span><br><span class="line">:1</span><br><span class="line">        sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)</span><br><span class="line">        java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.awaitNanos(AbstractQueuedSynchronizer.java:2078)</span><br><span class="line">--------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的一些api监控，可以写成脚本的形式，使用zabbix来进行监控。除了使用zabbix来监控logstash外，我们还可以使用自带的x-pack来进行监控，<a href="https://www.elastic.co/guide/en/logstash/6.6/logstash-monitoring-overview.html" target="_blank" rel="noopener">介绍可以参考官方</a>。</p><h3 id="X-Pack监视概述"><a href="#X-Pack监视概述" class="headerlink" title="X-Pack监视概述"></a>X-Pack监视概述</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改logstash.yml配置文件，在配置文件里面只需要修改两个参数即可 <code>xpack.monitoring.enabled</code> 、<code>xpack.monitoring.elasticsearch.url</code>。监控Elasticsearch的是启用 <code>xpack.monitoring.collection.enabled</code></p><h4 id="修改logstash-yml"><a href="#修改logstash-yml" class="headerlink" title="修改logstash.yml"></a>修改logstash.yml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat logstash.yml</span><br><span class="line">xpack.monitoring.enabled: <span class="literal">true</span></span><br><span class="line">xpack.monitoring.elasticsearch.url: [<span class="string">"http://es1:9200"</span>,<span class="string">"http://es2:9200"</span>,<span class="string">"http://es3:9200"</span>]</span><br></pre></td></tr></table></figure><h4 id="重启logstash"><a href="#重启logstash" class="headerlink" title="重启logstash"></a>重启logstash</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo  systemctl  restart logstash</span><br></pre></td></tr></table></figure><h4 id="kibana-查看"><a href="#kibana-查看" class="headerlink" title="kibana 查看"></a>kibana 查看</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录kibana进行查看<br><img src="https://img.xxlaila.cn/1574146864906.jpg" alt="img"></p><p>点击node查看<br><img src="https://img.xxlaila.cn/1574146937095.jpg" alt="img"></p><p>这里顺道点考kibana<br><img src="https://img.xxlaila.cn/1574147026997.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>elk部署</title>
    <url>/2019/11/15/elk%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;公司重新设定了日志的标准格式，日志打印格式均为json格式，之前是用filebeat进行收集的，没任何问题，但是这次的这个标准日志推的时候出现了，在日志显示和多行收集的时候出现了问题。<a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java应用在报错的时候一般会提示一个很长的错误信息，如果在日志标准里面加入堆内存的错误，那信息就更长，一条日志就更大了，所以这里就得考量这个堆内存错误要打印多少问题。在显示的时候也遇到一个问题就是内容没有被索引，google一下查询是<code>not_analyzed</code>字符串默认设置导致的。查询得知对超过ignore_above的字符串，analyzer 不会进行处理。所以就不会索引，导致的结果就是最终搜索引擎搜索不到。这个选项主要对 not_analyzed 字段有用，这些字段通常用来进行过滤、聚合和排序。而且这些字段都是结构化的，所以一般不会允许在这些字段中索引过长的项。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对这些问题，和研发达成如协议，研发限制一条日志的message输出的长度，日志格式采用json，里面的字段不管。与似乎就要重置一下filebeat的参数，以及需要单独的建立自定义es模版，在logstash建立索引的时候需要用我们自定义的模版来建立索引。</p><h3 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filebeat安装不阐述</p><h4 id="filebeat配置文件"><a href="#filebeat配置文件" class="headerlink" title="filebeat配置文件"></a>filebeat配置文件</h4><ul><li>filebeat.yml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat filebeat.yml </span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">  - <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">    paths:</span><br><span class="line">      - /opt/logs/*/*.<span class="built_in">log</span></span><br><span class="line">  tags: [<span class="string">"system"</span>]</span><br><span class="line">  exclude_files: [<span class="string">'.gz$'</span>]</span><br><span class="line">  fields:</span><br><span class="line">    env: dev</span><br><span class="line">    logtype: system-java</span><br><span class="line">  queue_size: 3000</span><br><span class="line">  multiline.pattern: <span class="string">'^[[:space:]]'</span></span><br><span class="line">  multiline.negate: <span class="literal">false</span></span><br><span class="line">  multiline.match: after</span><br><span class="line">  multiline.max_lines: 500</span><br><span class="line">  multiline.timeout: 5s</span><br><span class="line">  registry_file: /var/lib/filebeat/registry</span><br><span class="line">  harvester_buffer_sizeedit: 16384</span><br><span class="line">  max_bytes: 10485760</span><br><span class="line">  max_message_bytes: 1000000</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class="line">  reload.enabled: <span class="literal">false</span></span><br><span class="line">output.logstash:</span><br><span class="line">  hosts: [<span class="string">"logstash:5555"</span>,<span class="string">"logstash:5556"</span>]</span><br><span class="line">  loadbalance: <span class="literal">true</span></span><br><span class="line">  worker: 1</span><br></pre></td></tr></table></figure></li></ul><h5 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h5><ul><li>input.type: 默认log，从日志文件读取每一行。stdin，从标准输入读取</li><li>paths: 日志文件路径列表，可用通配符，不递归</li><li>tags: 标记tag，可用于分组</li><li>exclude_files: 排除文件，后接一个正则表达式的列表，默认无</li><li>fields: 添加附件字段，可以使values，arrays，dictionaries或者任何嵌套数据<ul><li>env: 设置环境环境</li><li>logtype: 设置类别，在logstash里面判断，可用于建设不通的索引或者到不通的es集群里面</li></ul></li><li>queue_size: 处理管道中单个事件内的队列大小，默认1000</li><li>multiline.pattern: 多行匹配模式，后接正则表达式，默认无</li><li>multiline.negate: 多行匹配模式后配置的模式是否取反，默认false</li><li>multiline.match: 定义多行内容被添加到模式匹配行之后还是之前，默认无，可以被设置为after或者before</li><li>multiline.max_lines: 单一多行匹配聚合的最大行数，超过定义行数后的行会被丢弃，默认500</li><li>multiline.timeout: 多行匹配超时时间，超过超时时间后的当前多行匹配事件将停止并发送，然后开始一个新的多行匹配事件，默认5秒</li><li>registry_file: 指定 注册表文件，用于记录上次读取的位置，默认位于filebeat下的data目录</li><li>harvester_buffer_sizeedit: 每个采集器在获取文件时使用的缓冲区的大小（以字节为单位）。默认是16384</li><li>max_bytes: 单个日志消息可以拥有的最大字节数。之后的所有字节max_bytes被丢弃并且不被发送。此设置对于可能变大的多行日志消息特别有用。默认值是10MB（10485760）</li><li>max_message_bytes: 允许的最大json消息大小，默认为1000000，超出的会被丢弃，应该小于broker的  message.max.bytes（broker能接收消息的最大字节数）</li><li>output.logstash: 输出到logstash，从节点列表中选取不同的节点发送数据，达到 Round-Robin 负载均衡的效果。<ul><li>worker: 配置每个主机发布事件的worker数量。在负载均衡模式下最好启用。</li></ul></li></ul><h3 id="logstash-部署"><a href="#logstash-部署" class="headerlink" title="logstash 部署"></a>logstash 部署</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装不阐述，这里使用的自定义elasticsearch模版，可参考</p><h4 id="elasticsearch-模版"><a href="#elasticsearch-模版" class="headerlink" title="elasticsearch 模版"></a>elasticsearch 模版</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Json日志文件中的KEY的位置不固定、或字段数不明确时使用动态映射模板。这里创建一个动态模版，模版是拷贝默认的 <code>logstash-*</code>模版来进行稍加修改的，<code>index_patterns</code> 该模版参数指定任意索引名称，并且指定允许添加新字段，匹配所有string类型的新字段会创建一个raw的嵌套字段，raw嵌套字段类型text，使用 <code>ignore_above</code>改变默认的长度。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat dev-java-template.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"order"</span>: 5,</span><br><span class="line">  <span class="string">"index_patterns"</span>: [</span><br><span class="line">    <span class="string">"*"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"settings"</span>: &#123;</span><br><span class="line">    <span class="string">"index"</span>: &#123;</span><br><span class="line">      <span class="string">"number_of_shards"</span>: <span class="string">"5"</span>,</span><br><span class="line">      <span class="string">"number_of_replicas"</span>: <span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"refresh_interval"</span>: <span class="string">"10s"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"_default_"</span>: &#123;</span><br><span class="line">      <span class="string">"dynamic_templates"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"message_field"</span>: &#123;</span><br><span class="line">            <span class="string">"match"</span>: <span class="string">"message"</span>,</span><br><span class="line">            <span class="string">"match_mapping_type"</span>: <span class="string">"string"</span>,</span><br><span class="line">            <span class="string">"mapping"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">              <span class="string">"norms"</span> : <span class="literal">false</span>,</span><br><span class="line">              <span class="string">"fields"</span>: &#123;</span><br><span class="line">                <span class="string">"raw"</span>: &#123;</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                  <span class="string">"ignore_above"</span>: 10922</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"strings_fields"</span>: &#123;</span><br><span class="line">            <span class="string">"match"</span>: <span class="string">"*"</span>,</span><br><span class="line">            <span class="string">"match_mapping_type"</span>: <span class="string">"string"</span>,</span><br><span class="line">            <span class="string">"mapping"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">              <span class="string">"norms"</span>: <span class="literal">false</span>,</span><br><span class="line">              <span class="string">"fields"</span>: &#123;</span><br><span class="line">                <span class="string">"raw"</span>: &#123;</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                  <span class="string">"ignore_above"</span>: 10922</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"properties"</span>:&#123;</span><br><span class="line">        <span class="string">"@timestamp"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"date"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"@version"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"geoip"</span>: &#123;</span><br><span class="line">          <span class="string">"dynamic"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">"properties"</span>: &#123;</span><br><span class="line">            <span class="string">"ip"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"ip"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"location"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"geo_point"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"latitude"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"half_float"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"longitude"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"half_float"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"aliases"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>:</p><ul><li>dynamic_templates: 配置具体的动态模板匹配项</li><li>match_mapping_type: “string” 是匹配固定的类型</li><li>match: message 匹配字段名为message的数据</li><li>mapping: 将匹配的数据项映射为定义的数据类型</li></ul><h4 id="logstash-配置文件"><a href="#logstash-配置文件" class="headerlink" title="logstash 配置文件"></a>logstash 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat java.conf</span><br><span class="line">input  &#123;</span><br><span class="line">        beats &#123;</span><br><span class="line">                port =&gt; 5555</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">        <span class="comment"># application system logs</span></span><br><span class="line">        <span class="keyword">if</span> [fields][logtype] == <span class="string">"system-java"</span> &#123;</span><br><span class="line">                json &#123;</span><br><span class="line">                    <span class="built_in">source</span> =&gt; <span class="string">"message"</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="comment"># application business logs</span></span><br><span class="line">        <span class="keyword">if</span> [fileds][logtype] == <span class="string">"business-java"</span> &#123;</span><br><span class="line">		json &#123;</span><br><span class="line">			<span class="built_in">source</span> =&gt; <span class="string">"message"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">        <span class="comment"># application system logs</span></span><br><span class="line">        <span class="keyword">if</span> [fields][logtype] == <span class="string">"system-java"</span> &#123;</span><br><span class="line">                elasticsearch &#123;</span><br><span class="line">			codec =&gt; <span class="string">"json"</span></span><br><span class="line">                        hosts =&gt; [<span class="string">"es1:9200"</span>,<span class="string">"es2:9200"</span>,<span class="string">"es3:9200"</span>]</span><br><span class="line">                        index =&gt; <span class="string">"%&#123;[fields][kxlenv]&#125;-%&#123;[projectName]&#125;-%&#123;[logType]&#125;-%&#123;+YYYY-MM&#125;"</span></span><br><span class="line">                        template_overwrite =&gt; <span class="literal">true</span></span><br><span class="line">                        template_name =&gt; <span class="string">"system-java"</span></span><br><span class="line">                        template =&gt; <span class="string">"/opt/templates/java.template"</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="comment"># applicatio business logs</span></span><br><span class="line">	<span class="keyword">if</span> [fields][logtype] == <span class="string">"business-java"</span> &#123;</span><br><span class="line">		elasticsearch &#123;</span><br><span class="line">                        action =&gt; <span class="string">"index"</span></span><br><span class="line">			hosts =&gt; [<span class="string">"es1:9200"</span>,<span class="string">"es2:9200"</span>,<span class="string">"es3:9200"</span>]</span><br><span class="line">			index =&gt; <span class="string">"%&#123;[fields][kxlenv]&#125;-%&#123;[projectName]&#125;-%&#123;[logType]&#125;-%&#123;+YYYY-MM&#125;"</span></span><br><span class="line">			template_overwrite =&gt; <span class="literal">true</span></span><br><span class="line">                        template =&gt; <span class="string">"/opt/templates/dev-java-template.json"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>** 注 **:</p><ul><li>template : 指定template模板文件</li><li>template_overwrite : 是否覆盖ES中的template，默认是false</li><li>index: 是提取变量来进行创建索引，对应动态模版的里面 <code>index_patterns</code></li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><h4 id="重启logstash"><a href="#重启logstash" class="headerlink" title="重启logstash"></a>重启logstash</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart logstash</span><br></pre></td></tr></table></figure><h4 id="重启filebeat"><a href="#重启filebeat" class="headerlink" title="重启filebeat"></a>重启filebeat</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart filebeat</span><br></pre></td></tr></table></figure><h4 id="打开kibana验证"><a href="#打开kibana验证" class="headerlink" title="打开kibana验证"></a>打开kibana验证</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里我们打开kibana进行验证，看看自动创建的索引是否引用了自定义模版</p><ul><li><p>自定义模版<br><img src="https://img.xxlaila.cn/1574308152194.jpg" alt="img"></p></li><li><p>默认模版<br><img src="https://img.xxlaila.cn/1574308234494.jpg" alt="img"></p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb语法实践</title>
    <url>/2019/11/14/mongodb%E8%AF%AD%E6%B3%95%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="Days-11-14"><a href="#Days-11-14" class="headerlink" title="Days(11.14)"></a>Days(11.14)</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mongodb之前都是负责搭建、维护、备份、监控等操作。闲时来总结一下语法。<a id="more"></a></p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="根据条件查询数据量"><a href="#根据条件查询数据量" class="headerlink" title="根据条件查询数据量"></a>根据条件查询数据量</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录数据库操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.getCollection(<span class="string">'Tables'</span>).find(&#123;<span class="string">"字段"</span>:<span class="string">"条件"</span>,<span class="string">"字段"</span>:<span class="string">"条件"</span>&#125;).count();</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看数据库表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; show collections</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看mongodb的连接数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.serverStatus().connections</span><br></pre></td></tr></table></figure><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="创建用户、数据库"><a href="#创建用户、数据库" class="headerlink" title="创建用户、数据库"></a>创建用户、数据库</h4><ul><li><p>创建数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; use xxx</span><br></pre></td></tr></table></figure></li><li><p>创建一个用户，拥有基本的读写权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.createUser(&#123;user:<span class="string">"xxx"</span>,<span class="built_in">pwd</span>:<span class="string">"xxx"</span>,roles:[&#123;role:<span class="string">"readWrite"</span>,db:<span class="string">"xxx"</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure></li><li><p>创建用户需要赋予dbAdmin权限</p></li></ul><p><strong>dbAdmin</strong>: 允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.createUser(&#123;user:<span class="string">"demo"</span>,<span class="built_in">pwd</span>:<span class="string">"demo"</span>,roles:[&#123;role:<span class="string">"readWrite"</span>,db:<span class="string">"kxlChannel"</span>&#125;,&#123;role:<span class="string">"dbAdmin"</span>,db:<span class="string">"kxlChannel"</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure><p><strong>注</strong>: role 权限要是readWrite,不能赋予dbadmin，否则不能操作数据库</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="删除账户和数据库"><a href="#删除账户和数据库" class="headerlink" title="删除账户和数据库"></a>删除账户和数据库</h4><ul><li><p>删除账户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.dropUser(<span class="string">"xxx"</span>)</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.dropDatabase(<span class="string">"xxx"</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.表.ensureIndex(&#123;<span class="string">"字段"</span>:1&#125;,&#123;<span class="string">"unique"</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">&gt; db.表.ensureIndex(&#123;<span class="string">"字段"</span>:1&#125;,&#123;<span class="string">"unique"</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.表.getIndexes()</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看表数据是否引用了索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.表.find(&#123;<span class="string">"字段"</span>:<span class="string">"值"</span>&#125;).explain()</span><br></pre></td></tr></table></figure><h4 id="删除指定索引"><a href="#删除指定索引" class="headerlink" title="删除指定索引"></a>删除指定索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.表.dropIndex(<span class="string">"索引"</span>)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除表全部索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.表.dropIndexes()</span><br></pre></td></tr></table></figure><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><h4 id="根据条件导出部分数据"><a href="#根据条件导出部分数据" class="headerlink" title="根据条件导出部分数据"></a>根据条件导出部分数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  mongoexport --db=数据库 --collection=表 --username=账户 --password=密码 --authenticationDatabase=认证的数据库  --query=<span class="string">'&#123;"条件","条件"&#125;'</span> --fields=<span class="string">"导出的字段"</span> --<span class="built_in">type</span>=csv --out=/home/ll</span><br></pre></td></tr></table></figure><ul><li>参数介绍:<br>–db: 数据库<br>–collection: 表<br>–username: 账户<br>–password: 密码<br>–authenticationDatabase: 需要认证的数据库<br>–query: 条件<br>–fields: 导出的字段<br>–type: 导出的格式，默认是json，这里导出为csv，支持两种json和csv格式<br>–out: 导出路径文件</li></ul><p>更多参数参考 –help</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">general options:</span><br><span class="line">      --<span class="built_in">help</span>                                      <span class="built_in">print</span> usage</span><br><span class="line">      --version                                   <span class="built_in">print</span> the tool version and <span class="built_in">exit</span></span><br><span class="line">verbosity options:</span><br><span class="line">  -v, --verbose=&lt;level&gt;                           more detailed <span class="built_in">log</span> output (include multiple <span class="built_in">times</span> <span class="keyword">for</span> more verbosity, e.g. -vvvvv, or specify a numeric value, e.g. --verbose=N)</span><br><span class="line">      --quiet                                     hide all <span class="built_in">log</span> output</span><br><span class="line">connection options:</span><br><span class="line">  -h, --host=&lt;hostname&gt;                           mongodb host to connect to (setname/host1,host2 <span class="keyword">for</span> replica sets)</span><br><span class="line">      --port=&lt;port&gt;                               server port (can also use --host hostname:port)</span><br><span class="line">kerberos options:</span><br><span class="line">      --gssapiServiceName=&lt;service-name&gt;          service name to use when authenticating using GSSAPI/Kerberos (<span class="string">'mongodb'</span> by default)</span><br><span class="line">      --gssapiHostName=&lt;host-name&gt;                hostname to use when authenticating using GSSAPI/Kerberos (remote server<span class="string">'s address by default)</span></span><br><span class="line"><span class="string">ssl options:</span></span><br><span class="line"><span class="string">      --ssl                                       connect to a mongod or mongos that has ssl enabled</span></span><br><span class="line"><span class="string">      --sslCAFile=&lt;filename&gt;                      the .pem file containing the root certificate chain from the certificate authority</span></span><br><span class="line"><span class="string">      --sslPEMKeyFile=&lt;filename&gt;                  the .pem file containing the certificate and key</span></span><br><span class="line"><span class="string">      --sslPEMKeyPassword=&lt;password&gt;              the password to decrypt the sslPEMKeyFile, if necessary</span></span><br><span class="line"><span class="string">      --sslCRLFile=&lt;filename&gt;                     the .pem file containing the certificate revocation list</span></span><br><span class="line"><span class="string">      --sslAllowInvalidCertificates               bypass the validation for server certificates</span></span><br><span class="line"><span class="string">      --sslAllowInvalidHostnames                  bypass the validation for server name</span></span><br><span class="line"><span class="string">      --sslFIPSMode                               use FIPS mode of the installed openssl library</span></span><br><span class="line"><span class="string">authentication options:</span></span><br><span class="line"><span class="string">  -u, --username=&lt;username&gt;                       username for authentication</span></span><br><span class="line"><span class="string">  -p, --password=&lt;password&gt;                       password for authentication</span></span><br><span class="line"><span class="string">      --authenticationDatabase=&lt;database-name&gt;    database that holds the user'</span>s credentials</span><br><span class="line">      --authenticationMechanism=&lt;mechanism&gt;       authentication mechanism to use</span><br><span class="line">namespace options:</span><br><span class="line">  -d, --db=&lt;database-name&gt;                        database to use</span><br><span class="line">  -c, --collection=&lt;collection-name&gt;              collection to use</span><br><span class="line">uri options:</span><br><span class="line">      --uri=mongodb-uri                           mongodb uri connection string</span><br><span class="line">output options:</span><br><span class="line">  -f, --fields=&lt;field&gt;[,&lt;field&gt;]*                 comma separated list of field names (required <span class="keyword">for</span> exporting CSV) e.g. -f <span class="string">"name,age"</span></span><br><span class="line">      --fieldFile=&lt;filename&gt;                      file with field names - 1 per line</span><br><span class="line">      --<span class="built_in">type</span>=&lt;<span class="built_in">type</span>&gt;                               the output format, either json or csv (defaults to <span class="string">'json'</span>) (default: json)</span><br><span class="line">  -o, --out=&lt;filename&gt;                            output file; <span class="keyword">if</span> not specified, stdout is used</span><br><span class="line">      --jsonArray                                 output to a JSON array rather than one object per line</span><br><span class="line">      --pretty                                    output JSON formatted to be human-readable</span><br><span class="line">      --noHeaderLine                              <span class="built_in">export</span> CSV data without a list of field names at the first line</span><br><span class="line">querying options:</span><br><span class="line">  -q, --query=&lt;json&gt;                              query filter, as a JSON string, e.g., <span class="string">'&#123;x:&#123;$gt:1&#125;&#125;'</span></span><br><span class="line">      --queryFile=&lt;filename&gt;                      path to a file containing a query filter (JSON)</span><br><span class="line">  -k, --slaveOk                                   allow secondary reads <span class="keyword">if</span> available (default <span class="literal">true</span>) (default: <span class="literal">false</span>)</span><br><span class="line">      --readPreference=&lt;string&gt;|&lt;json&gt;            specify either a preference name or a preference json object</span><br><span class="line">      --forceTableScan                            force a table scan (<span class="keyword">do</span> not use <span class="variable">$snapshot</span>)</span><br><span class="line">      --skip=&lt;count&gt;                              number of documents to skip</span><br><span class="line">      --<span class="built_in">limit</span>=&lt;count&gt;                             <span class="built_in">limit</span> the number of documents to <span class="built_in">export</span></span><br><span class="line">      --sort=&lt;json&gt;                               sort order, as a JSON string, e.g. <span class="string">'&#123;x:1&#125;'</span></span><br><span class="line">      --assertExists                              <span class="keyword">if</span> specified, <span class="built_in">export</span> fails <span class="keyword">if</span> the collection does not exist (default: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>mongodb 备份脚本可以<a href="https://github.com/xxlaila/backup-monitoring/tree/master/backup" target="_blank" rel="noopener">参考</a>本人写的</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>istio部署(二)</title>
    <url>/2019/11/08/istio%E9%83%A8%E7%BD%B2-%E4%BA%8C/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在前面的一篇文章中我做了简单的部署，但是在疏忽bookinfo的时候出现了错误；然后研究了和学习了三天怎么来结局这个错误，这个错误不解决，没办法进行下一步。后学的路由规则完全没办法学习和测试。<a id="more"></a></p><h3 id="istio错误解决"><a href="#istio错误解决" class="headerlink" title="istio错误解决"></a>istio错误解决</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;istio的错误查看<a href="https://www.xxlaila.cn/2019/08/30/k8s%E9%83%A8%E7%BD%B2istio/">istio的部署</a>，本次根据这个错误来进行解决。</p><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><ul><li>apiserver日志</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个错误访问k8s的apiserver 问题，应该是超时。我们可以查看apiserver的日志，利用 journalctl 命令来筛选apiserver的日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># journalctl  -u  kube-apiserver  -f</span></span><br><span class="line"></span><br><span class="line">Nov 08 09:59:33 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 09:59:33.659161   31393 trace.go:81] Trace[40457478]: <span class="string">"Create /apis/networking.istio.io/v1alpha3/namespaces/istio-system/gateways"</span> (started: 2019-11-08 09:59:03.657132211 +0800 CST m=+328870.679516549) (total time: 30.001964129s):</span><br><span class="line">Nov 08 09:59:33 k8s-master-01-3.kxl kube-apiserver[31393]: Trace[40457478]: [30.001964129s] [30.001043358s] END</span><br><span class="line">Nov 08 09:59:33 k8s-master-01-3.kxl kube-apiserver[31393]: W1108 09:59:33.659790   31393 dispatcher.go:73] Failed calling webhook, failing closed pilot.validation.istio.io: failed calling webhook <span class="string">"pilot.validation.istio.io"</span>: Post https://istio-galley.istio-system.svc:443/admitpilot?timeout=30s: net/http: request canceled <span class="keyword">while</span> waiting <span class="keyword">for</span> connection (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">Nov 08 09:59:39 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 09:59:39.979543   31393 controller.go:107] OpenAPI AggregationController: Processing item v1beta1.metrics.k8s.io</span><br><span class="line">Nov 08 10:00:03 k8s-master-01-3.kxl kube-apiserver[31393]: W1108 10:00:03.764977   31393 dispatcher.go:73] Failed calling webhook, failing closed pilot.validation.istio.io: failed calling webhook <span class="string">"pilot.validation.istio.io"</span>: Post https://istio-galley.istio-system.svc:443/admitpilot?timeout=30s: context deadline exceeded (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">Nov 08 10:00:03 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 10:00:03.765401   31393 trace.go:81] Trace[1649710078]: <span class="string">"Create /apis/networking.istio.io/v1alpha3/namespaces/default/destinationrules"</span> (started: 2019-11-08 09:59:33.763211641 +0800 CST m=+328900.785596022) (total time: 30.00209862s):</span><br><span class="line">Nov 08 10:00:03 k8s-master-01-3.kxl kube-apiserver[31393]: Trace[1649710078]: [30.00209862s] [30.001534667s] END</span><br><span class="line">Nov 08 10:00:33 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 10:00:33.840606   31393 trace.go:81] Trace[970347589]: <span class="string">"Create /apis/networking.istio.io/v1alpha3/namespaces/weather/virtualservices"</span> (started: 2019-11-08 10:00:03.83792882 +0800 CST m=+328930.860313362) (total time: 30.002612137s):</span><br><span class="line">Nov 08 10:00:33 k8s-master-01-3.kxl kube-apiserver[31393]: Trace[970347589]: [30.002612137s] [30.001075132s] END</span><br><span class="line">Nov 08 10:00:33 k8s-master-01-3.kxl kube-apiserver[31393]: W1108 10:00:33.841663   31393 dispatcher.go:73] Failed calling webhook, failing closed pilot.validation.istio.io: failed calling webhook <span class="string">"pilot.validation.istio.io"</span>: Post https://istio-galley.istio-system.svc:443/admitpilot?timeout=30s: context deadline exceeded (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers)</span><br><span class="line">Nov 08 10:00:38 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 10:00:38.260710   31393 trace.go:81] Trace[460935607]: <span class="string">"GuaranteedUpdate etcd3: *v1.Endpoints"</span> (started: 2019-11-08 10:00:37.644096515 +0800 CST m=+328964.666480867) (total time: 616.515599ms):</span><br><span class="line">Nov 08 10:00:38 k8s-master-01-3.kxl kube-apiserver[31393]: Trace[460935607]: [533.664848ms] [449.34458ms] Transaction prepared</span><br><span class="line">Nov 08 10:00:39 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 10:00:39.986622   31393 controller.go:107] OpenAPI AggregationController: Processing item v1beta1.metrics.k8s.io</span><br><span class="line">Nov 08 10:01:38 k8s-master-01-3.kxl kube-apiserver[31393]: I1108 10:01:38.780611   31393 trace.go:81] Trace[269873276]: <span class="string">"Get /api/v1/namespaces/default"</span> (started: 2019-11-08 10:01:37.631910347 +0800 CST m=+329024.654294682) (total time: 1.148554735s):</span><br><span class="line">Nov 08 10:01:38 k8s-master-01-3.kxl kube-apiserver[31393]: Trace[269873276]: [1.148211464s] [1.148180236s] About to write a response</span><br></pre></td></tr></table></figure><ul><li><p>istio-pilot日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl logs istio-pilot-569499d666-rfjsh  -n istio-system discovery</span></span><br><span class="line">2019-11-08T07:26:14.097765Z	info	Handling event update <span class="keyword">for</span> pod istio-security-post-install-1.2.8-c52np <span class="keyword">in</span> namespace istio-system -&gt; 172.30.112.9</span><br><span class="line">2019-11-08T07:26:27.395268Z	info	Handling event update <span class="keyword">for</span> pod istio-security-post-install-1.2.8-c52np <span class="keyword">in</span> namespace istio-system -&gt; 172.30.112.9</span><br><span class="line">2019-11-08T07:26:38.227484Z	info	Client received GoAway with http2.ErrCodeEnhanceYourCalm.</span><br><span class="line">2019-11-08T07:26:38.227760Z	info	pickfirstBalancer: HandleSubConnStateChange: 0xc0001fbaa0, CONNECTING</span><br><span class="line">2019-11-08T07:26:38.228913Z	info	transport: loopyWriter.run returning. connection error: desc = <span class="string">"transport is closing"</span></span><br><span class="line">2019-11-08T07:26:38.230352Z	error	mcp	Error receiving MCP resource: rpc error: code = Unavailable desc = transport is closing</span><br><span class="line">2019-11-08T07:26:38.230387Z	error	mcp	Error receiving MCP response: rpc error: code = Unavailable desc = transport is closing</span><br><span class="line">2019-11-08T07:26:38.235755Z	info	pickfirstBalancer: HandleSubConnStateChange: 0xc0001fbaa0, READY</span><br><span class="line">2019-11-08T07:26:39.230701Z	info	mcp	(re)trying to establish new MCP sink stream</span><br></pre></td></tr></table></figure></li><li><p>istio-galley日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl logs istio-galley-64f7d8cc97-8nbpc  -n istio-system</span></span><br><span class="line">2019-11-08T07:23:38.860184Z	info	mcp	MCP: connection &#123;addr=172.30.104.7:57190 id=3&#125; ACK collection=istio/rbac/v1alpha1/serviceroles with version=<span class="string">"0"</span> nonce=<span class="string">"16"</span> inc=<span class="literal">false</span></span><br><span class="line">2019-11-08T07:23:38.860197Z	info	mcp	Watch(): created watch 28 <span class="keyword">for</span> istio/rbac/v1alpha1/serviceroles from group <span class="string">"default"</span>, version <span class="string">"0"</span></span><br><span class="line">2019-11-08T07:23:38.860217Z	info	mcp	MCP: connection &#123;addr=172.30.104.7:57190 id=3&#125; ACK collection=istio/networking/v1alpha3/gateways with version=<span class="string">"0"</span> nonce=<span class="string">"17"</span> inc=<span class="literal">false</span></span><br><span class="line">2019-11-08T07:23:38.860268Z	info	mcp	Watch(): created watch 29 <span class="keyword">for</span> istio/networking/v1alpha3/gateways from group <span class="string">"default"</span>, version <span class="string">"0"</span></span><br><span class="line">2019-11-08T07:26:38.227268Z	info	transport: Got too many pings from the client, closing the connection.</span><br><span class="line">2019-11-08T07:26:38.227414Z	info	transport: loopyWriter.run returning. Err: transport: Connection closing</span><br><span class="line">2019-11-08T07:26:38.228857Z	info	transport: http2Server.HandleStreams failed to <span class="built_in">read</span> frame: <span class="built_in">read</span> tcp 172.30.104.4:9901-&gt;172.30.104.7:57190: use of closed network connection</span><br><span class="line">2019-11-08T07:26:38.229130Z	error	mcp	MCP: connection &#123;addr=172.30.104.7:57190 id=3&#125;: TERMINATED with errors: rpc error: code = Canceled desc = context canceled</span><br><span class="line">2019-11-08T07:26:38.229162Z	info	mcp	MCP: connection &#123;addr=172.30.104.7:57190 id=3&#125;: CLOSED</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面其实有一个错误，忘记记录了，是一个tls的证书问题。根据上面的错误在google上找了好久，各种文档都查看了好久。就是安装的时候去验证tls证书，还有什么webhook问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;解决办法是；需要在apiserver里面需要配置 enable-admission-plugins，由于在安装的时候指定了某一个插件，导致这个未启用，如果没有配置该插件，默认其实是启用的。两个插件分别是：ValidatingAdmissionWebhook、MutatingAdmissionWebhook。安装文档里面已经修改，可以<a href="https://www.xxlaila.cn/2019/09/11/kubernetes-v1-14%E5%AE%89%E8%A3%85/">参考配置</a>，修改以后需要重启kube-apiserver。修改了这里还是不行。还需要重新安装istio。</p><ul><li><p>验证api-resources</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl api-resources | grep admissionregistration</span></span><br><span class="line">mutatingwebhookconfigurations                  admissionregistration.k8s.io   <span class="literal">false</span>        MutatingWebhookConfiguration</span><br><span class="line">validatingwebhookconfigurations                admissionregistration.k8s.io   <span class="literal">false</span>        ValidatingWebhookConfiguration</span><br></pre></td></tr></table></figure></li><li><p>启用 admissionregistration.k8s.io/v1alpha1 API</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl api-versions | grep admissionregistration.k8s.io</span></span><br><span class="line">admissionregistration.k8s.io/v1beta1</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用上面命令可以检查当前是否以启用，admissionregistration.k8s.io/v1alpha1 API，若不存在则需要在 apiserver 的配置中添加–runtime-config=admissionregistration.k8s.io/v1alpha1。</p><h3 id="重新安装istio"><a href="#重新安装istio" class="headerlink" title="重新安装istio"></a>重新安装istio</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install install/kubernetes/helm/istio --<span class="built_in">wait</span> \</span><br><span class="line">    --name istio \</span><br><span class="line">    --namespace istio-system \</span><br><span class="line">    --<span class="built_in">set</span> global.mtls.enabled=<span class="literal">false</span> \</span><br><span class="line">    --<span class="built_in">set</span> kiali.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> tracing.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> tracing.jaeger.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> tracing.provider=zipkin \</span><br><span class="line">    --<span class="built_in">set</span> grafana.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> servicegraph.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> global.k8sIngress.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> global.k8sIngress.gatewayName=ingressgateway \</span><br><span class="line">    --<span class="built_in">set</span> <span class="string">"kiali.dashboard.jaegerURL=http://jaeger-query:16686"</span> \</span><br><span class="line">    --<span class="built_in">set</span> <span class="string">"kiali.dashboard.grafanaURL=http://grafana:3000"</span> \</span><br><span class="line">    --<span class="built_in">set</span> gateways.istio-ingressgateway.type=NodePort \</span><br><span class="line">    --<span class="built_in">set</span> gateways.istio-egressgateway.type=NodePort \</span><br><span class="line">    --<span class="built_in">set</span> ingress.service.type=NodePort \</span><br><span class="line">    --<span class="built_in">set</span> global.configValidation=<span class="literal">false</span> \</span><br><span class="line">    --<span class="built_in">set</span> ingress.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> gateways.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> mixer.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> prometheus.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> sidecarInjectorWebhook.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> pilot.env.PILOT_DISABLE_XDS_MARSHALING_TO_ANY=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>参数介绍<ul><li>global.mtls.enabled: 开启Mtls认证</li><li>kiali.enabled: 安装kiali</li><li>tracing.enabled: 启用tracing</li><li>grafana.enabled: 安装granfana</li><li>servicegraph.enabled: 启用servicegraph</li><li>global.k8sIngress.enabled: 启用k8sIngress</li><li>global.configValidation: 禁用参数校验</li><li>ingress.enabled: 否启用Ingress</li><li>gateways.enabled: 启用gateway</li><li>mixer.enabled: 启用mixer</li><li>prometheus.enabled: 启用prometheus</li><li>sidecarInjectorWebhook.enabled: 启用sidecarinjector<br><a href="https://www.cnblogs.com/CCE-SWR/p/9990291.html" target="_blank" rel="noopener">更多参数</a>介绍参考</li></ul></li></ul><h4 id="配置验证webhook"><a href="#配置验证webhook" class="headerlink" title="配置验证webhook"></a>配置验证webhook</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;完成以后我们需要配置和验证webhook</p><ul><li>admissionregistration.k8s.io/v1beta1 应是启用状态<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl api-versions | grep admissionregistration.k8s.io/v1beta1</span></span><br><span class="line">admissionregistration.k8s.io/v1beta1</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>istio</category>
      </categories>
      <tags>
        <tag>istio</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql8.0 错误</title>
    <url>/2019/11/07/mysql8.0%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h4 id="mysql-8-0-倒入数据报错"><a href="#mysql-8-0-倒入数据报错" class="headerlink" title="mysql 8.0 倒入数据报错"></a>mysql 8.0 倒入数据报错</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天数据库从5.6切换到8.0测试的时候，倒入数据到8.0版本报错，错误提示：2006 mysql server has gone away。<a id="more"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;经过查询得知，导入SQL数据库结构+数据时，如果sql操作时间过长；或者是传送的数据太大（咧如使用insert…values的语句过长）；就会报这个错误。登录服务器查看了数据库连接超时的时间默认是8小时，问题应该不是出现在这里。登录老版本数据查看该数据库表的数据，发现该表存放是json的数据格式数据，而且很大，很长。根据这点消息，可以简单的知道问题</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种情况可以通过修改max_allowed_packed的配置参数来避免，修改my.cnf加大max_allowed_packet的值即可。</p><ul><li>解决办法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;找到mysql目录下的my.ini配置文件，加入以下配置或者修改以下配置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">max_allowed_packet=300M</span><br></pre></td></tr></table></figure></li></ul><h4 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h4><ul><li><strong>max_allowed_packet</strong>: mysql根据配置文件会限制server接受的数据包大小。如果一次插入数据库中的数据太大的话就会失败，<a href="https://dev.mysql.com/doc/refman/8.0/en/packet-too-large.html" target="_blank" rel="noopener">官方介绍</a>，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里我刚开始修改的是200M，还是出现这个错误，然后我看了一下sql文件大小是在260多M，索性我就把这个参数调整为300M，在执行倒入数据ok。这个参数调大不会影响服务器的性能，可以参考官方说明。</li></ul><h4 id="mysql-1067-Invalid-default-value-for"><a href="#mysql-1067-Invalid-default-value-for" class="headerlink" title="mysql 1067 - Invalid default value for"></a>mysql 1067 - Invalid default value for</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mysql 8.0 在倒入数据的时候提示: 1067 - Invalid default value for ‘xxx_date’。查询结果得知跨版本升级引起的默认值不兼容问题，登录老服务器查看该字段是一个时间字段，是一个datetime类型，而且默认是0，然后看了一下导出的数据数据格式居然是0000-00-00，该类型可能是默认值被限制了，查看 sql_mode。</p><h5 id="查看-sql-mode"><a href="#查看-sql-mode" class="headerlink" title="查看 sql_mode"></a>查看 sql_mode</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">'sql_mode'</span>;</span><br><span class="line">+---------------+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Variable_name | Value                                                                                                                 |</span><br><span class="line">+---------------+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| sql_mode      | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |</span><br><span class="line">+---------------+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NO_ZERO_IN_DATE,NO_ZERO_DATE这两个参数限制时间不能为0</p><h5 id="临时修改"><a href="#临时修改" class="headerlink" title="临时修改"></a>临时修改</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> session sql_mode=<span class="string">'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'</span>;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>这个我操作了，没成功，我用的永久修改成功导入的。不知道为啥，可能是姿势不对</p><h5 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以直接修改my.cnf文件，在[mysqld]下面添加如下列：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>istio部署</title>
    <url>/2019/10/29/istio%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:43 GMT+0800 (China Standard Time) --><h3 id="Istio介绍"><a href="#Istio介绍" class="headerlink" title="Istio介绍"></a>Istio介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;istio代表的是Service Mesh的方案实现，Istio 有助于降低这些部署的复杂性，并减轻开发团队的压力。提供一种简单的方式来为已部署的服务建立网络，且提供具有负载均衡、服务间认证、监控、流量管理等功能。</p><a id="more"></a><h3 id="服务网格（Service-Mesh）"><a href="#服务网格（Service-Mesh）" class="headerlink" title="服务网格（Service Mesh）"></a>服务网格（Service Mesh）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务网格（Service Mesh）用于描述构成这些应用程序的微服务网络以及应用之间的交互。随着规模和复杂性的增长，服务网格越来越难以理解和管理。它的需求包括服务发现、负载均衡、故障恢复、指标收集和监控以及通常更加复杂的运维需求，例如 A/B 测试、金丝雀发布、限流、访问控制和端到端认证等。而istio刚好提供了一套完整的解决方案，通过控制整个服务器网格提供行为洞察和操作控制来满足微服务应用的多样化</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Istio 服务网格逻辑上分为数据平面和控制平面。</p><ul><li>数据平面由一组以 sidecar 方式部署的智能代理（Envoy）组成。这些代理可以调节和控制微服务及 Mixer 之间所有的网络通信。</li><li>控制平面负责管理和配置代理来路由流量。此外控制平面配置 Mixer 以实施策略和收集遥测数据。</li></ul><p>构成每个面板的不同组件:<br><img src="https://img.xxlaila.cn/1567136153850.jpg" alt="img"></p><h4 id="istio-组件"><a href="#istio-组件" class="headerlink" title="istio 组件"></a>istio 组件</h4><ul><li>Envoy: Istio 使用 Envoy 代理的扩展版本，用于调解服务网格中所有服务的所有入站和出站流量，属于数据层面。Istio利用Envoy的内置功能实现如下指标:<ul><li>动态服务发现</li><li>负载均衡</li><li>TLS终止</li><li>HTTP/2和gRPC代理</li><li>断路器</li><li>健康检查</li><li>分阶段推出，按百分比分配流量</li><li>故障注入</li><li>丰富的指标</li></ul></li><li>Mixer: 是一个独立于平台的组件，负责在服务网格上执行访问控制和使用策略，并从 Envoy 代理和其他服务收集遥测数据</li><li>Pilot: 为 Envoy sidecar 提供服务发现功能，为智能路由（例如 A/B 测试、金丝雀部署等）和弹性（超时、重试、熔断器等）提供流量管理功能</li><li>Citadel: 通过内置身份和凭证管理赋能强大的服务间和最终用户身份验证。可用于升级服务网格中未加密的流量，并为运维人员提供基于服务标识而不是网络控制的强制执行策略的能力</li><li>Galley: 代表其他的 Istio 控制平面组件，用来验证用户编写的 Istio API 配置。随着时间的推移，Galley 将接管 Istio 获取配置、 处理和分配组件的顶级责任</li></ul><h3 id="Istion-安装"><a href="#Istion-安装" class="headerlink" title="Istion 安装"></a>Istion 安装</h3><h4 id="下载istio包"><a href="#下载istio包" class="headerlink" title="下载istio包"></a>下载istio包</h4><p>执行下载和自动解压缩</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -L https://git.io/getLatestIstio | ISTIO_VERSION=1.2.8 sh -</span></span><br><span class="line"><span class="comment"># cd istio-1.2.8/bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cp istioctl /usr/bin/</span></span><br></pre></td></tr></table></figure><p>安装目录中包含：</p><ul><li><code>在 install/</code>: 目录中包含了 Kubernetes 安装所需的 .yaml 文件</li><li><code>samples/</code>: 目录中是示例应用</li><li><code>istioctl</code>: istioctl客户端二进制文件。手动将Envoy作为Sidecar代理注入并创建路由规则和策略时，将使用此工具。</li><li><code>istio.VERSION</code>: 配置文件</li></ul><h3 id="在kubernetes-集群中安装"><a href="#在kubernetes-集群中安装" class="headerlink" title="在kubernetes 集群中安装"></a>在kubernetes 集群中安装</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Istio 会被安装到自己的 istio-system 命名空间，并且能够对所有其他命名空间的服务进行管理。这里采用helm进行安装，<a href="https://xxlaila.github.io/2019/09/04/k8s-helm/" target="_blank" rel="noopener">helm安装参考</a>，我们需要为Kiali设置身份验证凭据（监视）。用于后面的登录认证</p><h4 id="设置用户名和密码的环境变量"><a href="#设置用户名和密码的环境变量" class="headerlink" title="设置用户名和密码的环境变量"></a>设置用户名和密码的环境变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># KIALI_USERNAME=$(read -p 'Kiali Username: ' uval &amp;&amp; echo -n $uval | base64)</span></span><br><span class="line"><span class="comment"># KIALI_PASSPHRASE=$(read -sp 'Kiali Passphrase: ' pval &amp;&amp; echo -n $pval | base64)</span></span><br></pre></td></tr></table></figure><h4 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NAMESPACE=istio-system</span></span><br><span class="line"><span class="comment"># kubectl create namespace $NAMESPACE</span></span><br></pre></td></tr></table></figure><ul><li>创建用于存储上面设置的用户名/密码的机密<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: kiali</span><br><span class="line">  namespace: <span class="variable">$NAMESPACE</span></span><br><span class="line">  labels:</span><br><span class="line">    app: kiali</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br><span class="line">data:</span><br><span class="line">  username: <span class="variable">$KIALI_USERNAME</span></span><br><span class="line">  passphrase: <span class="variable">$KIALI_PASSPHRASE</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用helm安装istio-CRD"><a href="#使用helm安装istio-CRD" class="headerlink" title="使用helm安装istio CRD"></a>使用helm安装istio CRD</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm install install/kubernetes/helm/istio-init --name istio-init --namespace istio-system</span></span><br><span class="line">NAME:   istio-init</span><br><span class="line">LAST DEPLOYED: Fri Nov  1 10:13:22 2019</span><br><span class="line">NAMESPACE: istio-system</span><br><span class="line">STATUS: DEPLOYED</span><br><span class="line"></span><br><span class="line">RESOURCES:</span><br><span class="line">==&gt; v1/ClusterRole</span><br><span class="line">NAME                     AGE</span><br><span class="line">istio-init-istio-system  0s</span><br><span class="line"></span><br><span class="line">==&gt; v1/ClusterRoleBinding</span><br><span class="line">NAME                                        AGE</span><br><span class="line">istio-init-admin-role-binding-istio-system  0s</span><br><span class="line"></span><br><span class="line">==&gt; v1/ConfigMap</span><br><span class="line">NAME          DATA  AGE</span><br><span class="line">istio-crd-10  1     0s</span><br><span class="line">istio-crd-11  1     0s</span><br><span class="line">istio-crd-12  1     0s</span><br><span class="line"></span><br><span class="line">==&gt; v1/Job</span><br><span class="line">NAME                     COMPLETIONS  DURATION  AGE</span><br><span class="line">istio-init-crd-10-1.2.8  0/1          0s</span><br><span class="line">istio-init-crd-11-1.2.8  0/1          0s</span><br><span class="line">istio-init-crd-12-1.2.8  0/1          0s</span><br><span class="line"></span><br><span class="line">==&gt; v1/ServiceAccount</span><br><span class="line">NAME                        SECRETS  AGE</span><br><span class="line">istio-init-service-account  0        0s</span><br></pre></td></tr></table></figure><h5 id="查看安装的CRD和pod"><a href="#查看安装的CRD和pod" class="headerlink" title="查看安装的CRD和pod"></a>查看安装的CRD和pod</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述安装会把istio的23个crd都提交给kubernetes api 服务器。如果启用了证书管理，crd计数器为28个。我这里未启用证书管理，只有23个。还生成三个pod</p><ul><li><p>CRD</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get CustomResourceDefinition</span></span><br><span class="line">NAME                                   CREATED AT</span><br><span class="line">adapters.config.istio.io               2019-10-29T08:41:31Z</span><br><span class="line">attributemanifests.config.istio.io     2019-10-29T08:41:30Z</span><br><span class="line">authorizationpolicies.rbac.istio.io    2019-10-29T08:41:36Z</span><br><span class="line">certificates.certmanager.k8s.io        2019-10-29T08:41:38Z</span><br><span class="line">challenges.certmanager.k8s.io          2019-10-29T08:41:40Z</span><br><span class="line">clusterissuers.certmanager.k8s.io      2019-10-29T08:41:37Z</span><br><span class="line">clusterrbacconfigs.rbac.istio.io       2019-10-29T08:41:26Z</span><br><span class="line">destinationrules.networking.istio.io   2019-10-29T08:41:25Z</span><br><span class="line">envoyfilters.networking.istio.io       2019-10-29T08:41:26Z</span><br><span class="line">gateways.networking.istio.io           2019-10-29T08:41:26Z</span><br><span class="line">handlers.config.istio.io               2019-10-29T08:41:33Z</span><br><span class="line">httpapispecbindings.config.istio.io    2019-10-29T08:41:27Z</span><br><span class="line">httpapispecs.config.istio.io           2019-10-29T08:41:28Z</span><br><span class="line">instances.config.istio.io              2019-10-29T08:41:32Z</span><br><span class="line">issuers.certmanager.k8s.io             2019-10-29T08:41:37Z</span><br><span class="line">meshpolicies.authentication.istio.io   2019-10-29T08:41:27Z</span><br><span class="line">orders.certmanager.k8s.io              2019-10-29T08:41:40Z</span><br><span class="line">policies.authentication.istio.io       2019-10-29T08:41:27Z</span><br><span class="line">quotaspecbindings.config.istio.io      2019-10-29T08:41:28Z</span><br><span class="line">quotaspecs.config.istio.io             2019-10-29T08:41:29Z</span><br><span class="line">rbacconfigs.rbac.istio.io              2019-10-29T08:41:31Z</span><br><span class="line">rules.config.istio.io                  2019-10-29T08:41:30Z</span><br><span class="line">serviceentries.networking.istio.io     2019-10-29T08:41:25Z</span><br><span class="line">servicerolebindings.rbac.istio.io      2019-10-29T08:41:31Z</span><br><span class="line">serviceroles.rbac.istio.io             2019-10-29T08:41:31Z</span><br><span class="line">sidecars.networking.istio.io           2019-10-29T08:41:34Z</span><br><span class="line">templates.config.istio.io              2019-10-29T08:41:32Z</span><br><span class="line">virtualservices.networking.istio.io    2019-10-29T08:41:25Z</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get crds | grep 'istio.io\|certmanager.k8s.io' | wc -l</span></span><br><span class="line">23</span><br></pre></td></tr></table></figure></li><li><p>pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n istio-system</span></span><br><span class="line">NAME                                      READY   STATUS      RESTARTS   AGE</span><br><span class="line">NAME                            READY   STATUS      RESTARTS   AGE</span><br><span class="line">istio-init-crd-10-1.2.8-pbtb8   0/1     Completed   0          47s</span><br><span class="line">istio-init-crd-11-1.2.8-shx6q   0/1     Completed   0          47s</span><br><span class="line">istio-init-crd-12-1.2.8-zmh2w   0/1     Completed   0          47s</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用helm安装各个组件"><a href="#使用helm安装各个组件" class="headerlink" title="使用helm安装各个组件"></a>使用helm安装各个组件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">helm install install/kubernetes/helm/istio --<span class="built_in">wait</span> \</span><br><span class="line">    --name istio \</span><br><span class="line">    --namespace istio-system \</span><br><span class="line">    --<span class="built_in">set</span> global.mtls.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> kiali.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> tracing.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> grafana.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> servicegraph.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> global.k8sIngress.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> global.k8sIngress.gatewayName=ingressgateway \</span><br><span class="line">    --<span class="built_in">set</span> grafana.enabled=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> kiali.createDemoSecret=<span class="literal">true</span> \</span><br><span class="line">    --<span class="built_in">set</span> kiali.contextPath=/ \</span><br><span class="line">    --<span class="built_in">set</span> <span class="string">"kiali.dashboard.jaegerURL=http://jaeger-query:16686"</span> \</span><br><span class="line">    --<span class="built_in">set</span> <span class="string">"kiali.dashboard.grafanaURL=http://grafana:3000"</span> \</span><br><span class="line">    --<span class="built_in">set</span> gateways.istio-ingressgateway.type=NodePort \</span><br><span class="line">    --<span class="built_in">set</span> gateways.istio-egressgateway.type=NodePort \</span><br><span class="line">    --<span class="built_in">set</span> sidecarInjectorWebhook.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;验证文件里面的服务是否都部署在kubernetes 服务中。确保部署的pod 在对应的kubernetes namespace 里面，并正常启动。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这期间将创建所需的RBAC权限，并部署Istio-Pilot，Istio-Mixer，Istio-Ingress，Istio-Egress和Istio-CA（证书颁发机构）。</p><h5 id="服务器验证"><a href="#服务器验证" class="headerlink" title="服务器验证"></a>服务器验证</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;确保部署了以下Kubernetes服务：istio-pilot，istio-mixer，istio-ingress。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc -n istio-system</span></span><br><span class="line">NAME                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                                                                                      AGE</span><br><span class="line">grafana                  ClusterIP   10.254.113.150   &lt;none&gt;        3000/TCP                                                                                                                                     3h22m</span><br><span class="line">istio-citadel            ClusterIP   10.254.27.143    &lt;none&gt;        8060/TCP,15014/TCP                                                                                                                           3h22m</span><br><span class="line">istio-galley             ClusterIP   10.254.155.177   &lt;none&gt;        443/TCP,15014/TCP,9901/TCP                                                                                                                   3h22m</span><br><span class="line">istio-ingressgateway     NodePort    10.254.170.109   &lt;none&gt;        15020:31952/TCP,80:31380/TCP,443:31390/TCP,31400:31400/TCP,15029:32532/TCP,15030:31518/TCP,15031:31525/TCP,15032:30404/TCP,15443:30309/TCP   3h22m</span><br><span class="line">istio-pilot              ClusterIP   10.254.228.182   &lt;none&gt;        15010/TCP,15011/TCP,8080/TCP,15014/TCP                                                                                                       3h22m</span><br><span class="line">istio-policy             ClusterIP   10.254.13.184    &lt;none&gt;        9091/TCP,15004/TCP,15014/TCP                                                                                                                 3h22m</span><br><span class="line">istio-sidecar-injector   ClusterIP   10.254.154.169   &lt;none&gt;        443/TCP                                                                                                                                      3h22m</span><br><span class="line">istio-telemetry          ClusterIP   10.254.71.72     &lt;none&gt;        9091/TCP,15004/TCP,15014/TCP,42422/TCP                                                                                                       3h22m</span><br><span class="line">jaeger-agent             ClusterIP   None             &lt;none&gt;        5775/UDP,6831/UDP,6832/UDP                                                                                                                   3h22m</span><br><span class="line">jaeger-collector         ClusterIP   10.254.100.29    &lt;none&gt;        14267/TCP,14268/TCP                                                                                                                          3h22m</span><br><span class="line">jaeger-query             ClusterIP   10.254.18.117    &lt;none&gt;        16686/TCP                                                                                                                                    3h22m</span><br><span class="line">kiali                    ClusterIP   10.254.156.117   &lt;none&gt;        20001/TCP                                                                                                                                    3h22m</span><br><span class="line">prometheus               ClusterIP   10.254.145.181   &lt;none&gt;        9090/TCP                                                                                                                                     3h22m</span><br><span class="line">tracing                  ClusterIP   10.254.87.72     &lt;none&gt;        80/TCP                                                                                                                                       3h22m</span><br><span class="line">zipkin                   ClusterIP   10.254.39.22     &lt;none&gt;        9411/TCP                                                                                                                                     3h22m</span><br></pre></td></tr></table></figure><h5 id="pod-验证"><a href="#pod-验证" class="headerlink" title="pod 验证"></a>pod 验证</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;确保已部署相应的Kubernetes Pod，并且所有容器都已启动并正在运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n istio-system</span></span><br><span class="line">NAME                                      READY   STATUS      RESTARTS   AGE</span><br><span class="line">grafana-6fb9f8c5c7-n2plk                  1/1     Running     0          3h19m</span><br><span class="line">istio-citadel-7c9b84ddb6-n5h2n            1/1     Running     0          3h19m</span><br><span class="line">istio-galley-64f7d8cc97-zdbb6             1/1     Running     0          3h19m</span><br><span class="line">istio-grafana-post-install-1.2.8-98grv    0/1     Completed   0          3h19m</span><br><span class="line">istio-ingressgateway-65c7498b78-dfmfp     1/1     Running     0          3h19m</span><br><span class="line">istio-init-crd-10-1.2.8-wxxjn             0/1     Completed   0          3h20m</span><br><span class="line">istio-init-crd-11-1.2.8-brjhh             0/1     Completed   0          3h20m</span><br><span class="line">istio-init-crd-12-1.2.8-w8wnc             0/1     Completed   0          3h20m</span><br><span class="line">istio-pilot-569499d666-vhgn5              2/2     Running     0          3h19m</span><br><span class="line">istio-policy-5dbbc56db5-dmr4p             2/2     Running     3          3h19m</span><br><span class="line">istio-sidecar-injector-747cf74498-99drh   1/1     Running     0          3h19m</span><br><span class="line">istio-telemetry-7db5dd4c57-zngq7          2/2     Running     4          3h19m</span><br><span class="line">istio-tracing-5d8f57c8ff-vt2kn            1/1     Running     0          3h19m</span><br><span class="line">kiali-7d749f9dcb-68tlt                    1/1     Running     0          3h19m</span><br><span class="line">prometheus-776fdf7479-zbrxl               1/1     Running     0          3h19m</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Istio 以一个项目的形式部署到 Kubernetes 集群中。我们可以看到，部署好的 pods 中，除了有 istio-citadel、、istio-ingressgateway、istio-pilot 等 Istio 本身的功能组件，还集成了微服务相关的监控工具，，如：grafana、jaeger-query、kiali、prometheus。这些功能丰富且强大的监控工具，帮助 Istio实现了微服务的可视化管理。</p><h3 id="部署BookInfo用程序"><a href="#部署BookInfo用程序" class="headerlink" title="部署BookInfo用程序"></a>部署BookInfo用程序</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在开始部署 Bookinfo 示例程序。部署Bookinfo条件是集群中至少有4个节点，而且每个节点的内存不得低于4G。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以部署安装随附的示例应用程序之一-BookInfo。这是一个简单的模拟书店应用程序，由四个服务组成，这些服务提供一个Web产品页面，书籍详细信息，评论（带有多个版本的评论服务）和评分-所有这些都使用Istio进行管理。</p><ul><li><p>BookInfo应用程序分为四个单独的微服务:</p><ul><li>productpage ：productpage 微服务会调用 details 和 reviews 两个微服务，用来生成页面。</li><li>details ：这个微服务包含了书籍的信息。</li><li>reviews ：这个微服务包含了书籍相关的评论。它还会调用 ratings 微服务。</li><li>ratings ：ratings 微服务中包含了由书籍评价组成的评级信息。</li></ul></li><li><p>reviews 微服务有 3 个版本：</p><ul><li>v1 版本不会调用 ratings 服务.</li><li>v2 版本会调用 ratings 服务，并使用 1 到 5 个黑色星形图标来显示评分信息</li><li>v3 版本会调用 ratings 服务，并使用 1 到 5 个红色星形图标来显示评分信息</li></ul></li><li><p>下图展示了这个应用的端到端架构<br><img src="https://img.xxlaila.cn/1572576628250.jpg" alt="img"></p></li></ul><h4 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为 default 命名空间打上标签 istio-injection=enabled，实现 Sidecar 自动注入。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl label namespace default istio-injection=enabled</span></span><br><span class="line">namespace/default labeled</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get namespace --show-labels</span></span><br><span class="line">NAME              STATUS   AGE   LABELS</span><br><span class="line">default           Active   43d   istio-injection=enabled</span><br><span class="line">istio-system      Active   29m   &lt;none&gt;</span><br><span class="line">kube-node-lease   Active   43d   &lt;none&gt;</span><br><span class="line">kube-public       Active   43d   &lt;none&gt;</span><br><span class="line">kube-system       Active   43d   &lt;none&gt;</span><br><span class="line">monitoring        Active   35d   &lt;none&gt;</span><br><span class="line">weave             Active   35d   &lt;none&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>注意:</strong> 此步骤先不执行，如果这这个执行了，在后面部署Bookinfo的时候会提示如下错误<code>Error creating: Internal error occurred: failed calling webhook &quot;sidecar-injector.istio.io&quot;: Post https://istio-sidecar-injector.istio-system.svc:443/inject?timeout=30s: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</code>这一步有执行的可以执行以下命令进行删除</li></ul><ul><li>删除ns的label<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get ns --show-labels</span></span><br><span class="line">NAME              STATUS   AGE    LABELS</span><br><span class="line">default           Active   2d4h   istio-injection=enabled</span><br><span class="line">istio-system      Active   174m   &lt;none&gt;</span><br><span class="line">kube-node-lease   Active   2d4h   &lt;none&gt;</span><br><span class="line">kube-public       Active   2d4h   &lt;none&gt;</span><br><span class="line">kube-system       Active   2d4h   &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl label namespace default istio-injection-</span></span><br><span class="line">namespace/default labeled</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get ns --show-labels</span></span><br><span class="line">NAME              STATUS   AGE    LABELS</span><br><span class="line">default           Active   2d4h   &lt;none&gt;</span><br><span class="line">istio-system      Active   175m   &lt;none&gt;</span><br><span class="line">kube-node-lease   Active   2d4h   &lt;none&gt;</span><br><span class="line">kube-public       Active   2d4h   &lt;none&gt;</span><br><span class="line">kube-system       Active   2d4h   &lt;none&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="部署Bookinfo"><a href="#部署Bookinfo" class="headerlink" title="部署Bookinfo"></a>部署Bookinfo</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接使用kubectl create其常规的YAML部署文件来部署我们的应用程序。将使用istioctl将Envoy容器注入到应用程序容器中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f &lt;(istioctl kube-inject -f samples/bookinfo/platform/kube/bookinfo.yaml)</span></span><br><span class="line">service/details created</span><br><span class="line">serviceaccount/bookinfo-details created</span><br><span class="line">deployment.apps/details-v1 created</span><br><span class="line">service/ratings created</span><br><span class="line">serviceaccount/bookinfo-ratings created</span><br><span class="line">deployment.apps/ratings-v1 created</span><br><span class="line">service/reviews created</span><br><span class="line">serviceaccount/bookinfo-reviews created</span><br><span class="line">deployment.apps/reviews-v1 created</span><br><span class="line">deployment.apps/reviews-v2 created</span><br><span class="line">deployment.apps/reviews-v3 created</span><br><span class="line">service/productpage created</span><br><span class="line">serviceaccount/bookinfo-productpage created</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该命令将启动bookinfo应用程序体系结构图中显示的所有四个服务。已启动评论服务的所有3个版本，即v1，v2和v3。而在实际部署中，随着时间的推移会部署新版本的微服务，而不是同时部署所有版本。</p><h4 id="检查部署"><a href="#检查部署" class="headerlink" title="检查部署"></a>检查部署</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;确认所有服务和Pod均已正确定义并正在运行。</p><ul><li><p>检查 services</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get services</span></span><br><span class="line">NAME          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">details       ClusterIP   10.254.61.113    &lt;none&gt;        9080/TCP   2m27s</span><br><span class="line">kubernetes    ClusterIP   10.254.0.1       &lt;none&gt;        443/TCP    43d</span><br><span class="line">productpage   ClusterIP   10.254.130.5     &lt;none&gt;        9080/TCP   2m23s</span><br><span class="line">ratings       ClusterIP   10.254.186.181   &lt;none&gt;        9080/TCP   2m26s</span><br><span class="line">reviews       ClusterIP   10.254.200.107   &lt;none&gt;        9080/TCP   2m25s</span><br></pre></td></tr></table></figure></li><li><p>检查 pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods</span></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">details-v1-c5b5f496d-lphgd        1/1     Running   0          15h</span><br><span class="line">load-generator-7fbcc7489f-vbpnx   1/1     Running   2          20d</span><br><span class="line">nginx-deploy-d494b9564-vx97s      1/1     Running   1          20d</span><br><span class="line">productpage-v1-c7765c886-97spj    1/1     Running   0          15h</span><br><span class="line">ratings-v1-f745cf57b-mdgxr        1/1     Running   0          15h</span><br><span class="line">reviews-v1-75b979578c-ghqqm       1/1     Running   0          15h</span><br><span class="line">reviews-v2-597bf96c8f-r659w       1/1     Running   0          15h</span><br><span class="line">reviews-v3-54c6c64795-tvsmq       1/1     Running   0          15h</span><br></pre></td></tr></table></figure></li><li><p>确认Bookinfo应用程序正在运行，请通过curl某个pod中的命令向其发送请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath='&#123;.items[0].metadata.name&#125;') -c ratings -- curl productpage:9080/productpage | grep -o "&lt;title&gt;.*&lt;/title&gt;"</span></span><br><span class="line">&lt;title&gt;Simple Bookstore App&lt;/title&gt;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在每个服务旁边都注入了Envoy，架构将如下<br><img src="https://img.xxlaila.cn/1572577460804.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bookinfo服务已启动并正在运行，您需要使该应用程序可以从Kubernetes集群外部访问，例如，从浏览器访问。Istio网关用于此目的。但是我在部署 bookinfo-gateway 的时候出现错误，错误如下；然后看了一下 bookinfo-gateway就是提供一个web访问的程序，既然是提供的一个web访问，我就使用了Traefix来提供这个服务。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">Error</span> <span class="keyword">from</span><span class="built_in"> server </span>(Timeout): <span class="builtin-name">error</span> when creating <span class="string">"samples/bookinfo/networking/bookinfo-gateway.yaml"</span>: Timeout: request did <span class="keyword">not</span> complete within requested timeout 30s</span><br><span class="line"><span class="builtin-name">Error</span> <span class="keyword">from</span><span class="built_in"> server </span>(Timeout): <span class="builtin-name">error</span> when creating <span class="string">"samples/bookinfo/networking/bookinfo-gateway.yaml"</span>: Timeout: request did <span class="keyword">not</span> complete within requested timeout 30s</span><br></pre></td></tr></table></figure><h4 id="创建-bookinfo-gateway"><a href="#创建-bookinfo-gateway" class="headerlink" title="创建 bookinfo-gateway"></a>创建 bookinfo-gateway</h4><ul><li>istio-Ingress.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;istio-Ingress.yaml &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: istio-web-ui</span><br><span class="line">  namespace: </span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: istio.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: productpage</span><br><span class="line">          servicePort: 9080</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在浏览器输入<code>http://istio.xxlaila.cn</code> 来访问。用 productpage以查看BookInfo网页。如果您多次刷新页面，您应该会看到产品页面上显示的评论版本不同，并以循环方式显示（红色星星，黑色星星，无星星），因为我们尚未使用Istio来控制版本路由<br><img src="https://img.xxlaila.cn/1572578398765.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1572578189667.jpg" alt="img"></p><p>基本道这里，动态更改请求路由学习中，😂😂😂</p><h3 id="监控方式"><a href="#监控方式" class="headerlink" title="监控方式"></a>监控方式</h3><h4 id="生成服务图"><a href="#生成服务图" class="headerlink" title="生成服务图"></a>生成服务图</h4><p>要验证Kiali是否在您的集群中运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -n istio-system get svc kiali</span></span><br><span class="line">NAME    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)     AGE</span><br><span class="line">kiali   ClusterIP   10.254.156.117   &lt;none&gt;        20001/TCP   4h38m</span><br></pre></td></tr></table></figure><p>流量发送到网格，有三种选择:<br>1.在网络浏览器中访问<a href="http://istio.xxlaila.cn/productpage" target="_blank" rel="noopener">http://istio.xxlaila.cn/productpage</a><br>2.多次使用以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl http://istio.xxlaila.cn/productpage</span></span><br></pre></td></tr></table></figure><p>3.使用以下watch命令连续发送请求：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># watch -n 1 curl -o /dev/null -s -w %&#123;http_code&#125; http://istio.xxlaila.cn/productpage</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里需要配置Kiali UI，我们同样适用Traefix来进行配置</p><ul><li>kiali–Ingress.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; kiali--Ingress.yaml &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: kiali-web-ui</span><br><span class="line">  namespace: istio-system </span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: istio-kiali.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: kiali</span><br><span class="line">          servicePort: 20001</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在浏览器打开<a href="http://istio-kiali.xxlaila.cn" target="_blank" rel="noopener">http://istio-kiali.xxlaila.cn</a> ， 要登录Kiali UI，请转到Kiali登录屏幕，然后输入存储在Kiali机密中的用户名和密码。账户密码是前面我们设置的</p><h4 id="1-网格概述"><a href="#1-网格概述" class="headerlink" title="1.网格概述"></a>1.网格概述</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录后立即显示的“概述”页面中查看网格的概述。“概述”页面显示了网格中具有服务的所有名称空间。以下屏幕截图显示了类似的页面<br><img src="https://img.xxlaila.cn/1572578943386.jpg" alt="img"></p><h4 id="2-空间图"><a href="#2-空间图" class="headerlink" title="2.空间图"></a>2.空间图</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要查看名称空间图，请在bookinfoBookinfo名称空间卡中单击图图标。图形图标位于名称空间卡的左下方，看起来像是一组相连的圈子。该页面类似于<br><img src="https://img.xxlaila.cn/1572579048298.jpg" alt="img"></p><h3 id="分布式跟踪系统"><a href="#分布式跟踪系统" class="headerlink" title="分布式跟踪系统"></a>分布式跟踪系统</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;启用Istio的应用程序可以配置为使用流行的Jaeger分布式跟踪系统来收集跟踪范围。分布式跟踪使您可以查看用户在系统中发出的请求流，而Istio的模型则允许这样做，而与构建应用程序所使用的语言/框架/平台无关。使用Traefix来提供这个服务。</p><ul><li><p>Jaeger-Ingress.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; Jaeger-Ingress.yaml  &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: jaeger-web-ui</span><br><span class="line">  namespace: istio-system </span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: jaeger.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: jaeger-query</span><br><span class="line">          servicePort: 16686</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f Jaeger-Ingress.yaml </span></span><br><span class="line">ingress.extensions/jaeger-web-ui unchanged</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在浏览器打开<a href="http://jaeger.xxlaila.cn" target="_blank" rel="noopener">http://jaeger.xxlaila.cn</a> ， 使用Bookinfo示例生成跟踪，要查看跟踪数据，必须将请求发送到服务。请求数量取决于Istio的采样率。您在安装Istio时设置此速率。默认采样率为1％。您需要至少发送100个请求，才能显示第一条跟踪。要将100个请求发送到productpage服务，请使用以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for i in `seq 1 100`; do curl -s -o /dev/null http://istio.xxlaila.cn/productpage; done</span></span><br></pre></td></tr></table></figure><ul><li><p>在仪表板的左侧窗格中，从“服务”下拉列表中选择productpage.default，然后单击“查找跟踪”<br><img src="https://img.xxlaila.cn/1572592255728.jpg" alt="img"></p></li><li><p>单击顶部的最新跟踪以查看与对/ productpage的最新请求相对应的详细信息<br><img src="https://img.xxlaila.cn/1572592385675.jpg" alt="img"></p></li></ul><h3 id="监视Istio"><a href="#监视Istio" class="headerlink" title="监视Istio"></a>监视Istio</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何设置和使用Istio仪表板监视网格流量。作为监控的一部分，需要将安装Grafana Istio插件，并使用基于Web的界面查看服务网格流量数据。Grafana将用于可视化普罗米修斯数据。在执行部署的时候也部署了这两个服务。</p><h4 id="创建grafana-Ingress"><a href="#创建grafana-Ingress" class="headerlink" title="创建grafana Ingress"></a>创建grafana Ingress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;grafana-istio-Ingress.yaml &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana-istio-web-ui</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: grafana-istio.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: grafana</span><br><span class="line">          servicePort: 3000</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>执行创建，这里我们可以在以前的grafana里面添加数据库源，就不用在新起一个域名来进行访问<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再次加载Bookinfo应用程序（<a href="http://istio.xxlaila.cn/productpage）" target="_blank" rel="noopener">http://istio.xxlaila.cn/productpage）</a> ， 刷新页面几次（或发送命令几次）以产生少量流量。再次查看Istio仪表板。它应该反映所产生的流量。<br><img src="https://img.xxlaila.cn/1572593852626.jpg" alt="img"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;istio 还提供了网格的全局视图以及网格中的服务和工作负载。您可以通过导航到特定的仪表板来获取有关服务和工作负载的更多详细信息。<br><img src="https://img.xxlaila.cn/1572594150893.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提供了有关服务指标的详细信息，然后是该服务的客户端工作负载（正在调用此服务的工作负载）和服务工作负载（正在提供该服务的工作负载）。<br><img src="https://img.xxlaila.cn/1572594261333.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Istio 在grafana 提供了很多的监控指标，可以分别点击看看<br><img src="https://img.xxlaila.cn/1572594330246.jpg" alt="img"></p><h3 id="查询Istio指标"><a href="#查询Istio指标" class="headerlink" title="查询Istio指标"></a>查询Istio指标</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Istio的数据是存储在prometheus里面的，这里我们通过prometheus进行直接数据的查询</p><h4 id="查看prometheus服务"><a href="#查看prometheus服务" class="headerlink" title="查看prometheus服务"></a>查看prometheus服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -n istio-system get svc prometheus</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">prometheus   ClusterIP   10.254.145.181   &lt;none&gt;        9090/TCP   5h35m</span><br></pre></td></tr></table></figure><h4 id="prometheus-traefix"><a href="#prometheus-traefix" class="headerlink" title="prometheus traefix"></a>prometheus traefix</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过traefix 来代理prometheus，然后我们将流量发送到网格。</p><ul><li><p>prometheus-istio.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; prometheus-istio-Ingress.yaml &lt;&lt;EOF</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-istio-web-ui</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: prometheus-istio.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: prometheus</span><br><span class="line">          servicePort: 9090</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f prometheus-istio-Ingress.yaml </span></span><br><span class="line">ingress.extensions/prometheus-istio-web-ui created</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在浏览器打开<a href="http://prometheus-istio.xxlaila.cn" target="_blank" rel="noopener">http://prometheus-istio.xxlaila.cn</a> ，可以在输入框里面输入表达式来获取指，输入文本：istio_requests_total<br><img src="https://img.xxlaila.cn/1572594888435.jpg" alt="img"></p><ul><li><p>其他查询尝试：</p><ul><li><p>对productpage服务的所有请求总数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">istio_requests_total&#123;destination_service=<span class="string">"productpage.default.svc.cluster.local"</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>对v3版本的评论服务的所有请求总数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">istio_requests_total&#123;destination_service=<span class="string">"reviews.default.svc.cluster.local"</span>, destination_version=<span class="string">"v3"</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>该查询将所有请求的当前总数返回到评论服务的v3。</p><ul><li>过去5分钟内对productpage服务所有实例的请求率：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rate(istio_requests_total&#123;destination_service=~<span class="string">"productpage.*"</span>, response_code=<span class="string">"200"</span>&#125;[5m])</span><br></pre></td></tr></table></figure></li></ul></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>istio</tag>
      </tags>
  </entry>
  <entry>
    <title>pipeline核心高级篇</title>
    <url>/2019/10/26/pipeline%E9%AB%98%E7%BA%A7%E7%AF%87/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面的两篇文章介绍了pipeline的基本使用和一些实际使用的例子，看似很不错，但是在实际应用也会出现很多的不足和问题，随之系统的庞大、服务的增加、人员的参差不齐会导致很多的问题。<a id="more"></a>届时会带来很大的维护成本和一些改动，所以我们在做事情之前就要考虑进去，一些意外事件的发生、或者是在将来即将会发生和需要改变的事情我们都要想到或者是预留口子，这样才在今后扩展、修改、引入都能有很好可塑性。</p><h3 id="jenkins-job介绍"><a href="#jenkins-job介绍" class="headerlink" title="jenkins job介绍"></a>jenkins job介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大多数情况下我们都是使用jenkins的普通job，普通的job好处是配置简单，结构化可以复杂，也可以单一。在使用jenkins job的时候我们分为两种：一种是单一job，一种是具有耦合性的。下面对两种情况进行对比和比较。</p><h4 id="jenkins-单一job"><a href="#jenkins-单一job" class="headerlink" title="jenkins 单一job"></a>jenkins 单一job</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在jenkins的传统模式下，单一的的job可以让维护人员可以很好的查看里面的逻辑步骤，job里面所有的任务都在这个所属的空间里面执行，它里面包含了：代码pull、编译、打包、复制包、发布包（使用内置的shell模块来写shell，这种应该不存在）。种单一job服务算得上是服务周到，不影响其他人，自己管理好自己的一亩三分地。好处是当出错以后影响范围小，容易控制。如下图：<br><img src="https://img.xxlaila.cn/1572064519037.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这中模式下，维护人员前期用看似比较轻松的工作建立起了整个发布流程。但是到了后期就不行了。之前我在的这家公司前期也是这么这么做的。开发完成后提交git，然后自动触发、构建、制品库、发布，在一个job里面就完成了。后来我们准备推行更好的devops方案的时候；发现以前的这个job建立有问题，一想到几百个微服务，几百个job需要去进行改造。顿时我们运维脸线一黑，虽然我们自己写了一个快速在jenkins上建立job，但是一想到几百个还是不好。为了解决这个问题，我们使用了job之间的任务关联，然后通过参数传递完成整个流程服务。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种模式下的弊端就如上面所说的一样，但什么时候好的服务呢？好的服务又是什么样子的呢？这里也可以嵌套一些微服务的概念理论。如果我们要做到什么时候好的服务，我们得了解了解一下: 低耦合和高内聚。了解这个东西有助于我们在接下来的pipeline 流水线的设计，包括在后期devops的设计以及撸码都有很大的帮助。</p><h3 id="耦合性"><a href="#耦合性" class="headerlink" title="耦合性"></a>耦合性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先我们来了解这一概念: “高内聚低耦合”。在软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。划分模块的一个准则是高内聚低耦合。从模块粒度来看，高内聚：尽可能类的每个成员方法只完成一件事（最大限度的聚合）；低耦合：减少类内部，一个成员方法调用另一个成员方法。从类角度来看，高内聚低耦合：减少类内部，对其他类的调用；从功能块来看，高内聚低耦合：减少模块之间的交互复杂度（接口数量，参数数据）即横向：类与类之间、模块与模块之间；纵向：层次之间；尽可能，内容内聚，数据耦合。</p><h4 id="低耦合"><a href="#低耦合" class="headerlink" title="低耦合"></a>低耦合</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不同模块相互依赖多少？模块应尽可能独立于其他模块，以使对模块的更改不会严重影响其他模块。</p><h4 id="高耦合"><a href="#高耦合" class="headerlink" title="高耦合"></a>高耦合</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;高耦合将意味着您的模块对其他模块的内部运作了解太多。对其他模块了解太多的模块会使更改难以协调，并使模块能力变弱。如果模块A对模块B的了解过多，则对模块B内部的更改可能会破坏模块A的功能。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过实现低耦合，可以轻松更改模块内部，不必担心它们对系统中其他模块的影响。低耦合还使我们的模块彼此之间不相互依赖，因此更易于设计，编写和测试代码。我们还获得了易于重用和可组合的模块的优势。问题也被隔离到小的，独立的代码单元中。</p><p><strong>好处:</strong></p><ul><li>可维护性: 更改限制在一个模块中</li><li>可测试性: 单元测试中涉及的模块可以限制在最低限度</li><li>可读性: 需要分析的类减少</li></ul><h4 id="高内聚"><a href="#高内聚" class="headerlink" title="高内聚"></a>高内聚</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内聚性通常是指模块的元素如何相互组合。相关代码应彼此接近，以使其具有高度的凝聚力。易于维护的代码通常具有很高的内聚性。模块中的元素与该模块要提供的功能直接相关。如果需要修改一个功能，最好是在一个地方进行修改，然后可以尽快的发布。如果很多不同的地方要进行修改，就有可能需要发布多个微服务才能交互这个功能。在很多地方进行修改，不仅修改速度很慢，同时部署多个微服务也提高了风险。所以在找到问题域的边界域后可以确保相关的行为能放在同一个地方，并且它们会和其它边界以尽量低耦合的形式进行通信。</p><p><strong>好处:</strong></p><ul><li>可读性: 功能包含在单个模块中</li><li>可维护性: 调试往往包含在单个模块中</li><li>可重用性: 具有集中功能不会被无用的干扰</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内聚性低意味着组成某些功能的代码会散布在您的整个代码库中。不仅很难发现与您的模块相关的代码，而且很难在不同的模块之间跳转并跟踪的所有代码。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通俗的来讲，内聚是从功能角度来度量模块内的联系，好的内聚模块应恰好做一件事。描述的是模块内的功能联系。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块点以及通过接口的数据。</p><h4 id="可维护的代码"><a href="#可维护的代码" class="headerlink" title="可维护的代码"></a>可维护的代码</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一般在编写可维护的代码有助于提高开发人员的生产力。具有高度可维护的代码使设计新功能和编写代码变得更加容易。模块化，基于组件的分层代码可提高生产率并降低进行更改时的风险。通过使代码保持松散耦合，可以在一个模块内编写代码，而不会影响其他模块。通过保持代码的内聚性，我们可以更轻松地编写易于使用的DRY代码。</p><p><strong>问题</strong>: 当我们遇到问题时，请评估修复、修改程序的程度。是更改一个模块，还是更改分散在整个系统中？在进行更改时，它是否可以解决所有的问题，还是会产生其他一些不可预知的问题？</p><p>在编写和使用代码库时:</p><ul><li>我要修复和创建的此功能模块是多少？</li><li>此更改是要在几个不同的地方进行？</li><li>我能否独立测试代码，测试整个代码有多难？</li><li>我们是否可以使代码更松散地耦合来改善？可以使用高内聚来改善我们的代码吗？</li></ul><h3 id="Jenkins-设计"><a href="#Jenkins-设计" class="headerlink" title="Jenkins 设计"></a>Jenkins 设计</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有了上面的的理论与概念。根据这里理论和概念我们就可以设计出一套更好的devops流程。本文将kubernetes平台上来做这一套设计，并在实际的环境中应用。涉及的功能如下: 服务 Job、Code Job、Release、Notice四个功能任务。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每一个环境有错误，就会执行告警任务模块，告警目前使用的是<a href="https://github.com/xxlaila/jenkins-wechat-notice" target="_blank" rel="noopener">企业微信</a>。job之间需要传递JOB_NAME，env，version三个参数。在之前的devops设计里面整个job的调用设计还要多。形成了一个通用体系。在这个设计里面，当还需要增加一个任务流程，我们只需要修改pipeline，然后增加一个job，在下次构建的时候就会把我们新增加的流程给加进去，非常的方便。设计图如下：<br><img src="https://img.xxlaila.cn/1572081425995.jpg" alt="img"></p><h4 id="Project-Name"><a href="#Project-Name" class="headerlink" title="Project Name"></a>Project Name</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此job一般就是服务，job名称以服务的名称进行命名。里面包含了四个功能.</p><ul><li>Clone Code: clone 代码。</li><li>Build Code: 就是对开发提交的代码进行编译。</li><li>Env Version: 获取本次提交的hash，以hash为版本，结合环境来做一个版本记录，这里需要进行判断。uat/prod环境不需要env前缀。</li><li>Build Docker: 把编译完成后的二进制文件，打包成一个docker镜像。</li></ul><h4 id="Code-Test"><a href="#Code-Test" class="headerlink" title="Code Test"></a>Code Test</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于测试进行对代码的自动化测试；自动化流程、性能等测试</p><h4 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要是进行发布服务。当接受到上游job传递来的参数信息后，结合参数信息来进行对应的发布到kubernetes中namespace中，主要包含了以下功能</p><ul><li>Push Docker: 把前面打包的docker镜像推送到harbor</li><li>Edit Files: 修改发布的脚本</li><li>Release: 执行<code>kubectl</code>进行发布<ul><li>当发布到kubernetes中，kubernetes 会执行<a href="https://xxlaila.github.io/2019/09/27/k8s-pod%E5%81%A5%E5%BA%B7%E6%A3%80%E6%B5%8B/" target="_blank" rel="noopener">health检测</a>，如果启动失败，会进行通知</li></ul></li></ul><h4 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此job主要用于通知。当接受到规则的告警通知以后，就会进行触发通知相关的人员。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>pipeline多分支gitlab触发</title>
    <url>/2019/10/25/pipeline%E5%A4%9A%E5%88%86%E6%94%AFgitlab%E8%A7%A6%E5%8F%91/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="enter password to read." />
    <label for="hbePass">enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="bc111fcdecb47a361a30fa5ce958b004ab044d0dd02b43db02eb293f535e7fe4"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins运维篇</title>
    <url>/2019/10/22/jenkins%E8%BF%90%E7%BB%B4%E7%AF%87/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="jenkins-可视化构建"><a href="#jenkins-可视化构建" class="headerlink" title="jenkins 可视化构建"></a>jenkins 可视化构建</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在之前遇到过开发提交代码后，完全不管提交的代码是否发布成功，及时后来加入了企业微信的告警机制，但是依然有人不会去关注这个。<a id="more"></a> 只有在测试人员在反馈xxx你的代码提交了没有，这时候研发人员才回去看，有时候一个触发构建失败了，摆在那里很久，如有下一个开发人员要对这个工程修改提交的时候发现过不了，这时候再来解决，成本就有点大。这里可以借助看板的形式让研发人员可以随时关注到自己的提交的工程，结合告警来做，效果还是不错的。</p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装Build Monitor View 插件，然后在主页面添加<code>+</code>一个视图<br><img src="https://img.xxlaila.cn/1571707794737.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以根据job的类型或者根据自己的条件进行<a href="https://xxlaila.github.io/2019/08/09/jenkins-job%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">过滤job</a>来生成看板。</p><ul><li>Build Monitor - View Settings: 根据job的一些状态来进行排序<br><img src="https://img.xxlaila.cn/1571708048469.jpg" alt="img"></li></ul><h3 id="jenkins-监控"><a href="#jenkins-监控" class="headerlink" title="jenkins 监控"></a>jenkins 监控</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有时候我们没有监控，但是有时候需要看看jenkins的一些监控信息，如：内存、cpu、系统负债、http响应时间、系统进程数、线程数等，有懒得安装监控，这时候我们可以借助jenkins自带的一个插件<code>Monitoring</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;插件安装完成后，我们可以在系统管理菜单下面看到<code>Monitoring of Jenkins master</code><br><img src="https://img.xxlaila.cn/1571708499625.jpg" alt="img"></p><p>点击进入以后我们可以看到<br><img src="https://img.xxlaila.cn/1571708561404.jpg" alt="img"><br>页面显示乱码，这个可以自己google解决</p><h3 id="Build-Trigger-Badge"><a href="#Build-Trigger-Badge" class="headerlink" title="Build Trigger Badge"></a>Build Trigger Badge</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此插件直接在构建历史记录中显示代表构建原因的图标。它可以让您快速知道是哪个原因触发了构建。如果没有此插件，您有时可能会想知道是什么触发了构建历史中显示的&gt;&gt;特定构建。要知道这一点，您必须单独打开每个链接，这可能很麻烦。<br><img src="https://img.xxlaila.cn/1572059619062.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>pipeline语法</title>
    <url>/2019/10/21/pipeline%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:43 GMT+0800 (China Standard Time) --><h3 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在测试k8s上的ci/cd，之前的ci/cd其实也能满足目前先业务的需求，但是想尝试改进一下，优化以前的job，希望在登录ci的时候更加的简洁，<a id="more"></a> 而且查找job的时候，点击一个job就能查看完整的信息，不需要job之间的来回切换，等等各种理由，😁😁。这里使用jenkins pipeline，起初测试的时候使用pipeline，没问题以后，使用jenkinsfile。</p><h3 id="pipeline-常用介绍"><a href="#pipeline-常用介绍" class="headerlink" title="pipeline 常用介绍"></a>pipeline 常用介绍</h3><h4 id="清理历史build"><a href="#清理历史build" class="headerlink" title="清理历史build"></a>清理历史build</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;普通job的时候清理和保留历史job的build 很简单，勾勾就可以啦，但是pipeline就的使用一下方式，而且还的写在最前面，不然识别不了，会报错的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">options &#123;</span><br><span class="line">        buildDiscarder(logRotar(numToKeepStr: <span class="string">'8'</span>))</span><br><span class="line">        disableConcurrentBuilds()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>buildDiscarder: 保持构建的最大个数</li><li>disableConcurrentBuilds: 禁止并发构建</li></ul><p>详细参数:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">buildDiscarder(logRotator(numToKeepStr: <span class="string">'8'</span>, artifactNumToKeepStr: <span class="string">'8'</span>, daysToKeepStr: <span class="string">'8'</span>, artifactDaysToKeepStr: <span class="string">'7'</span>))</span><br></pre></td></tr></table></figure><ul><li>artifactDaysToKeepStr: 发布包保留天数</li><li>artifactNumToKeepStr: 发布包最大保留#个构建</li><li>daysToKeepStr: 保持构建的天数</li><li>numToKeepStr: 保持构建的最大个数</li></ul><h4 id="gitlab事件触发"><a href="#gitlab事件触发" class="headerlink" title="gitlab事件触发"></a>gitlab事件触发</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前的我们的ci/cd都是开发提交到某一个分支，然后jenkins会自动触发编译、发布，而且配置这个步骤也需要好几步才能实现，但在pipeline中也可以通过代码形式最这种触发器(勾子)进行配置。这样让每个项目都和jenkins进行耦合；运维人员只需要专注的维护Jenkinsfile，创建对应的项目即可。gitlab触发jenkins的构建需要依赖Gitlab插件。这里需要自行安装</p><ul><li><p>接受固定的分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">        gitlab(triggersOnPush: <span class="literal">true</span>,</span><br><span class="line">              triggersOnMergeRequest: <span class="literal">true</span>,</span><br><span class="line">              branchFilterType: <span class="string">"NameBasedFilter"</span>,</span><br><span class="line">              includeBranchesSpec: <span class="string">"dev,test,master"</span>,</span><br><span class="line">              secretToken: <span class="string">"<span class="variable">$&#123;env.git_token&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>triggerOnPush: 当Gitlab触发push事件时，是否执行构建</p></li><li><p>triggerOnMergeRequest: 当Gitlab触发mergeRequest事件时，是否执行构建</p></li><li><p>branchFilterType: 只有符合条件的分支才会触发构建，必选，否则无法实现触发。</p><ul><li>All: 所有分支</li><li>NameBasedFilter: 基于分支名进行过滤，多个分支名使用逗号分隔<ul><li>includeBranchesSpec: 基于branchFilterType值，输入期望包括的分支的规则</li><li>excludeBranchesSpec: 基于branchFilterType值，输入期望排除的分支的规则</li></ul></li><li>RegexBasedFilter: 基于正则表达式对分支名进行过滤<ul><li>sourceBranchRegex: 定义期望的通过正则表达式限制的分支规则</li></ul></li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以分支不阐述，其他的两个选项是最实用的，我们在正式使用的时候一定会用到这个，上面的例子是一个接受固定的几个分支</p><ul><li>匹配的方式<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">        gitlab(triggersOnPush: <span class="literal">true</span>,</span><br><span class="line">              triggersOnMergeRequest: <span class="literal">true</span>,</span><br><span class="line">              branchFilterType: <span class="string">"RegexBasedFilter"</span>,</span><br><span class="line">              sourceBranchRegex: <span class="string">"dev.*"</span>,</span><br><span class="line">              secretToken: <span class="string">"<span class="variable">$&#123;env.git_token&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里的git_token需要在jenkins的全局变量里面添加一个<code>Environment variables</code>对应的一个键值即可。</p><p><strong>注</strong>: 所有的触发器都需要先手动执行一次，让jenkins家在其中的配置，对应的指令才会生效。</p><ul><li><p>jenkins 验证<br><img src="https://img.xxlaila.cn/1571644117201.jpg" alt="img"></p></li><li><p>gitlab验证<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要将项目回调地址写入到Gitlab钩子当中才可以。经过测试一个pipeline的job可以管理多个分支的触发，避免之前的每一个分支的job进行触发。</p></li></ul><h4 id="parameters-模块"><a href="#parameters-模块" class="headerlink" title="parameters 模块"></a>parameters 模块</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该模块需要安装，parameters指令提供用户在触发Pipeline时应提供的参数列表。这些用户指定的参数的值通过该params对象可用于Pipeline步骤。研发经常会有打出一个特性分支，这个分支用于hotfix，这个时候就要给研发提交一个可以选择的分支，然他们去部署到对应的环境。</p><ul><li><p>字符串参数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;定义一个字符串参数，用户可以在Jenkins UI上输入字符串，常见使用这个参数的场景有，用户名，收件人邮箱，文件网络路径，主机名称的或者url等</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    string(name: <span class="string">'DEPLOY_ENV'</span>, defaultValue: <span class="string">'staging'</span>, description: <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>布尔值参数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;定义一个布尔类型参数，用户可以在Jenkins UI上选择是还是否，选择是表示代码会执行这部分，如果选择否，会跳过这部分。一般需要使用布尔值的场景有，执行一些特定集成的脚本或则工作，或者事后清除环境，例如清楚Jenkins的workspace这样的动作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    booleanParam(name: <span class="string">'DEBUG_BUILD'</span>, defaultValue: <span class="literal">true</span>, description: <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择参数<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;选择（choice）的参数就是支持用户从多个选择项中，选择一个值用来表示这个变量的值。工作中常用的场景，有选择服务器类型，选择版本号等。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    choice(name: <span class="string">'ENV_TYPE'</span>, choices: [<span class="string">'dev'</span>, <span class="string">'test'</span>, <span class="string">'product'</span>], description: <span class="string">'dev env test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当然parameters模块我们用的最多的是在手动的时候我们可以手动点击进行构建部署，至于其他的目前我暂时未用到</p><ul><li>选择分支部署<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;label <span class="string">'agent-node'</span>&#125;</span><br><span class="line">    parameters &#123;</span><br><span class="line">        gitParameter branchFilter: <span class="string">'origin/(.*)'</span>, defaultValue: <span class="string">'dev'</span>, name: <span class="string">'BRANCH'</span>, <span class="built_in">type</span>: <span class="string">'PT_BRANCH'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'gitlib code'</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                git branch:<span class="string">"<span class="variable">$&#123;params.BRANCH&#125;</span>"</span>, credentialsId:<span class="string">'gitlabUser'</span>, url: <span class="string">"http://gitlab.xxlaila.cn/xxx/kxl-eureka.git"</span></span><br><span class="line">                script &#123;</span><br><span class="line">                    build_tag = sh(returnStdout: <span class="literal">true</span>, script: <span class="string">'git rev-parse --short HEAD'</span>).trim()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>parameters<a href="https://wiki.jenkins.io/display/JENKINS/Git+Parameter+Plugin" target="_blank" rel="noopener">官方参考</a>，介绍得挺详细的，<a href="https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/136740885/Triggering+Jenkins+Based+on+New+Tags" target="_blank" rel="noopener">辅助参考</a><br><img src="https://img.xxlaila.cn/1571651950634.jpg" alt="img"></p><ul><li>还可以写成<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parameters &#123;</span><br><span class="line">    gitParameter(</span><br><span class="line">        branch: <span class="string">''</span>,</span><br><span class="line">        branchFilter: <span class="string">'origin/(.*)'</span>,</span><br><span class="line">        defaultValue: <span class="string">'dev'</span>,</span><br><span class="line">        description: <span class="string">'test code'</span>,</span><br><span class="line">        name: <span class="string">'BRANCH'</span>,</span><br><span class="line">        quickFilterEnabled: <span class="literal">false</span>,</span><br><span class="line">        selectedValue: <span class="string">'NONE'</span>,</span><br><span class="line">        sortMode: <span class="string">'NONE'</span>,</span><br><span class="line">        tagFilter: <span class="string">'*'</span>,</span><br><span class="line">        <span class="built_in">type</span>: <span class="string">'PT_BRANCH'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里有一个问题：当这里设置了可以选择分支的时候，然后在之前的自动触发就会有问题，就是在去分支拉去代码的时候就一只是dev分支，而不是其他的分支，这里仍然在探索的测试中。<br>编辑job可以看到<br><img src="https://img.xxlaila.cn/1571903055002.jpg" alt="img"></p><h3 id="多分支pipeline"><a href="#多分支pipeline" class="headerlink" title="多分支pipeline"></a>多分支pipeline</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照上面的又要支持用户可以选择分支，又要适合自动触发功能。用单分支pipeline来管理项目，又要回到我们最初的模式，而在实际过程中，我们可以用到多分支同时进行开发。这样就满足了我们的实际需求。多分支任务这里不做过多的详细介绍，这里阐述两个功能点；分别是分支的扫描策略和孤儿项策略(Orphaned Item)。</p><h4 id="分支的扫描策略"><a href="#分支的扫描策略" class="headerlink" title="分支的扫描策略"></a>分支的扫描策略</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分支扫描是jenkins根据一定的策略去代码仓库扫描分支，如果有新分支就创建一个以新分支命名的任务，如果发现分支被删除，就删除对应的jenkins任务。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在”扫描多分支流水线触发器(Scan Multibranch Pipeline Triggers)”下有一个: Periodically if not otherwise run（没有手动触发，就定期扫描分支）。选择此项，设置一个扫描间隔时长。可以根据项目分支的频繁程度设置周期的长短，也可以在任务页面手动触发jenkins进行扫描。<br><img src="https://img.xxlaila.cn/1571973819297.jpg" alt="img"></p><h4 id="孤儿项策略-Orphaned-Item"><a href="#孤儿项策略-Orphaned-Item" class="headerlink" title="孤儿项策略(Orphaned Item)"></a>孤儿项策略(Orphaned Item)</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该功能是在代码仓库中删除了release分支，那么在多任务页面上，该分支在jenkins上的任务也应该对应删除。什么时候删除，取决于下次分支扫描时间。如果代码仓库中的分支被删除，而jenkins上响应的任务没有被删除，那么这个任务就是所说的孤儿任务。对于分支任务的历史记录，保存多长时间设置</p><ul><li><p>界面配置<br><img src="https://img.xxlaila.cn/1571974190710.jpg" alt="img"></p></li><li><p>pipeline 写法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">orphanedItemStrategy &#123;</span><br><span class="line">    discardolditems &#123;</span><br><span class="line">        daysTokeep(10)</span><br><span class="line">        numToKeep(5)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注</strong>: 这里孤儿策略pipeline 需要另外一种方式来支持，<a href="https://gitee.com/jenkins-zh/gitlab-branch-source-plugin" target="_blank" rel="noopener">Setting up GitLab Server Configuration on Jenkins</a>，这里没有用到这个，不做过多的阐述。<a href="https://github.com/jenkinsci/job-dsl-plugin/wiki/Migration" target="_blank" rel="noopener">github参考</a></p><h3 id="多分支的自动触发"><a href="#多分支的自动触发" class="headerlink" title="多分支的自动触发"></a>多分支的自动触发</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分支的触好处是多多的，自然在多分支面前自动触发肯定也少不了。多分支的触发有两种模式，分别是前面提到的Gitlab trigger和Generic Webhook Trigger。下面分别对两种模式进行阐述和实际的测试</p><h4 id="Generic-Webhook-Trigger"><a href="#Generic-Webhook-Trigger" class="headerlink" title="Generic Webhook Trigger"></a>Generic Webhook Trigger</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Generic Webhook Trigger 插件需要提前安装，GenericTrigger触发条件是由GWT插件提供，GenericTrigger触发的条件分为5个部分。<a href="https://wiki.jenkins.io/display/JENKINS/Generic+Webhook+Trigger+Plugin" target="_blank" rel="noopener">GenericTrigger官方参考</a></p><ul><li>从HTTP POST请求中提取参数</li><li>token，GWT插件用于标识jenkins项目的唯一性</li><li>根据请求参数值判断是否触发Jenkins项目执行</li><li>日志控制打印</li><li>webhook响应控制</li></ul><h4 id="GerenericTrigger-的写法"><a href="#GerenericTrigger-的写法" class="headerlink" title="GerenericTrigger 的写法"></a>GerenericTrigger 的写法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">    GenericTrigger(</span><br><span class="line">        genericVariables:[</span><br><span class="line">            [key: <span class="string">'ref'</span>, value: <span class="string">'$.ref'</span>]</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        token: env.JOB_NAME,</span><br><span class="line">        regexpFilterText: <span class="string">'$ref'</span>,</span><br><span class="line">        regexpFilterExpression: <span class="string">'refs/heads/'</span> + env.BRANCH_NAME</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;env.BRANCH_NAME 这里指的是分支名。当然这样修改以后是不行的，是达不到自动触发的，需要自行去gitlab上添加钩子，这里经过测试流程：用户修改dev分支，push到gitlab dev分支可以触发任务的dev分支自动构建；合并到test分支，也可以触发test分支自动构建；在合并到master分支也能自动触发任务的master分支自动构建。<br><img src="https://img.xxlaila.cn/1571984557618.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们要实现这块，要理解知道这个东西，首先要知道gitlab push 数据的格式，知道了gitlab push格式，我们才知道应该怎么操作，<a href="https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#webhooks" target="_blank" rel="noopener">gitlab push数据的格式参考</a>，</p><ul><li>参考<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"object_kind"</span>: <span class="string">"push"</span>,</span><br><span class="line">  <span class="string">"before"</span>: <span class="string">"95790bf891e76fee5e1747ab589903a6a1f80f22"</span>,</span><br><span class="line">  <span class="string">"after"</span>: <span class="string">"da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">  <span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br><span class="line">  <span class="string">"checkout_sha"</span>: <span class="string">"da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">  <span class="string">"user_id"</span>: 4,</span><br><span class="line">  <span class="string">"user_name"</span>: <span class="string">"John Smith"</span>,</span><br><span class="line">  <span class="string">"user_username"</span>: <span class="string">"jsmith"</span>,</span><br><span class="line">  <span class="string">"user_email"</span>: <span class="string">"john@example.com"</span>,</span><br><span class="line">  <span class="string">"user_avatar"</span>: <span class="string">"https://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=8://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=80"</span>,</span><br><span class="line">  <span class="string">"project_id"</span>: 15,</span><br><span class="line">  <span class="string">"project"</span>:&#123;</span><br><span class="line">    <span class="string">"id"</span>: 15,</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"Diaspora"</span>,</span><br><span class="line">    <span class="string">"description"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="string">"web_url"</span>:<span class="string">"http://example.com/mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"avatar_url"</span>:null,</span><br><span class="line">    <span class="string">"git_ssh_url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"git_http_url"</span>:<span class="string">"http://example.com/mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"namespace"</span>:<span class="string">"Mike"</span>,</span><br><span class="line">    <span class="string">"visibility_level"</span>:0,</span><br><span class="line">    <span class="string">"path_with_namespace"</span>:<span class="string">"mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"default_branch"</span>:<span class="string">"master"</span>,</span><br><span class="line">    <span class="string">"homepage"</span>:<span class="string">"http://example.com/mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"ssh_url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"http_url"</span>:<span class="string">"http://example.com/mike/diaspora.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"repository"</span>:&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Diaspora"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"homepage"</span>: <span class="string">"http://example.com/mike/diaspora"</span>,</span><br><span class="line">    <span class="string">"git_http_url"</span>:<span class="string">"http://example.com/mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"git_ssh_url"</span>:<span class="string">"git@example.com:mike/diaspora.git"</span>,</span><br><span class="line">    <span class="string">"visibility_level"</span>:0</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"commits"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"b6568db1bc1dcd7f8b4d5a946b0b91f9dacd7327"</span>,</span><br><span class="line">      <span class="string">"message"</span>: <span class="string">"Update Catalan translation to e38cb41."</span>,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2011-12-12T14:27:31+02:00"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"http://example.com/mike/diaspora/commit/b6568db1bc1dcd7f8b4d5a946b0b91f9dacd7327"</span>,</span><br><span class="line">      <span class="string">"author"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Jordi Mallach"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"jordi@softcatala.org"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"added"</span>: [<span class="string">"CHANGELOG"</span>],</span><br><span class="line">      <span class="string">"modified"</span>: [<span class="string">"app/controller/application.rb"</span>],</span><br><span class="line">      <span class="string">"removed"</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">      <span class="string">"message"</span>: <span class="string">"fixed readme"</span>,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2012-01-03T23:36:29+02:00"</span>,</span><br><span class="line">      <span class="string">"url"</span>: <span class="string">"http://example.com/mike/diaspora/commit/da1560886d4f094c3e6c9ef40349f7d38b5d27d7"</span>,</span><br><span class="line">      <span class="string">"author"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"GitLab dev user"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"gitlabdev@dv6700.(none)"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"added"</span>: [<span class="string">"CHANGELOG"</span>],</span><br><span class="line">      <span class="string">"modified"</span>: [<span class="string">"app/controller/application.rb"</span>],</span><br><span class="line">      <span class="string">"removed"</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"total_commits_count"</span>: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果我们想根据不同的分支提交来触发jenkins的构建，那就应该知道post数据哪一个属性代表了不同的分支，我们可以在第四行看到</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"ref"</span>: <span class="string">"refs/heads/master"</span>,</span><br></pre></td></tr></table></figure><p><strong>注释</strong>: 也可以通过IDEA工具提交的时候看到提交的选项。可以看到我们用ref可以很好的区分不同分支，这里就是为什么要填写ref的原因。我们可以通过pipeline代码的生成器来生成</p><ul><li>pipeline 代码生成器<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">  GenericTrigger causeString: <span class="string">'Generic Cause'</span>, genericVariables: [[defaultValue: <span class="string">''</span>, key: <span class="string">'ref'</span>, regexpFilter: <span class="string">''</span>, value: <span class="string">'$.ref'</span>]], printContributedVariables: <span class="literal">true</span>, printPostContent: <span class="literal">true</span>, regexpFilterExpression: <span class="string">'\'</span>refs/heads/\<span class="string">' + evn.BRANCH_NAME'</span>, regexpFilterText: <span class="string">'$ref'</span>, token: <span class="string">'env.JOB_NAME'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img.xxlaila.cn/1571982583457.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571982622070.jpg" alt="img"></p><p><strong>注</strong>: token参数的作用是标识一个pipeline在jenkins中的唯一性，这个参数的重要性就得提起GWT插件的原理。当jenkins收到generic-webhook-trgger/invoke接口的请求时，会将请求代理给GWT插件处理，GWT插件内容会从jenkins实例对象中取出所有的参数化jenkins项目，包括pipeline，然后进行遍历。如果我们在参数化项目中Generic Trigger配置token的值与webhook请求时的token一致，就会触发改项目。如果多个参数化项目的token一样，则都会进行触发，所以这里的token最好时JOB_NAME项目名，因为这个是在项目或者是在为服务领域他都是唯一的。</p><ul><li>参数介绍:<ul><li>regexpFilterText: 需要进行匹配的key，例子中，使用从post body中提取的ref变量值。</li><li>regexpFilterExpression: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" target="_blank" rel="noopener">正则表达式</a>；如果regexpFilterText参数符合regexpFilterExpression参数的正则表达式，则触发执行。</li><li>printPostContent: 布尔值，将webhook请求信息打印到日志上</li><li>printContributedVariables: 布尔值，将提取后的变量名及变量值打印出来</li><li>causeString: 字符串型，触发原因，可以直接应用提取后的变量，如 causeString: ‘Triggered on $msg’</li><li>Silent response: 布尔型，在正常情况下，当webhook请求成功后，GWT插件会返回HTTP 200状态码和触发结果给对方调用，但是当Silentresponse设置为true时，就只返回HTTP 200状态码，不反悔触发结果</li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的看的出来，我们只要是提交了分支都可以进行触发构建，但是呢，在实际生产中，我们定义了dev——&gt;test——master 分支，就是只想要这几个进行触发构建，其他的不进行触发，让开发自己去点击。</p><ul><li><p>指定分支构建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">triggers &#123;</span><br><span class="line">  GenericTrigger causeString: <span class="string">'Triggered on $msg'</span>, genericVariables: [[defaultValue: <span class="string">''</span>, key: <span class="string">'ref'</span>, regexpFilter: <span class="string">''</span>, value: <span class="string">'$.ref'</span>]], printContributedVariables: <span class="literal">true</span>, printPostContent: <span class="literal">true</span>, regexpFilterExpression: <span class="string">'\'</span>refs/heads/(dev|<span class="built_in">test</span>|master)\<span class="string">''</span>, regexpFilterText: <span class="string">'$ref'</span>, token: <span class="string">'env.JOB_NAME'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多分支Gitlab trigger<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多分支的Gitlab trigger和我们前面介绍的gitlab事件触发一样的，没有任何区别，这里我测试了一个job，没有任何问题。同时新建了一个分支，jenkins会自动的扫描新建一个以分支为名的任务，进行自动触发。当我删除了某一个分支，就会触发自动扫描，然后查看分支为删除。</p></li><li><p>删除分支<br><img src="https://img.xxlaila.cn/1571996378764.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571996257688.jpg" alt="img"></p></li><li><p>整体效果图<br><img src="https://img.xxlaila.cn/1571990331005.jpg" alt="img"></p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里介绍一下部署这块，根据branch来进行判断，不同的branch部署到不同的环境，当设定的值不在branch范围内，就需要人为的制定部署环境。当人员三分钟内没有来进行环境部署的选择，系统就会断开，对该分支标记为结束。</p><p><a href="http://xxlaila.github.io/2019/10/25/pipeline%E5%A4%9A%E5%88%86%E6%94%AFgitlab%E8%A7%A6%E5%8F%91/" target="_blank" rel="noopener">完整文件</a><br><a href="https://jenkinsci.github.io/job-dsl-plugin/#path/buildPipelineView" target="_blank" rel="noopener">推荐学习参考地址</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>pipeline</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticserch</title>
    <url>/2019/10/17/elasticserch%E6%97%A5%E5%B8%B8%E7%BB%B4%E6%8A%A4/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="days-1"><a href="#days-1" class="headerlink" title="days 1"></a>days 1</h3><a id="more"></a><h4 id="elasticserch-索引和数据操作"><a href="#elasticserch-索引和数据操作" class="headerlink" title="elasticserch 索引和数据操作"></a>elasticserch 索引和数据操作</h4><ul><li><p>查看索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -XGET 'http://127.0.0.1:9200/_cat/indices?v'</span></span><br></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -XGET 'http://127.0.0.1:9200/_cat/indices?v' |grep "red"|awk '&#123;print $3&#125;'|uniq &gt;l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in `cat a`;do  curl -XDELETE http://127.0.0.1:9200/$&#123;i&#125;;done</span></span><br></pre></td></tr></table></figure></li><li><p>查看shards</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -XGET http://127.0.0.1:9200/_cat/shards</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shards 有几种类型，这里说一下<code>UNASSIGNED</code>，es 集群里面的分片是分配在多台node上的，为的就是高可用，比如你的某台机器crash了，那么集群就会让其他副本顶上来，避免出现某个分片不能提供服务的情况，但是难免还是会出现 UNASSIGNED shards 的错误。</p><ul><li>删除shards UNASSIGNED<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -XGET 'http://127.0.0.1:9200/_cat/shards'|grep "UNASSIGNED"|awk '&#123;print $1&#125;'|uniq &gt;l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in `cat l`;do curl -XDELETE http://127.0.0.1:9200/$i;done</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="elasticserch验证集群"><a href="#elasticserch验证集群" class="headerlink" title="elasticserch验证集群"></a>elasticserch验证集群</h4><ul><li><p>集群相关API</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat</span><br><span class="line">=^.^=</span><br><span class="line">/_cat/allocation</span><br><span class="line">/_cat/shards</span><br><span class="line">/_cat/shards/&#123;index&#125;</span><br><span class="line">/_cat/master</span><br><span class="line">/_cat/nodes</span><br><span class="line">/_cat/tasks</span><br><span class="line">/_cat/indices</span><br><span class="line">/_cat/indices/&#123;index&#125;</span><br><span class="line">/_cat/segments</span><br><span class="line">/_cat/segments/&#123;index&#125;</span><br><span class="line">/_cat/count</span><br><span class="line">/_cat/count/&#123;index&#125;</span><br><span class="line">/_cat/recovery</span><br><span class="line">/_cat/recovery/&#123;index&#125;</span><br><span class="line">/_cat/health</span><br><span class="line">/_cat/pending_tasks</span><br><span class="line">/_cat/aliases</span><br><span class="line">/_cat/aliases/&#123;<span class="built_in">alias</span>&#125;</span><br><span class="line">/_cat/thread_pool</span><br><span class="line">/_cat/thread_pool/&#123;thread_pools&#125;</span><br><span class="line">/_cat/plugins</span><br><span class="line">/_cat/fielddata</span><br><span class="line">/_cat/fielddata/&#123;fields&#125;</span><br><span class="line">/_cat/nodeattrs</span><br><span class="line">/_cat/repositories</span><br><span class="line">/_cat/snapshots/&#123;repository&#125;</span><br><span class="line">/_cat/templates</span><br></pre></td></tr></table></figure></li><li><p>查看集群名称等信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"elk_elasticsearch_data_2"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elk_elasticsearch"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"T47wQwa6TT-6MHJVFM40Tw"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"6.4.0"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"rpm"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"595516e"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2018-08-17T23:18:47.308994Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"7.4.0"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"5.6.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"5.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看集群节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/nodes?v</span><br><span class="line">ip            heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">172.21.16.198           29          85   0    0.10    0.04     0.05 mdi       -      elk_elasticsearch_data_2</span><br><span class="line">172.21.16.187           48          85   0    0.00    0.01     0.05 mdi       *      elk_elasticsearch_master</span><br><span class="line">172.21.16.206           25          86   0    0.08    0.03     0.05 mdi       -      elk_elasticsearch_data_3</span><br></pre></td></tr></table></figure></li><li><p>验证集群磁盘分配情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/allocation?v</span><br><span class="line">shards disk.indices disk.used disk.avail disk.total disk.percent host          ip            node</span><br><span class="line">    98          1gb     3.6gb     96.3gb     99.9gb            3 172.21.16.198 172.21.16.198 elk_elasticsearch_data_2</span><br><span class="line">    99      887.1mb     4.5gb     95.4gb     99.9gb            4 172.21.16.187 172.21.16.187 elk_elasticsearch_master</span><br><span class="line">    99        957mb     3.5gb     96.4gb     99.9gb            3 172.21.16.206 172.21.16.206 elk_elasticsearch_data_3</span><br></pre></td></tr></table></figure></li><li><p>验证集群健康状况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/health?v </span><br><span class="line">epoch      timestamp cluster           status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span><br><span class="line">1571648406 17:00:06  elk_elasticsearch green           3         3    296 148    0    0        0             0                  -                100.0%</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure></li><li><p>查看每个数据节点上被fielddata所使用的堆内存大小。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:9200/_cat/fielddata?v</span><br><span class="line">id                     host          ip            node                     field                    size</span><br><span class="line">VNcRqM30T3axzVjiPkDTmA 172.21.16.187 172.21.16.187 elk_elasticsearch_master event.resultCode.keyword 352b</span><br><span class="line">VNcRqM30T3axzVjiPkDTmA 172.21.16.187 172.21.16.187 elk_elasticsearch_master <span class="built_in">type</span>                     720b</span><br><span class="line">HNc5BrMWQcummBeAskQc4A 172.21.16.206 172.21.16.206 elk_elasticsearch_data_3 event.resultCode.keyword 704b</span><br><span class="line">z3zUA8KxTH6B7C8CmVRUIQ 172.21.16.198 172.21.16.198 elk_elasticsearch_data_2 <span class="built_in">type</span>                     720b</span><br><span class="line">z3zUA8KxTH6B7C8CmVRUIQ 172.21.16.198 172.21.16.198 elk_elasticsearch_data_2 event.resultCode.keyword 704b</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>elasticserch</category>
      </categories>
      <tags>
        <tag>elasticserch</tag>
      </tags>
  </entry>
  <entry>
    <title>nexus配置ldap</title>
    <url>/2019/10/15/nexus%E9%85%8D%E7%BD%AEldap/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="配置nexus"><a href="#配置nexus" class="headerlink" title="配置nexus"></a>配置nexus</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录nexus在设置页，点击ldap，</p><a id="more"></a><p><img src="https://img.xxlaila.cn/1571131890608.jpg" alt="img"><br>参数介绍:</p><ul><li>Name: 随便写</li><li>LDAP server address: 支持ldaps和ldap,而端口则取决于配置。 如果没有特殊配置，ldap默认端口是389</li><li>Search base: 只需要填DC即可，比如DC=example,DC=com。 其它内容，比如CN、OU等，不需要填写</li><li>Authentication method有以下选项:<ul><li>Simple Authentication</li><li>Anonymous Authentication</li><li>DIGEST-MD5</li><li>CRAM-MD5<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通常选择Simple Authentication即可。Username or DN、Password里填写账户、密码，而 Connection rules无需修改。填写完毕后，点击【Verify connection】按钮，可以验证信息。 如果成功，即可保存。</li></ul></li></ul><h4 id="Choose-Users-and-Groups"><a href="#Choose-Users-and-Groups" class="headerlink" title="Choose Users and Groups"></a>Choose Users and Groups</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这项故名思义就是配置用户和组的，在最开头的Configuration template中，有四种模板可选：</p><ul><li>Active Directory</li><li>Generic Ldap Server</li><li>Posix with Dynamic Groups</li><li>Posix with Static Groups</li></ul><p>这里选择<code>Generic Ldap Server</code></p><ul><li>Base DN 在LDAP中找到用户的基本位置。这是相对于搜索基础的（例如ou = people）。</li><li>User subtree通常需要勾选。 如果把LDAP的Tree比作目录的话，勾选以后相当于递归查找子目录。</li><li>User filter通过过滤规则，减少搜索信息，用于提升性能。 仅仅只是提升性能，所以，如果不懂它特殊的匹配规则，也可以不填。</li><li>之前选择了<code>Generic Ldap Server</code>模版后，User ID attribute默认为uid，Real name attribute默认为cn、Email attribute默认为mail、Password attribute为空。</li><li>Map LDAP groups as roles如果不勾选，就不会同步用户组信息。 如果勾选，则可以选择Group type和Group member of attribute。 若无必要，保持默认即可，默认是勾选的。<br><img src="https://img.xxlaila.cn/1571133103461.jpg" alt="img"></li><li>填写完成后，通过【Verify user mapping】可以验证查询结果<br><img src="https://img.xxlaila.cn/1571133221971.jpg" alt="img"><br>点击创建<br><img src="https://img.xxlaila.cn/1571133286829.jpg" alt="img"></li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新起一个窗口利用ldap里面的账号进行登录，可以登录，没有问题，但是登录之后用户没有任何权限，这对于研发来说又是一个不可接受的事情。接下来配置权限</p><h5 id="禁止匿名访问"><a href="#禁止匿名访问" class="headerlink" title="禁止匿名访问"></a>禁止匿名访问</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实际应用中，是不允许匿名用户不可以登录就能访问的，这样我们ldap就没有任何意义了<br><img src="https://img.xxlaila.cn/1571133691247.jpg" alt="img"></p><ul><li>禁止匿名用户<br><img src="https://img.xxlaila.cn/1571133811908.jpg" alt="img"></li></ul><h5 id="创建角色"><a href="#创建角色" class="headerlink" title="创建角色"></a>创建角色</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在Security——&gt;Roles——&gt;Create role，这里创建角色有两种。一种是nexus relos本地角色，一种是External roles mapping外部映射的形式。为了满足我们ldap账户登录进来有浏览库的权限，研发又可以上传第三方依赖库的权限，但是不能删除和私下增加库Repositories。所以这里我们需要单独建立一个本地的relos，然后在映射外部的ldap到这个本地的roles，这样ldap账户登录进来就能实现日常的基本操作。</p><ul><li><p>创建nexus relos本地角色<br><img src="https://img.xxlaila.cn/1571296771150.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建完成后，我们需要对他赋予权限，对用户进行权限控制，没有权限控制，就没办法达成我们上面的目标。下面是我赋予的权限，可以结合实际需求来进行赋予。</p></li><li><p>权限介绍:</p><ul><li>ng-component-upload: 有上传的权限，比如java依赖的一些第三方库，研发可以自己进行上传</li><li>ng-repository-admin-<em>-</em>-browse: 浏览所有的repository</li><li>ng-repository-admin-<em>-</em>-read: 可以所有读取repository的配置信息</li><li>ng-repository-view-maven2-maven-central-browse: 具有浏览maven-central内容</li><li>ng-repository-view-maven2-maven-central-read: 读取maven-central内容，在maven编译的时候具有下载的权限，(后面不一一介绍)</li><li>ng-repository-view-maven2-maven-public-browse</li><li>ng-repository-view-maven2-maven-public-read</li><li>ng-repository-view-maven2-maven-releases-browse</li><li>ng-repository-view-maven2-maven-releases-read</li><li>ng-repository-view-maven2-maven-snapshots-browse</li><li>ng-repository-view-maven2-maven-snapshots-read</li><li>ng-repository-view-npm-npm-kxl-all-browse: 以下是自己做的npm代理缓存，可以参考之前的<a href="https://xxlaila.github.io/2019/08/23/nexus3搭建npm私服/" target="_blank" rel="noopener">nexus3搭建npm私服</a></li><li>ng-repository-view-npm-npm-kxl-all-read</li><li>ng-repository-view-npm-npm-external-browse</li><li>ng-repository-view-npm-npm-external-read</li><li>ng-repository-view-npm-npm-internal-browse</li><li>ng-repository-view-npm-npm-internal-read</li><li>ng-search-read: 让用户具有所有权限，没有此权限，研发查找一个包，估计会死</li></ul></li><li><p>创建是External roles mapping外部映射<br><img src="https://img.xxlaila.cn/1571134166780.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571297568491.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在进行Roles ID 这栏目，需要填写的是Users，这个Users会在ldap上同步Users的一个用户组。根据自己的ldap账户组设置来进行填写。下图是ldap的组设置<br><img src="https://img.xxlaila.cn/1571298567078.jpg" alt="img"></p></li></ul><p><strong>注</strong>: 其实在这里我们也可以进行Privileges的权限赋予，但是我选择的是先创建一个本地的nexus relos。然后我们在Roles栏关联之前创建的<code>Developer</code>，完成以后通过ldap账户登录进行测试</p><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里主要是从四个方面来测试ldap账户。分别是: 登录默认的权限、浏览所有库的权限、Browse的浏览、Browse库的上传</p><ul><li><p>登录默认的权限<br><img src="https://img.xxlaila.cn/1571297962563.jpg" alt="img"></p></li><li><p>浏览所有库的权限<br><img src="https://img.xxlaila.cn/1571298121188.jpg" alt="img"></p></li><li><p>Browse的浏<br><img src="https://img.xxlaila.cn/1571298018356.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571298167348.jpg" alt="img"></p></li><li><p>Browse库的上传<br><img src="https://img.xxlaila.cn/1571298224331.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571298260091.jpg" alt="img"></p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>nexus</category>
      </categories>
      <tags>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins配置备份</title>
    <url>/2019/10/15/jenkins%E9%85%8D%E7%BD%AE%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="jenkins-备份"><a href="#jenkins-备份" class="headerlink" title="jenkins 备份"></a>jenkins 备份</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当jenkins在用起来的时候，我们难保他不会出故障，但是出了故障我们怎么做到快速的恢复呢，这时备份就显得尤为重要了。但jenkins本身不提供备份的功能，<a id="more"></a> 所以这里就需要借助外力。备份可以多样化，一种是我们直接到jenkins的目录下面手动备份jenkins目录。一种是我们就jenkins自带的插件<code>thinBackup</code>和<code>Periodic Backup</code>进行备份恢复，下面进行分别介绍</p><h3 id="thinBackup备份"><a href="#thinBackup备份" class="headerlink" title="thinBackup备份"></a>thinBackup备份</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录jenkins——&gt;系统管理——&gt;插件管理<br><img src="https://img.xxlaila.cn/1571101180571.jpg" alt="img"><br>安装完成之后重启jenkins服务，登录jenkins在系统管理界面可以看到<br><img src="https://img.xxlaila.cn/1571101557754.jpg" alt="img"></p><h4 id="配置ThinBackup"><a href="#配置ThinBackup" class="headerlink" title="配置ThinBackup"></a>配置ThinBackup</h4><ul><li>点击ThinBackup<br><img src="https://img.xxlaila.cn/1571101640273.jpg" alt="img"><br>可以看到有三个选项:</li><li>Backup Now: 手动立即备份</li><li>Restore: 恢复备份</li><li>Settings: 备份参数的设置</li></ul><h5 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面是我的备份参数，可以根据自己的需要自己设定备份参数，设置好友save即可，<code>Backup schedule for full backups</code>意思是周一到周五每天凌晨两点进行备份<br><img src="https://img.xxlaila.cn/1571102057919.jpg" alt="img"></p><h5 id="Restore"><a href="#Restore" class="headerlink" title="Restore"></a>Restore</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;备份文件是以日期+时间节点组成的文件名，我们恢复什么时间段的，点击进行恢复，<br><img src="https://img.xxlaila.cn/1571102188007.jpg" alt="img"></p><h3 id="Periodic-Backup"><a href="#Periodic-Backup" class="headerlink" title="Periodic Backup"></a>Periodic Backup</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;备份除了上面提到的插件还有一个插件是<code>Periodic Backup</code>，安装<code>Periodic Backup</code>不阐述，安装完成后可以在系统管理菜单下面有一个<code>Periodic Backup Manager</code>菜单<br><img src="https://img.xxlaila.cn/1571709136813.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开<code>Periodic Backup Manager</code>，第一次打开是没有任何东西的，需要我们自己去建立一个规则，点击<code>Configure</code><br><img src="https://img.xxlaila.cn/1571709270639.jpg" alt="img"></p><p>配置项很简单:</p><ul><li>Temporary Directory: 临时目录</li><li>Backup schedule (cron): 进行备份cron的表达式，填写完成后点击<code>Validate cron syntax</code>进行验证</li><li>Maximum backups in location: 最大位置备份，保留多少个备份文件</li><li>Store no older than (days): 保留的时间</li><li>File Management Strategy: 备份策略<ul><li>ConfigOnly: 只备份配置文件</li><li>FullBackup: 进行全量备份，可以通过Excludes list中填入Ant风格表达式，排除不希望备份的文件，多个表达式使用分号分隔</li></ul></li><li>Storage Strategy: 存储策略，就是是否需要进行压缩存储</li><li>Backup Location: 备份的位置，都是本地目录<br><img src="https://img.xxlaila.cn/1571709879768.jpg" alt="img"></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins配置ldap</title>
    <url>/2019/10/14/jenkins%E9%85%8D%E7%BD%AEldap/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;公司研发人员和测试人员，还有运维人员有时候登录jenkins去查看一些job的状态或者是其他的东西，虽然有企业微信的通知，但是感觉还是不能满足，<a id="more"></a> 比如job错误了，企业微信虽然吧错误发给了研发人员，但是研发还是要登录jenkins上去看，就感觉要舒服一点，测试上做的一些自动化测试，有时候失败了他们也会去看或者是去建立一些自动化的job。之前建立了公共的账号，开发和测试人员都去登录，但是有时候他们误操作了，导致一些其他的东西失败或者错误，虽然做了权限控制，但是他们还是死不承认，所以这里介入ldap。谁动的就知道了，这样就不怕了。</p><h3 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录jenkins——&gt;系统管理——&gt;全局安全配置<br><img src="https://img.xxlaila.cn/1571025388007.jpg" alt="img"><br>访问控制——&gt;LDAP<br><img src="https://img.xxlaila.cn/1571027524602.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置完成以后我们需要测试一下连接是否正常，点击<code>Test LDAP setttings</code>，输入在ldap的其中一个账户来进行验证，没问题的结果如下:<br><img src="https://img.xxlaila.cn/1571027696951.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置完成并测试通过后就可以用LDAP直接登录了<br><strong>注</strong>: 启用了LDAP登录后将无法再用之前的登录方式（本地认证将无法在使用）登录，登录进来的任何一个账号都是管理员，都是管理着肯定来说不安全，权限配置请下看</p><p><a href="https://wiki.jenkins.io/display/JENKINS/LDAP+Plugin" target="_blank" rel="noopener">官方参考</a></p><h3 id="配置ldap的账户权限"><a href="#配置ldap的账户权限" class="headerlink" title="配置ldap的账户权限"></a>配置ldap的账户权限</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面我们虽然吧ldap配置完成，但是我们需要对用户进行权限的配置，不可能每个人登录都能对我们jenkins进行无限制的操作，这不符合我们之前的意图。安装<code>Role-based Authorization Strategy</code>插件</p><ul><li>在系统管理——&gt;全局安全配置,可以看到下面选项，每项介<a href="https://xxlaila.github.io/2019/08/09/jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">参考</a><br><img src="https://img.xxlaila.cn/1571034253089.jpg" alt="img"></li></ul><p>保存以后，返回系统管理界面就可以看到多处一个<code>Manage and Assign Roles</code><br><img src="https://img.xxlaila.cn/1571034433352.jpg" alt="img"><br>点击进去</p><p><img src="https://img.xxlaila.cn/1571034507945.jpg" alt="img"></p><ul><li><strong>Manage Roles</strong>: 角色分为Global和Project，可创建角色分组和添加项目。</li><li><strong>Assign Roles</strong>: 增加具体的用户，分配到角色组，指定项目权限。</li></ul><p><a href="https://xxlaila.github.io/2019/08/09/jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">权限设置</a></p><ul><li>下面我的配置，和之前的大同小异<br><img src="https://img.xxlaila.cn/1571038684383.jpg" alt="img"></li></ul><p><strong>注</strong>: 这里有一个小问题，这样配置以后，新用户登录进来以后就会提示没有权限，<code>Access Denied,xxxx没有全部/Read权限</code>，这是因为在打开jenkins后，没有创建用户前，先不要勾选系统设置中启用安全选项，如果勾选了，就会出现无法进入jenkins的现象<br><img src="https://img.xxlaila.cn/1571037187865.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在网上看到有这种的解决办法，有几种方案，一个是修改confing.xml的文件，修改config.xml文件的三种方式感觉都不太切合实际的业务；下面是我做的两种办法，推荐使用第二种</p><ul><li><p>Role-Based Strategy<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在<code>Assign Roles</code>吧用户添加进来，然后勾选权限，<br>系统管理——&gt;Manage and Assign Roles——&gt;Assign Roles<br><img src="https://img.xxlaila.cn/1571037604678.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是这有一个弊端，就是每次新来一个用户就得去添加一次用户权限，虽然满足了业务需求，但是不科学</p></li><li><p>项目矩阵授权策略<br><img src="https://img.xxlaila.cn/1571041499340.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是一个全局的配置，特定组只能按照最小的权限授权，额外的权限可以在具体的项目权限矩阵里面在添加。 默认只有<code>Anonymous Users</code>和<code>Authenticated Users</code>，管理员组是需要添加的<code>admin</code></p></li><li><p>Anonymous Users: 匿名用户，显然不能</p></li><li><p>Authenticated Users: 认证用户，就是只要是认证的账号都可以拥有的权限</p></li><li><p>admin: 就是拥有所有的权限了，这个组一般只能运维人员和部门老大加入。</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加入admin组以后，他会自动去同步ldap的组用户，如果用户在ldap是admin组，那么在这里就会是管理员权限，如果用户是普通组，那么就是<code>Authenticated Users</code>组赋予的权限，使用这种方式只要用户是ldap里面的，就可以登录查看。这样就满足了业务场景需求</p><h3 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;记录用户日志需要单独的安装<code>Audit Trail</code>插件，该插件在Jenkins主配置页面中添加了一个配置部分，可以在此处配置日志位置和设置（文件大小和循环日志文件的数量），以及用于记录请求的URI模式。默认选项选择效果显着的大多数操作，例如创建/配置/删除作业和视图或永久删除/保存/开始构建。日志将按照配置写入磁盘，最近的条目也可以在“管理/系统日志”部分中查看。<br><img src="https://img.xxlaila.cn/1572057054289.jpg" alt="img"><br><a href="https://plugins.jenkins.io/audit-trail" target="_blank" rel="noopener">Audit Trail官方参考</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里配置以后还不能记录job的日志，需要对job进行记录需要另外的安装<a href="https://wiki.jenkins.io/display/JENKINS/JobConfigHistory+Plugin" target="_blank" rel="noopener">Job Configuration History插件</a>，根据官方的介绍，可用于查看所有作业配置历史记录或仅查看已删除的作业或所有类型的配置历史记录条目。同时，如果配置了安全策略，还可以查看哪个用户进行了哪些更改。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装完成后，我们在job里面可以看到一个<code>Job Config History</code>的菜单。最开始没有没有任何记录，只有当构建job或者修改过job以后才会有记录<br><img src="https://img.xxlaila.cn/1572057782047.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1572057958019.jpg" alt="img"></p><ul><li>点击Show Diffs 可以看到我们具体修改了什么东西<br><img src="https://img.xxlaila.cn/1572058118436.jpg" alt="img"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我们安装好这个插件以后，也测试可以使用，但是我们不能让所有的job日志记录保存历史过久，如果job过多，记录过多，这会对我们的磁盘空间来说，肯定是一个压力，所以这里我们就需要进行配置，保存多少次的记录，而且还可以设置排除的文件。<br><img src="https://img.xxlaila.cn/1572058857084.jpg" alt="img"></p><p><a href="https://wiki.jenkins.io/display/JENKINS/JobConfigHistory+Plugin" target="_blank" rel="noopener">Job Configuration History官方</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>java应用部署</title>
    <url>/2019/10/12/java%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="Welcome to my blog, enter password to read." />
    <label for="hbePass">Welcome to my blog, enter password to read.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="01edf80c3b55029e847e4cfdf88dc355657ca438d06d3b86af72e9b01af19764"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>harbor 使用</title>
    <url>/2019/10/10/harbor-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h4 id="days-2019-10-10"><a href="#days-2019-10-10" class="headerlink" title="days(2019-10-10)"></a>days(2019-10-10)</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面文章介绍了harbor的部署，今天第一次学习入门使用。</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务器安装docker以后，我们怎么吧镜像push到我们的私有仓库，和怎么吧镜像pull到本地，首先在服务器上装备docker环境</p><h5 id="连接harbor"><a href="#连接harbor" class="headerlink" title="连接harbor"></a>连接harbor</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker login reg.xxlaila.cn</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">Error response from daemon: Get https://172.21.16.90/v1/users/: dial tcp reg.xxlaila.cn:443: connect: connection refused</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里第一次连接报错，Docker自从1.3.X之后docker registry交互默认使用的是HTTPS，但是我们搭建私有镜像默认使用的是HTTP服务，所以与私有镜像交时出现以上错误。</p><h5 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h5><ul><li><p>方法一: 修改或添加配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/docker/daemon.json </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"insecure-registries"</span> : [<span class="string">"reg.xxlaila.cn"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新启动docker，并重新登录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl restart docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  docker login reg.xxlaila.cn</span></span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure></li><li><p>方法二：修改启动文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /usr/lib/systemd/system/docker.service  </span></span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry reg.xxlaila.cn <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="Harbor上创建新项目供上传使用"><a href="#Harbor上创建新项目供上传使用" class="headerlink" title="Harbor上创建新项目供上传使用"></a>Harbor上创建新项目供上传使用</h5><p><img src="https://img.xxlaila.cn/1570697850857.jpg" alt="img"></p><h5 id="Docker服务器给镜像打标签"><a href="#Docker服务器给镜像打标签" class="headerlink" title="Docker服务器给镜像打标签"></a>Docker服务器给镜像打标签</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/xxlaila/kxl-eureka   v2                  eb8cf7e3f24f        7 months ago        474 MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker tag docker.io/xxlaila/kxl-eureka:v2 reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/xxlaila/kxl-eureka    v2                  eb8cf7e3f24f        7 months ago        474 MB</span><br><span class="line">reg.xxlaila.cn/kxl/kxl-eureka   v2                  eb8cf7e3f24f        7 months ago        474 MB</span><br></pre></td></tr></table></figure><h5 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker push reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line">The push refers to a repository [reg.xxlaila.cn/kxl/kxl-eureka]</span><br><span class="line">f6026bf67b63: Pushed </span><br><span class="line">1489a4b0f1dd: Pushed </span><br><span class="line">2af6e035aa36: Pushed </span><br><span class="line">472cfce4528e: Pushed </span><br><span class="line">071d8bd76517: Pushed </span><br><span class="line">v2: digest: sha256:20d3bc74fdcb2fc4cdfc9066f742c828898c728f7e3f2114498ebe2848b71653 size: 1368</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/1570698233987.jpg" alt="img"></p><h5 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h5><ul><li><p>删除本地镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker rmi reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker rmi docker.io/xxlaila/kxl-eureka:v2</span></span><br></pre></td></tr></table></figure></li><li><p>下载harbor上的镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull reg.xxlaila.cn/kxl/kxl-eureka:v2</span></span><br><span class="line">Trying to pull repository reg.xxlaila.cn/kxl/kxl-eureka ... </span><br><span class="line">v2: Pulling from reg.xxlaila.cn/kxl/kxl-eureka</span><br><span class="line">a02a4930cb5d: Pull complete </span><br><span class="line">6ea3dcbee0db: Extracting [==================================================&gt;]  81.4 MB/81.4 MB</span><br><span class="line">6ea3dcbee0db: Pull complete </span><br><span class="line">c423a7a79cc1: Pull complete </span><br><span class="line">7418081934c1: Pull complete </span><br><span class="line">f89b73853622: Pull complete </span><br><span class="line">Digest: sha256:20d3bc74fdcb2fc4cdfc9066f742c828898c728f7e3f2114498ebe2848b71653</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> reg.xxlaila.cn/kxl/kxl-eureka:v2</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img.xxlaila.cn/1570698681073.jpg" alt="img"></p><h4 id="days-2019-10-12"><a href="#days-2019-10-12" class="headerlink" title="days(2019-10-12)"></a>days(2019-10-12)</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于公司需求，开发人员比较多，又不想研发用一个账号，也不想给研发一个个的开账号，位置harbor支持了ldap。有了这么一个东西，我们就能很好的为研发创建账号支持研发随时查看docker的镜像。</p><h4 id="配置harbor-ldap"><a href="#配置harbor-ldap" class="headerlink" title="配置harbor ldap"></a>配置harbor ldap</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新版本的harbor很多东西都可以直接在界面配置，不需要去修改文件，省去了大量的工作，web界面配置更加方便快捷，登录harbor平台，点击配置管理——&gt;修改认证模式，认证模式支持很多类型，这里选择ldap。<br><img src="https://img.xxlaila.cn/1571019665079.jpg" alt="img"><br><strong>注</strong>: 在密码这栏填写需要填写管理员的密码，普通用户的密码是不行的，即使是在管理员的用户也是不行的。<br>点击测试ldap，提示连接成功后保存<br><img src="https://img.xxlaila.cn/1571019741060.jpg" alt="img"></p><h4 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在配置ldap页面旁边有一个邮箱配置，邮件服务器用于向请求重设密码的用户发送响应。<br><img src="https://img.xxlaila.cn/1570873497729.jpg" alt="img"><br>点击测试，测试没问题之后点击保存。</p><h4 id="测试ladp连接"><a href="#测试ladp连接" class="headerlink" title="测试ladp连接"></a>测试ladp连接</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新打开一个一个浏览器窗口，利用ladp账户进行登录。<br><img src="https://img.xxlaila.cn/1571019859287.jpg" alt="img"><br><strong>注释</strong>: 新版本的在登录界面没有什么选择ldap登录，直接使用ldap账号登录就ok</p><h4 id="将项目角色分配给LDAP-AD组"><a href="#将项目角色分配给LDAP-AD组" class="headerlink" title="将项目角色分配给LDAP / AD组"></a>将项目角色分配给LDAP / AD组</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改之前的ldap配置，增加组的配置<br><img src="https://img.xxlaila.cn/1571023069387.jpg" alt="img"><br>在项目-&gt;成员-&gt; +组中。<br><img src="https://img.xxlaila.cn/1571023177214.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1571023223796.jpg" alt="img"></p><h4 id="设置ldap账户的权限"><a href="#设置ldap账户的权限" class="headerlink" title="设置ldap账户的权限"></a>设置ldap账户的权限</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当ldap配置以后，ldap账户登录没有管理员权限，我们管理harbor还的使用<code>harbor</code>的admin账户登录，这样无疑对运维人员维护带来了不便利。当ldap用户登录，harbor就会记录该用户，我们设置运维用户为超级管理员，这样就实现了一个账号登录，维护的时候也不用账号切换<br><img src="https://img.xxlaila.cn/1571023451423.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>HPA认识</title>
    <url>/2019/10/09/hpa/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="Pod-自动扩缩容"><a href="#Pod-自动扩缩容" class="headerlink" title="Pod 自动扩缩容"></a>Pod 自动扩缩容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes提供了这样一个资源对象: <code>Horizontal Pod Autoscaling</code> Pod水平自动伸缩），简称HPA。HAP通过监控分析RC或者Deployment控制的所有Pod的负载变化情况来确定是否需要调整Pod的副本数量，这是HPA最基本的原理。</p><a id="more"></a><p><img src="https://img.xxlaila.cn/1570605234009.jpg" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HPA在kubernetes集群中被设计成一个Kubernetes API资源和控制器，可以通过kubectl autoscale命令来创建一个HPA资源对象，HPA Controller默认15s轮询一次（可通过kube-controller-manager的标志–horizontal-pod-autoscaler-sync-period进行设置），查询指定的资源（RC或者Deployment）中Pod的资源使用率，并且与创建时设定的值和指标做对比，从而实现自动伸缩的功能。<br><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="noopener">详细介绍</a></p><h3 id="Pod水平自动伸缩练习"><a href="#Pod水平自动伸缩练习" class="headerlink" title="Pod水平自动伸缩练习"></a>Pod水平自动伸缩练习</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于Horizontal Pod Autoscaler使用此API收集指标，因此需要在群集中部署metrics-server监视以通过资源指标API提供指标,</p><h4 id="运行php-apache服务器"><a href="#运行php-apache服务器" class="headerlink" title="运行php-apache服务器"></a>运行php-apache服务器</h4><p>首先，我们将开始运行该映像的部署，并将其服务公开</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl run php-apache --image=0layfolk0/hpa-example --requests=cpu=200m --limits=cpu=500m --expose --port=80</span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">service/php-apache created</span><br><span class="line">deployment.apps/php-apache created</span><br></pre></td></tr></table></figure><h4 id="创建水平Pod自动缩放器"><a href="#创建水平Pod自动缩放器" class="headerlink" title="创建水平Pod自动缩放器"></a>创建水平Pod自动缩放器</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当服务运行以后。我们将使用kubectl autoscale创建自动 缩放器。以下命令将创建一个水平Pod自动缩放器，该缩放器将维护由我们在这些说明的第一步中创建的php-apache部署控制的Pod的1至10个副本。粗略地说，HPA将（通过部署）增加或减少副本数，以将所有Pod的平均CPU利用率维持在50％（因为每个pod通过kubectl运行请求200毫核，这意味着平均CPU利用率为100毫-核心）。<a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#algorithm-details" target="_blank" rel="noopener">算法更多信息</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10</span><br><span class="line">horizontalpodautoscaler.autoscaling/php-apache autoscaled</span><br></pre></td></tr></table></figure><p>我们可以通过运行以下命令检查自动定标器的当前状态:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   0%/50%    1         10        1          14s</span><br></pre></td></tr></table></figure><p><strong>注释</strong>: 由于我们没有向服务器发送任何请求，因此当前CPU消耗为0％（“ CURRENT”列显示了由相应部署控制的所有Pod的平均值）。</p><h4 id="增加压力测试"><a href="#增加压力测试" class="headerlink" title="增加压力测试"></a>增加压力测试</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们要对<code>php-apache</code>做压力测试来观看自动缩放如何对增加的负载做出反应，我们将启动一个容器，并将无限循环的查询发送到php-apache服务。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl run -i --tty load-generator --image=busybox /bin/sh</span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">If you don<span class="string">'t see a command prompt, try pressing enter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/ # while true; do wget -q -O- http://php-apache.default.svc.cluster.local; done</span></span><br><span class="line"><span class="string">OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!OK!O</span></span><br></pre></td></tr></table></figure><p>在一分钟左右的时间内，我们应该通过执行以下命令来看到更高的CPU负载：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME         REFERENCE               TARGETS    MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   250%/50%   1         10        1          9m12s</span><br><span class="line"></span><br><span class="line">$ kubectl get deployment php-apache</span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">php-apache   3/5     5            3           88m</span><br></pre></td></tr></table></figure><p>这里由于网络问题和pull 镜像太慢了，我就直接结束了测试</p><h4 id="停止压力测试"><a href="#停止压力测试" class="headerlink" title="停止压力测试"></a>停止压力测试</h4><p>我们在<code>busybox</code>容器的终端里面执行<code>&lt;Ctrl&gt; + C</code>来结束压力测试，然后我们在观察结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  kubectl get hpa</span><br><span class="line">NAME         REFERENCE               TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">php-apache   Deployment/php-apache   91%/50%   1         10        5          10m</span><br><span class="line"></span><br><span class="line">$ kubectl get deployment php-apache</span><br><span class="line">NAME         READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">php-apache   2/2     2            2           99m</span><br></pre></td></tr></table></figure><p><a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/" target="_blank" rel="noopener">自动缩放多个指标和自定义指标</a></p><h3 id="nginx-测试"><a href="#nginx-测试" class="headerlink" title="nginx 测试"></a>nginx 测试</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;利用之前<a href="https://xxlaila.github.io/2019/10/09/Deployment%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">Deployment</a>里面的nginx做测试，我们只需要吧之前的yaml文件稍作修改即可</p><h4 id="修改nginx-deployment-yaml"><a href="#修改nginx-deployment-yaml" class="headerlink" title="修改nginx-deployment.yaml"></a>修改nginx-deployment.yaml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; nginx-deployment.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-deploy</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-deploy</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-deploy</span><br><span class="line">        image: nginx:1.13.3</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            memory: <span class="string">"200Mi"</span></span><br><span class="line">            cpu: <span class="string">"200m"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="新建立nginx-deploy-hpa-yaml"><a href="#新建立nginx-deploy-hpa-yaml" class="headerlink" title="新建立nginx-deploy-hpa.yaml"></a>新建立nginx-deploy-hpa.yaml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; nginx-deploy-hpa.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: autoscaling/v1</span><br><span class="line">kind: HorizontalPodAutoscaler</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  maxReplicas: 5</span><br><span class="line">  minReplicas: 1</span><br><span class="line">  scaleTargetRef:</span><br><span class="line">    apiVersion: extensions/v1beta1</span><br><span class="line">    kind: Deployment</span><br><span class="line">    name: nginx-deploy</span><br><span class="line">  targetCPUUtilizationPercentage: 10</span><br><span class="line">status:</span><br><span class="line">  currentCPUUtilizationPercentage: 8</span><br><span class="line">  currentReplicas: 1</span><br><span class="line">  desiredReplicas: 0</span><br></pre></td></tr></table></figure><ul><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f nginx-deployment.yaml</span><br><span class="line">$ kubectl apply -f kubectl apply -f nginx-deploy-hpa.yaml</span><br></pre></td></tr></table></figure></li><li><p>查看验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   0%/10%    1         5         2          45s</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                        DESIRED   CURRENT   READY   AGE</span><br><span class="line">load-generator-7fbcc7489f   1         1         1       8m28s</span><br><span class="line">nginx-deploy-d494b9564      2         2         2       13m</span><br></pre></td></tr></table></figure></li><li><p>执行压力测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl run -i --tty load-generator --image=busybox /bin/sh</span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">If you don<span class="string">'t see a command prompt, try pressing enter.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/ # while true; do wget -q -O- http://172.30.224.5:80; done</span></span><br></pre></td></tr></table></figure></li><li><p>查看效果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   28%/10%   1         5         4          4m48s</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                        DESIRED   CURRENT   READY   AGE</span><br><span class="line">load-generator-7fbcc7489f   1         1         1       12m</span><br><span class="line">nginx-deploy-d494b9564      5         5         5       18m</span><br><span class="line"></span><br><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   16%/10%   1         5         5          5m39s</span><br></pre></td></tr></table></figure></li><li><p>结束压测<br>等待一会查看结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get hpa</span><br><span class="line">NAME           REFERENCE                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE</span><br><span class="line">nginx-deploy   Deployment/nginx-deploy   0%/10%    1         5         1          12m</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                        DESIRED   CURRENT   READY   AGE</span><br><span class="line">load-generator-7fbcc7489f   1         1         1       19m</span><br><span class="line">nginx-deploy-d494b9564      1         1         1       25m</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>hpa</tag>
      </tags>
  </entry>
  <entry>
    <title>Deployment使用</title>
    <url>/2019/10/09/Deployment%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="Deployment和rc的对比"><a href="#Deployment和rc的对比" class="headerlink" title="Deployment和rc的对比"></a>Deployment和rc的对比</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先RC是Kubernetes的一个核心概念，当我们把应用部署到集群之后，需要保证应用能够持续稳定的运行，RC就是这个保证的关键，主要功能如:</p><ul><li>确保Pod数量: 它会确保Kubernetes中有指定数量的Pod在运行，如果少于指定数量的Pod，RC就会创建新的，反之这会删除多余的，保证Pod的副本数量不变。</li><li>确保Pod健康: 当Pod不健康，比如运行出错了，总之无法提供正常服务时，RC也会杀死不健康的Pod，重新创建新的。</li><li>弹性伸缩: 在业务高峰或者低峰的时候，可以用过RC来动态的调整Pod数量来提供资源的利用率，当然我们也提到过如果使用HPA这种资源对象的话可以做到自动伸缩。</li><li>滚动升级: 滚动升级是一种平滑的升级方式，通过逐步替换的策略，保证整体系统的稳定性</li></ul><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deployment同样也是Kubernetes系统的一个核心概念，主要职责和RC一样的都是保证Pod的数量和健康，二者大部分功能都是完全一致的，我们可以看成是一个升级版的RC控制器，Deployment具备的新特性</p><ul><li>RC的全部功能: Deployment具备上面描述的RC的全部功能</li><li>事件和状态查看: 可以查看Deployment的升级详细进度和状态</li><li>回滚: 当升级Pod的时候如果出现问题，可以使用回滚操作回滚到之前的任一版本</li><li>版本记录: 每一次对Deployment的操作，都能够保存下来，这也是保证可以回滚到任一版本的基础</li><li>暂停和启动: 对于每一次升级都能够随时暂停和启动</li></ul><p><strong>对比</strong>: Deployment作为新一代的RC，在功能上更为丰富，同时官方也是推荐使用Deployment来管理Pod，比如一些官方组件kube-dns、kube-proxy也都是使用的Deployment来管理的，所以最好使用Deployment来管理Pod。</p><h3 id="Deployment-介绍"><a href="#Deployment-介绍" class="headerlink" title="Deployment 介绍"></a>Deployment 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Deployment拥有多个Replica Set，而一个Replica Set拥有一个或多个Pod。一个Deployment控制多个rs主要是为了支持回滚机制，每当Deployment操作时，Kubernetes会重新生成一个Replica Set并保留，以后有需要的话就可以回滚至之前的状态。</p><p><strong>实例</strong>: 创建一个Deployment，它创建了一个Replica Set来启动3个nginx pod，yaml文件如下:</p><ul><li><p>nginx-deployment.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; nginx-deployment.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f nginx-deployment.yaml</span><br><span class="line">deployment.apps/nginx-deploy created</span><br></pre></td></tr></table></figure></li><li><p>执行一下命令查看刚刚创建的Deployment</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get deployments</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deploy   0/3     3            0           12s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次执行上面命令</span></span><br><span class="line">$ kubectl get deployments</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deploy   1/3     3            1           35s</span><br></pre></td></tr></table></figure></li><li><p>可以看到Deployment已经创建了1个Replica Set了，执行下面的命令查看rs和pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get rs</span><br><span class="line">NAME                     DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d   3         3         2       70s</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">$ kubectl get pod --show-labels</span><br><span class="line">NAME                           READY   STATUS              RESTARTS   AGE   LABELS</span><br><span class="line">nginx-deploy-6dd86d77d-9n9vf   1/1     Running             0          99s   app=nginx,pod-template-hash=6dd86d77d</span><br><span class="line">nginx-deploy-6dd86d77d-bhrsk   0/1     ContainerCreating   0          99s   app=nginx,pod-template-hash=6dd86d77d</span><br><span class="line">nginx-deploy-6dd86d77d-jdnrh   1/1     Running             0          99s   app=nginx,pod-template-hash=6dd86d77d</span><br></pre></td></tr></table></figure></li></ul><p>上面的Deployment的yaml文件中的replicas:3将会保证我们始终有3个POD在运行。</p><h3 id="滚动升级"><a href="#滚动升级" class="headerlink" title="滚动升级"></a>滚动升级</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;修改之前使用的nginx-deployment.yaml文件中的nginx镜像修改为nginx:1.13.3，然后在spec下面添加滚动升级策略：</p><ul><li><p>nginx-deploments.yml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.3</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure></li><li><p>minReadySeconds:</p><ul><li>滚动升级时5s后认为该pod就绪</li><li>如果没有设置该值，Kubernetes会假设该容器启动起来后就提供服务了</li><li>如果没有设置该值，在某些极端情况下可能会造成服务不正常运行</li></ul></li><li><p>rollingUpdate:</p><ul><li>于replicas为3,则整个升级,pod个数在2-4个之间</li></ul></li><li><p>maxSurge:</p><ul><li>升级过程中最多可以比原先设置多出的POD数量</li><li>例如：maxSurage=1，replicas=3,则表示Kubernetes会先启动1一个新的Pod后才删掉一个旧的POD，整个升级过程中最多会有3+1个POD。</li></ul></li><li><p>maxUnavaible:</p><ul><li>升级过程中最多有多少个POD处于无法提供服务的状态</li><li>当maxSurge不为0时，该值也不能为0</li><li>例如：maxUnavaible=1，则表示Kubernetes整个升级过程中最多会有1个POD处于无法服务的状态。</li></ul></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f nginx-deployment.yaml</span><br><span class="line">deployment.apps/nginx-deploy configured</span><br></pre></td></tr></table></figure></li><li><p>查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用rollout命令</span></span><br><span class="line">$ kubectl rollout status deployment/nginx-deploy</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deploy"</span> rollout to finish: 2 out of 3 new replicas have been updated...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停升级</span></span><br><span class="line">$ kubectl rollout pause deployment deployment/nginx-deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续升级</span></span><br><span class="line">$ kubectl rollout resume deployment deployment/nginx-deploy</span><br></pre></td></tr></table></figure></li></ul><p>升级结束后，继续查看rs的状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get rs</span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d    0         0         0       21m</span><br><span class="line">nginx-deploy-799d666985   3         3         3       10m</span><br></pre></td></tr></table></figure><p>根据AGE我们可以看到离我们最近的当前状态是：3，和我们的yaml文件是一致的，证明升级成功了。用describe命令可以查看升级的全部信息:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe deploy nginx-deploy</span><br><span class="line">Name:                   nginx-deploy</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Wed, 09 Oct 2019 10:12:56 +0800</span><br><span class="line">Labels:                 k8s-app=nginx-demo</span><br><span class="line">Annotations:            deployment.kubernetes.io/revision: 2</span><br><span class="line">                        kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                          &#123;<span class="string">"apiVersion"</span>:<span class="string">"apps/v1beta1"</span>,<span class="string">"kind"</span>:<span class="string">"Deployment"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"labels"</span>:&#123;<span class="string">"k8s-app"</span>:<span class="string">"nginx-demo"</span>&#125;,<span class="string">"name"</span>:<span class="string">"nginx-deploy"</span>,<span class="string">"nam...</span></span><br><span class="line"><span class="string">Selector:               app=nginx</span></span><br><span class="line"><span class="string">Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable</span></span><br><span class="line"><span class="string">StrategyType:           RollingUpdate</span></span><br><span class="line"><span class="string">MinReadySeconds:        5</span></span><br><span class="line"><span class="string">RollingUpdateStrategy:  1 max unavailable, 1 max surge</span></span><br><span class="line"><span class="string">Pod Template:</span></span><br><span class="line"><span class="string">  Labels:  app=nginx</span></span><br><span class="line"><span class="string">  Containers:</span></span><br><span class="line"><span class="string">   nginx:</span></span><br><span class="line"><span class="string">    Image:        nginx:1.13.3</span></span><br><span class="line"><span class="string">    Port:         80/TCP</span></span><br><span class="line"><span class="string">    Host Port:    0/TCP</span></span><br><span class="line"><span class="string">    Environment:  &lt;none&gt;</span></span><br><span class="line"><span class="string">    Mounts:       &lt;none&gt;</span></span><br><span class="line"><span class="string">  Volumes:        &lt;none&gt;</span></span><br><span class="line"><span class="string">Conditions:</span></span><br><span class="line"><span class="string">  Type           Status  Reason</span></span><br><span class="line"><span class="string">  ----           ------  ------</span></span><br><span class="line"><span class="string">  Available      True    MinimumReplicasAvailable</span></span><br><span class="line"><span class="string">  Progressing    True    NewReplicaSetAvailable</span></span><br><span class="line"><span class="string">OldReplicaSets:  &lt;none&gt;</span></span><br><span class="line"><span class="string">NewReplicaSet:   nginx-deploy-799d666985 (3/3 replicas created)</span></span><br><span class="line"><span class="string">Events:</span></span><br><span class="line"><span class="string">  Type    Reason             Age   From                   Message</span></span><br><span class="line"><span class="string">  ----    ------             ----  ----                   -------</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  23m   deployment-controller  Scaled up replica set nginx-deploy-6dd86d77d to 3</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  12m   deployment-controller  Scaled up replica set nginx-deploy-799d666985 to 1</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  12m   deployment-controller  Scaled down replica set nginx-deploy-6dd86d77d to 2</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  12m   deployment-controller  Scaled up replica set nginx-deploy-799d666985 to 2</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  11m   deployment-controller  Scaled down replica set nginx-deploy-6dd86d77d to 1</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  11m   deployment-controller  Scaled up replica set nginx-deploy-799d666985 to 3</span></span><br><span class="line"><span class="string">  Normal  ScalingReplicaSet  10m   deployment-controller  Scaled down replica set nginx-deploy-6dd86d77d to 0</span></span><br></pre></td></tr></table></figure><h3 id="回滚Deployment"><a href="#回滚Deployment" class="headerlink" title="回滚Deployment"></a>回滚Deployment</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面已经滚动平滑的升级Deployment，但是如果升级后的POD出了问题该怎么办？我们能够想到的最好最快的方式当然是回退到上一次能够提供正常工作的版本，Deployment就为我们提供了回滚机制。</p><ul><li>首先，查看Deployment的升级历史:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout <span class="built_in">history</span> deployment nginx-deploy</span><br><span class="line">deployment.extensions/nginx-deploy </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         &lt;none&gt;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上面的结果可以看出在执行Deployment升级的时候最好带上record参数，便于我们查看历史版本信息。<code>kubectl apply --filename=nginx-deployment.yaml --record=true</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认情况下，所有通过kubectl xxxx –record都会被kubernetes记录到etcd进行持久化，这无疑会占用资源，最重要的是，时间久了，当你kubectl get rs时，会有成百上千的垃圾RS返回，这对于运维来说维护很不便利，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当我们在上生产时，我们最好通过设置Deployment的.spec.revisionHistoryLimit来限制最大保留的revision number，比如15个版本，回滚的时候一般只会回滚到最近的几个版本就足够了。其实rollout history中记录的revision都和ReplicaSets一一对应。如果手动delete某个ReplicaSet，对应的rollout history就会被删除，也就是还说你无法回滚到这个revison。rollout history和ReplicaSet的对应关系，可以在kubectl describe rs $RSNAME返回的revision字段中得到，这里的revision就对应着rollout history返回的revison。</p><ul><li><p>yaml例子</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat nginx-deployment.yaml </span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deploy</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: nginx-demo</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  minReadySeconds: 5</span><br><span class="line">  revisionHistoryLimit: 10</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1</span><br><span class="line">      maxUnavailable: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.13.3</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure></li><li><p>可以使用下面的命令查看单个revison的信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout <span class="built_in">history</span> deployment nginx-deploy --revision=2</span><br><span class="line">deployment.extensions/nginx-deploy with revision <span class="comment">#2</span></span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:	app=nginx</span><br><span class="line">	pod-template-hash=799d666985</span><br><span class="line">  Annotations:	kubernetes.io/change-cause: kubectl apply --filename=nginx-deployment.yaml --record=<span class="literal">true</span></span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:	nginx:1.13.3</span><br><span class="line">    Port:	80/TCP</span><br><span class="line">    Host Port:	0/TCP</span><br><span class="line">    Environment:	&lt;none&gt;</span><br><span class="line">    Mounts:	&lt;none&gt;</span><br><span class="line">  Volumes:	&lt;none&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接回退到当前版本的前一个版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout undo deployment nginx-deploy</span><br><span class="line">deployment.extensions/nginx-deploy rolled back</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用revision回退到指定的版本</span></span><br><span class="line">$ kubectl rollout undo deployment nginx-deploy --to-revision=1</span><br><span class="line">deployment.extensions/nginx-deploy rolled back</span><br></pre></td></tr></table></figure></li><li><p>查看Deployment现在的状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get deployments</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deploy   2/3     3            2           56m</span><br><span class="line"></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d    1         1         1       56m</span><br><span class="line">nginx-deploy-799d666985   3         3         1       46m</span><br><span class="line"></span><br><span class="line">$ kubectl rollout status deployment/nginx-deploy</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deploy"</span> rollout to finish: 2 of 3 updated replicas are available...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deploy"</span> rollout to finish: 2 of 3 updated replicas are available...</span><br><span class="line">deployment <span class="string">"nginx-deploy"</span> successfully rolled out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成后查看</span></span><br><span class="line">$ kubectl get rs</span><br><span class="line">NAME                      DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deploy-6dd86d77d    0         0         0       57m</span><br><span class="line">nginx-deploy-799d666985   3         3         3       47m</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">官方参考</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>Deployment</tag>
      </tags>
  </entry>
  <entry>
    <title>harbor私有仓库部署</title>
    <url>/2019/09/30/harbor%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><a id="more"></a><h3 id="部署环境准备"><a href="#部署环境准备" class="headerlink" title="部署环境准备"></a>部署环境准备</h3><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><table><thead><tr><th>系统</th><th>配置</th><th>ip</th></tr></thead><tbody><tr><td>centos 7.4</td><td>4/8G/200G</td><td>172.21.16.90</td></tr></tbody></table><h4 id="下载所需文件"><a href="#下载所需文件" class="headerlink" title="下载所需文件"></a>下载所需文件</h4><h5 id="docker-compose-下载"><a href="#docker-compose-下载" class="headerlink" title="docker-compose 下载"></a>docker-compose 下载</h5><p>docker compose <a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">发布页面</a>下载最新的 docker-compose 二进制文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span></span><br><span class="line"><span class="comment"># mv ~/docker-compose-Linux-x86_64 /usr/bin/docker-compose </span></span><br><span class="line"><span class="comment"># chmod a+x  /ur/bin/docker-compose</span></span><br></pre></td></tr></table></figure><ul><li>官方的安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment"># chmod +x /usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="harbor-下载"><a href="#harbor-下载" class="headerlink" title="harbor 下载"></a>harbor 下载</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;harbor 安装方式有两种，一种是在线安装，一种是离线安装，这里由于网络不好，使用的是离线安装，harbor<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">发布页面</a>下载最新的 harbor 离线安装包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://storage.googleapis.com/harbor-releases/release-1.9.0/harbor-offline-installer-v1.9.0.tgz</span></span><br><span class="line"><span class="comment"># tar -zxvf harbor-offline-installer-v1.9.0.tgz</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum-config-manager   --add-repo   https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># sudo yum -y install docker-ce-18.09.6-3.el7.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cat /etc/sysctl.d/k8s.conf &lt;&lt;EOF</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables: 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables: 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># sysctl -p /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="comment"># systemctl  start docker</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>: 不添加<code>/etc/sysctl.d/k8s.conf</code> 启动docker会提示<code>WARNING: bridge-nf-call-iptables is disabled WARNING: bridge-nf-call-ip6tables is disabled</code></p><h4 id="导入-docker-images"><a href="#导入-docker-images" class="headerlink" title="导入 docker images"></a>导入 docker images</h4><p>导入离线安装包中harbor相关的 docker images：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd harbor</span></span><br><span class="line"><span class="comment"># docker load -i harbor.v1.9.0.tar.gz </span></span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                      TAG                        IMAGE ID            CREATED             SIZE</span><br><span class="line">goharbor/chartmuseum-photon     v0.9.0-v1.9.0              00c12627cbd7        2 weeks ago         131MB</span><br><span class="line">goharbor/harbor-migrator        v1.9.0                     75d4de5e0f16        2 weeks ago         362MB</span><br><span class="line">goharbor/redis-photon           v1.9.0                     3249afaa9965        2 weeks ago         109MB</span><br><span class="line">goharbor/clair-photon           v2.0.9-v1.9.0              e54ad567c58f        2 weeks ago         165MB</span><br><span class="line">goharbor/notary-server-photon   v0.6.1-v1.9.0              2cdecba59f38        2 weeks ago         138MB</span><br><span class="line">goharbor/notary-signer-photon   v0.6.1-v1.9.0              973378593def        2 weeks ago         135MB</span><br><span class="line">goharbor/harbor-registryctl     v1.9.0                     30a01bf0f4df        2 weeks ago         99.6MB</span><br><span class="line">goharbor/registry-photon        v2.7.1-patch-2819-v1.9.0   32571099a9fe        2 weeks ago         82.3MB</span><br><span class="line">goharbor/nginx-photon           v1.9.0                     f933d62f9952        2 weeks ago         43.9MB</span><br><span class="line">goharbor/harbor-log             v1.9.0                     28e27d511335        2 weeks ago         82.6MB</span><br><span class="line">goharbor/harbor-jobservice      v1.9.0                     f3cd0b181a89        2 weeks ago         141MB</span><br><span class="line">goharbor/harbor-core            v1.9.0                     f2814ed8aadd        2 weeks ago         155MB</span><br><span class="line">goharbor/harbor-portal          v1.9.0                     0778d4c5d27e        2 weeks ago         51.3MB</span><br><span class="line">goharbor/harbor-db              v1.9.0                     a809e14d2d49        2 weeks ago         147MB</span><br><span class="line">goharbor/prepare                v1.9.0                     aa594772c1e8        2 weeks ago         147MB</span><br></pre></td></tr></table></figure><h4 id="修改-harbor-yml-文件"><a href="#修改-harbor-yml-文件" class="headerlink" title="修改 harbor.yml 文件"></a>修改 harbor.yml 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim harbor.yml</span></span><br><span class="line">hostname: reg.xxlaila.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># email configure</span></span><br><span class="line">email_server: smtp.exmail.qq.com</span><br><span class="line">email_server_port: 465</span><br><span class="line">email_username: admin@xxlaila.cn</span><br><span class="line">email_password: 123</span><br><span class="line">email_from: admin&lt;admin@xxlaila.cn&gt;</span><br><span class="line">email_ssl: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User registration is prohibited</span></span><br><span class="line">self_registration: off</span><br><span class="line"></span><br><span class="line"><span class="comment"># LDAP authentication configuration item</span></span><br><span class="line"><span class="comment">#ldap_url: ldaps://ldap.xxlaila.cn</span></span><br><span class="line"><span class="comment">#ldap_searchdn: uid=username,ou=people,dc=xxlaila,dc=com</span></span><br><span class="line"><span class="comment">#ldap_search_pwd: password</span></span><br><span class="line"><span class="comment">#ldap_basedn: ou=people,dc=xxlaila,dc=com</span></span><br><span class="line"><span class="comment">#ldap_filter: (objectClass=person)</span></span><br><span class="line"><span class="comment">#ldap_uid: uid </span></span><br><span class="line"><span class="comment">#ldap_scope: 3 </span></span><br><span class="line"><span class="comment">#ldap_timeout: 5</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>: 新版本的邮箱、ldap现在都不需要在配置文件里面来添加配置了，直接通过web界面来进行配置即可，这里我只是添加进来，保留，😁😁😁</p><h4 id="加载和启动-harbor-镜像"><a href="#加载和启动-harbor-镜像" class="headerlink" title="加载和启动 harbor 镜像"></a>加载和启动 harbor 镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir /data</span></span><br><span class="line"><span class="comment"># chmod 777 /var/run/docker.sock /data</span></span><br><span class="line"><span class="comment"># ./install.sh </span></span><br><span class="line"></span><br><span class="line">[Step 0]: checking installation environment ...</span><br><span class="line"></span><br><span class="line">Note: docker version: 19.03.2</span><br><span class="line"></span><br><span class="line">Note: docker-compose version: 1.24.1</span><br><span class="line"></span><br><span class="line">[Step 1]: loading Harbor images ...</span><br><span class="line">Loaded image: goharbor/harbor-portal:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-core:v1.9.0</span><br><span class="line">Loaded image: goharbor/nginx-photon:v1.9.0</span><br><span class="line">Loaded image: goharbor/notary-signer-photon:v0.6.1-v1.9.0</span><br><span class="line">Loaded image: goharbor/registry-photon:v2.7.1-patch-2819-v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-migrator:v1.9.0</span><br><span class="line">Loaded image: goharbor/chartmuseum-photon:v0.9.0-v1.9.0</span><br><span class="line">Loaded image: goharbor/prepare:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-log:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-db:v1.9.0</span><br><span class="line">Loaded image: goharbor/clair-photon:v2.0.9-v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-jobservice:v1.9.0</span><br><span class="line">Loaded image: goharbor/harbor-registryctl:v1.9.0</span><br><span class="line">Loaded image: goharbor/redis-photon:v1.9.0</span><br><span class="line">Loaded image: goharbor/notary-server-photon:v0.6.1-v1.9.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Step 2]: preparing environment ...</span><br><span class="line">prepare base dir is <span class="built_in">set</span> to /opt/harbor</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: /config/core/env</span><br><span class="line">Generated configuration file: /config/core/app.conf</span><br><span class="line">Generated configuration file: /config/registry/config.yml</span><br><span class="line">Generated configuration file: /config/registryctl/env</span><br><span class="line">Generated configuration file: /config/db/env</span><br><span class="line">Generated configuration file: /config/jobservice/env</span><br><span class="line">Generated configuration file: /config/jobservice/config.yml</span><br><span class="line">Generated and saved secret to file: /secret/keys/secretkey</span><br><span class="line">Generated certificate, key file: /secret/core/private_key.pem, cert file: /secret/registry/root.crt</span><br><span class="line">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class="line">Clean up the input dir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Step 3]: starting Harbor ...</span><br><span class="line">Creating network <span class="string">"harbor_harbor"</span> with the default driver</span><br><span class="line">Creating harbor-log ... <span class="keyword">done</span></span><br><span class="line">Creating registryctl   ... <span class="keyword">done</span></span><br><span class="line">Creating redis         ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-portal ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-db     ... <span class="keyword">done</span></span><br><span class="line">Creating registry      ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-core   ... <span class="keyword">done</span></span><br><span class="line">Creating nginx             ... <span class="keyword">done</span></span><br><span class="line">Creating harbor-jobservice ... <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should be able to visit the admin portal at http://reg.xxlaila.cn. </span><br><span class="line">For more details, please visit https://github.com/goharbor/harbor .</span><br></pre></td></tr></table></figure><h4 id="访问管理界面"><a href="#访问管理界面" class="headerlink" title="访问管理界面"></a>访问管理界面</h4><p>确认所有组件都工作正常：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose  ps</span></span><br><span class="line">      Name                     Command                       State                     Ports          </span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line">harbor-core         /harbor/harbor_core              Up (healthy)                                     </span><br><span class="line">harbor-db           /docker-entrypoint.sh            Up (healthy)            5432/tcp                 </span><br><span class="line">harbor-jobservice   /harbor/harbor_jobservice  ...   Up (health: starting)                            </span><br><span class="line">harbor-log          /bin/sh -c /usr/<span class="built_in">local</span>/bin/ ...   Up (healthy)            127.0.0.1:1514-&gt;10514/tcp</span><br><span class="line">harbor-portal       nginx -g daemon off;             Up (healthy)            8080/tcp                 </span><br><span class="line">nginx               nginx -g daemon off;             Up (healthy)            0.0.0.0:80-&gt;8080/tcp     </span><br><span class="line">redis               redis-server /etc/redis.conf     Up (healthy)            6379/tcp                 </span><br><span class="line">registry            /entrypoint.sh /etc/regist ...   Up (healthy)            5000/tcp                 </span><br><span class="line">registryctl         /harbor/start.sh                 Up (healthy)</span><br></pre></td></tr></table></figure><h5 id="harbor-组建介绍"><a href="#harbor-组建介绍" class="headerlink" title="harbor 组建介绍"></a>harbor 组建介绍</h5><ul><li>harbor-core: Harbor的核心功能，主要提供以下服务：<ul><li>UI：提供图形化界面，帮助用户管理registry上的镜像（image）, 并对用户进行授权。</li><li>webhook：为了及时获取registry 上image状态变化的情况， 在Registry上配置webhook，把状态变化传递给UI模块。</li><li>token 服务：负责根据用户权限给每个docker push/pull命令签发token. Docker 客户端向Regiøstry服务发起的请求,如果不包含token，会被重定向到这里，获得token后再重新向Registry进行请求。</li></ul></li><li>harbor-db: 为core services提供数据库服务，负责储存用户权限、审计日志、Docker image分组信息等数据。</li><li>harbor-jobservice: harbor-jobservice 是harbor的job管理模块，job在harbor里面主要是为了镜像仓库之前同步使用的;</li><li>harbor-log: 为了帮助监控Harbor运行，负责收集其他组件的log，供日后进行分析。</li><li>nginx: nginx负责流量转发和安全验证，对外提供的流量都是从nginx中转，所以开放https的443端口，它将流量分发到后端的ui和正在docker镜像存储的docker registry。</li><li>redis: 存储缓存信息</li><li>registry: 负责储存Docker镜像，并处理docker push/pull 命令。由于我们要对用户进行访问控制，即不同用户对Docker image有不同的读写权限，Registry会指向一个token服务，强制用户的每次docker pull/push请求都要携带一个合法的token, Registry会通过公钥对token 进行解密验证。</li><li>registryctl: 是harbor的管理员配置harbor的一些常用配置和高级配置</li></ul><p>在浏览器访问<a href="http://reg.xxlaila.cn，" target="_blank" rel="noopener">http://reg.xxlaila.cn，</a> 用账号 admin 和 harbor.yml 配置文件中的默认密码 Harbor12345 登陆系统<br><img src="https://img.xxlaila.cn/8095d05-b9b7-4bdc-b0fc-7810db649e23.png" alt="img"><br><img src="https://img.xxlaila.cn/4bfab8be-e5de-4165-9268-fa591c5f12f8.png" alt="img"></p><h4 id="harbor-运行时产生的文件、目录"><a href="#harbor-运行时产生的文件、目录" class="headerlink" title="harbor 运行时产生的文件、目录"></a>harbor 运行时产生的文件、目录</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;harbor 将日志打印到 /var/log/harbor 的相关目录下，传统的docker logs XXX 或 docker-compose logs XXX 看不到容器的日志。只有使用常用系统命令来进行日志的查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # 日志目录</span></span><br><span class="line"><span class="comment"># ls /var/log/harbor</span></span><br><span class="line">core.log  jobservice.log  portal.log  postgresql.log  proxy.log  redis.log  registryctl.log  registry.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 数据目录，包括数据库、镜像仓库</span></span><br><span class="line"><span class="comment"># ls /data/</span></span><br><span class="line">ca_download  database  job_logs  psc  redis  registry  secret</span><br></pre></td></tr></table></figure><h4 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h4><p>下列操作的工作目录均为解压离线安装文件后生成的 harbor 目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # 停止 harbor</span></span><br><span class="line"><span class="comment"># docker-compose down -v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 启动 harbor</span></span><br><span class="line"><span class="comment"># docker-compose up -d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 更修改的配置更新到 docker-compose.yml 文件</span></span><br><span class="line"><span class="comment"># ./prepare</span></span><br><span class="line">prepare base dir is <span class="built_in">set</span> to /opt/harbor</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Clearing the configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Clearing the configuration file: /config/nginx/nginx.conf</span><br><span class="line">Clearing the configuration file: /config/core/env</span><br><span class="line">Clearing the configuration file: /config/core/app.conf</span><br><span class="line">Clearing the configuration file: /config/registry/config.yml</span><br><span class="line">Clearing the configuration file: /config/registry/root.crt</span><br><span class="line">Clearing the configuration file: /config/registryctl/env</span><br><span class="line">Clearing the configuration file: /config/registryctl/config.yml</span><br><span class="line">Clearing the configuration file: /config/db/env</span><br><span class="line">Clearing the configuration file: /config/jobservice/env</span><br><span class="line">Clearing the configuration file: /config/jobservice/config.yml</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/logrotate.conf</span><br><span class="line">Generated configuration file: /config/<span class="built_in">log</span>/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: /config/core/env</span><br><span class="line">Generated configuration file: /config/core/app.conf</span><br><span class="line">Generated configuration file: /config/registry/config.yml</span><br><span class="line">Generated configuration file: /config/registryctl/env</span><br><span class="line">Generated configuration file: /config/db/env</span><br><span class="line">Generated configuration file: /config/jobservice/env</span><br><span class="line">Generated configuration file: /config/jobservice/config.yml</span><br><span class="line">loaded secret from file: /secret/keys/secretkey</span><br><span class="line">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class="line">Clean up the input dir</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s pod健康检测</title>
    <url>/2019/09/27/k8s-pod%E5%81%A5%E5%BA%B7%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="Pod健康检测机制"><a href="#Pod健康检测机制" class="headerlink" title="Pod健康检测机制"></a>Pod健康检测机制</h3><p>对于Pod的健康状态检测，kubernetes提供了两类探针(Probe)来执行对Pod的健康状态检测:</p><ul><li><strong>LivenessProbe探针</strong>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于判断容器是否存活，即Pod是否为running状态，如果LivenessProbe探针探测到容器不健康，则kubelet将kill掉容器，并根据容器的重启策略是否重启，如果一个容器不包含LivenessProbe探针，则Kubelet认为容器的LivenessProbe探针的返回值永远成功.</li></ul><a id="more"></a><ul><li><strong>ReadinessProbe探针</strong>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于判断容器是否启动完成，即容器的Ready是否为True，可以接收请求，如果ReadinessProbe探测失败，则容器的Ready将为False，控制器将此Pod的Endpoint从对应的service的Endpoint列表中移除，从此不再将任何请求调度此Pod上，直到下次探测成功。</li></ul><!--more--><p>每类探针都支持三种探测方法:</p><ul><li><strong>ExecAction</strong>: 通过执行命令来检查服务是否正常，针对复杂检测或无HTTP接口的服务，命令返回值为0则表示容器健康。</li><li><strong>HTTPGetAction</strong>: 通过发送http请求检查服务是否正常，返回200-399状态码则表明容器健康。</li><li><strong>TCPSocketAction</strong>: 通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康。</li></ul><p>探针探测的结果有以下三者之一:</p><ul><li><strong>Success</strong>: Container通过了检查</li><li><strong>Failure</strong>: Container未通过检查</li><li><strong>Unknown</strong>: 未能执行检查，因此不采取任何措施</li></ul><h3 id="LivenessProbe探针配置"><a href="#LivenessProbe探针配置" class="headerlink" title="LivenessProbe探针配置"></a>LivenessProbe探针配置</h3><h4 id="例一：通过exec方式做健康探测"><a href="#例一：通过exec方式做健康探测" class="headerlink" title="例一：通过exec方式做健康探测"></a>例一：通过exec方式做健康探测</h4><ul><li>exec-liveness.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; <span class="built_in">exec</span>-liveness.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">test</span>: liveness</span><br><span class="line">  name: liveness-exec</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600</span><br><span class="line">    livenessProbe:</span><br><span class="line">      <span class="built_in">exec</span>:</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - cat</span><br><span class="line">        - /tmp/healthy</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 5</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在该配置文件中，对容器执行livenessProbe检查，periodSeconds字段指定kubelet每5s执行一次检查，检查的命令为cat /tmp/healthy，initialDelaySeconds字段告诉kubelet应该在执行第一次检查之前等待5秒，如果命令执行成功，则返回0，那么kubelet就认为容器是健康的，如果为非0，则Kubelet会Kill掉容器并根据重启策略来决定是否需要重启。</p><ul><li>当容器启动时，它会执行以下命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh -c <span class="string">"touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600"</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于容器的前30秒，有一个/tmp/healthy文件。因此，在前30秒内，该命令cat /tmp/healthy返回成功代码。30秒后，cat /tmp/healthy返回失败代码。</p><ul><li><p>创建Pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  kubectl create -f  <span class="built_in">exec</span>-liveness.yaml </span><br><span class="line">pod/liveness-exec created</span><br></pre></td></tr></table></figure></li><li><p>在30秒内，查看Pod事件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe pod liveness-exec</span><br><span class="line">…………</span><br><span class="line">QoS Class:       BestEffort</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From                   Message</span><br><span class="line">  ----    ------     ----  ----                   -------</span><br><span class="line">  Normal  Scheduled  23s   default-scheduler      Successfully assigned default/liveness-exec to 172.21.17.34</span><br><span class="line">  Normal  Pulling    20s   kubelet, 172.21.17.34  Pulling image <span class="string">"busybox"</span></span><br><span class="line">  Normal  Pulled     2s    kubelet, 172.21.17.34  Successfully pulled image <span class="string">"busybox"</span></span><br><span class="line">  Normal  Created    2s    kubelet, 172.21.17.34  Created container liveness</span><br><span class="line">  Normal  Started    1s    kubelet, 172.21.17.34  Started container liveness</span><br></pre></td></tr></table></figure></li><li><p>35秒后，再次查看Pod事件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe pod liveness-exec</span><br><span class="line">…………</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age              From                   Message</span><br><span class="line">  ----     ------     ----             ----                   -------</span><br><span class="line">  Normal   Scheduled  58s              default-scheduler      Successfully assigned default/liveness-exec to 172.21.17.34</span><br><span class="line">  Normal   Pulling    55s              kubelet, 172.21.17.34  Pulling image <span class="string">"busybox"</span></span><br><span class="line">  Normal   Pulled     37s              kubelet, 172.21.17.34  Successfully pulled image <span class="string">"busybox"</span></span><br><span class="line">  Normal   Created    37s              kubelet, 172.21.17.34  Created container liveness</span><br><span class="line">  Normal   Started    36s              kubelet, 172.21.17.34  Started container liveness</span><br><span class="line">  Warning  Unhealthy  0s (x2 over 5s)  kubelet, 172.21.17.34  Liveness probe failed: cat: can<span class="string">'t open '</span>/tmp/healthy<span class="string">': No such file or directory</span></span><br></pre></td></tr></table></figure></li><li><p>再等30秒，确认Container已重新启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pod liveness-exec</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-exec   1/1     Running   1          115s</span><br><span class="line"></span><br><span class="line">$ kubectl describe pod liveness-exec</span><br><span class="line">………………</span><br><span class="line">QoS Class:       BestEffort</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age                 From                   Message</span><br><span class="line">  ----     ------     ----                ----                   -------</span><br><span class="line">  Normal   Scheduled  2m7s                default-scheduler      Successfully assigned default/liveness-exec to 172.21.17.34</span><br><span class="line">  Warning  Unhealthy  64s (x3 over 74s)   kubelet, 172.21.17.34  Liveness probe failed: cat: can<span class="string">'t open '</span>/tmp/healthy<span class="string">': No such file or directory</span></span><br><span class="line"><span class="string">  Normal   Killing    64s                 kubelet, 172.21.17.34  Container liveness failed liveness probe, will be restarted</span></span><br><span class="line"><span class="string">  Normal   Pulling    34s (x2 over 2m4s)  kubelet, 172.21.17.34  Pulling image "busybox"</span></span><br><span class="line"><span class="string">  Normal   Pulled     25s (x2 over 106s)  kubelet, 172.21.17.34  Successfully pulled image "busybox"</span></span><br><span class="line"><span class="string">  Normal   Created    25s (x2 over 106s)  kubelet, 172.21.17.34  Created container liveness</span></span><br><span class="line"><span class="string">  Normal   Started    25s (x2 over 105s)  kubelet, 172.21.17.34  Started container liveness</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="例二-通过HTTP方式做健康探测"><a href="#例二-通过HTTP方式做健康探测" class="headerlink" title="例二: 通过HTTP方式做健康探测"></a>例二: 通过HTTP方式做健康探测</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; http-liveness.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">test</span>: liveness</span><br><span class="line">  name: liveness-http</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: carlziess/liveness</span><br><span class="line">    args:</span><br><span class="line">    - /server</span><br><span class="line">    livenessProbe:</span><br><span class="line">      httpGet:</span><br><span class="line">        path: /healthz</span><br><span class="line">        port: 8080</span><br><span class="line">        httpHeaders:</span><br><span class="line">        - name: X-Custom-Header</span><br><span class="line">          value: Awesome</span><br><span class="line">      initialDelaySeconds: 3</span><br><span class="line">      periodSeconds: 3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建一个Pod，其中periodSeconds字段指定kubelet每3秒执行一次探测，initialDelaySeconds字段告诉kubelet延迟等待3秒，探测方式为向容器中运行的服务发送HTTP GET请求，请求8080端口下的/healthz, 任何大于或等于200且小于400的代码表示成功。任何其他代码表示失败。</p><ul><li><p>创建pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f http-liveness.yaml </span><br><span class="line">pod/liveness-http created</span><br></pre></td></tr></table></figure></li><li><p>检查验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe pod liveness-http</span><br><span class="line">………………</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age                   From                   Message</span><br><span class="line">  ----     ------     ----                  ----                   -------</span><br><span class="line">  Normal   Scheduled  2m59s                 default-scheduler      Successfully assigned default/liveness-http to 172.21.17.34</span><br><span class="line">  Normal   Pulled     119s (x3 over 2m46s)  kubelet, 172.21.17.34  Successfully pulled image <span class="string">"carlziess/liveness"</span></span><br><span class="line">  Normal   Created    119s (x3 over 2m46s)  kubelet, 172.21.17.34  Created container liveness</span><br><span class="line">  Normal   Started    118s (x3 over 2m45s)  kubelet, 172.21.17.34  Started container liveness</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME            READY   STATUS    RESTARTS   AGE</span><br><span class="line">liveness-http   1/1     Running   0          26s</span><br></pre></td></tr></table></figure></li><li><p><strong>httpGet</strong>探测方式有如下可选的控制字段</p><ul><li>host: 要连接的主机名，默认为Pod IP，可以在http request head中设置host头部。</li><li>scheme: 用于连接host的协议，默认为HTTP。</li><li>path: http服务器上的访问URL</li><li>httpHeaders: 自定义HTTP请求headers，HTTP允许重复headers</li><li>port: 容器上要访问端口号或名称</li></ul></li></ul><h4 id="例三-通过TCP方式做健康探测"><a href="#例三-通过TCP方式做健康探测" class="headerlink" title="例三: 通过TCP方式做健康探测"></a>例三: 通过TCP方式做健康探测</h4><p>Kubelet将尝试在指定的端口上打开容器上的套接字，如果能建立连接，则表明容器健康。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; tcp-liveness-readiness.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: goproxy</span><br><span class="line">  labels:</span><br><span class="line">    app: goproxy</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: goproxy</span><br><span class="line">    image: goproxy/goproxy</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 8080</span><br><span class="line">    readinessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 8080</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 10</span><br><span class="line">    livenessProbe:</span><br><span class="line">      tcpSocket:</span><br><span class="line">        port: 8080</span><br><span class="line">      initialDelaySeconds: 15</span><br><span class="line">      periodSeconds: 20</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TCP检查方式和HTTP检查方式非常相似，示例中两种探针都使用了，在容器启动5秒后，kubelet将发送第一个readinessProbe探针，这将连接到容器的8080端口，如果探测成功，则该Pod将被标识为ready，10秒后，kubelet将进行第二次连接。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除此，配置还包含了livenessProbe探针，在容器启动15秒后，kubelet将发送第一个livenessProbe探针，仍然尝试连接容器的8080端口，如果连接失败则重启容器。</p><ul><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f tcp-liveness-readiness.yaml</span><br><span class="line">pod/goproxy created</span><br></pre></td></tr></table></figure></li><li><p>15秒后，查看Pod事件以验证活动探测</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe pod goproxy</span><br><span class="line">………………</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute <span class="keyword">for</span> 360s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From                    Message</span><br><span class="line">  ----    ------     ----  ----                    -------</span><br><span class="line">  Normal  Scheduled  26s   default-scheduler       Successfully assigned default/goproxy to 172.21.16.231</span><br><span class="line">  Normal  Pulling    22s   kubelet, 172.21.16.231  Pulling image <span class="string">"goproxy/goproxy"</span></span><br></pre></td></tr></table></figure></li></ul><p>当容器有多个端口时，通常会给每个端口命名，所以在使用探针探测时，也可以直接写自定义的端口名称</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ports:</span><br><span class="line">- name: liveness-port</span><br><span class="line">  containerPort: 8080</span><br><span class="line">  hostPort: 8080</span><br><span class="line">livenessProbe:</span><br><span class="line">  httpGet:</span><br><span class="line">    path: /healthz</span><br><span class="line">    port: liveness-port</span><br></pre></td></tr></table></figure><h3 id="ReadinessProbe探针配置"><a href="#ReadinessProbe探针配置" class="headerlink" title="ReadinessProbe探针配置"></a>ReadinessProbe探针配置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadinessProbe探针的使用场景livenessProbe稍有不同，有的时候应用程序可能暂时无法接受请求，比如Pod已经Running了，但是容器内应用程序尚未启动成功，在这种情况下，如果没有ReadinessProbe，则Kubernetes认为它可以处理请求了，然而此时，我们知道程序还没启动成功是不能接收用户请求的，所以不希望kubernetes把请求调度给它，则使用ReadinessProbe探针。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadinessProbe和livenessProbe可以使用相同探测方式，只是对Pod的处置方式不同，ReadinessProbe是将Pod IP:Port从对应的EndPoint列表中删除，而livenessProbe则Kill容器并根据Pod的重启策略来决定作出对应的措施。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;探针探测容器是否已准备就绪，如果未准备就绪则kubernetes不会将流量转发给此Pod。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReadinessProbe探针与livenessProbe一样也支持exec、httpGet、TCP的探测方式，配置方式相同，只不过是将livenessProbe字段修改为ReadinessProbe。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">readinessProbe:</span><br><span class="line">  <span class="built_in">exec</span>:</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">    - cat</span><br><span class="line">    - /tmp/healthy</span><br><span class="line">  initialDelaySeconds: 5</span><br><span class="line">  periodSeconds: 5</span><br></pre></td></tr></table></figure><p>ReadinessProbe探针的HTTP、TCP的探测方式也与livenessProbe的基本一致。</p><h4 id="例四-ReadinessProbe示例"><a href="#例四-ReadinessProbe示例" class="headerlink" title="例四: ReadinessProbe示例"></a>例四: ReadinessProbe示例</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加入ReadinessProbe探针和一个没有ReadinessProbe探针的示例，该示例中，创建了一个deploy，名为JavaApp，启动的容器运行一个java应用程序，程序监听端口为9093。</p><ul><li><p>没有ReadinessProbe</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; k8s.yaml &lt;&lt; EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  labels:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9093</span><br><span class="line">    name: biz-gateway</span><br><span class="line">  selector:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: biz-gateway</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: biz-gateway</span><br><span class="line">        image: docker.io/xxlaila/biz-gateway:dev-08c8a4e</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9093</span><br><span class="line">        env:</span><br><span class="line">        - name: RUN_ENV</span><br><span class="line">          value: dev</span><br><span class="line">        - name: CONFIG_API_SERVER</span><br><span class="line">          value: http://api.conf.xxlaila.cn</span><br><span class="line">        - name: RUN_CLUSTER</span><br><span class="line">          value: default</span><br><span class="line">        - name: RUN_MODE</span><br><span class="line">          value: AUTO</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f k8s.yaml </span><br><span class="line">service/biz-gateway created</span><br><span class="line">deployment.extensions/biz-gateway created</span><br></pre></td></tr></table></figure></li><li><p>刚创建后，等一会后，查看Pod状态，记着要给image留下pull的时间</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods  |grep <span class="string">"biz-gateway"</span></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">biz-gateway-95f6b677f-rnz22   1/1     Running   0          2m8s</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到，整个过程Pod用了2m8s，自身状态已Running，其READ字段，1/1 表示1个容器状态已准备就绪了，此时，对于kubernetes而言，已经可以接收请求了,而实际上服务还无法访问，因为JAVA程序还尚启动起来，2m8ss后方可正常访问，所以针对此类程序，必须配置ReadinessProbe。</p><ul><li>加入readinessProbe<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; k8s.yaml &lt;&lt; EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  labels:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 9093</span><br><span class="line">    name: biz-gateway</span><br><span class="line">  selector:</span><br><span class="line">    app: biz-gateway</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: biz-gateway</span><br><span class="line">  namespace:</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: biz-gateway</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: biz-gateway</span><br><span class="line">        image: docker.io/xxlaila/biz-gateway:dev-08c8a4e</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9093</span><br><span class="line">        readinessProbe:</span><br><span class="line">          tcpSocket:</span><br><span class="line">            port: 9093</span><br><span class="line">          initialDelaySeconds: 140</span><br><span class="line">          periodSeconds: 10</span><br><span class="line">        env:</span><br><span class="line">        - name: RUN_ENV</span><br><span class="line">          value: dev</span><br><span class="line">        - name: CONFIG_API_SERVER</span><br><span class="line">          value: http://api.conf.xxlaila.cn</span><br><span class="line">        - name: RUN_CLUSTER</span><br><span class="line">          value: default</span><br><span class="line">        - name: RUN_MODE</span><br><span class="line">          value: AUTO</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在该配置文件中，ReadinessProbe探针的探测方式为tcpSocket，因为程序监听在9093端口，所以这里探测为对9093建立连接,这里第一次探测时间是在Pod Runing后140秒后，间隔10秒后执行第二次探测。</p><ul><li><p>创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./</span><br><span class="line">service/biz-gateway created</span><br><span class="line">deployment.extensions/biz-gateway created</span><br></pre></td></tr></table></figure></li><li><p>查看验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建后等待了60s</span></span><br><span class="line">$ kubectl get pod -o wide</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE   IP            NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">biz-gateway-f69cc8678-qs8s7   0/1     Running   0          60s   172.30.56.6   172.21.17.40   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续等待一会</span></span><br><span class="line">$ kubectl get pod -o wide</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE     IP            NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">biz-gateway-f69cc8678-qs8s7   1/1     Running   0          2m36s   172.30.56.6   172.21.17.40   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到在2m36秒后，pod启动ok，在第一次查看的时候，Pod虽然已处于Runnig状态，但是由于第一次探测时间未到，所以READY字段为0/1，即容器的状态为未准备就绪，在未准备就绪的情况下，其Pod对应的Service下的Endpoint也为空，所以才不会有任何请求被调度进来。</p><ul><li>查看Endpoint<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一次执行</span></span><br><span class="line">$ kubectl get endpoints</span><br><span class="line">NAME          ENDPOINTS                                                AGE</span><br><span class="line">biz-gateway                                                            57s</span><br><span class="line">kubernetes    172.21.16.110:6443,172.21.17.30:6443,172.21.17.31:6443   13d</span><br><span class="line"></span><br><span class="line">在2m36s后在次执行</span><br><span class="line">$ kubectl get endpoints</span><br><span class="line">NAME          ENDPOINTS                                                AGE</span><br><span class="line">biz-gateway   172.30.56.6:9093                                         2m41s</span><br><span class="line">kubernetes    172.21.16.110:6443,172.21.17.30:6443,172.21.17.31:6443   13d</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置探针-Probe-相关属性"><a href="#配置探针-Probe-相关属性" class="headerlink" title="配置探针(Probe)相关属性"></a>配置探针(Probe)相关属性</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;探针(Probe)有许多可选字段，可以用来更加精确的控制Liveness和Readiness两种探针的行为(Probe)：</p><ul><li>initialDelaySeconds：Pod启动后延迟多久才进行检查，单位：秒</li><li>periodSeconds：检查的间隔时间，默认为10，单位：秒。</li><li>timeoutSeconds：探测的超时时间，默认为1，单位：秒。</li><li>successThreshold：探测失败后认为成功的最小连接成功次数，默认为1，在Liveness探针中必须为1，最小值为1。</li><li>failureThreshold：探测失败的重试次数，重试一定次数后将认为失败，在readiness探针中，Pod会被标记为未就绪，默认为3，最小值为1。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>之前错误参考排查介绍</strong>: 在之前安装jenkins的时候，创建pod就一值处于<code>running</code>,但是过一会，界面就报错，错误如下图<br><img src="https://img.xxlaila.cn/15008WechatIMG.png" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后查看pod日志和系统系统，都没有任何问题，pod日志如下，然后就问了朋友，就说有可能是pod的健康检测机制，最后就修改了pod的健康检测机制，jenkins服务器部署ok。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">log</span> $(kubectl get pods -n kube-ops | awk <span class="string">'&#123;print $1&#125;'</span> | grep jenkins) -n kube-ops</span><br><span class="line"><span class="built_in">log</span> is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use logs instead.</span><br><span class="line">VM settings:</span><br><span class="line">    Max. Heap Size: 3.00G</span><br><span class="line">    Ergonomics Machine Class: server</span><br><span class="line">    Using VM: OpenJDK 64-Bit Server VM</span><br><span class="line"></span><br><span class="line">Running from: /usr/share/jenkins/jenkins.war</span><br><span class="line">webroot: EnvVars.masterEnvVars.get(<span class="string">"JENKINS_HOME"</span>)</span><br><span class="line">2019-09-27 03:02:24.133+0000 [id=1] INFO org.eclipse.jetty.util.log.Log<span class="comment">#initialized: Logging initialized @429ms to org.eclipse.jetty.util.log.JavaUtilLog</span></span><br><span class="line">2019-09-27 03:02:24.247+0000 [id=1] INFO winstone.Logger<span class="comment">#logInternal: Beginning extraction from war file</span></span><br></pre></td></tr></table></figure><p><strong>后续</strong>: 虽然健康检测可以取消，不加入，但是当我们在上生产环境的时候还是要加上，正如例四介绍的那样。如果我们在生产环境错故障自愈、轮询发布等。都需要这个东西，加入再升级的时候，服务器都还没起来，k8s就吧流量给调度过来，升级下一个pod，外部用户访问就会报错，那就是很尴尬</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>pod</tag>
      </tags>
  </entry>
  <entry>
    <title>EFK</title>
    <url>/2019/09/25/EFK/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="初始化配置文件准备"><a href="#初始化配置文件准备" class="headerlink" title="初始化配置文件准备"></a>初始化配置文件准备</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将下载的 kubernetes-server-linux-amd64.tar.gz 解压后，再解压其中的 kubernetes-src.tar.gz 文件。<code>kubernetes/cluster/addons/fluentd-elasticsearch</code>这是文件所在的路径</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;es 数据默认的存储在docker里面，在用的是node节点的空间，而node节点我们不可能都准备很大的空间，那样很浪费资源，所以这里我们需要准备外部的nfs存储空间，然后通过<a href="https://xxlaila.github.io/2019/09/24/%E5%88%A9%E7%94%A8NFS%E5%8A%A8%E6%80%81%E6%8F%90%E4%BE%9BKubernetes%E5%90%8E%E7%AB%AF%E5%AD%98%E5%82%A8%E5%8D%B7/" target="_blank" rel="noopener">pv</a>的模式进行挂载，数据存储到nfs服务器上，这样保障了es收集数据的可用性。</p><a id="more"></a><h3 id="创建存储介质"><a href="#创建存储介质" class="headerlink" title="创建存储介质"></a>创建存储介质</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; pvc.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: es-nfs-data</span><br><span class="line">provisioner: fuseim.pri/ifs</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f pvc.yaml</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li><p>es-statefulset.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RBAC authn and authz</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - <span class="string">"services"</span></span><br><span class="line">  - <span class="string">"namespaces"</span></span><br><span class="line">  - <span class="string">"endpoints"</span></span><br><span class="line">  verbs:</span><br><span class="line">  - <span class="string">"get"</span></span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># Elasticsearch deployment itself</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    version: v6.6.1</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  serviceName: elasticsearch-logging</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: elasticsearch-logging</span><br><span class="line">      version: v6.6.1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: elasticsearch-logging</span><br><span class="line">        version: v6.6.1</span><br><span class="line">        kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: elasticsearch-logging</span><br><span class="line">      containers:</span><br><span class="line">      - image: elasticsearch:6.6.1</span><br><span class="line">        name: elasticsearch-logging</span><br><span class="line">        resources:</span><br><span class="line">          <span class="comment"># need more cpu upon initialization, therefore burstable class</span></span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9200</span><br><span class="line">          name: db</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 9300</span><br><span class="line">          name: transport</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: elasticsearch-logging</span><br><span class="line">          mountPath: /data</span><br><span class="line">        env:</span><br><span class="line">        - name: <span class="string">"NAMESPACE"</span></span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">      <span class="comment"># Elasticsearch requires vm.max_map_count to be at least 262144.</span></span><br><span class="line">      <span class="comment"># If your OS already sets up this number to a higher value, feel free</span></span><br><span class="line">      <span class="comment"># to remove this init container.</span></span><br><span class="line">      initContainers:</span><br><span class="line">      - image: alpine:3.6</span><br><span class="line">        <span class="built_in">command</span>: [<span class="string">"/sbin/sysctl"</span>, <span class="string">"-w"</span>, <span class="string">"vm.max_map_count=262144"</span>]</span><br><span class="line">        name: elasticsearch-logging-init</span><br><span class="line">        securityContext:</span><br><span class="line">          privileged: <span class="literal">true</span></span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: elasticsearch-logging</span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [ <span class="string">"ReadWriteMany"</span> ]</span><br><span class="line">      storageClassName: <span class="string">"es-nfs-data"</span></span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 30Gi</span><br></pre></td></tr></table></figure></li><li><p>fluentd-es-ds.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - <span class="string">"namespaces"</span></span><br><span class="line">  - <span class="string">"pods"</span></span><br><span class="line">  verbs:</span><br><span class="line">  - <span class="string">"get"</span></span><br><span class="line">  - <span class="string">"watch"</span></span><br><span class="line">  - <span class="string">"list"</span></span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: fluentd-es</span><br><span class="line">  apiGroup: <span class="string">""</span></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es-v2.4.0</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    version: v2.4.0</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: fluentd-es</span><br><span class="line">      version: v2.4.0</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: fluentd-es</span><br><span class="line">        kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">        version: v2.4.0</span><br><span class="line">      <span class="comment"># This annotation ensures that fluentd does not get evicted if the node</span></span><br><span class="line">      <span class="comment"># supports critical pod annotation based priority scheme.</span></span><br><span class="line">      <span class="comment"># Note that this does not guarantee admission on the nodes (#40573).</span></span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">        seccomp.security.alpha.kubernetes.io/pod: <span class="string">'docker/default'</span></span><br><span class="line">    spec:</span><br><span class="line">      priorityClassName: system-node-critical</span><br><span class="line">      serviceAccountName: fluentd-es</span><br><span class="line">      containers:</span><br><span class="line">      - name: fluentd-es</span><br><span class="line">        image: docker.io/xxlaila/fluentd-elasticsearch:v2.4.0</span><br><span class="line">        env:</span><br><span class="line">        - name: FLUENTD_ARGS</span><br><span class="line">          value: --no-supervisor -q</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            memory: 500Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 200Mi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: varlog</span><br><span class="line">          mountPath: /var/<span class="built_in">log</span></span><br><span class="line">        - name: varlibdockercontainers</span><br><span class="line">          mountPath: /var/lib/docker/containers</span><br><span class="line">          readOnly: <span class="literal">true</span></span><br><span class="line">        - name: config-volume</span><br><span class="line">          mountPath: /etc/fluent/config.d</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">      - name: varlog</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/<span class="built_in">log</span></span><br><span class="line">      - name: varlibdockercontainers</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/lib/docker/containers</span><br><span class="line">      - name: config-volume</span><br><span class="line">        configMap:</span><br><span class="line">          name: fluentd-es-config-v0.2.0</span><br></pre></td></tr></table></figure></li><li><p>kibana-deployment.yaml<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注释里面的两行配置,不注释的话，打开kibana的时候会提示<code>kibana {&quot;statusCode&quot;:404,&quot;error&quot;:&quot;Not Found&quot;,&quot;message&quot;:&quot;Not Found&quot;}</code>,参考<a href="https://github.com/kubernetes-sigs/kubespray/issues/3322" target="_blank" rel="noopener">解决方案</a>,注释配置如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: SERVER_BASEPATH</span><br><span class="line">  value: /api/v1/namespaces/kube-system/services/kibana-logging/proxy</span><br></pre></td></tr></table></figure></li></ul><h4 id="执行创建"><a href="#执行创建" class="headerlink" title="执行创建"></a>执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f ./</span><br></pre></td></tr></table></figure><h4 id="查看创建"><a href="#查看创建" class="headerlink" title="查看创建"></a>查看创建</h4><ul><li><p>查看pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -n kube-system |egrep <span class="string">"kibana|elasticsearch|fluentd"</span></span><br><span class="line">elasticsearch-logging-0                       1/1     Running   0          65m</span><br><span class="line">elasticsearch-logging-1                       1/1     Running   0          61m</span><br><span class="line">fluentd-es-v2.4.0-4fp28                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-b7k67                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-f8jzp                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-shwzm                       1/1     Running   0          30m</span><br><span class="line">fluentd-es-v2.4.0-ww8r8                       1/1     Running   0          30m</span><br><span class="line">kibana-logging-57b55f58bc-xh5lp               1/1     Running   0          6m35s</span><br></pre></td></tr></table></figure></li><li><p>查看service</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc -n kube-system |egrep <span class="string">"kibana|elasticsearch"</span></span><br><span class="line">elasticsearch-logging     ClusterIP   10.254.30.110    &lt;none&gt;        9200/TCP                 9s</span><br><span class="line">kibana-logging            ClusterIP   10.254.188.5     &lt;none&gt;        5601/TCP                 16h</span><br></pre></td></tr></table></figure></li><li><p>查看pv，pvc</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  kubectl get pv,pvc -n kube-system</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                                       STORAGECLASS   REASON   AGE</span><br><span class="line">persistentvolume/pvc-65fdd14e-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            Delete           Bound    kube-system/elasticsearch-logging-elasticsearch-logging-0   es-nfs-data             21m</span><br><span class="line">persistentvolume/pvc-fe818f55-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            Delete           Bound    kube-system/elasticsearch-logging-elasticsearch-logging-1   es-nfs-data             16m</span><br><span class="line"></span><br><span class="line">NAME                                                                  STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">persistentvolumeclaim/elasticsearch-logging-elasticsearch-logging-0   Bound    pvc-65fdd14e-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            es-nfs-data    21m</span><br><span class="line">persistentvolumeclaim/elasticsearch-logging-elasticsearch-logging-1   Bound    pvc-fe818f55-dffc-11e9-bc90-fa163e5af833   30Gi       RWX            es-nfs-data    17m</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建web访问"><a href="#创建web访问" class="headerlink" title="创建web访问"></a>创建web访问</h3><ul><li><p>kibana-Ingress.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; kibana-Ingress.yaml &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: kibana-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: kibana.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: kibana-logging</span><br><span class="line">          servicePort: 5601</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>es-Ingress.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; es-Ingress &lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: es-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: es.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: elasticsearch-logging</span><br><span class="line">          servicePort: 9200</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f es-Ingress.yaml kibana-Ingress.yaml</span><br></pre></td></tr></table></figure></li><li><p>在浏览器访问es<br><img src="https://img.xxlaila.cn/1569462606884.jpg" alt="img"></p></li><li><p>浏览器访问kibana<br><img src="https://img.xxlaila.cn/1569464839630.jpg" alt="img"><br>建立索引，默认的索引是根据天来自动创建在es里面，这里我是在kibana里面是根据月来却分的<br><img src="https://img.xxlaila.cn/1569464950776.jpg" alt="img"></p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>efk</tag>
      </tags>
  </entry>
  <entry>
    <title>网络状态监控</title>
    <url>/2019/09/25/%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;监控IDC机房网络质量情况，本地区到其他地区，其他地区到本节点，或者各省市时间网络、运营商网络状态，监视网络性能，包括常规的 ping，用 fping、echoping、tracert 监视 www 服务器性能，监视 dns 查询性能，监视 ssh 性能等。底层也是 rrdtool 做支持，特点是画的图非常漂亮，网络丢包和延迟用颜色和阴影来表示。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Smokeping。最新版本的 Smokeping 支持多个节点的检测结果从一个图上画出来</p><a id="more"></a><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装yum源"><a href="#安装yum源" class="headerlink" title="安装yum源"></a>安装yum源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm               </span></span><br><span class="line"><span class="comment"># rpm –Uvh http://mirrors.neusoft.edu.cn/epel/6/i386/epel-release-6-8.noarch.rpm</span></span><br></pre></td></tr></table></figure><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum –y install perl perl-Net-Telnet perl-Net-DNS perl-LDAP perl-libwww-perl perl-RadiusPerl perl-IO-Socket-SSL perl-Socket6 perl-CGI-SpeedyCGI perl-FCGI perl-CGI-SpeedCGI perl-Time-HiRes perl-ExtUtils-MakeMaker perl-RRD-Simple rrdtool rrdtool-perl curl fping echo</span></span><br><span class="line">ping  httpd httpd-devel gcc make  wget libxml2-devel libpng-devel glib pango pango-devel freetype freetype-devel fontconfig cairo cairo-devel libart_lgpl libart_lgpl-devel mod_fastcgi</span><br></pre></td></tr></table></figure><h3 id="安装smokeping"><a href="#安装smokeping" class="headerlink" title="安装smokeping"></a>安装smokeping</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget http://oss.oetiker.ch/smokeping/pub/smokeping-2.6.11.tar.gz 这里下载的最新版</span></span><br></pre></td></tr></table></figure><h4 id="安装FCGI"><a href="#安装FCGI" class="headerlink" title="安装FCGI"></a>安装FCGI</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf CGI-4.33.tar.gz</span></span><br><span class="line"><span class="comment"># cd CGI-4.33</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装Config-Grammar"><a href="#安装Config-Grammar" class="headerlink" title="安装Config-Grammar"></a>安装Config-Grammar</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf Config-Grammar-1.10.tar.gz</span></span><br><span class="line"><span class="comment"># cd Config-Grammar-1.10</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装ExtUtils-MakeMaker"><a href="#安装ExtUtils-MakeMaker" class="headerlink" title="安装ExtUtils-MakeMaker"></a>安装ExtUtils-MakeMaker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf ExtUtils-MakeMaker-7.24.tar.gz</span></span><br><span class="line"><span class="comment"># cd ExtUtils-MakeMaker</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装Simple"><a href="#安装Simple" class="headerlink" title="安装Simple"></a>安装Simple</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf Test-Simple-1.302056.tar.gz</span></span><br><span class="line"><span class="comment"># cd Test-Simple-1.302056</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><h4 id="安装Net-OpenSSH"><a href="#安装Net-OpenSSH" class="headerlink" title="安装Net-OpenSSH"></a>安装Net-OpenSSH</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf Net-OpenSSH-0.73.tar.gz</span></span><br><span class="line"><span class="comment"># cd Net-OpenSSH-0.73</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装Net-SNMP"><a href="#安装Net-SNMP" class="headerlink" title="安装Net-SNMP"></a>安装Net-SNMP</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar Net-SNMP-v6.0.1.tar.gz</span></span><br><span class="line"><span class="comment"># cd Net-SNMP-v6.0.1</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装perl-ldap"><a href="#安装perl-ldap" class="headerlink" title="安装perl-ldap"></a>安装perl-ldap</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf perl-ldap-0.65.tar.gz</span></span><br><span class="line"><span class="comment"># cd perl-ldap-0.65</span></span><br><span class="line"><span class="comment"># ./install-nomake</span></span><br></pre></td></tr></table></figure><h4 id="安装Net-DNS"><a href="#安装Net-DNS" class="headerlink" title="安装Net-DNS"></a>安装Net-DNS</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf Net-DNS-1.06.tar.gz</span></span><br><span class="line"><span class="comment"># cd Net-DNS-1.06</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装IO-Tty"><a href="#安装IO-Tty" class="headerlink" title="安装IO-Tty"></a>安装IO-Tty</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar IO-Tty-1.12.tar.gz</span></span><br><span class="line"><span class="comment"># cd IO-Tty-1.12</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装libwww-perl"><a href="#安装libwww-perl" class="headerlink" title="安装libwww-perl"></a>安装libwww-perl</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf libwww-perl-6.15.tar.gz</span></span><br><span class="line"><span class="comment"># cd libwww-perl-6.15</span></span><br><span class="line"><span class="comment"># perl Makefile.PL</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h4 id="安装smokeping-1"><a href="#安装smokeping-1" class="headerlink" title="安装smokeping"></a>安装smokeping</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf smokeping-2.6.11.tar.gz</span></span><br><span class="line"><span class="comment"># cd smokeping-2.6.11</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/usr/local/smokeping</span></span><br><span class="line"><span class="comment"># /usr/bin/gmake install</span></span><br></pre></td></tr></table></figure><p>上面是手动安装，针对网络不能翻墙。也可以采取smokeping一键安装的方式进行安装</p><h3 id="smokeping一键安装"><a href="#smokeping一键安装" class="headerlink" title="smokeping一键安装"></a>smokeping一键安装</h3><h4 id="安装smokeping-2"><a href="#安装smokeping-2" class="headerlink" title="安装smokeping"></a>安装smokeping</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxf smokeping-2.6.11.tar.gz</span></span><br><span class="line"><span class="comment"># cd smokeping-2.6.11</span></span><br><span class="line"><span class="comment"># ./setup/build-perl-modules.sh /usr/local/smokeping/thirdparty</span></span><br><span class="line"><span class="comment"># ./configure --prefix=/usr/local/smokeping</span></span><br><span class="line"><span class="comment"># /usr/bin/gmake install</span></span><br></pre></td></tr></table></figure><h3 id="配置smkeping"><a href="#配置smkeping" class="headerlink" title="配置smkeping"></a>配置smkeping</h3><h4 id="创建cache、data、var目录"><a href="#创建cache、data、var目录" class="headerlink" title="创建cache、data、var目录"></a>创建cache、data、var目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /usr/local/smokeping/</span></span><br><span class="line"><span class="comment"># mkdir &#123;cache,data,var&#125;</span></span><br></pre></td></tr></table></figure><h4 id="创建日志文件"><a href="#创建日志文件" class="headerlink" title="创建日志文件"></a>创建日志文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># touch /var/log/smokeping.log</span></span><br></pre></td></tr></table></figure><h4 id="赋权限"><a href="#赋权限" class="headerlink" title="赋权限"></a>赋权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chown apache:apache cache/ data/ var/</span></span><br><span class="line"><span class="comment"># chown  apache:apache /var/log/smokeping.log</span></span><br><span class="line"><span class="comment"># chmod 755 cache/ data/ var/    #这里也要赋权限，会影响图片无法加载</span></span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/smokeping/htdocs</span></span><br><span class="line"><span class="comment"># cp -arp smokeping.fcgi.dist smokeping.fcgi</span></span><br><span class="line"><span class="comment"># cd ../etc/</span></span><br><span class="line"><span class="comment"># cp -arp config.dist config</span></span><br><span class="line"><span class="comment"># chmod 600 /usr/local/smokeping/etc/smokeping_secrets.dist</span></span><br><span class="line"><span class="comment"># vim config</span></span><br><span class="line">*** General ***</span><br><span class="line">owner    = Peter Random</span><br><span class="line">contact  = some@address.nowhere</span><br><span class="line">mailhost = my.mail.host</span><br><span class="line">sendmail = /usr/sbin/sendmail</span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> do not put the Image Cache below cgi-bin</span></span><br><span class="line"><span class="comment"># since all files under cgi-bin will be executed ... this is not</span></span><br><span class="line"><span class="comment"># good for images.</span></span><br><span class="line">imgcache = /usr/<span class="built_in">local</span>/smokeping/cache</span><br><span class="line">imgurl   = http://172.16.1.100/cache                                                      <span class="comment">#这里如果不配置正确，会影响后面出图，这里一个坑</span></span><br><span class="line">datadir  = /usr/<span class="built_in">local</span>/smokeping/data</span><br><span class="line">piddir  = /usr/<span class="built_in">local</span>/smokeping/var</span><br><span class="line">cgiurl   = http://172.16.1.100/smokeping/smokeping.cgi</span><br><span class="line"><span class="comment">#cgiurl   = http://some.url/smokeping.cgi</span></span><br><span class="line">smokemail = /usr/<span class="built_in">local</span>/smokeping/etc/smokemail.dist</span><br><span class="line">tmail = /usr/<span class="built_in">local</span>/smokeping/etc/tmail.dist</span><br><span class="line"><span class="comment"># specify this to get syslog logging</span></span><br><span class="line">syslogfacility = local0</span><br><span class="line"><span class="comment"># each probe is now run in its own process</span></span><br><span class="line"><span class="comment"># disable this to revert to the old behaviour</span></span><br><span class="line"><span class="comment"># concurrentprobes = no</span></span><br><span class="line">*** Alerts ***</span><br><span class="line">to = alertee@address.somewhere</span><br><span class="line">from = smokealert@company.xy</span><br><span class="line">+someloss</span><br><span class="line"><span class="built_in">type</span> = loss</span><br><span class="line"><span class="comment"># in percent</span></span><br><span class="line">pattern = &gt;0%,*12*,&gt;0%,*12*,&gt;0%</span><br><span class="line">comment = loss 3 <span class="built_in">times</span>  <span class="keyword">in</span> a row</span><br><span class="line">*** Database ***</span><br><span class="line">step     = 60                                              <span class="comment">#检测时间，默认300</span></span><br><span class="line">pings    = 20</span><br></pre></td></tr></table></figure><p>配置文件上述修改带有注视部分，其他参数参考官方，而且都能看懂。后面有很多配置不全部贴出来</p><h3 id="配置apache"><a href="#配置apache" class="headerlink" title="配置apache"></a>配置apache</h3><h4 id="配置httpd-conf"><a href="#配置httpd-conf" class="headerlink" title="配置httpd.conf"></a>配置httpd.conf</h4><p>在DocumentRoot “/var/www/html”这行增加如下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">Alias /cache <span class="string">"/usr/local/smokeping/cache"</span></span><br><span class="line">Alias /cropper <span class="string">"/usr/local/smokeping/htdocs/cropper"</span></span><br><span class="line">Alias /smokeping <span class="string">"/usr/local/smokeping/htdocs/smokeping.fcgi"</span></span><br><span class="line">&lt;Directory <span class="string">"/usr/local/smokeping"</span>&gt;</span><br><span class="line">        AllowOverride None</span><br><span class="line">        Options All</span><br><span class="line">        AddHandler cgi-script .fcgi .cgi</span><br><span class="line">        Order allow,deny</span><br><span class="line">        Allow from all</span><br><span class="line">        AuthName <span class="string">"Smokeping"</span></span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthUserFile /usr/<span class="built_in">local</span>/smokeping/htdocs/htpasswd</span><br><span class="line">        Require valid-user</span><br><span class="line">        DirectoryIndex smokeping.fcgi</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h4 id="apache登录认证"><a href="#apache登录认证" class="headerlink" title="apache登录认证"></a>apache登录认证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/smokeping/htdocs</span></span><br><span class="line"><span class="comment"># htpasswd -c /usr/local/smokeping/htdocs/htpasswd admin                   #回车设置admin账户的密码</span></span><br></pre></td></tr></table></figure><h4 id="安装网页支持的中文字体"><a href="#安装网页支持的中文字体" class="headerlink" title="安装网页支持的中文字体"></a>安装网页支持的中文字体</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install wqy-zenhei-fonts.noarch</span></span><br></pre></td></tr></table></figure><h4 id="smokeping开机脚本"><a href="#smokeping开机脚本" class="headerlink" title="smokeping开机脚本"></a>smokeping开机脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/init.d/smokeping</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PIDFILE=/usr/<span class="built_in">local</span>/smokeping/var/smokeping.pid</span><br><span class="line">SMOKEPING=/usr/<span class="built_in">local</span>/smokeping/bin/smokeping</span><br><span class="line">ERROR=0</span><br><span class="line">RUNNING=0</span><br><span class="line">ARGV=<span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$ARGV</span>"</span> = <span class="string">"x"</span> ] ; <span class="keyword">then</span></span><br><span class="line">ARGS=<span class="built_in">help</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">for</span> ARG <span class="keyword">in</span> <span class="variable">$@</span> <span class="variable">$ARGS</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ] ; <span class="keyword">then</span></span><br><span class="line">PID=`cat <span class="variable">$PIDFILE</span>`</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">kill</span> -0 <span class="variable">$PID</span> 2&gt;/dev/null ; <span class="keyword">then</span></span><br><span class="line"><span class="comment"># smokeping is running</span></span><br><span class="line">RUNNING=1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># smokeping not running but PID file exists =&gt; delete PID file</span></span><br><span class="line">rm -f <span class="variable">$PIDFILE</span></span><br><span class="line">RUNNING=0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># smokeping (no pid file) not running</span></span><br><span class="line">RUNNING=0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$ARG</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 0 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$SMOKEPING</span> &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping started"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping could not be started"</span></span><br><span class="line">ERROR=1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping is running with PID <span class="variable">$PID</span>"</span></span><br><span class="line">ERROR=2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">kill</span> <span class="variable">$PID</span> ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping (<span class="variable">$PID</span>) stopped"</span></span><br><span class="line">rm <span class="variable">$PIDFILE</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping could not be stopped"</span></span><br><span class="line">ERROR=3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping not running"</span></span><br><span class="line">ERROR=4</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$SMOKEPING</span> --restart &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping restarted"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping could not be started"</span></span><br><span class="line">ERROR=5</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="variable">$0</span> start</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">strace_debug)</span><br><span class="line">rm -f /tmp/strace_smokeping</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> strace -o/tmp/strace_smokeping <span class="variable">$SMOKEPING</span> --restart &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping restarted with strace debug in /tmp/strace_smokeping"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping strace debug could not be started"</span></span><br><span class="line">ERROR=6</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> strace -o/tmp/strace_smokeping <span class="variable">$SMOKEPING</span> &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping started with strace debug in /tmp/strace_smokeping"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping strace debug could not be started"</span></span><br><span class="line">ERROR=7</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">status)</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$RUNNING</span> -eq 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping is running with PID (<span class="variable">$PID</span>)"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span> <span class="variable">$ARG</span>: smokeping is not running"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"usage: <span class="variable">$0</span> (start|stop|restart|status|strace_debug|help)"</span></span><br><span class="line">cat</span><br><span class="line">start - start smokeping</span><br><span class="line">stop - stop smokeping</span><br><span class="line">restart - restart smokeping <span class="keyword">if</span> running or start <span class="keyword">if</span> not running</span><br><span class="line">status - show status <span class="keyword">if</span> smokeping is running or not</span><br><span class="line"><span class="built_in">help</span> - this screen</span><br><span class="line">EOF</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$ERROR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod +x /etc/init.d/smokeping</span></span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># service httpd start</span></span><br><span class="line"><span class="comment"># /etc/init.d/smokeping start</span></span><br></pre></td></tr></table></figure><p>打开浏览器测试http://{ip}/smokeping 会提示输入用户和密码<br><img src="https://img.xxlaila.cn/74D2C8DE-129F-4219-87C5-D6A771D19484.png" alt="img"><br><img src="https://img.xxlaila.cn/91D9FA70-65B1-4752-8F15-68A158E72A49.png" alt="img"></p><h4 id="配置文件添加"><a href="#配置文件添加" class="headerlink" title="配置文件添加"></a>配置文件添加</h4><p>配置文件添介绍，在配置文件里面+表示一级++表示二级+++三级<br>本次添加的内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+ Other</span><br><span class="line">menu = 其他网络监控</span><br><span class="line">title = 其他所有网络监控列表</span><br><span class="line">++ dianxin</span><br><span class="line">menu = 电信网络监控</span><br><span class="line">title = 电信网络监控列表</span><br><span class="line">host = /Other/dianxin/dianxin-hlj /Other/dianxin/dianxin-gd /Other/dianxin/dianxin-gs /Other/dianxin/dianxin-sh /Other/dianxin/dianxin-sc /Other/dianxin/dianxin-cq /Other/dianxin/dianxin-gz /Other/dianxin/dianxin-ln /Other/dianxin/dianxin-zj /Other/dianxin/dianxin-sd /Other/dianxin/dianxin-hib /Other/dianxin/dianxin-ah /Other/dianxin/dianxin-hb /Other/dianxin/dianxin-jl /Other/dianxin/dianxin-jx</span><br><span class="line">+++ dianxin-hlj</span><br><span class="line">menu = 黑龙江电信</span><br><span class="line">title = 黑龙江电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 219.150.32.132</span><br><span class="line">+++ dianxin-gd</span><br><span class="line">menu = 广东电信</span><br><span class="line">title = 广东电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.96.134.133</span><br><span class="line">+++ dianxin-gs</span><br><span class="line">menu = 甘肃电信</span><br><span class="line">title = 甘肃电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.100.64.68</span><br><span class="line">+++ dianxin-sh</span><br><span class="line">menu = 上海电信</span><br><span class="line">title = 上海电信</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.96.209.5</span><br><span class="line">+++ dianxin-sc</span><br><span class="line">menu = 四川电信</span><br><span class="line">title = 四川电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.6.145.111</span><br><span class="line">+++ dianxin-cq</span><br><span class="line">menu = 重庆电信</span><br><span class="line">title = 重庆电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 61.128.128.68</span><br><span class="line">+++ dianxin-gz</span><br><span class="line">menu = 贵州电信</span><br><span class="line">title = 贵州电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.98.192.68</span><br><span class="line">+++ dianxin-ln</span><br><span class="line">menu = 辽宁电信</span><br><span class="line">title = 辽宁电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 219.149.6.99</span><br><span class="line">+++ dianxin-zj</span><br><span class="line">menu = 浙江电信</span><br><span class="line">title = 浙江电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.96.96.68</span><br><span class="line">+++ dianxin-sd</span><br><span class="line">menu = 山东电信</span><br><span class="line">title = 山东电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 222.173.95.53</span><br><span class="line">+++ dianxin-hib</span><br><span class="line">menu = 湖北电信</span><br><span class="line">title = 湖北电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.103.0.68</span><br><span class="line">+++ dianxin-ah</span><br><span class="line">menu = 安徽电信</span><br><span class="line">title = 安徽电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 220.178.75.134</span><br><span class="line">+++ dianxin-hb</span><br><span class="line">menu = 河北电信</span><br><span class="line">title = 河北电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.99.160.68</span><br><span class="line">+++ dianxin-jl</span><br><span class="line">menu = 吉林电信</span><br><span class="line">title = 吉林电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host =  219.149.194.55</span><br><span class="line">+++ dianxin-jx</span><br><span class="line">menu = 江西电信</span><br><span class="line">title = 江西电信</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.101.224.68</span><br><span class="line"><span class="comment">#+++ dianxin-multi</span></span><br><span class="line"><span class="comment">#menu = 多个电信网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个电信网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/dianxin/dianxin-hlj /Other/dianxin/dianxin-gd /Other/dianxin/dianxin-gs /Other/dianxin/dianxin-sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">++ liantong</span><br><span class="line">menu = 联通网络监控</span><br><span class="line">title = 联通网络监控列表</span><br><span class="line">host = /Other/liantong/liantong-hlj /Other/liantong/liantong-gd /Other/liantong/liantong-gs /Other/liantong/liantong-sh /Other/liantong/liantong-sc /Other/liantong/liantong-cq /Other/liantong/liantong-gz /Other/liantong/liantong-ln /Other/liantong/liantong-zj /Other/liantong/liantong-sd /Other/liantong/liantong-hib /Other/liantong/liantong-ah /Other/liantong/liantong-hb /Other/liantong/liantong-jl /Other/liantong/liantong-jx</span><br><span class="line">+++ liantong-hlj</span><br><span class="line">menu = 黑龙江联通</span><br><span class="line">title = 黑龙江联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.97.224.68</span><br><span class="line">+++ liantong-gd</span><br><span class="line">menu = 广东联通</span><br><span class="line">title = 广东联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 221.4.66.66</span><br><span class="line">+++ liantong-gs</span><br><span class="line">menu = 甘肃联通</span><br><span class="line">title = 甘肃联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 221.7.34.10</span><br><span class="line">+++ liantong-sh</span><br><span class="line">menu = 上海联通</span><br><span class="line">title = 上海联通</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 210.22.70.3</span><br><span class="line">+++ liantong-sc</span><br><span class="line">menu = 四川联通</span><br><span class="line">title = 四川联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 119.6.6.6</span><br><span class="line">+++ liantong-cq</span><br><span class="line">menu = 重庆联通</span><br><span class="line">title = 重庆联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 221.7.92.98</span><br><span class="line">+++ liantong-gz</span><br><span class="line">menu = 贵州联通</span><br><span class="line">title = 贵州联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 221.13.30.242</span><br><span class="line">+++ liantong-ln</span><br><span class="line">menu = 辽宁联通</span><br><span class="line">title = 辽宁联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 124.161.97.234</span><br><span class="line">+++ liantong-zj</span><br><span class="line">menu = 浙江联通</span><br><span class="line">title = 浙江联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 221.12.33.227</span><br><span class="line">+++ liantong-sd</span><br><span class="line">menu = 山东联通</span><br><span class="line">title = 山东联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.102.152.3</span><br><span class="line">+++ liantong-hib</span><br><span class="line">menu = 湖北联通</span><br><span class="line">title = 湖北联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.104.111.114</span><br><span class="line">+++ liantong-ah</span><br><span class="line">menu = 安徽联通</span><br><span class="line">title = 安徽联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.91.88.129</span><br><span class="line">+++ liantong-hb</span><br><span class="line">menu = 河北联通</span><br><span class="line">title = 河北联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.99.160.68</span><br><span class="line">+++ liantong-jl</span><br><span class="line">menu = 吉林联通</span><br><span class="line">title = 吉林联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 202.98.5.6</span><br><span class="line">+++ liantong-jx</span><br><span class="line">menu = 江西联通</span><br><span class="line">title = 江西联通</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 220.248.192.12</span><br><span class="line"><span class="comment">#+++ liantong-multi</span></span><br><span class="line"><span class="comment">#menu = 多个联通网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个联通网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/liantong/liantong-hlj /Other/liantong/liantong-gd /Other/liantong/liantong-gs /Other/liantong/liantong-sh</span></span><br><span class="line">++ yidong</span><br><span class="line">menu = 移动网络监控</span><br><span class="line">title = 移动网络监控列表</span><br><span class="line">host = /Other/yidong/yidong-hlj /Other/yidong/yidong-gd /Other/yidong/yidong-gs /Other/yidong/yidong-sh /Other/yidong/yidong-sc /Other/yidong/yidong-cq /Other/yidong/yidong-gz /Other/yidong/yidong-ln /Other/yidong/yidong-zj /Other/yidong/yidong-sd /Other/yidong/yidong-hib /Other/yidong/yidong-ah /Other/yidong/yidong-hb</span><br><span class="line">+++ yidong-hlj</span><br><span class="line">menu = 黑龙江移动</span><br><span class="line">title = 黑龙江移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 211.137.241.34</span><br><span class="line">+++ yidong-gd</span><br><span class="line">menu = 广东移动</span><br><span class="line">title = 广东移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 211.137.241.34</span><br><span class="line">+++ yidong-gs</span><br><span class="line">menu = 甘肃移动</span><br><span class="line">title = 甘肃移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 218.203.160.194</span><br><span class="line">+++ yidong-sh</span><br><span class="line">menu = 上海移动</span><br><span class="line">title = 上海移动</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 117.131.0.22</span><br><span class="line">+++ yidong-sc</span><br><span class="line">menu = 四川移动</span><br><span class="line">title = 四川移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.137.96.205</span><br><span class="line">+++ yidong-cq</span><br><span class="line">menu = 重庆移动</span><br><span class="line">title = 重庆移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.201.4.3</span><br><span class="line">+++ yidong-gz</span><br><span class="line">menu = 贵州移动</span><br><span class="line">title = 贵州移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.139.1.3</span><br><span class="line">+++ yidong-ln</span><br><span class="line">menu = 辽宁移动</span><br><span class="line">title = 辽宁移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 218.59.181.182</span><br><span class="line">+++ yidong-zj</span><br><span class="line">menu = 浙江移动</span><br><span class="line">title = 浙江移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.140.10.2</span><br><span class="line">+++ yidong-sd</span><br><span class="line">menu = 山东移动</span><br><span class="line">title = 山东移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.137.191.26</span><br><span class="line">+++ yidong-hib</span><br><span class="line">menu = 湖北移动</span><br><span class="line">title = 湖北移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.137.76.68</span><br><span class="line">+++ yidong-ah</span><br><span class="line">menu = 安徽移动</span><br><span class="line">title = 安徽移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.138.180.2</span><br><span class="line">+++ yidong-hb</span><br><span class="line">menu = 河北移动</span><br><span class="line">title = 河北移动</span><br><span class="line">alerts = someloss</span><br><span class="line">host = 211.98.2.4</span><br><span class="line"><span class="comment">#+++ yidong-multi</span></span><br><span class="line"><span class="comment">#menu = 多个移动网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个移动网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/yidong/yidong-hlj /Other/yidong/yidong-gd /Other/yidong/yidong-gs /Other/yidong/yidong-sh</span></span><br><span class="line">++ jiaoyu</span><br><span class="line">menu = 教育网络监控</span><br><span class="line">title = 教育网络监控列表</span><br><span class="line">host = /Other/jiaoyu/jiaoyu-qh /Other/jiaoyu/jiaoyu-sh /Other/jiaoyu/jiaoyu-wh /Other/jiaoyu/jiaoyu-hn</span><br><span class="line">+++ jiaoyu-qh</span><br><span class="line">menu = 清华大学</span><br><span class="line">title = 清华大学</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 166.111.8.28</span><br><span class="line">+++ jiaoyu-sh</span><br><span class="line">menu = 上海交大</span><br><span class="line">title = 上海交大</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.112.26.34</span><br><span class="line">+++ jiaoyu-wh</span><br><span class="line">menu = 武汉科技大学</span><br><span class="line">title = 武汉科技大学</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.114.240.6</span><br><span class="line">+++ jiaoyu-hn</span><br><span class="line">menu = 华南农业大学</span><br><span class="line">title = 华南农业大学</span><br><span class="line">alerts = someloss</span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line">host = 202.116.160.33</span><br><span class="line"><span class="comment">#+++ jiaoyu-multi</span></span><br><span class="line"><span class="comment">#menu = 多个教育网络监控列表</span></span><br><span class="line"><span class="comment">#title = 多个教育网络监控列表</span></span><br><span class="line"><span class="comment">#alerts = someloss</span></span><br><span class="line"><span class="comment">#slaves = boomer slave2</span></span><br><span class="line"><span class="comment">#host = /Other/jiaoyu/jiaoyu-qh /Other/jiaoyu/jiaoyu-sh /Other/jiaoyu/jiaoyu-wh /Other/jiaoyu/jiaoyu-hn</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>Smokeping</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用命令学习</title>
    <url>/2019/09/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h4 id="查找文件使用命令"><a href="#查找文件使用命令" class="headerlink" title="查找文件使用命令"></a>查找文件使用命令</h4><ul><li><p>查找目录下面大小超过5M的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home/ -size +5M</span><br></pre></td></tr></table></figure></li><li><p>查找目录下100天之前修改过的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home/ -mtime +100</span><br></pre></td></tr></table></figure></li><li><p>查找目录下60天未被访问过的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /home/ \! atime -60</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>查找目录下面文件“core“，如果发现无需提示直接删除。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find / -name core -<span class="built_in">exec</span> rm &#123;&#125; \</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找排除某一个文件然后进行删除</span></span><br><span class="line">$ find / -<span class="built_in">type</span> f ! -name <span class="string">"test"</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br><span class="line">$ find ./ -mtime +3 -name <span class="string">"*.log"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br><span class="line">$ find /tmp -mtime +30 -<span class="built_in">type</span> f -name <span class="string">"*.sh[ab]"</span> -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure></li></ul><p>在一个目录中保留最近30天的文件，30天前的文件自动删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find /tmp -mtime +30 -<span class="built_in">type</span> f -name <span class="string">"*.sh[ab]"</span> -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><ul><li>/tmp –设置查找的目录；</li><li>-mtime +30 –设置时间为30天前；</li><li>-type f –设置查找的类型为文件；</li><li>-name *.sh[ab] –设置文件名称中包含sha或者shb；</li><li>-exec rm -f –查找完毕后执行删除操作；</li><li><strong>提示</strong>：将此命令写入crontab后即可自动完成查找并删除的工作</li></ul><ul><li>显示目录文件的文件名和它们的拥有者<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ll | awk <span class="string">'&#123;print $3,"owns",$9&#125;'</span></span><br></pre></td></tr></table></figure></li></ul><p>显示你的系统上PCI总线和附加设备的信息。指定-v，-vv或-vvv来获取越来越详细的输出</p><ul><li>lspci 安装<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum whatprovides */lspci</span><br><span class="line">pciutils-3.5.1-2.el7.x86_64 : PCI bus related utilities</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /usr/sbin/lspci</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pciutils-3.5.1-3.el7.x86_64 : PCI bus related utilities</span><br><span class="line">Repo        : base</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /usr/sbin/lspci</span><br><span class="line"></span><br><span class="line">$ sudo yum install pciutils</span><br><span class="line"></span><br><span class="line">$ lspci -vvvvv</span><br></pre></td></tr></table></figure></li></ul><p>lspci 更多<a href="https://blog.csdn.net/styshoo/article/details/51281437" target="_blank" rel="noopener">详细使用</a></p><ul><li><p>查看当前的Linux服务器的运行级别</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ who -r</span><br><span class="line">$ who -b </span><br><span class="line"><span class="comment"># 查看系统最后一次启动的时间</span></span><br><span class="line"></span><br><span class="line">$ last reboot</span><br><span class="line"><span class="comment"># 查看系统历史启动的时间</span></span><br></pre></td></tr></table></figure></li><li><p>查看系统运行了多长时间</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /proc/uptime| awk -F. <span class="string">'&#123;run_days=$1 / 86400;run_hour=($1 % 86400)/3600;run_minute=($1 % 3600)/60;run_second=$1 % 60;printf("系统已运行：%d天%d时%d分%d秒",run_days,run_hour,run_minute,run_second)&#125;'</span></span><br><span class="line">$ w</span><br><span class="line">$ uptime</span><br></pre></td></tr></table></figure></li><li><p>查看系统启动的日期</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ date -d <span class="string">"<span class="variable">$(awk -F. '&#123;print $1&#125;' /proc/uptime)</span> second ago"</span> +<span class="string">"%Y-%m-%d %H:%M:%S"</span></span><br></pre></td></tr></table></figure></li><li><p>查找目录下文件内容没有包括“nginx”、“msgType”字符串的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -r -l -v <span class="string">"nginx"</span> /data/</span><br><span class="line">$ grep -r  -v <span class="string">"msgType"</span> /data/</span><br></pre></td></tr></table></figure></li><li><p>查找目录下文件内容包括”nginx”字符串的文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -r <span class="string">"nginx"</span> /data/                                             会把<span class="string">"nginx"</span>字符串所在这行的内容显示出来</span><br><span class="line">$ grep -o “nginx” /data/</span><br><span class="line">$ grep -r -l <span class="string">"nginx"</span> /data/                                          不显示<span class="string">"nginx"</span>字符串所在行，是显示文件</span><br></pre></td></tr></table></figure></li><li><p>cat使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat sentry.conf.py |grep -v <span class="string">"^#"</span>          查看配置文件不包括注释内容</span><br><span class="line">$ cat -b `find /var/<span class="built_in">log</span>/httpd/ -cmin -60 -<span class="built_in">print</span> |sed <span class="string">"1d"</span>`\ |awk <span class="string">'&#123;print $2&#125;'</span>|sort |uniq -c |sort -n -k 1 -r |head -n 1               统计当前目录下日志文件里面I平访问量最多的一个IP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某一个时间段的IP地址访问排名前10</span></span><br><span class="line">$ cat nginx_access.log|grep <span class="string">'+0800'</span>|awk <span class="string">'&#123;split($1,array,"[");if(array[2]&gt;="25/Jul/2017:14:17:30" &amp;&amp; array[2]&lt;="25/Jul/2017:20:17:30")&#123;print $0&#125;&#125;'</span>|awk -F<span class="string">"^`"</span> &amp;&amp; <span class="string">"-"</span> &amp;&amp; <span class="string">"^`"</span> <span class="string">'&#123;print $1&#125;'</span>|sort|uniq -c|sort -n -k 1 -r|head -n 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计当前日志ip访问前10</span></span><br><span class="line">$ cat nginx_access.log |awk -F<span class="string">"^"</span> <span class="string">'&#123;print $1&#125;'</span>|sort|uniq -c|sort -n -k 1 -r|head -n 10</span><br></pre></td></tr></table></figure></li><li><p>获取IP地址通用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig |sed -n 2p |awk <span class="string">'&#123;print $1$2&#125;'</span>|sed <span class="string">'s/^.*[^0-9]\([0-9]\&#123;1,3\&#125;\)\.\([0-9]\&#123;1,3\&#125;\)\.\([0-9]\&#123;1,3\&#125;\)\.\([0-9]\&#123;1,3\&#125;\)$/\1\.\2\.\3\.\4/g'</span></span><br></pre></td></tr></table></figure></li><li><p>curl使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监控网页的响应时间</span></span><br><span class="line">$ curl -o /dev/null -s -w <span class="string">"time_connect: %&#123;time_connect&#125;\ntime_starttransfer: %&#123;time_starttransfer&#125;\ntime_total: %&#123;time_total&#125;\n"</span> <span class="string">"http://www.baidu.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控站点可用性</span></span><br><span class="line">$ curl -o /dev/null -s -w %&#123;http_code&#125; <span class="string">"http://www.baidu.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启gzip请求</span></span><br><span class="line">$ curl -I http://www.sina.com.cn/ -H Accept-Encoding:gzip,defalte</span><br></pre></td></tr></table></figure></li><li><p>每10秒显示一次复制的大小</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ watch -n 10 du -sh /root</span><br></pre></td></tr></table></figure></li><li><p>统计目录(包括子目录)下面文件个数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find ./ -<span class="built_in">type</span> f | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用find命令查找当前目录下是文件类型的文件，然后用wc来计数</span></span><br><span class="line">$ ls -lR|grep <span class="string">"^-"</span>|wc -l</span><br><span class="line"><span class="comment"># ls命令加R参数，列出下级子目录，使用grep命令过滤以“-”开头的，如果是目录就改成“^d”，后面用wc计数。</span></span><br><span class="line"></span><br><span class="line">$ find ./ -name <span class="string">"*.*"</span> |xargs cat|grep -v ^$|wc -l</span><br><span class="line">$ find . \( ! -name <span class="string">'*.png'</span> ! -name <span class="string">'*.gif'</span> ! -name <span class="string">'*.jpg'</span> ! -name <span class="string">'*.swf'</span> \) -<span class="built_in">type</span> f |wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计目录下所有文件的的行数，去掉空行</span></span><br><span class="line">$ find ./ -name <span class="string">"*.*"</span> |xargs cat|wc -l   </span><br><span class="line">$ find . \( ! -name <span class="string">'*.png'</span> ! -name <span class="string">'*.gif'</span> ! -name <span class="string">'*.jpg'</span> ! -name <span class="string">'*.swf'</span> \) -<span class="built_in">type</span> f |xargs cat|wc -l</span><br></pre></td></tr></table></figure></li><li><p>查看系统tcp连接中各个状态的连接数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -an | awk '/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出每个IP的连接数，以及总的各个状态的连接数</span></span><br><span class="line">$ netstat -n | awk <span class="string">'/^tcp/ &#123;n=split($(NF-1),array,":");if(n&lt;=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N&#125; END &#123;for(a in S)&#123;printf("%-20s %s\n", a, S[a]);++I&#125;printf("%-20s %s\n","TOTAL_IP",I);for(a in s) printf("%-20s %s\n",a, s[a]);printf("%-20s %s\n","TOTAL_LINK",N);&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计当前tcp/ip链接数排名前10的IP</span></span><br><span class="line">$ netstat -n|awk <span class="string">'/^tcp/ &#123;print $5&#125;'</span>|awk -F<span class="string">':'</span> <span class="string">'&#123;print $1&#125;'</span>|sort|uniq -c|sort -n -k 1 -r|head -n 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用grep统计当前文件里面所有的IP地址</span></span><br><span class="line">$ grep -E -o <span class="string">"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"</span> nginx_access.log</span><br></pre></td></tr></table></figure></li></ul><p>查看系统当前进程打开的文件句柄数，按照最大的进行排序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsof -n | awk <span class="string">'&#123;print $2&#125;'</span> | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure><ul><li><p>ping命令显示时间以及日期</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ping www.sina.com.cn -i 3 | awk <span class="string">'&#123; print $0"\t" strftime("%Y-%m-%d %H:%M:%S",systime()) &#125; '</span> &gt; /opt/sina.log &amp;</span><br></pre></td></tr></table></figure></li><li><p>ssh 远程执行命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh user@<span class="string">'ip'</span> <span class="string">"date"</span></span><br><span class="line"><span class="comment"># 单个命令</span></span><br><span class="line"></span><br><span class="line">$ ssh user@<span class="string">'ip'</span> <span class="string">"ls -lstrh /opt; uname -a"</span></span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables</title>
    <url>/2019/09/25/iptables/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="Iptables"><a href="#Iptables" class="headerlink" title="Iptables"></a>Iptables</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iptalbes 是用来设置、维护和检查Linux内核的IP包过滤规则的。可以定义不同的表，每个表都包含几个内部的链，也能包含用户定义的链。每个链都是一个规则列表，对对应的包进行匹配：每条规则指定应当如何处理与之相匹配的包。这被称作’target’（目标），也可以跳向同一个表内的用户定义的链。</p><a id="more"></a><h4 id="iptables限制IP访问特定端口"><a href="#iptables限制IP访问特定端口" class="headerlink" title="iptables限制IP访问特定端口"></a>iptables限制IP访问特定端口</h4><ul><li><p>允许某个IP （192.168.6.100）的机器进行SSH连接：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -s 192.168.6.100 -p tcp --dport 22 -j ACCEPT</span><br><span class="line">$ iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">ACCEPT tcp -- 192.168.6.100 0.0.0.0/0 tcp dpt:22</span><br></pre></td></tr></table></figure></li><li><p>允许某一段的IP 访问SSH</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -s 192.168.6.0/24 -p tcp --dport 22 -j ACCEPT</span><br><span class="line">$ iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">ACCEPT tcp -- 192.168.6.0/24 0.0.0.0/0 tcp dpt:22</span><br></pre></td></tr></table></figure></li><li><p>限制某一IP 访问SSH</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -p tcp -s ! 192.168.6.100 --dport 22 -j ACCEPT --注意！号有个空格</span><br><span class="line">$ iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target prot opt <span class="built_in">source</span> destination</span><br><span class="line">ACCEPT tcp -- 192.168.6.0/24 0.0.0.0/0 tcp dpt:22</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置一个NAT表放火墙"><a href="#配置一个NAT表放火墙" class="headerlink" title="配置一个NAT表放火墙"></a>配置一个NAT表放火墙</h3><ul><li><p>防止外网用内网IP欺骗</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -s 10.0.0.0/8 -j DROP</span><br><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -s 172.16.0.0/12 -j DROP</span><br><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -s 192.168.0.0/16 -j DROP</span><br></pre></td></tr></table></figure></li><li><p>禁止与211.101.46.253的所有连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -d 211.101.46.253 -j DROP</span><br></pre></td></tr></table></figure></li><li><p>禁用FTP(21)端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 21 -j DROP</span><br><span class="line"><span class="comment"># 这样写范围太大了,我们可以更精确的定义.</span></span><br><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 21 -d 211.101.46.253 -j DROP</span><br><span class="line"><span class="comment"># 这样只禁用211.101.46.253地址的FTP连接,其他连接还可以.如web(80端口)连接.</span></span><br></pre></td></tr></table></figure></li><li><p>iptables白名单</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -s 0.0.0.0/0 -p tcp --dport 80 -j DROP</span><br><span class="line"><span class="comment"># 拒绝所有IP链接80端口</span></span><br><span class="line"></span><br><span class="line">$ iptables -A INPUT -s 58.17.245.222 -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="comment"># 允许指定IP访问80端口</span></span><br></pre></td></tr></table></figure></li><li><p>允许所有已经建立的和相关的连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">$ iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>drop非法连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -m state --state INVALID -j DROP</span><br><span class="line">$ iptables -A OUTPUT -m state --state INVALID -j DROP</span><br><span class="line">$ iptables -A FORWARD -m state --state INVALID -j DROP</span><br></pre></td></tr></table></figure></li></ul><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><ul><li>这里使用的是FTP服务(36542)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -p tcp --dport 36542 -j DNAT --to 192.168.50.2:36542</span><br><span class="line">$ iptables -t nat -A POSTROUTING -p tcp --dport 36542 -j MASQUERADE</span><br><span class="line"><span class="comment"># 因为FTP使用了两个端口21和20，21只是用于连接，20是执行命令的。20没办法修改，这里使用了被动模式连接。</span></span><br><span class="line"></span><br><span class="line">$ iptables -t nat -I PREROUTING -p tcp --dport 60000:65000 -j DNAT --to 192.168.50.2</span><br><span class="line"><span class="comment"># 被动连接端口60000-65000全部转发给50.2</span></span><br><span class="line"></span><br><span class="line">$ iptables -t nat -I POSTROUTING -p tcp --dport 60000:65000 -j MASQUERADE</span><br><span class="line"><span class="comment"># 需要开放60000:65000端口，</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;公司有一台服务器连接外网，其他的服务器都不能上外网，我们可以通过这个外网服务器用作网关服务器，做端口转发，连接到内网服务器</p><ul><li><p>这里使用数据库的3306映射到外网的的36544</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING  -m tcp -p tcp --dport 36544 -j DNAT --to-destination 172.16.1.11:3306</span><br><span class="line">$ iptables -t nat -A POSTROUTING -m tcp -p tcp --dport 3306 -d 172.16.1.11 -j SNAT --to-source 172.16.1.1</span><br></pre></td></tr></table></figure></li><li><p>添加连续端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -p tcp --dport 60000:65000 -j ACCEPT</span><br><span class="line"><span class="comment"># 冒号表示添加一个连续的端口</span></span><br><span class="line"></span><br><span class="line">$ iptables -A INPUT -p tcp -m multiport –dport 21:25,135:139 -j DROP</span><br><span class="line"><span class="comment">#使用multiport参数配置不连续端口和多个端口</span></span><br></pre></td></tr></table></figure></li><li><p>代理上网<br>内网机子无法上网，通过一台可以上网的电脑，在可以访问外网的server上iptables让其一个网段内的机子访问外网，这里是阿里云环境来做的，开启IP转发功能</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -i <span class="string">'s/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/g'</span> /etc/sysctl.conf</span><br><span class="line">$ iptables -t nat -I POSTROUTING -s 172.16.3.0/24 -j SNAT --to-source 172.16.3.2</span><br></pre></td></tr></table></figure></li></ul><h4 id="操作iptables的nat规则"><a href="#操作iptables的nat规则" class="headerlink" title="操作iptables的nat规则"></a>操作iptables的nat规则</h4><ul><li><p>查看规则</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -nvL -t nat</span><br><span class="line">$ iptables -t nat -L -n --line-numbers</span><br></pre></td></tr></table></figure></li><li><p>删除规则</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -D POSTROUTING 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># iptables的规则号</span></span><br><span class="line">$ iptables -nL --line-number</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改/替换规则</span></span><br><span class="line">$ iptbales -R INPUT &#123;1&#125; -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除规则</span></span><br><span class="line">$ iptables -D INPUT &#123;1&#125;</span><br></pre></td></tr></table></figure></li><li><p>iptales端口通过一张网卡出去</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -A INPUT -i eth0 -p tcp -s 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLESHED -j ACCEPT</span><br><span class="line">$ iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>本机端口，映射到本机端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 25 -j REDIRECT --to-port 2525</span><br><span class="line">$ iptables -t nat -I PREROUTING --src 0/0 --dst 192.168.1.5 -p tcp --dport 80 -j REDIRECT --to-ports 8123</span><br><span class="line">$ iptables -t nat -I OUTPUT --src 0/0 --dst 192.168.1.5 -p tcp --dport 80 -j REDIRECT --to-ports 8123</span><br></pre></td></tr></table></figure></li><li><p>保存防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /usr/libexec/iptables/iptables.init save</span><br></pre></td></tr></table></figure></li><li><p>奇葩需求，开放ssh端口指定的IP地址访问，其他端口太多不想添加能对外访问</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample configuration for iptables service</span></span><br><span class="line"><span class="comment"># you can edit this manually or use system-config-firewall</span></span><br><span class="line"><span class="comment"># please do not ask us to add additional ports/services to this default configuration</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -s 192.168.10.1/32 -p tcp -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 22 -j  REJECT --reject-with icmp-port-unreachable</span><br><span class="line"><span class="comment">#-A INPUT -j REJECT --reject-with icmp-host-prohibited</span></span><br><span class="line"><span class="comment">#-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>交换机做端口聚合</title>
    <url>/2019/09/25/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%81%9A%E7%AB%AF%E5%8F%A3%E8%81%9A%E5%90%88/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p><strong>应用场景</strong>：h3c s5500 (Switch A)。huawei s5720S-SI-AC（Switch B）</p><p>Switch A 作为上行交换机，Switch B作为下行交换机</p><p><strong>组网</strong>：两个交换机的id、vlan号这里使用的是相同</p><a id="more"></a><p><img src="https://img.xxlaila.cn/2846sjdhausiy84yhks.png" alt="img"></p><h3 id="Switch-A配置"><a href="#Switch-A配置" class="headerlink" title="Switch A配置"></a>Switch A配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch A-SW]vlan 50</span><br><span class="line">[Switch A-SW-vlan50]quit</span><br><span class="line">[Switch A-SW]interface Bridge-Aggregation 50</span><br><span class="line">[Switch A-SW-Bridge-Aggregation50]port access vlan 50</span><br><span class="line">[Switch A-SW]interface GigabitEthernet 1/0/19</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/19]port link-aggregation group 50</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/19] port access vlan 50</span><br><span class="line">[Switch A-SW]interface GigabitEthernet 1/0/20</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/20]port link-aggregation group 50</span><br><span class="line">[Switch A-SW-GigabitEthernet1/0/20]port access vlan 50</span><br><span class="line">[Switch A-SW]link-aggregation load-sharing mode <span class="built_in">source</span>-mac destination-mac</span><br></pre></td></tr></table></figure><ul><li>查看端口聚合<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch A-SW]dis link-aggregation verbose</span><br></pre></td></tr></table></figure></li></ul><h3 id="Switch-B配置"><a href="#Switch-B配置" class="headerlink" title="Switch B配置"></a>Switch B配置</h3><h4 id="1、创建eth-trunk接口并加入成员"><a href="#1、创建eth-trunk接口并加入成员" class="headerlink" title="1、创建eth-trunk接口并加入成员"></a>1、创建eth-trunk接口并加入成员</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch B] interface eth-trunk 50</span><br><span class="line">[Switch B-Eth-Trunk1] trunkport gigabitethernet 0/0/1 to 0/0/3</span><br><span class="line">[Switch B-Eth-Trunk1] quit</span><br></pre></td></tr></table></figure><h4 id="2、创建vlan并吧串行加入vlan"><a href="#2、创建vlan并吧串行加入vlan" class="headerlink" title="2、创建vlan并吧串行加入vlan"></a>2、创建vlan并吧串行加入vlan</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch B] vlan batch 50</span><br><span class="line">[Switch B] interface eth-trunk 50</span><br><span class="line">[Switch B-Eth-Trunk1] port link-type trunk</span><br><span class="line">[Switch B-Eth-Trunk1] port trunk allow-pass vlan 50</span><br><span class="line">[Switch B-Eth-Trunk1] quit</span><br></pre></td></tr></table></figure><h4 id="3、配置eth-trunk的负载分担方式"><a href="#3、配置eth-trunk的负载分担方式" class="headerlink" title="3、配置eth-trunk的负载分担方式"></a>3、配置eth-trunk的负载分担方式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch B] interface eth-trunk 1</span><br><span class="line">[Switch B-Eth-Trunk1] load-balance src-dst-mac</span><br><span class="line">[Switch B-Eth-Trunk1] quit</span><br></pre></td></tr></table></figure><h3 id="Switch-A配置地址段"><a href="#Switch-A配置地址段" class="headerlink" title="Switch A配置地址段"></a>Switch A配置地址段</h3><p>在vlan里面起一个网络，但不启用dhcp服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Switch A-SW]int vlan 50</span><br><span class="line">[Switch A-SW-Vlan-interface50]ip ad 172.21.16.1 20</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
      <tags>
        <tag>交换机</tag>
      </tags>
  </entry>
  <entry>
    <title>pv pvc</title>
    <url>/2019/09/25/pv-pvc/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PersistentVolume（pv）和PersistentVolumeClaim（pvc）是k8s提供的两种API资源，用于抽象存储细节。管理员关注于如何通过pv提供存储功能而无需关注用户如何使用，同样的用户只需要挂载pvc到容器中而不需要关注存储卷采用何种技术实现。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pvc和pv的关系与pod和node关系类似，前者消耗后者的资源。pvc可以向pv申请指定大小的存储资源并设置访问模式,这就可以通过Provision -&gt; Claim 的方式，来对存储资源进行控制。</p><a id="more"></a><h3 id="2、生命周期"><a href="#2、生命周期" class="headerlink" title="2、生命周期"></a>2、生命周期</h3><p>pv和pvc遵循以下生命周期:</p><ul><li>供应准备。通过集群外的存储系统或者云平台来提供存储持久化支持。<ul><li><strong>静态提供</strong>: 管理员手动创建多个PV，供PVC使用。</li><li><strong>动态提供</strong>: 动态创建PVC特定的PV，并绑定。</li></ul></li><li>绑定。用户创建pvc并指定需要的资源和访问模式。在找到可用pv之前，pvc会保持未绑定状态。</li><li>使用。用户可在pod中像volume一样使用pvc。</li><li>释放。用户删除pvc来回收存储资源，pv将变成“released”状态。由于还保留着之前的数据，这些数据需要根据不同的策略来处理，否则这些存储资源无法被其他pvc使用。</li><li>回收(Reclaiming)。pv可以设置三种回收策略：保留（Retain），回收（Recycle）和删除（Delete）。</li></ul><ul><li><strong>保留策略</strong>: 允许人工处理保留的数据。</li><li><strong>删除策略</strong>: 将删除pv和外部关联的存储资源，需要插件支持。</li><li><strong>回收策略</strong>: 将执行清除操作，之后可以被新的pvc使用，需要插件支持。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前只有NFS和HostPath类型卷支持回收策略，AWS EBS,GCE PD,Azure Disk和Cinder支持删除(Delete)策略。</p><h4 id="2-1、Provisioning"><a href="#2-1、Provisioning" class="headerlink" title="2.1、Provisioning"></a>2.1、Provisioning</h4><p>两种方式提供的PV资源供给：</p><ul><li><p>static:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过集群管理者创建多个PV，为集群“使用者”提供存储能力而隐藏真实存储的细节。并且存在于kubenretes api中，可被直接使用。</p></li><li><p>dynamic:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;动态卷供给是kubernetes独有的功能，这一功能允许按需创建存储建。在此之前，集群管理员需要事先在集群外由存储提供者或者云提供商创建<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存储卷，成功之后再创建PersistentVolume对象，才能够在kubernetes中使用。动态卷供给能让集群管理员不必进行预先创建存储卷，而是随着用户需求进行创建。在1.5版本提高了动态卷的弹性和可用性。</p></li></ul><h3 id="PV类型"><a href="#PV类型" class="headerlink" title="PV类型"></a>PV类型</h3><p>pv支持以下类型:</p><ul><li>GCEPersistentDisk</li><li>AWSElasticBlockStore</li><li>NFS</li><li>iSCSI</li><li>RBD (Ceph Block Device)</li><li>Glusterfs</li><li>AzureFile</li><li>AzureDisk</li><li>CephFS</li><li>cinder</li><li>FC</li><li>FlexVolume</li><li>Flocker</li><li>PhotonPersistentDisk</li><li>Quobyte</li><li>VsphereVolume</li><li>HostPath (single node testing only – local storage is not supported in any way and WILL NOT WORK in a multi-node cluster)</li></ul><h4 id="3-1、PV属性"><a href="#3-1、PV属性" class="headerlink" title="3.1、PV属性"></a>3.1、PV属性</h4><ul><li>访问模式,与pv的语义相同。在请求资源时使用特定模式。</li><li>资源,申请的存储资源数额。</li></ul><h4 id="3-2、PV卷阶段状态"><a href="#3-2、PV卷阶段状态" class="headerlink" title="3.2、PV卷阶段状态"></a>3.2、PV卷阶段状态</h4><ul><li>Available – 资源尚未被claim使用</li><li>Bound – 卷已经被绑定到claim了</li><li>Released – claim被删除，卷处于释放状态，但未被集群回收。</li><li>Failed – 卷自动回收失败</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>pv, pvc</tag>
      </tags>
  </entry>
  <entry>
    <title>利用NFS动态提供Kubernetes后端存储卷</title>
    <url>/2019/09/24/%E5%88%A9%E7%94%A8NFS%E5%8A%A8%E6%80%81%E6%8F%90%E4%BE%9BKubernetes%E5%90%8E%E7%AB%AF%E5%AD%98%E5%82%A8%E5%8D%B7/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nfs-client-provisioner是一个automatic provisioner，使用NFS作为存储，自动创建PV和对应的PVC，本身不提供NFS存储，需要外部先有一套NFS存储服务。</p><ul><li>PV以 ${namespace}-${pvcName}-${pvName}的命名格式提供（在NFS服务器上）</li><li>PV回收的时候以 archieved-${namespace}-${pvcName}-${pvName} 的命名格式（在NFS服务器上）</li></ul><p><a href="https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client" target="_blank" rel="noopener">官方访问地址</a></p><a id="more"></a><h3 id="1、权限体系构建"><a href="#1、权限体系构建" class="headerlink" title="1、权限体系构建"></a>1、权限体系构建</h3><h4 id="1-1、创建serviceaccount"><a href="#1-1、创建serviceaccount" class="headerlink" title="1.1、创建serviceaccount"></a>1.1、创建serviceaccount</h4><p>ServiceAccount也是一种账号, 供运行在pod中的进程使用, 为pod中的进程提供必要的身份证明</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; serviceaccount.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="1-2、创建role"><a href="#1-2、创建role" class="headerlink" title="1.2、创建role"></a>1.2、创建role</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt;clusterrole.yaml&lt;&lt;EOF</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumes"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"delete"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumeclaims"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"storage.k8s.io"</span>]</span><br><span class="line">    resources: [<span class="string">"storageclasses"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"events"</span>]</span><br><span class="line">    verbs: [<span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"services"</span>, <span class="string">"endpoints"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"create"</span>,<span class="string">"list"</span>, <span class="string">"watch"</span>,<span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"extensions"</span>]</span><br><span class="line">    resources: [<span class="string">"podsecuritypolicies"</span>]</span><br><span class="line">    resourceNames: [<span class="string">"nfs-client-provisioner"</span>]</span><br><span class="line">    verbs: [<span class="string">"use"</span>]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="1-3、账户和角色绑定"><a href="#1-3、账户和角色绑定" class="headerlink" title="1.3、账户和角色绑定"></a>1.3、账户和角色绑定</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt;clusterrolebinding.yaml &lt;&lt;EOF</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  name: run-nfs-client-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nfs-client-provisioner</span><br><span class="line">    namespace: kube-ops</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="1-4、执行创建"><a href="#1-4、执行创建" class="headerlink" title="1.4、执行创建"></a>1.4、执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f serviceaccount.yaml -f clusterrole.yaml -f clusterrolebinding.yaml</span><br><span class="line">serviceaccount/nfs-client-provisioner created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/nfs-client-provisioner-runner created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/run-nfs-client-provisioner created</span><br></pre></td></tr></table></figure><h3 id="2、安装部署"><a href="#2、安装部署" class="headerlink" title="2、安装部署"></a>2、安装部署</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载deployment.yaml文件,需要修改NFS服务器所在的IP地址（10.10.10.60），以及NFS服务器共享的路径（/ifs/kubernetes），两处都需要修改为你实际的NFS服务器和共享目录</p><h4 id="2-1、部署存储供应卷"><a href="#2-1、部署存储供应卷" class="headerlink" title="2.1、部署存储供应卷"></a>2.1、部署存储供应卷</h4><p>根据PVC的请求, 动态创建PV存储.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; deployment.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">---</span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nfs-client-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nfs-client-provisioner</span><br><span class="line">      containers:</span><br><span class="line">        - name: nfs-client-provisioner</span><br><span class="line">          image: quay.io/external_storage/nfs-client-provisioner:latest</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: nfs-client-root</span><br><span class="line">              mountPath: /persistentvolumes</span><br><span class="line">          env:</span><br><span class="line">            - name: PROVISIONER_NAME</span><br><span class="line">              value: fuseim.pri/ifs</span><br><span class="line">            - name: NFS_SERVER</span><br><span class="line">              value: 172.21.17.39</span><br><span class="line">            - name: NFS_PATH</span><br><span class="line">              value: /opt</span><br><span class="line">      volumes:</span><br><span class="line">        - name: nfs-client-root</span><br><span class="line">          nfs:</span><br><span class="line">            server: 172.21.17.39</span><br><span class="line">            path: /opt</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>修改StorageClass文件并部署class.yaml</li></ul><p>此处可以不修改，或者修改provisioner的名字，需要与上面的deployment的PROVISIONER_NAME名字一致</p><h4 id="2-2、创建storageclass"><a href="#2-2、创建storageclass" class="headerlink" title="2.2、创建storageclass"></a>2.2、创建storageclass</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; class.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: managed-nfs-storage</span><br><span class="line">provisioner: fuseim.pri/ifs <span class="comment"># or choose another name, must match deployment's env PROVISIONER_NAME'</span></span><br><span class="line">parameters:</span><br><span class="line">  archiveOnDelete: <span class="string">"false"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="2-3、执行创建"><a href="#2-3、执行创建" class="headerlink" title="2.3、执行创建"></a>2.3、执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f deployment.yaml </span><br><span class="line">serviceaccount/nfs-client-provisioner created</span><br><span class="line">deployment.extensions/nfs-client-provisioner created</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f class.yaml </span><br><span class="line">storageclass.storage.k8s.io/managed-nfs-storage created</span><br></pre></td></tr></table></figure><h5 id="2-3-1、查看StorageClass"><a href="#2-3-1、查看StorageClass" class="headerlink" title="2.3.1、查看StorageClass"></a>2.3.1、查看StorageClass</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get storageclass</span><br><span class="line">NAME                  PROVISIONER      AGE</span><br><span class="line">managed-nfs-storage   fuseim.pri/ifs   18s</span><br></pre></td></tr></table></figure><h5 id="2-3-2、设置默认后端存储"><a href="#2-3-2、设置默认后端存储" class="headerlink" title="2.3.2、设置默认后端存储"></a>2.3.2、设置默认后端存储</h5><p>设置这个default名字的SC为Kubernetes的默认存储后端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl patch storageclass managed-nfs-storage -p <span class="string">'&#123;"metadata": &#123;"annotations":&#123;"storageclass.kubernetes.io/is-default-class":"true"&#125;&#125;&#125;'</span></span><br><span class="line">storageclass.storage.k8s.io/managed-nfs-storage patched</span><br></pre></td></tr></table></figure><ul><li>storage.yaml (和上面一样)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; storage.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: managed-nfs-storage</span><br><span class="line">  annotations:</span><br><span class="line">    storageclass.kubernetes.io/is-default-class: <span class="string">"true"</span></span><br><span class="line">provisioner: fuseim.pri/ifs</span><br><span class="line">parameters:</span><br><span class="line">  archiveOnDelete: <span class="string">"false"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-3、查看验证"><a href="#2-3-3、查看验证" class="headerlink" title="2.3.3、查看验证"></a>2.3.3、查看验证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get all -n kube-ops</span><br><span class="line">NAME                                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/nfs-client-provisioner-77f678858b-8d2d6   1/1     Running   0          26m</span><br><span class="line"></span><br><span class="line">NAME                                     READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/nfs-client-provisioner   1/1     1            1           29m</span><br><span class="line"></span><br><span class="line">NAME                                                DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/nfs-client-provisioner-77f678858b   1         1         1       26m</span><br></pre></td></tr></table></figure><h3 id="3、验证测试"><a href="#3、验证测试" class="headerlink" title="3、验证测试"></a>3、验证测试</h3><h4 id="3-1、创建一个测试存储"><a href="#3-1、创建一个测试存储" class="headerlink" title="3.1、创建一个测试存储"></a>3.1、创建一个测试存储</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt; <span class="built_in">test</span>-claim.yaml &lt;&lt;EOF</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-claim</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"managed-nfs-storage"</span></span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Mi</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="3-2、启动测试POD"><a href="#3-2、启动测试POD" class="headerlink" title="3.2、启动测试POD"></a>3.2、启动测试POD</h4><p>POD文件如下，作用就是在test-claim的PV里touch一个SUCCESS文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat  &gt; <span class="built_in">test</span>-pod.yaml &lt;&lt;EOF</span><br><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-pod</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: <span class="built_in">test</span>-pod</span><br><span class="line">    image: docker.io/busybox:1.24</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - <span class="string">"/bin/sh"</span></span><br><span class="line">    args:</span><br><span class="line">      - <span class="string">"-c"</span></span><br><span class="line">      - <span class="string">"touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1"</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">      - name: nfs-pvc</span><br><span class="line">        mountPath: <span class="string">"/mnt"</span></span><br><span class="line">  restartPolicy: <span class="string">"Never"</span></span><br><span class="line">  volumes:</span><br><span class="line">    - name: nfs-pvc</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: <span class="built_in">test</span>-claim</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="3-3、执行创建"><a href="#3-3、执行创建" class="headerlink" title="3.3、执行创建"></a>3.3、执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f ./</span><br><span class="line">persistentvolumeclaim/<span class="built_in">test</span>-claim created</span><br><span class="line">pod/<span class="built_in">test</span>-pod created</span><br></pre></td></tr></table></figure><h4 id="3-4、查看验证"><a href="#3-4、查看验证" class="headerlink" title="3.4、查看验证"></a>3.4、查看验证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pod,pv -n kube-ops</span><br><span class="line">NAME                                          READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod/nfs-client-provisioner-77f678858b-8d2d6   1/1     Running     0          3h26m</span><br><span class="line">pod/<span class="built_in">test</span>-pod                                  0/1     Completed   0          172m</span><br><span class="line"></span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS          REASON   AGE</span><br><span class="line">persistentvolume/pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8   1Mi        RWX            Retain           Bound    kube-ops/<span class="built_in">test</span>-claim   managed-nfs-storage            172m</span><br></pre></td></tr></table></figure><ul><li>登录nfs服务器查看是否成功的创建目录<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls /opt/</span><br><span class="line">kube-ops-test-claim-pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-5、更改PersistentVolumes-中的一个回收策略"><a href="#3-5、更改PersistentVolumes-中的一个回收策略" class="headerlink" title="3.5、更改PersistentVolumes 中的一个回收策略"></a>3.5、更改PersistentVolumes 中的一个回收策略</h4><ul><li><p>查看集群中PersistentVolumes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pv -n kube-ops</span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS          REASON   AGE</span><br><span class="line">pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8   1Mi        RWX            Delete           Bound    kube-ops/<span class="built_in">test</span>-claim   managed-nfs-storage            3m6s</span><br></pre></td></tr></table></figure></li><li><p>更改PersistentVolumes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl patch pv pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8  -p <span class="string">'&#123;"spec":&#123;"persistentVolumeReclaimPolicy":"Retain"&#125;&#125;'</span></span><br><span class="line">persistentvolume/pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8 patched</span><br><span class="line"></span><br><span class="line">$ kubectl get pv -n kube-ops</span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS          REASON   AGE</span><br><span class="line">pvc-2f0057b0-df35-11e9-ad62-fa163e53d4c8   1Mi        RWX            Retain           Bound    kube-ops/<span class="built_in">test</span>-claim   managed-nfs-storage            3m54s</span><br></pre></td></tr></table></figure></li><li><p>删除测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl delete -f test-pod.yaml </span></span><br><span class="line"><span class="comment"># kubectl delete -f test-claim.yaml</span></span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>pvc,pv</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 prometheus</title>
    <url>/2019/09/20/k8s-v1-14-prometheus/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h1 id="Prometheus、Grafana-部署"><a href="#Prometheus、Grafana-部署" class="headerlink" title="Prometheus、Grafana 部署"></a>Prometheus、Grafana 部署</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Grafana是一个开源的度量分析与可视化套件。经常被用作基础设施的时间序列数据和应用程序分析的可视化，我们这里用它来做Kubernetes集群监控数据的可视化。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;截至当前，prometheus、grafana均采用最新的镜像包，在在第一次部署的时候grafana报了一个错误<code>mkdir: cannot create directory &#39;/var/lib/grafana/plugins&#39;: No such file or directory</code>,这是因为Grafana启动使用的用户和用户组都是472，造成对外挂存储没有权限。<a href="https://grafana.com/docs/installation/docker/#migration-from-a-previous-version-of-the-docker-container-to-5-1-or-later" target="_blank" rel="noopener">参考官方</a></p><a id="more"></a><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>新建yaml文件</p><ul><li>monitor-namespace.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat  monitor-namespace.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: monitoring</span><br></pre></td></tr></table></figure></li></ul><p>其他的文件均采用以前历史的，然后稍加修改，其他<a href="https://github.com/xxlaila/kubernetes-yaml.git" target="_blank" rel="noopener">yaml</a>文件,移除<code>grafana-ingress.yaml</code>、<code>prometheus-ingress.yaml</code></p><h3 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h3><ul><li><p>grafana-deploy.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana-core</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  labels:</span><br><span class="line">    app: grafana</span><br><span class="line">    component: core</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: grafana</span><br><span class="line">        component: core</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: grafana/grafana:latest</span><br><span class="line">        name: grafana-core</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="comment"># env:</span></span><br><span class="line">        resources:</span><br><span class="line">          <span class="comment"># keep request = limit to keep this container in guaranteed class</span></span><br><span class="line">          limits:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        env:</span><br><span class="line">          <span class="comment"># The following env variables set up basic auth twith the default admin user and admin password.</span></span><br><span class="line">          - name: GF_AUTH_BASIC_ENABLED</span><br><span class="line">            value: <span class="string">"true"</span></span><br><span class="line">          - name: GF_AUTH_ANONYMOUS_ENABLED</span><br><span class="line">            value: <span class="string">"false"</span></span><br><span class="line">          <span class="comment"># - name: GF_AUTH_ANONYMOUS_ORG_ROLE</span></span><br><span class="line">          <span class="comment">#   value: Admin</span></span><br><span class="line">          <span class="comment"># does not really work, because of template variables in exported dashboards:</span></span><br><span class="line">          <span class="comment"># - name: GF_DASHBOARDS_JSON_ENABLED</span></span><br><span class="line">          <span class="comment">#   value: "true"</span></span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /login</span><br><span class="line">            port: 3000</span><br><span class="line">          <span class="comment"># initialDelaySeconds: 30</span></span><br><span class="line">          <span class="comment"># timeoutSeconds: 1</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: grafana-persistent-storage</span><br><span class="line">          mountPath: /var/lib/grafana</span><br><span class="line">      volumes:</span><br><span class="line">      - name: grafana-persistent-storage</span><br><span class="line">        emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>prometheus-deploy.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: prom/prometheus:latest</span><br><span class="line">        name: prometheus</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - <span class="string">"/bin/prometheus"</span></span><br></pre></td></tr></table></figure></li><li><p>prometheus-svc.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: monitoring</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#type: NodePort</span></span><br><span class="line">  ports:</span><br><span class="line">  - port: 9090</span><br><span class="line">    targetPort: 9090</span><br><span class="line">    <span class="comment">#nodePort: 30005</span></span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br></pre></td></tr></table></figure></li><li><p>grafana-svc.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat grafana-svc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  labels:</span><br><span class="line">    app: grafana</span><br><span class="line">    component: core</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#type: NodePort</span></span><br><span class="line">  ports:</span><br><span class="line">    - port: 3000</span><br><span class="line">  selector:</span><br><span class="line">    app: grafana</span><br><span class="line">    component: core</span><br></pre></td></tr></table></figure></li></ul><h3 id="执行创建"><a href="#执行创建" class="headerlink" title="执行创建"></a>执行创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f ./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多执行几次</span></span><br></pre></td></tr></table></figure><h3 id="检查部署"><a href="#检查部署" class="headerlink" title="检查部署"></a>检查部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod,svc,deploy -n monitoring</span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/grafana-core-7b5989cf9d-snbk5   1/1     Running   0          2m31s</span><br><span class="line">pod/node-exporter-dddv7             1/1     Running   0          12m</span><br><span class="line">pod/node-exporter-fhfp6             1/1     Running   0          12m</span><br><span class="line">pod/node-exporter-m46bf             1/1     Running   0          12m</span><br><span class="line">pod/node-exporter-xkrzp             1/1     Running   0          12m</span><br><span class="line">pod/node-exporter-zfcxh             1/1     Running   0          12m</span><br><span class="line">pod/prometheus-67bcf457db-999ns     1/1     Running   0          12m</span><br><span class="line"></span><br><span class="line">NAME                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">service/grafana         ClusterIP   10.254.95.151    &lt;none&gt;        3000/TCP         12m</span><br><span class="line">service/node-exporter   ClusterIP   10.254.114.12    &lt;none&gt;        9100/TCP         12m</span><br><span class="line">service/prometheus      ClusterIP   10.254.104.216   &lt;none&gt;        9090/TCP         12m</span><br><span class="line"></span><br><span class="line">NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.extensions/grafana-core   1/1     1            1           12m</span><br><span class="line">deployment.extensions/prometheus     1/1     1            1           12m</span><br></pre></td></tr></table></figure><h3 id="创建Ingress"><a href="#创建Ingress" class="headerlink" title="创建Ingress"></a>创建Ingress</h3><h4 id="prometheus-Ingress"><a href="#prometheus-Ingress" class="headerlink" title="prometheus Ingress"></a>prometheus Ingress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat prometheus-Ingress.yaml </span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: prometheus-web-ui</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: prometheus.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: prometheus</span><br><span class="line">          servicePort: 9090</span><br></pre></td></tr></table></figure><h4 id="grafana-Ingress"><a href="#grafana-Ingress" class="headerlink" title="grafana Ingress"></a>grafana Ingress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat grafana-Ingress.yaml </span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana-web-ui</span><br><span class="line">  namespace: monitoring</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: grafana.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: grafana</span><br><span class="line">          servicePort: 3000</span><br></pre></td></tr></table></figure><h4 id="执行创建-1"><a href="#执行创建-1" class="headerlink" title="执行创建"></a>执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f prometheus-Ingress.yaml </span></span><br><span class="line">ingress.extensions/prometheus-web-ui created</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f grafana-Ingress.yaml </span></span><br><span class="line">ingress.extensions/grafana-web-ui created</span><br></pre></td></tr></table></figure><p>在浏览器输入prometheus.xxlaila.cn访问prometheus，输入grafana.xxlaila.cn访问grafana。</p><h3 id="访问prometheus"><a href="#访问prometheus" class="headerlink" title="访问prometheus"></a>访问prometheus</h3><p><img src="https://img.xxlaila.cn/1569218750254.jpg" alt="img"></p><h3 id="配置grafana"><a href="#配置grafana" class="headerlink" title="配置grafana"></a>配置grafana</h3><p><img src="https://img.xxlaila.cn/1568968344227.jpg" alt="img"></p><p>到grafana的官方下载对应的模版文件导入，就可以出图啦<br><img src="https://img.xxlaila.cn/1568968420655.jpg" alt="img"></p><p><a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/prometheus" target="_blank" rel="noopener">后续利用pvc</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 weave-scope</title>
    <url>/2019/09/20/k8s-v1-14-weave-scope/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes 集群并部署容器化应用只是第一步。一旦集群运行起来，我们需要确保一起正常，所有必要组件就位并各司其职，有足够的资源满足应用的需求。Kubernetes 是一个复杂系统，运维团队需要有一套工具帮助他们获知集群的实时状态，并为故障排查提供及时和准确的数据支持。</p><h3 id="weave-scope-介绍"><a href="#weave-scope-介绍" class="headerlink" title="weave scope 介绍"></a>weave scope 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Weave Scope是Docker和Kubernetes的可视化和监控工具。它提供了一个自上而下的应用程序以及整个基础架构视图，并允许您在部署到云提供商时实时诊断分布式容器化应用程序的任何问题。</p><a id="more"></a><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><ul><li>pod拓扑映射</li><li>图形或表格模式</li><li>灵活过滤</li><li>强大的搜索功能</li><li>实时应用和容器指标</li><li>排除故障并管理容器</li><li>使用Plugin API生成自定义指标</li></ul><p><a href="https://www.weave.works/docs/scope/latest/features/" target="_blank" rel="noopener">介绍参考</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在 K8s 集群中安装 Scope 的方法很简单，使用下面的命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f "https://cloud.weave.works/k8s/scope.yaml?k8s-version=$(kubectl version | base64 | tr -d '\n')"</span></span><br><span class="line">namespace/weave created</span><br><span class="line">serviceaccount/weave-scope created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/weave-scope created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/weave-scope created</span><br><span class="line">deployment.apps/weave-scope-app created</span><br><span class="line">service/weave-scope-app created</span><br><span class="line">deployment.apps/weave-scope-cluster-agent created</span><br><span class="line">daemonset.extensions/weave-scope-agent created</span><br></pre></td></tr></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod,svc,deploy -n weave</span></span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/weave-scope-agent-2t4m5                      1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-agent-6tfp5                      1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-agent-fxj5f                      1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-agent-gkxc6                      1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-agent-qnbbv                      1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-app-b99fb9585-wld6n              1/1     Running   0          15m</span><br><span class="line">pod/weave-scope-cluster-agent-77bc946585-8fcjj   1/1     Running   0          15m</span><br><span class="line"></span><br><span class="line">NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/weave-scope-app   ClusterIP   10.254.184.106   &lt;none&gt;        80/TCP    15m</span><br><span class="line"></span><br><span class="line">NAME                                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.extensions/weave-scope-app             1/1     1            1           15m</span><br><span class="line">deployment.extensions/weave-scope-cluster-agent   1/1     1            1           15m</span><br></pre></td></tr></table></figure><h3 id="创建weave-scope-ingress"><a href="#创建weave-scope-ingress" class="headerlink" title="创建weave-scope ingress"></a>创建weave-scope ingress</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat weave-scope.yaml </span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: weave-web-ui</span><br><span class="line">  namespace: weave</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: weave-scope.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: weave-scope-app</span><br><span class="line">          servicePort: 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f weave-scope.yaml </span></span><br><span class="line">ingress.extensions/weave-web-ui created</span><br></pre></td></tr></table></figure><p>在浏览输入<code>weave-scope.xxlaila.cn</code>即可访问<br><img src="https://img.xxlaila.cn/1568958836846.jpg" alt="img"></p><h4 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scope 会自动构建应用和集群的逻辑拓扑。比如点击顶部 Pods，会显示所有 Pod 以及 Pod 之间的依赖关系<br><img src="https://img.xxlaila.cn/1568958666089.jpg" alt="img"><br>点击 Hosts，会显示各个节点之间的关系，可以在 Scope 中查看资源的 CPU 和内存使用情况。<br><img src="https://img.xxlaila.cn/1568958913275.jpg" alt="img"></p><h3 id="在线操作"><a href="#在线操作" class="headerlink" title="在线操作"></a>在线操作</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scope 还提供了便捷的在线操作功能，比如选中某个 Host，点击 &gt;_按钮可以直接在浏览器中打开节点的命令行终端：<br><img src="https://img.xxlaila.cn/1568959004395.jpg" alt="img"></p><ul><li><p>点击 Deployment 的 + 可以执行新增一个pod实列<br><img src="https://img.xxlaila.cn/1568959269040.jpg" alt="img"></p></li><li><p>查看pod的日志<br><img src="https://img.xxlaila.cn/1568959359334.jpg" alt="img"></p></li><li><p>attach、restart、stop 容器，以及直接在 Scope 中排查问题<br><img src="https://img.xxlaila.cn/1568959467442.jpg" alt="img"></p></li></ul><p>更多功呢个请<a href="https://www.weave.works/docs/scope/latest/plugins/" target="_blank" rel="noopener">参考官方</a>,或者实操</p><p><strong>错误</strong>: 如果系统内核版本低于4.4。weave-scope pod 就会提示错误，但是适用了一下不影响正常使用，不知道后期是否会影响。错误如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;probe&gt; WARN: 2019/11/28 08:44:07.263039 Error setting up the eBPF tracker, falling back to proc scanning: kernel not supported: got kernel 3.10.0-693.el7.x86_64 but need kernel &gt;=4.4</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s v1.14, weave-scope</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 traefik部署</title>
    <url>/2019/09/20/k8s-v1-14-traefik%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;traefix 前篇是可以使用，这里k8s v1.14 之前的拿来用不上，然后折腾了一下，参考官方的折腾起来了</p><h3 id="基于角色的访问控制配置（仅限Kubernetes-1-6-）"><a href="#基于角色的访问控制配置（仅限Kubernetes-1-6-）" class="headerlink" title="基于角色的访问控制配置（仅限Kubernetes 1.6+）"></a>基于角色的访问控制配置（仅限Kubernetes 1.6+）</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes在1.6+中引入了基于角色的访问控制（RBAC），以允许对Kubernetes资源和API进行细粒度控制。群集配置了RBAC，则需要授权Traefik使用Kubernetes API。有两种方法可以设置适当的权限：通过特定于命名空间的RoleBindings或单个全局ClusterRoleBinding。</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个命名空间的RoleBinding可以限制授予权限，只有Traefik正在监视的名称空间才能使用，从而遵循最小权限原则。如果Traefik不应该监视所有名称空间，并且名称空间集不会动态更改，那么这是首选方法。否则，必须使用单个ClusterRoleBinding。</p><p><a href="https://xxlaila.github.io/2019/09/05/traefik-ingress%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">traefik学习</a><br><a href="https://docs.traefik.io/v1.7/user-guide/kubernetes/" target="_blank" rel="noopener">traefik官方</a></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>下载trarfix代码，然后切换到v1.7的分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/containous/traefik.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git branch --all</span></span><br><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/add-plugin-support</span><br><span class="line">  remotes/origin/gh-pages</span><br><span class="line">  remotes/origin/master</span><br><span class="line">  remotes/origin/v1.0</span><br><span class="line">  remotes/origin/v1.1</span><br><span class="line">  remotes/origin/v1.2</span><br><span class="line">  remotes/origin/v1.3</span><br><span class="line">  remotes/origin/v1.4</span><br><span class="line">  remotes/origin/v1.5</span><br><span class="line">  remotes/origin/v1.6</span><br><span class="line">  remotes/origin/v1.7</span><br><span class="line">  remotes/origin/v2.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># git checkout v1.7</span></span><br><span class="line">Branch <span class="string">'v1.7'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'v1.7'</span> from <span class="string">'origin'</span>.</span><br><span class="line">Switched to a new branch <span class="string">'v1.7'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /root/traefik/examples/k8s</span></span><br></pre></td></tr></table></figure><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><h4 id="使用ClusterRoleBinding"><a href="#使用ClusterRoleBinding" class="headerlink" title="使用ClusterRoleBinding"></a>使用ClusterRoleBinding</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f traefik-rbac.yaml </span></span><br><span class="line">clusterrole.rbac.authorization.k8s.io/traefik-ingress-controller created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/traefik-ingress-controller created</span><br></pre></td></tr></table></figure><p>对于命名空间限制，每个监视命名空间需要一个RoleBinding以及Traefik kubernetes.namespaces参数的相应配置。</p><h4 id="使用Deployments部署或部署DaemonSet"><a href="#使用Deployments部署或部署DaemonSet" class="headerlink" title="使用Deployments部署或部署DaemonSet"></a>使用Deployments部署或部署DaemonSet</h4><p>可以将Traefik与Deployment或DaemonSet对象一起使用，而这两个选项各有利弊：</p><ul><li>使用部署时，可伸缩性可以更好，因为在使用DaemonSet时您将拥有每个节点的Single-Pod模型，而在使用部署时，可能需要更少的基于环境的副本。</li><li>当节点加入群集时，DaemonSet会自动扩展到新节点，而部署窗格仅在需要时在新节点上进行调度。</li><li>DaemonSets确保只有一个pod副本在任何单个节点上运行。如果要确保两个pod不在同一节点上，则部署需要关联设置</li><li>可以使用该NET_BIND_SERVICE功能运行DaemonSet ，这将允许它绑定到每个主机上的端口80/443 / etc。这将允许绕过kube-proxy，并减少流量跳跃。请注意，这违反了Kubernetes最佳实践指南，并提出了调度/扩展问题的可能性。尽管存在潜在问题，但这仍然是大多数入口控制器的选择。</li></ul><h4 id="Deployments部署"><a href="#Deployments部署" class="headerlink" title="Deployments部署"></a>Deployments部署</h4><ul><li>修改traefik-deployment.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-controller</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-controller</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: traefik-ingress-lb</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: traefik-ingress-lb</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">    spec:</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      serviceAccountName: traefik-ingress-controller</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      containers:</span><br><span class="line">      - image: traefik:v1.7</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 80</span><br><span class="line">        - name: https</span><br><span class="line">          containerPort: 443</span><br><span class="line">          hostPort: 443</span><br><span class="line">        - name: admin</span><br><span class="line">          containerPort: 8080</span><br><span class="line">        securityContext:</span><br><span class="line">          capabilities:</span><br><span class="line">            drop:</span><br><span class="line">            - ALL</span><br><span class="line">            add:</span><br><span class="line">              - NET_BIND_SERVICE</span><br><span class="line">        args:</span><br><span class="line">        - --api</span><br><span class="line">        - --kubernetes</span><br><span class="line">        - --logLevel=INFO</span><br><span class="line">        - --web.metrics</span><br><span class="line">        - --metrics.prometheus</span><br><span class="line">        - --web.metrics.prometheus</span><br><span class="line">        - --kubernetes</span><br><span class="line">        - --traefiklog</span><br><span class="line">        - --traefiklog.format=json</span><br><span class="line">        - --accesslog</span><br><span class="line">        - --accesslog.format=json</span><br><span class="line">        - --accessLog.fields.headers.defaultMode=redact</span><br><span class="line">        - --insecureskipverify=<span class="literal">true</span></span><br><span class="line">        - --defaultentrypoints=http,https</span><br><span class="line">        - --entrypoints=Name:https Address::443 TLS</span><br><span class="line">        - --entrypoints=Name:http Address::80      </span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-service</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">  clusterIP: None</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      name: web</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 8080</span><br><span class="line">      name: admin</span><br><span class="line">  <span class="built_in">type</span>: ClusterIP</span><br></pre></td></tr></table></figure></li></ul><p><strong>参数</strong>:</p><ul><li>hostNetwork: 映射到本地网络</li><li>name: https 增加443端口的映射</li><li>securityContext，args: 参考官方</li><li>Service: 增加labels标签，用于后期的prometheus监控</li></ul><ul><li>部署traefik-deployment</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl  apply -f  traefik-deployment.yaml</span></span><br><span class="line">serviceaccount/traefik-ingress-controller created</span><br><span class="line">deployment.extensions/traefik-ingress-controller created</span><br><span class="line">service/traefik-ingress-service created</span><br></pre></td></tr></table></figure><h4 id="DaemonSets-部署-可选"><a href="#DaemonSets-部署-可选" class="headerlink" title="DaemonSets 部署(可选)"></a>DaemonSets 部署(可选)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f traefik-ds.yaml</span></span><br></pre></td></tr></table></figure><ul><li>Deployments和DaemonSets之间存在一些显着差异:<ul><li>部署具有更容易的向上和向下扩展可能性。它可以实现完整的pod生命周期，并支持Kubernetes 1.2的滚动更新。运行部署至少需要一个Pod。</li><li>DaemonSet会自动扩展到满足特定选择器的所有节点，并保证一次填充一个节点。Kubernetes 1.7也完全支持滚动更新，适用于DaemonSets</li></ul></li></ul><h3 id="检查部署"><a href="#检查部署" class="headerlink" title="检查部署"></a>检查部署</h3><ul><li><p>查看pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl --namespace=kube-system get pods</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-5579b8778b-xw8m9                     1/1     Running   2          3d21h</span><br><span class="line">kubernetes-dashboard-65dfbf6f4f-hcgbb        1/1     Running   0          2d16h</span><br><span class="line">metrics-server-94ff5d4cc-b97l5               1/1     Running   1          3d</span><br><span class="line">tiller-deploy-5cbcf75545-rbzld               1/1     Running   0          17h</span><br><span class="line">traefik-ingress-controller-c595665d6-cm7kh   1/1     Running   0          3m20s</span><br></pre></td></tr></table></figure></li><li><p>查看services</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get services --namespace=kube-system</span></span><br><span class="line">NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                       AGE</span><br><span class="line">kube-dns                  ClusterIP   10.254.0.2       &lt;none&gt;        53/UDP,53/TCP,9153/TCP        3d21h</span><br><span class="line">kubernetes-dashboard      NodePort    10.254.214.153   &lt;none&gt;        443:32533/TCP                 3d21h</span><br><span class="line">metrics-server            ClusterIP   10.254.61.132    &lt;none&gt;        443/TCP                       3d</span><br><span class="line">tiller-deploy             ClusterIP   10.254.207.227   &lt;none&gt;        44134/TCP                     17h</span><br><span class="line">traefik-ingress-service   NodePort    10.254.246.158   &lt;none&gt;        80:32146/TCP,8080:30455/TCP   3m53s</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里使用的是nodeport模式进行部署的，可以看到端口为32146，这里访问会返回<code>404 page not found</code>,那是因为我们还没有给Traefik任何配置。</p><ul><li>查看services 1<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get services --namespace=kube-system |grep "traefik"</span></span><br><span class="line">traefik-ingress-service   ClusterIP   None             &lt;none&gt;        80/TCP,8080/TCP          7m55s</span><br><span class="line">traefik-web-ui            ClusterIP   10.254.78.17     &lt;none&gt;        80/TCP                   21h</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个例子是修改过 <code>traefik-deployment.yaml</code> 的结果，明显没有nodeport的端口</p><h3 id="创建一个服务和一个将公开Traefik-Web-UI的Ingres"><a href="#创建一个服务和一个将公开Traefik-Web-UI的Ingres" class="headerlink" title="创建一个服务和一个将公开Traefik Web UI的Ingres"></a>创建一个服务和一个将公开Traefik Web UI的Ingres</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f ui.yaml </span></span><br><span class="line">service/traefik-web-ui created</span><br><span class="line">ingress.extensions/traefik-web-ui created</span><br></pre></td></tr></table></figure><p>在/etc/hosts 文件设置一个路由条目<code>traefik-ui.minikube</code></p><p>在浏览器进行访问可以看到Traefik Web UI</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>k8s v1.14, traefik</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 metrics-server</title>
    <url>/2019/09/17/k8s-v1-14-metrics-server/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>metrics-server这里不详细介绍，可以参考<a href="https://xxlaila.github.io/2019/09/04/metrics-server安装季/" target="_blank" rel="noopener">metrics-server安装季</a></p><h3 id="安装metrics-server"><a href="#安装metrics-server" class="headerlink" title="安装metrics-server"></a>安装metrics-server</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里安装和之前的<strong>metrics-server安装季</strong>稍微有点不一样，之前集群安装没有使用https证书，后面去各种生成的证书和踩坑，这里是在安装的时候一开始就使用了https全证书,所有稍微有一点区别，这里只列出有区别的地方，其他的完全可以参考<a href="https://xxlaila.github.io/2019/09/04/metrics-server安装季/" target="_blank" rel="noopener">metrics-server安装季</a>，这里https证书<strong>不需要</strong>重新生成；</p><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;配置文件也不需要添加，在v1.14安装的时候就已经吧配置文件添加进去了，所以这里配置文件也不需要增加</p><h3 id="文件的修改"><a href="#文件的修改" class="headerlink" title="文件的修改"></a>文件的修改</h3><ul><li><p>修改 metrics-server-deployment.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat metrics-server-deployment.yaml</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: metrics-server</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: metrics-server</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: metrics-server</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: metrics-server</span><br><span class="line">      hostNetwork: <span class="literal">true</span> 这个还是需要增加</span><br><span class="line">      volumes:</span><br><span class="line">      <span class="comment"># mount in tmp so we can safely use from-scratch images and/or read-only containers</span></span><br><span class="line">      - name: tmp-dir</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      containers:</span><br><span class="line">      - name: metrics-server</span><br><span class="line">        image: mirrorgooglecontainers/metrics-server-amd64:v0.3.4</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        args:  <span class="comment"># 这里不一样</span></span><br><span class="line">        - --metric-resolution=30s</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: tmp-dir</span><br><span class="line">          mountPath: /tmp</span><br></pre></td></tr></table></figure></li><li><p>–metric-resolution=30s：从 kubelet 采集数据的周期；</p></li><li><p>–kubelet-preferred-address-types：优先使用 InternalIP 来访问 kubelet，这样可以避免节点名称没有 DNS 解析记录时，通过节点名称调用节点 kubelet API 失败的情况（未配置时默认的情况）；</p></li><li><p><strong>hostNetwork: true:</strong> 这个不增加的会提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error from server (ServiceUnavailable): the server is currently unable to handle the request</span><br></pre></td></tr></table></figure></li><li><p>修改 resource-reader.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat resource-reader.yaml </span></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes/stats</span><br><span class="line">  - namespaces</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups: <span class="comment"># 增加</span></span><br><span class="line">  - <span class="string">"extensions"</span></span><br><span class="line">  resources:</span><br><span class="line">  - deployments</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure></li></ul><h3 id="执行创建"><a href="#执行创建" class="headerlink" title="执行创建"></a>执行创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f ./</span></span><br></pre></td></tr></table></figure><h3 id="查看运行情况"><a href="#查看运行情况" class="headerlink" title="查看运行情况"></a>查看运行情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -n kube-system get pods -l k8s-app=metrics-server</span></span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">metrics-server-94ff5d4cc-b97l5   1/1     Running   0          21m</span><br><span class="line"></span><br><span class="line"><span class="comment">#  kubectl get svc -n kube-system  metrics-server</span></span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">metrics-server   ClusterIP   10.254.61.132   &lt;none&gt;        443/TCP   27m</span><br></pre></td></tr></table></figure><h3 id="获取v1beta1-metrics-k8s-io并验证"><a href="#获取v1beta1-metrics-k8s-io并验证" class="headerlink" title="获取v1beta1.metrics.k8s.io并验证"></a>获取v1beta1.metrics.k8s.io并验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get apiservice</span></span><br><span class="line">NAME                                   SERVICE                      AVAILABLE   AGE</span><br><span class="line">v1.                                    Local                        True        23h</span><br><span class="line">v1.apps                                Local                        True        23h</span><br><span class="line">v1.authentication.k8s.io               Local                        True        23h</span><br><span class="line">v1.authorization.k8s.io                Local                        True        23h</span><br><span class="line">v1.autoscaling                         Local                        True        23h</span><br><span class="line">v1.batch                               Local                        True        23h</span><br><span class="line">v1.coordination.k8s.io                 Local                        True        23h</span><br><span class="line">v1.networking.k8s.io                   Local                        True        23h</span><br><span class="line">v1.rbac.authorization.k8s.io           Local                        True        23h</span><br><span class="line">v1.scheduling.k8s.io                   Local                        True        23h</span><br><span class="line">v1.storage.k8s.io                      Local                        True        23h</span><br><span class="line">v1alpha1.auditregistration.k8s.io      Local                        True        23h</span><br><span class="line">v1alpha1.node.k8s.io                   Local                        True        23h</span><br><span class="line">v1alpha1.rbac.authorization.k8s.io     Local                        True        23h</span><br><span class="line">v1alpha1.scheduling.k8s.io             Local                        True        23h</span><br><span class="line">v1alpha1.settings.k8s.io               Local                        True        23h</span><br><span class="line">v1alpha1.storage.k8s.io                Local                        True        23h</span><br><span class="line">v1beta1.admissionregistration.k8s.io   Local                        True        23h</span><br><span class="line">v1beta1.apiextensions.k8s.io           Local                        True        23h</span><br><span class="line">v1beta1.apps                           Local                        True        23h</span><br><span class="line">v1beta1.authentication.k8s.io          Local                        True        23h</span><br><span class="line">v1beta1.authorization.k8s.io           Local                        True        23h</span><br><span class="line">v1beta1.batch                          Local                        True        23h</span><br><span class="line">v1beta1.certificates.k8s.io            Local                        True        23h</span><br><span class="line">v1beta1.coordination.k8s.io            Local                        True        23h</span><br><span class="line">v1beta1.events.k8s.io                  Local                        True        23h</span><br><span class="line">v1beta1.extensions                     Local                        True        23h</span><br><span class="line">v1beta1.metrics.k8s.io                 kube-system/metrics-server   True        27m</span><br><span class="line">v1beta1.networking.k8s.io              Local                        True        23h</span><br><span class="line">v1beta1.node.k8s.io                    Local                        True        23h</span><br><span class="line">v1beta1.policy                         Local                        True        23h</span><br><span class="line">v1beta1.rbac.authorization.k8s.io      Local                        True        23h</span><br><span class="line">v1beta1.scheduling.k8s.io              Local                        True        23h</span><br><span class="line">v1beta1.storage.k8s.io                 Local                        True        23h</span><br><span class="line">v1beta2.apps                           Local                        True        23h</span><br><span class="line">v2alpha1.batch                         Local                        True        23h</span><br><span class="line">v2beta1.autoscaling                    Local                        True        23h</span><br><span class="line">v2beta2.autoscaling                    Local                        True        23h</span><br></pre></td></tr></table></figure><h3 id="metrics-server-的命令行参数"><a href="#metrics-server-的命令行参数" class="headerlink" title="metrics-server 的命令行参数"></a>metrics-server 的命令行参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl exec --namespace kube-system -it metrics-server-94ff5d4cc-b97l5 -- /metrics-server --help</span></span><br><span class="line">Launch metrics-server</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">   [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --alsologtostderr                                         <span class="built_in">log</span> to standard error as well as files</span><br><span class="line">      --authentication-kubeconfig string                        kubeconfig file pointing at the <span class="string">'core'</span> kubernetes server with enough rights to create tokenaccessreviews.authentication.k8s.io.</span><br><span class="line">      --authentication-skip-lookup                              If <span class="literal">false</span>, the authentication-kubeconfig will be used to lookup missing authentication configuration from the cluster.</span><br><span class="line">      --authentication-token-webhook-cache-ttl duration         The duration to cache responses from the webhook token authenticator. (default 10s)</span><br><span class="line">      --authentication-tolerate-lookup-failure                  If <span class="literal">true</span>, failures to look up missing authentication configuration from the cluster are not considered fatal. Note that this can result <span class="keyword">in</span> authentication that treats all requests as anonymous.</span><br><span class="line">      --authorization-always-allow-paths strings                A list of HTTP paths to skip during authorization, i.e. these are authorized without contacting the <span class="string">'core'</span> kubernetes server.</span><br><span class="line">      --authorization-kubeconfig string                         kubeconfig file pointing at the <span class="string">'core'</span> kubernetes server with enough rights to create subjectaccessreviews.authorization.k8s.io.</span><br><span class="line">      --authorization-webhook-cache-authorized-ttl duration     The duration to cache <span class="string">'authorized'</span> responses from the webhook authorizer. (default 10s)</span><br><span class="line">      --authorization-webhook-cache-unauthorized-ttl duration   The duration to cache <span class="string">'unauthorized'</span> responses from the webhook authorizer. (default 10s)</span><br><span class="line">      --<span class="built_in">bind</span>-address ip                                         The IP address on <span class="built_in">which</span> to listen <span class="keyword">for</span> the --secure-port port. The associated interface(s) must be reachable by the rest of the cluster, and by CLI/web clients. If blank, all interfaces will be used (0.0.0.0 <span class="keyword">for</span> all IPv4 interfaces and :: <span class="keyword">for</span> all IPv6 interfaces). (default 0.0.0.0)</span><br><span class="line">      --cert-dir string                                         The directory <span class="built_in">where</span> the TLS certs are located. If --tls-cert-file and --tls-private-key-file are provided, this flag will be ignored. (default <span class="string">"apiserver.local.config/certificates"</span>)</span><br><span class="line">      --client-ca-file string                                   If <span class="built_in">set</span>, any request presenting a client certificate signed by one of the authorities <span class="keyword">in</span> the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.</span><br><span class="line">      --contention-profiling                                    Enable lock contention profiling, <span class="keyword">if</span> profiling is enabled</span><br><span class="line">  -h, --<span class="built_in">help</span>                                                    <span class="built_in">help</span> <span class="keyword">for</span> this <span class="built_in">command</span></span><br><span class="line">      --http2-max-streams-per-connection int                    The <span class="built_in">limit</span> that the server gives to clients <span class="keyword">for</span> the maximum number of streams <span class="keyword">in</span> an HTTP/2 connection. Zero means to use golang<span class="string">'s default.</span></span><br><span class="line"><span class="string">      --kubeconfig string                                       The path to the kubeconfig used to connect to the Kubernetes API server and the Kubelets (defaults to in-cluster config)</span></span><br><span class="line"><span class="string">      --kubelet-certificate-authority string                    Path to the CA to use to validate the Kubelet'</span>s serving certificates.</span><br><span class="line">      --kubelet-insecure-tls                                    Do not verify CA of serving certificates presented by Kubelets.  For testing purposes only.</span><br><span class="line">      --kubelet-port int                                        The port to use to connect to Kubelets. (default 10250)</span><br><span class="line">      --kubelet-preferred-address-types strings                 The priority of node address types to use when determining <span class="built_in">which</span> address to use to connect to a particular node (default [Hostname,InternalDNS,InternalIP,ExternalDNS,ExternalIP])</span><br><span class="line">      --<span class="built_in">log</span>-flush-frequency duration                            Maximum number of seconds between <span class="built_in">log</span> flushes (default 5s)</span><br><span class="line">      --log_backtrace_at traceLocation                          when logging hits line file:N, emit a stack trace (default :0)</span><br><span class="line">      --log_dir string                                          If non-empty, write <span class="built_in">log</span> files <span class="keyword">in</span> this directory</span><br><span class="line">      --log_file string                                         If non-empty, use this <span class="built_in">log</span> file</span><br><span class="line">      --logtostderr                                             <span class="built_in">log</span> to standard error instead of files (default <span class="literal">true</span>)</span><br><span class="line">      --metric-resolution duration                              The resolution at <span class="built_in">which</span> metrics-server will retain metrics. (default 1m0s)</span><br><span class="line">      --profiling                                               Enable profiling via web interface host:port/debug/pprof/ (default <span class="literal">true</span>)</span><br><span class="line">      --requestheader-allowed-names strings                     List of client certificate common names to allow to provide usernames <span class="keyword">in</span> headers specified by --requestheader-username-headers. If empty, any client certificate validated by the authorities <span class="keyword">in</span> --requestheader-client-ca-file is allowed.</span><br><span class="line">      --requestheader-client-ca-file string                     Root certificate bundle to use to verify client certificates on incoming requests before trusting usernames <span class="keyword">in</span> headers specified by --requestheader-username-headers. WARNING: generally <span class="keyword">do</span> not depend on authorization being already <span class="keyword">done</span> <span class="keyword">for</span> incoming requests.</span><br><span class="line">      --requestheader-extra-headers-prefix strings              List of request header prefixes to inspect. X-Remote-Extra- is suggested. (default [x-remote-extra-])</span><br><span class="line">      --requestheader-group-headers strings                     List of request headers to inspect <span class="keyword">for</span> groups. X-Remote-Group is suggested. (default [x-remote-group])</span><br><span class="line">      --requestheader-username-headers strings                  List of request headers to inspect <span class="keyword">for</span> usernames. X-Remote-User is common. (default [x-remote-user])</span><br><span class="line">      --secure-port int                                         The port on <span class="built_in">which</span> to serve HTTPS with authentication and authorization.If 0, don<span class="string">'t serve HTTPS at all. (default 443)</span></span><br><span class="line"><span class="string">      --skip_headers                                            If true, avoid header prefixes in the log messages</span></span><br><span class="line"><span class="string">      --stderrthreshold severity                                logs at or above this threshold go to stderr</span></span><br><span class="line"><span class="string">      --tls-cert-file string                                    File containing the default x509 Certificate for HTTPS. (CA cert, if any, concatenated after server cert). If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to the directory specified by --cert-dir.</span></span><br><span class="line"><span class="string">      --tls-cipher-suites strings                               Comma-separated list of cipher suites for the server. If omitted, the default Go cipher suites will be use.  Possible values: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_RC4_128_SHA,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_RC4_128_SHA</span></span><br><span class="line"><span class="string">      --tls-min-version string                                  Minimum TLS version supported. Possible values: VersionTLS10, VersionTLS11, VersionTLS12</span></span><br><span class="line"><span class="string">      --tls-private-key-file string                             File containing the default x509 private key matching --tls-cert-file.</span></span><br><span class="line"><span class="string">      --tls-sni-cert-key namedCertKey                           A pair of x509 certificate and private key file paths, optionally suffixed with a list of domain patterns which are fully qualified domain names, possibly with prefixed wildcard segments. If no domain patterns are provided, the names of the certificate are extracted. Non-wildcard matches trump over wildcard matches, explicit domain patterns trump over extracted names. For multiple key/certificate pairs, use the --tls-sni-cert-key multiple times. Examples: "example.crt,example.key" or "foo.crt,foo.key:*.foo.com,foo.com". (default [])</span></span><br><span class="line"><span class="string">  -v, --v Level                                                 number for the log level verbosity</span></span><br><span class="line"><span class="string">      --vmodule moduleSpec                                      comma-separated list of pattern=N settings for file-filtered logging</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>: 如果是使用<a href="https://github.com/kubernetes-incubator/metrics-server.git" target="_blank" rel="noopener">metrics-server</a> 源码安装的，metrics-server-deployment.yaml文件需要这样修改，其他修改不变</p><ul><li><p>修改1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- name: metrics-server</span><br><span class="line">        image: mirrorgooglecontainers/metrics-server-amd64:v0.3.6</span><br><span class="line">        args:</span><br><span class="line">          - --cert-dir=/tmp</span><br><span class="line">          - --secure-port=4443</span><br><span class="line">          - --metric-resolution=30s</span><br><span class="line">          - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br><span class="line">        ports:</span><br><span class="line">        - name: main-port</span><br><span class="line">          containerPort: 4443</span><br><span class="line">          protocol: TCP</span><br></pre></td></tr></table></figure></li><li><p>修改2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除了上述修改，还可以用这种方式修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span>:</span><br><span class="line">        - /metrics-server</span><br><span class="line">        - --cert-dir=/tmp</span><br><span class="line">        - --kubelet-insecure-tls</span><br><span class="line">        - --secure-port=4443</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIp,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>metrics-server</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 dashboard</title>
    <url>/2019/09/16/k8s-v1-14-dashboard/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>kuberntes 自带插件的 manifests yaml 文件使用 gcr.io 的 docker registry，国内被墙，需要手动替换为其它 registry 地址</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>将下载的 kubernetes-server-linux-amd64.tar.gz 解压后，再解压其中的 kubernetes-src.tar.gz 文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd kubernetes</span></span><br><span class="line"><span class="comment"># tar -xzvf kubernetes-src.tar.gz</span></span><br></pre></td></tr></table></figure><p>dashboard 对应的目录是：cluster/addons/dashboard：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd cluster/addons/dashboard</span></span><br></pre></td></tr></table></figure><p>修改 service 定义，指定端口类型为 NodePort，这样外界可以通过地址 NodeIP:NodePort 访问 dashboard；</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat dashboard-service.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort <span class="comment"># 增加这一行</span></span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  ports:</span><br><span class="line">  - port: 443</span><br><span class="line">    targetPort: 8443</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat dashboard-controller.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kubernetes-dashboard</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kubernetes-dashboard</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">        seccomp.security.alpha.kubernetes.io/pod: <span class="string">'docker/default'</span></span><br><span class="line">    spec:</span><br><span class="line">      priorityClassName: system-cluster-critical</span><br><span class="line">      containers:</span><br><span class="line">      - name: kubernetes-dashboard</span><br><span class="line">        image: docker.io/xxlaila/kubernetes-dashboard-amd64:v1.10.0  <span class="comment">#修改这一行</span></span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 300Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 50m</span><br><span class="line">            memory: 100Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8443</span><br><span class="line">          protocol: TCP</span><br></pre></td></tr></table></figure><h3 id="执行所有定义文件"><a href="#执行所有定义文件" class="headerlink" title="执行所有定义文件"></a>执行所有定义文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls *.yaml</span></span><br><span class="line">dashboard-configmap.yaml  dashboard-controller.yaml  dashboard-rbac.yaml  dashboard-secret.yaml  dashboard-service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f  .</span></span><br></pre></td></tr></table></figure><h3 id="查看分配的-NodePort"><a href="#查看分配的-NodePort" class="headerlink" title="查看分配的 NodePort"></a>查看分配的 NodePort</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get deployment kubernetes-dashboard  -n kube-system</span></span><br><span class="line">NAME                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">kubernetes-dashboard   1/1     1            1           5h10m</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl --namespace kube-system get pods -o wide</span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE     IP             NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-5579b8778b-xw8m9                1/1     Running   1          5h15m   172.30.232.3   172.21.16.204   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubernetes-dashboard-6cc78dfc99-hb4l5   1/1     Running   0          5h10m   172.30.176.3   172.21.16.240   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get services kubernetes-dashboard -n kube-system</span></span><br><span class="line">NAME                   TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kubernetes-dashboard   NodePort   10.254.214.153   &lt;none&gt;        443:32533/TCP   5h10m</span><br></pre></td></tr></table></figure><ul><li>NodePort 32533 映射到 dashboard pod 443 端口；</li></ul><h3 id="查看-dashboard-支持的命令行参数"><a href="#查看-dashboard-支持的命令行参数" class="headerlink" title="查看 dashboard 支持的命令行参数"></a>查看 dashboard 支持的命令行参数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl exec --namespace kube-system -it kubernetes-dashboard-6cc78dfc99-hb4l5  -- /dashboard --help</span></span><br><span class="line">2019/09/16 09:51:33 Starting overwatch</span><br><span class="line">Usage of /dashboard:</span><br><span class="line">      --alsologtostderr                  <span class="built_in">log</span> to standard error as well as files</span><br><span class="line">      --api-log-level string             Level of API request logging. Should be one of <span class="string">'INFO|NONE|DEBUG'</span>. Default: <span class="string">'INFO'</span>. (default <span class="string">"INFO"</span>)</span><br><span class="line">      --apiserver-host string            The address of the Kubernetes Apiserver to connect to <span class="keyword">in</span> the format of protocol://address:port, e.g., http://localhost:8080. If not specified, the assumption is that the binary runs inside a Kubernetes cluster and <span class="built_in">local</span> discovery is attempted.</span><br><span class="line">      --authentication-mode strings      Enables authentication options that will be reflected on login screen. Supported values: token, basic. Default: token.Note that basic option should only be used <span class="keyword">if</span> apiserver has <span class="string">'--authorization-mode=ABAC'</span> and <span class="string">'--basic-auth-file'</span> flags <span class="built_in">set</span>. (default [token])</span><br><span class="line">      --auto-generate-certificates       When <span class="built_in">set</span> to <span class="literal">true</span>, Dashboard will automatically generate certificates used to serve HTTPS. Default: <span class="literal">false</span>.</span><br><span class="line">      --<span class="built_in">bind</span>-address ip                  The IP address on <span class="built_in">which</span> to serve the --secure-port (<span class="built_in">set</span> to 0.0.0.0 <span class="keyword">for</span> all interfaces). (default 0.0.0.0)</span><br><span class="line">      --default-cert-dir string          Directory path containing <span class="string">'--tls-cert-file'</span> and <span class="string">'--tls-key-file'</span> files. Used also when auto-generating certificates flag is <span class="built_in">set</span>. (default <span class="string">"/certs"</span>)</span><br><span class="line">      --<span class="built_in">disable</span>-settings-authorizer      When enabled, Dashboard settings page will not require user to be logged <span class="keyword">in</span> and authorized to access settings page.</span><br><span class="line">      --<span class="built_in">disable</span>-skip                     When enabled, the skip button on the login page will not be shown. Default: <span class="literal">false</span>.</span><br><span class="line">      --<span class="built_in">enable</span>-insecure-login            When enabled, Dashboard login view will also be shown when Dashboard is not served over HTTPS. Default: <span class="literal">false</span>.</span><br><span class="line">      --heapster-host string             The address of the Heapster Apiserver to connect to <span class="keyword">in</span> the format of protocol://address:port, e.g., http://localhost:8082. If not specified, the assumption is that the binary runs inside a Kubernetes cluster and service proxy will be used.</span><br><span class="line">      --insecure-bind-address ip         The IP address on <span class="built_in">which</span> to serve the --port (<span class="built_in">set</span> to 0.0.0.0 <span class="keyword">for</span> all interfaces). (default 127.0.0.1)</span><br><span class="line">      --insecure-port int                The port to listen to <span class="keyword">for</span> incoming HTTP requests. (default 9090)</span><br><span class="line">      --kubeconfig string                Path to kubeconfig file with authorization and master location information.</span><br><span class="line">      --log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)</span><br><span class="line">      --log_dir string                   If non-empty, write <span class="built_in">log</span> files <span class="keyword">in</span> this directory</span><br><span class="line">      --logtostderr                      <span class="built_in">log</span> to standard error instead of files</span><br><span class="line">      --metric-client-check-period int   Time <span class="keyword">in</span> seconds that defines how often configured metric client health check should be run. Default: 30 seconds. (default 30)</span><br><span class="line">      --port int                         The secure port to listen to <span class="keyword">for</span> incoming HTTPS requests. (default 8443)</span><br><span class="line">      --stderrthreshold severity         logs at or above this threshold go to stderr (default 2)</span><br><span class="line">      --system-banner string             When non-empty displays message to Dashboard users. Accepts simple HTML tags. Default: <span class="string">''</span>.</span><br><span class="line">      --system-banner-severity string    Severity of system banner. Should be one of <span class="string">'INFO|WARNING|ERROR'</span>. Default: <span class="string">'INFO'</span>. (default <span class="string">"INFO"</span>)</span><br><span class="line">      --tls-cert-file string             File containing the default x509 Certificate <span class="keyword">for</span> HTTPS.</span><br><span class="line">      --tls-key-file string              File containing the default x509 private key matching --tls-cert-file.</span><br><span class="line">      --token-ttl int                    Expiration time (<span class="keyword">in</span> seconds) of JWE tokens generated by dashboard. Default: 15 min. 0 - never expires (default 900)</span><br><span class="line">  -v, --v Level                          <span class="built_in">log</span> level <span class="keyword">for</span> V logs</span><br><span class="line">      --vmodule moduleSpec               comma-separated list of pattern=N settings <span class="keyword">for</span> file-filtered logging</span><br><span class="line">pflag: <span class="built_in">help</span> requested</span><br><span class="line"><span class="built_in">command</span> terminated with <span class="built_in">exit</span> code 2</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dashboard 的 –authentication-mode 支持 token、basic，默认为 token。如果使用 basic，则 kube-apiserver 必须配置 –authorization-mode=ABAC 和 –basic-auth-file 参数</p><h3 id="访问-dashboard"><a href="#访问-dashboard" class="headerlink" title="访问 dashboard"></a>访问 dashboard</h3><p>使用https协议，在浏览器输入任意node的ip加端口即可访问<br><img src="https://img.xxlaila.cn/1568961339763.jpg" alt="img"></p><h3 id="创建登录-Dashboard-的-token-和-kubeconfig-配置文件"><a href="#创建登录-Dashboard-的-token-和-kubeconfig-配置文件" class="headerlink" title="创建登录 Dashboard 的 token 和 kubeconfig 配置文件"></a>创建登录 Dashboard 的 token 和 kubeconfig 配置文件</h3><p>dashboard 默认只支持 token 认证（不支持 client 证书认证），所以如果使用 Kubeconfig 文件，需要将 token 写入到该文件。</p><h4 id="创建登录-token"><a href="#创建登录-token" class="headerlink" title="创建登录 token"></a>创建登录 token</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create sa dashboard-admin -n kube-system</span></span><br><span class="line"><span class="comment"># kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span></span><br><span class="line"><span class="comment"># ADMIN_SECRET=$(kubectl get secrets -n kube-system | grep dashboard-admin | awk '&#123;print $1&#125;')</span></span><br><span class="line"><span class="comment"># DASHBOARD_LOGIN_TOKEN=$(kubectl describe secret -n kube-system $&#123;ADMIN_SECRET&#125; | grep -E '^token' | awk '&#123;print $2&#125;')</span></span><br><span class="line"><span class="comment"># echo $&#123;DASHBOARD_LOGIN_TOKEN&#125;</span></span><br></pre></td></tr></table></figure><p>使用输出的 token 登录 Dashboard。</p><h3 id="创建使用-token-的-KubeConfig-文件"><a href="#创建使用-token-的-KubeConfig-文件" class="headerlink" title="创建使用 token 的 KubeConfig 文件"></a>创建使用 token 的 KubeConfig 文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=dashboard.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数，使用上面创建的 Token</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials dashboard_user \</span><br><span class="line">  --token=<span class="variable">$&#123;DASHBOARD_LOGIN_TOKEN&#125;</span> \</span><br><span class="line">  --kubeconfig=dashboard.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=dashboard_user \</span><br><span class="line">  --kubeconfig=dashboard.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context default --kubeconfig=dashboard.kubeconfig</span><br></pre></td></tr></table></figure><p>如图:<br><img src="https://img.xxlaila.cn/1568961447890.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用生成的 dashboard.kubeconfig 登录 Dashboard。由于k8s 默认的Dashboard 15分钟后就会弹出，又要重新登录和获取token麻烦，可以参考之前的<a href="https://xxlaila.github.io/2019/08/29/k8s配置Dashboard/" target="_blank" rel="noopener">k8s配置Dashboard</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>dashboard</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14 dns插件</title>
    <url>/2019/09/16/k8s-v1-14-dns%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="部署-coredns-插件"><a href="#部署-coredns-插件" class="headerlink" title="部署 coredns 插件"></a>部署 coredns 插件</h3><p><strong>注意:</strong></p><ul><li>kuberntes 自带插件的 manifests yaml 文件使用 gcr.io 的 docker registry，国内被墙，需要手动替换为其它 registry 地址;</li></ul><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>将下载的 kubernetes-server-linux-amd64.tar.gz 解压后，再解压其中的 kubernetes-src.tar.gz 文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd kubernetes</span></span><br><span class="line"><span class="comment"># tar -xzvf kubernetes-src.tar.gz</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>coredns 目录是 cluster/addons/dns<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd cluster/addons/dns/coredns</span></span><br><span class="line"><span class="comment"># cp coredns.yaml.base coredns.yaml</span></span><br><span class="line"><span class="comment"># sed -i -e "s/__PILLAR__DNS__DOMAIN__/cluster.local/" -e "s/__PILLAR__DNS__SERVER__/10.254.0.2/" coredns.yaml</span></span><br><span class="line"><span class="comment"># sed -i "s/k8s.gcr.io/coredns/" coredns.yaml</span></span><br><span class="line"><span class="comment"># kubectl create -f coredns.yaml</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="检查-coredns-功能"><a href="#检查-coredns-功能" class="headerlink" title="检查 coredns 功能"></a>检查 coredns 功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get all -n kube-system</span></span><br><span class="line">NAME                                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/coredns-5579b8778b-xw8m9                1/1     Running   1          5h7m</span><br><span class="line"></span><br><span class="line">NAME                           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class="line">service/kube-dns               ClusterIP   10.254.0.2       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   5h7m</span><br><span class="line"></span><br><span class="line">NAME                                   READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/coredns                1/1     1            1           5h7m</span><br><span class="line"></span><br><span class="line">NAME                                              DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/coredns-5579b8778b                1         1         1       5h7m</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods</span></span><br><span class="line">NAME             READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-ds-9fb46   1/1     Running   0          5h14m</span><br><span class="line">nginx-ds-bgfzt   1/1     Running   0          5h14m</span><br><span class="line">nginx-ds-t22wj   1/1     Running   0          5h14m</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -it exec nginx-ds-9fb46 bash</span></span><br><span class="line">root@nginx-ds-9fb46:/<span class="comment"># cat /etc/resolv.conf</span></span><br><span class="line">nameserver 10.254.0.2</span><br><span class="line">search default.svc.cluster.local svc.cluster.local cluster.local openstacklocal novalocal</span><br><span class="line">options ndots:5</span><br><span class="line"></span><br><span class="line">root@nginx-ds-9fb46:/<span class="comment"># ping www.baidu.com</span></span><br><span class="line">PING www.wshifen.com (104.193.88.77): 48 data bytes</span><br><span class="line">56 bytes from 104.193.88.77: icmp_seq=0 ttl=45 time=191.953 ms</span><br><span class="line">56 bytes from 104.193.88.77: icmp_seq=1 ttl=45 time=191.680 ms</span><br><span class="line">^C--- www.wshifen.com ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 191.680/191.817/191.953/0.137 ms</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@nginx-ds-9fb46:/<span class="comment"># ping kube-dns.kube-system.svc</span></span><br><span class="line">PING kube-dns.kube-system.svc.cluster.local (10.254.0.2): 48 data bytes</span><br><span class="line">56 bytes from 10.254.0.2: icmp_seq=0 ttl=64 time=0.120 ms</span><br><span class="line">56 bytes from 10.254.0.2: icmp_seq=1 ttl=64 time=0.116 ms</span><br><span class="line">^C--- kube-dns.kube-system.svc.cluster.local ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.116/0.118/0.120/0.000 ms</span><br><span class="line"></span><br><span class="line">root@nginx-ds-9fb46:/<span class="comment"># ping kube-dns.kube-system.svc.cluster.local</span></span><br><span class="line">PING kube-dns.kube-system.svc.cluster.local (10.254.0.2): 48 data bytes</span><br><span class="line">56 bytes from 10.254.0.2: icmp_seq=0 ttl=64 time=0.079 ms</span><br><span class="line">56 bytes from 10.254.0.2: icmp_seq=1 ttl=64 time=0.152 ms</span><br><span class="line">^C--- kube-dns.kube-system.svc.cluster.local ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.079/0.115/0.152/0.037 ms</span><br><span class="line"></span><br><span class="line">root@nginx-ds-9fb46:/<span class="comment"># ping kube-dns.kube-system.svc.cluster.local.</span></span><br><span class="line">PING kube-dns.kube-system.svc.cluster.local (10.254.0.2): 48 data bytes</span><br><span class="line">56 bytes from 10.254.0.2: icmp_seq=0 ttl=64 time=0.080 ms</span><br><span class="line">^C--- kube-dns.kube-system.svc.cluster.local ping statistics ---</span><br><span class="line">1 packets transmitted, 1 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max/stddev = 0.080/0.080/0.080/0.000 ms</span><br><span class="line">`</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>v1.14 coredns</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s v1.14集群验证</title>
    <url>/2019/09/16/k8s-v1-14%E9%9B%86%E7%BE%A4%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="验证集群功能"><a href="#验证集群功能" class="headerlink" title="验证集群功能"></a>验证集群功能</h3><h3 id="检查节点状态"><a href="#检查节点状态" class="headerlink" title="检查节点状态"></a>检查节点状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME            STATUS   ROLES    AGE     VERSION</span><br><span class="line">172.21.16.204   Ready    &lt;none&gt;   5h50m   v1.14.6</span><br><span class="line">172.21.16.240   Ready    &lt;none&gt;   5h48m   v1.14.6</span><br><span class="line">172.21.16.87    Ready    &lt;none&gt;   5h45m   v1.14.6</span><br></pre></td></tr></table></figure><p>都为 Ready 时正常。</p><a id="more"></a><h3 id="创建测试文件"><a href="#创建测试文件" class="headerlink" title="创建测试文件"></a>创建测试文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat nginx-ds.yml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ds</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx-ds</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx-ds</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ds</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-ds</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: my-nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl create -f nginx-ds.yml</span></span><br></pre></td></tr></table></figure><h3 id="检查各节点的-Pod-IP-连通性"><a href="#检查各节点的-Pod-IP-连通性" class="headerlink" title="检查各节点的 Pod IP 连通性"></a>检查各节点的 Pod IP 连通性</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods  -o wide|grep nginx-ds</span></span><br><span class="line">nginx-ds-9fb46   1/1     Running   0          5h2m   172.30.232.2   172.21.16.204   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-ds-bgfzt   1/1     Running   0          5h2m   172.30.128.2   172.21.16.87    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-ds-t22wj   1/1     Running   0          5h2m   172.30.176.2   172.21.16.240   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="检查服务-IP-和端口可达性"><a href="#检查服务-IP-和端口可达性" class="headerlink" title="检查服务 IP 和端口可达性"></a>检查服务 IP 和端口可达性</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc |grep nginx-ds</span></span><br><span class="line">nginx-ds     NodePort    10.254.232.104   &lt;none&gt;        80:30349/TCP   5h2m</span><br></pre></td></tr></table></figure><p>在浏览器在30349进行访问可以看到neinx的欢迎界面</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>v1.14</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-v1.14 node安装</title>
    <url>/2019/09/16/kubernetes-v1-14-node%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:43 GMT+0800 (China Standard Time) --><h3 id="1、安装docker"><a href="#1、安装docker" class="headerlink" title="1、安装docker"></a>1、安装docker</h3><h4 id="1-1、增加docker-源"><a href="#1-1、增加docker-源" class="headerlink" title="1.1、增加docker 源"></a>1.1、增加docker 源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">  --add-repo \</span><br><span class="line">  https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;官方的源比较慢，可以增加阿里的源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="1-1-1-node节点安装插件"><a href="#1-1-1-node节点安装插件" class="headerlink" title="1.1.1 node节点安装插件"></a>1.1.1 node节点安装插件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install -y epel-release</span></span><br><span class="line"><span class="comment"># yum install -y yum-utils  ipvsadm  telnet  wget  net-tools  conntrack  ipset  jq  iptables  curl  sysstat  libseccomp  socat  nfs-utils  fuse  fuse-devel </span></span><br><span class="line"><span class="comment"># yum install -y python-pip python-devel yum-utils device-mapper-persistent-data lvm2</span></span><br></pre></td></tr></table></figure><h4 id="1-2、安装docker"><a href="#1-2、安装docker" class="headerlink" title="1.2、安装docker"></a>1.2、安装docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  yum -y install docker-ce</span></span><br></pre></td></tr></table></figure><h4 id="1-3、修改docker-systemd-unit-文件"><a href="#1-3、修改docker-systemd-unit-文件" class="headerlink" title="1.3、修改docker systemd unit 文件"></a>1.3、修改docker systemd unit 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/docker.service |egrep -Ev "^$|^#"</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">BindsTo=containerd.service</span><br><span class="line">After=network-online.target firewalld.service containerd.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Requires=docker.socket</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=-/run/flannel/docker</span><br><span class="line">ExecStart=/usr/bin/dockerd <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">TimeoutSec=0</span><br><span class="line">RestartSec=2</span><br><span class="line">Restart=always</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TasksMax=infinity</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>dockerd 运行时会调用其它 docker 命令，如 docker-proxy，所以需要将 docker 命令所在的目录加到 PATH 环境变量中；</li><li>flanneld 启动时将网络配置写入 /run/flannel/docker 文件中，dockerd 启动前读取该文件中的环境变量 DOCKER_NETWORK_OPTIONS ，然后设置 docker0 网桥网段；</li><li>如果指定了多个 EnvironmentFile 选项，则必须将 /run/flannel/docker 放在最后(确保 docker0 使用 flanneld 生成的 bip 参数)；</li><li>docker 需要以 root 用于运行；</li></ul><h4 id="1-4、启动-docker-服务"><a href="#1-4、启动-docker-服务" class="headerlink" title="1.4、启动 docker 服务"></a>1.4、启动 docker 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable docker &amp;&amp; systemctl restart docker &amp;&amp; systemctl status docker</span></span><br></pre></td></tr></table></figure><h4 id="1-5、检查-docker0-网桥"><a href="#1-5、检查-docker0-网桥" class="headerlink" title="1.5、检查 docker0 网桥"></a>1.5、检查 docker0 网桥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/sbin/ip addr show flannel.1 &amp;&amp; /usr/sbin/ip addr show docker0</span></span><br><span class="line">3: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN </span><br><span class="line">    link/ether 8a:be:12:b9:ab:b8 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.30.128.0/32 scope global flannel.1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP </span><br><span class="line">    link/ether 02:42:eb:ec:ae:94 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.30.128.1/21 brd 172.30.135.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h5 id="1-5-1、查看-docker-的状态信息"><a href="#1-5-1、查看-docker-的状态信息" class="headerlink" title="1.5.1、查看 docker 的状态信息"></a>1.5.1、查看 docker 的状态信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps -elfH|grep docker</span></span><br><span class="line">0 S root      1436   975  0  80   0 - 28167 -      10:54 pts/0    00:00:00                 grep --color=auto docker</span><br><span class="line">4 S root      1265     1  1  80   0 - 122095 futex_ 10:54 ?       00:00:00   /usr/bin/dockerd --bip=172.30.112.1/21 --ip-masq=<span class="literal">false</span> --mtu=1450</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker info</span></span><br><span class="line">vClient:</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 0</span><br><span class="line">  Running: 0</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 0</span><br><span class="line"> Images: 0</span><br><span class="line"> Server Version: 18.09.6</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: xfs</span><br><span class="line">  Supports d_type: <span class="literal">true</span></span><br><span class="line">  Native Overlay Diff: <span class="literal">true</span></span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: <span class="built_in">local</span></span><br><span class="line">  Network: bridge host macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: 894b81a4b802e4eb2a91d1ce216b8817763c29fb</span><br><span class="line"> runc version: 425e105d5a03fabd737a126ad93d62a9eeede87f</span><br><span class="line"> init version: fec3683</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 4.4.193-1.el7.elrepo.x86_64</span><br><span class="line"> Operating System: CentOS Linux 7 (Core)</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: x86_64</span><br><span class="line"> CPUs: 4</span><br><span class="line"> Total Memory: 7.796GiB</span><br><span class="line"> Name: k8s-node-2.kxl</span><br><span class="line"> ID: GJEA:U6PT:NMHM:KWD2:DOIJ:U6XW:6N3U:4QZN:F5PT:CQXH:MZKU:VATL</span><br><span class="line"> Docker Root Dir: /var/lib/docker</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: <span class="literal">false</span></span><br><span class="line"> Insecure Registries:</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Live Restore Enabled: <span class="literal">false</span></span><br><span class="line"> Product License: Community Engine</span><br></pre></td></tr></table></figure><h3 id="2、部署-kubelet-组件"><a href="#2、部署-kubelet-组件" class="headerlink" title="2、部署 kubelet 组件"></a>2、部署 kubelet 组件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet 运行在每个 worker 节点上，接收 kube-apiserver 发送的请求，管理 Pod 容器，执行交互式命令，如 exec、run、logs 等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet 启动时自动向 kube-apiserver 注册节点信息，内置的 cadvisor 统计和监控节点的资源使用情况。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为确保安全，部署时关闭了 kubelet 的非安全 http 端口，对请求进行认证和授权，拒绝未授权的访问(如 apiserver、heapster 的请求)。</p><h4 id="2-1、创建-kubelet-bootstrap-kubeconfig-文件"><a href="#2-1、创建-kubelet-bootstrap-kubeconfig-文件" class="headerlink" title="2.1、创建 kubelet bootstrap kubeconfig 文件"></a>2.1、创建 kubelet bootstrap kubeconfig 文件</h4><p>NODE_NAMES 里面的值是node的主机名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NODE_NAMES=(node-01 node-02 node-03)</span></span><br><span class="line"><span class="keyword">for</span> node_name <span class="keyword">in</span> <span class="variable">$&#123;NODE_NAMES[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 token</span></span><br><span class="line">    <span class="built_in">export</span> BOOTSTRAP_TOKEN=$(kubeadm token create \</span><br><span class="line">      --description kubelet-bootstrap-token \</span><br><span class="line">      --groups system:bootstrappers:<span class="variable">$&#123;node_name&#125;</span> \</span><br><span class="line">      --kubeconfig ~/.kube/config)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置集群参数</span></span><br><span class="line">    kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">      --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">      --embed-certs=<span class="literal">true</span> \</span><br><span class="line">      --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">      --kubeconfig=kubelet-bootstrap-<span class="variable">$&#123;node_name&#125;</span>.kubeconfig</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置客户端认证参数</span></span><br><span class="line">    kubectl config <span class="built_in">set</span>-credentials kubelet-bootstrap \</span><br><span class="line">      --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</span><br><span class="line">      --kubeconfig=kubelet-bootstrap-<span class="variable">$&#123;node_name&#125;</span>.kubeconfig</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置上下文参数</span></span><br><span class="line">    kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">      --cluster=kubernetes \</span><br><span class="line">      --user=kubelet-bootstrap \</span><br><span class="line">      --kubeconfig=kubelet-bootstrap-<span class="variable">$&#123;node_name&#125;</span>.kubeconfig</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置默认上下文</span></span><br><span class="line">    kubectl config use-context default --kubeconfig=kubelet-bootstrap-<span class="variable">$&#123;node_name&#125;</span>.kubeconfig</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for node_name in $&#123;NODE_NAMES[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"&gt;&gt;&gt; <span class="variable">$&#123;node_name&#125;</span>"</span></span><br><span class="line">    scp kubelet-bootstrap-<span class="variable">$&#123;node_name&#125;</span>.kubeconfig root@<span class="variable">$&#123;node_name&#125;</span>:/etc/kubernetes/kubelet-bootstrap.kubeconfig</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><p>向 kubeconfig 写入的是 token，bootstrap 结束后 kube-controller-manager 为 kubelet 创建 client 和 server 证书；</p></li><li><p>查看 kubeadm 为各节点创建的 token:<br>master 节点查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm token list --kubeconfig ~/.kube/config</span></span><br><span class="line">TOKEN                     TTL       EXPIRES                     USAGES                   DESCRIPTION               EXTRA GROUPS</span><br><span class="line">016e9x.306t91l832suzg8i   19h       2019-09-17T11:29:43+08:00   authentication,signing   kubelet-bootstrap-token   system:bootstrappers:node-03</span><br><span class="line">4l4tcx.juy6qs9rmrnfpbig   19h       2019-09-17T11:29:43+08:00   authentication,signing   kubelet-bootstrap-token   system:bootstrappers:node-01</span><br><span class="line">64pk36.vbhvbmtojpskyclt   19h       2019-09-17T11:29:43+08:00   authentication,signing   kubelet-bootstrap-token   system:bootstrappers:node-02</span><br></pre></td></tr></table></figure><ul><li>token 有效期为 1 天，超期后将不能再被用来 boostrap kubelet，且会被 kube-controller-manager 的 tokencleaner 清理；</li><li>kube-apiserver 接收 kubelet 的 bootstrap token 后，将请求的 user 设置为 system:bootstrap:<token>，group 设置为 system:bootstrappers，后续将为这个 group 设置 ClusterRoleBinding；</token></li></ul></li><li><p>查看各 token 关联的 Secret：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get secrets  -n kube-system|grep bootstrap-token</span></span><br><span class="line">bootstrap-token-016e9x                           bootstrap.kubernetes.io/token         7      4h25m</span><br><span class="line">bootstrap-token-4l4tcx                           bootstrap.kubernetes.io/token         7      4h25m</span><br><span class="line">bootstrap-token-64pk36                           bootstrap.kubernetes.io/token         7      4h25m</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2、创建和分发-kubelet-参数配置文件"><a href="#2-2、创建和分发-kubelet-参数配置文件" class="headerlink" title="2.2、创建和分发 kubelet 参数配置文件"></a>2.2、创建和分发 kubelet 参数配置文件</h4><p>从 v1.10 开始，部分 kubelet 参数需在配置文件中配置，kubelet –help 会提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEPRECATED: This parameter should be <span class="built_in">set</span> via the config file specified by the Kubelet<span class="string">'s --config flag</span></span><br></pre></td></tr></table></figure><ul><li><p>创建 kubelet 参数配置文件模板</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/kubelet-config.yaml</span></span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">address: <span class="string">"##node_ip##"</span></span><br><span class="line">staticPodPath: <span class="string">""</span></span><br><span class="line">syncFrequency: 1m</span><br><span class="line">fileCheckFrequency: 20s</span><br><span class="line">httpCheckFrequency: 20s</span><br><span class="line">staticPodURL: <span class="string">""</span></span><br><span class="line">port: 10250</span><br><span class="line">readOnlyPort: 0</span><br><span class="line">rotateCertificates: <span class="literal">true</span></span><br><span class="line">serverTLSBootstrap: <span class="literal">true</span></span><br><span class="line">authentication:</span><br><span class="line">  anonymous:</span><br><span class="line">    enabled: <span class="literal">false</span></span><br><span class="line">  webhook:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  x509:</span><br><span class="line">    clientCAFile: <span class="string">"/etc/kubernetes/ssl/ca.pem"</span></span><br><span class="line">authorization:</span><br><span class="line">  mode: Webhook</span><br><span class="line">registryPullQPS: 0</span><br><span class="line">registryBurst: 20</span><br><span class="line">eventRecordQPS: 0</span><br><span class="line">eventBurst: 20</span><br><span class="line">enableDebuggingHandlers: <span class="literal">true</span></span><br><span class="line">enableContentionProfiling: <span class="literal">true</span></span><br><span class="line">healthzPort: 10248</span><br><span class="line">healthzBindAddress: <span class="string">"##node_ip##"</span></span><br><span class="line">clusterDomain: <span class="string">"cluster.local"</span></span><br><span class="line">clusterDNS:</span><br><span class="line">  - <span class="string">"10.254.0.2"</span></span><br><span class="line">nodeStatusUpdateFrequency: 10s</span><br><span class="line">nodeStatusReportFrequency: 1m</span><br><span class="line">imageMinimumGCAge: 2m</span><br><span class="line">imageGCHighThresholdPercent: 85</span><br><span class="line">imageGCLowThresholdPercent: 80</span><br><span class="line">volumeStatsAggPeriod: 1m</span><br><span class="line">kubeletCgroups: <span class="string">""</span></span><br><span class="line">systemCgroups: <span class="string">""</span></span><br><span class="line">cgroupRoot: <span class="string">""</span></span><br><span class="line">cgroupsPerQOS: <span class="literal">true</span></span><br><span class="line">cgroupDriver: cgroupfs</span><br><span class="line">runtimeRequestTimeout: 10m</span><br><span class="line">hairpinMode: promiscuous-bridge</span><br><span class="line">maxPods: 100</span><br><span class="line"><span class="comment"># podCIDR: "172.30.0.0/16"</span></span><br><span class="line">podPidsLimit: -1</span><br><span class="line">resolvConf: /etc/resolv.conf</span><br><span class="line">maxOpenFiles: 1000000</span><br><span class="line">kubeAPIQPS: 1000</span><br><span class="line">kubeAPIBurst: 2000</span><br><span class="line">serializeImagePulls: <span class="literal">false</span></span><br><span class="line">evictionHard:</span><br><span class="line">  memory.available:  <span class="string">"100Mi"</span></span><br><span class="line">nodefs.available:  <span class="string">"10%"</span></span><br><span class="line">nodefs.inodesFree: <span class="string">"5%"</span></span><br><span class="line">imagefs.available: <span class="string">"15%"</span></span><br><span class="line">evictionSoft: &#123;&#125;</span><br><span class="line">enableControllerAttachDetach: <span class="literal">true</span></span><br><span class="line">failSwapOn: <span class="literal">true</span></span><br><span class="line">containerLogMaxSize: 20Mi</span><br><span class="line">containerLogMaxFiles: 10</span><br><span class="line">systemReserved: &#123;&#125;</span><br><span class="line">kubeReserved: &#123;&#125;</span><br><span class="line">systemReservedCgroup: <span class="string">""</span></span><br><span class="line">kubeReservedCgroup: <span class="string">""</span></span><br><span class="line">enforceNodeAllocatable: [<span class="string">"pods"</span>]</span><br></pre></td></tr></table></figure><ul><li>address：kubelet 安全端口（https，10250）监听的地址，不能为 127.0.0.1，否则 kube-apiserver、heapster 等不能调用 kubelet 的 API；</li><li>readOnlyPort=0：关闭只读端口(默认 10255)，等效为未指定；</li><li>authentication.anonymous.enabled：设置为 false，不允许匿名�访问 10250 端口；</li><li>authentication.x509.clientCAFile：指定签名客户端证书的 CA 证书，开启 HTTP 证书认证；</li><li>authentication.webhook.enabled=true：开启 HTTPs bearer token 认证；</li><li>对于未通过 x509 证书和 webhook 认证的请求(kube-apiserver 或其他客户端)，将被拒绝，提示 Unauthorized；</li><li>authroization.mode=Webhook：kubelet 使用 SubjectAccessReview API 查询 kube-apiserver 某 user、group 是否具有操作资源的权限(RBAC)；</li><li>featureGates.RotateKubeletClientCertificate、featureGates.RotateKubeletServerCertificate：自动 rotate 证书，证书的有效期取决于 kube-controller-manager 的 –experimental-cluster-signing-duration 参数；</li><li>需要 root 账户运行；</li></ul></li></ul><h4 id="2-3、创建kubelet-systemd-unit-文件"><a href="#2-3、创建kubelet-systemd-unit-文件" class="headerlink" title="2.3、创建kubelet systemd unit 文件"></a>2.3、创建kubelet systemd unit 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kubelet.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/<span class="built_in">log</span>/k8s/kubelet</span><br><span class="line">ExecStart=/usr/bin/kubelet \</span><br><span class="line">  --allow-privileged=<span class="literal">true</span> \</span><br><span class="line">  --bootstrap-kubeconfig=/etc/kubernetes/kubelet-bootstrap.kubeconfig \</span><br><span class="line">  --cert-dir=/etc/kubernetes/ssl \</span><br><span class="line">  --network-plugin=cni \</span><br><span class="line">  --cni-conf-dir=/etc/cni/net.d \</span><br><span class="line">  --cni-bin-dir=/opt/cni/bin \</span><br><span class="line">  --container-runtime=docker \</span><br><span class="line">  --container-runtime-endpoint=unix:///var/run/dockershim.sock \</span><br><span class="line">  --root-dir=/var/lib/kubelet \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="line">  --config=/etc/kubernetes/kubelet-config.yaml \</span><br><span class="line">  --hostname-override=<span class="comment">##node_ip## \</span></span><br><span class="line">  --pod-infra-container-image=registry.cn-beijing.aliyuncs.com/images_k8s/pause-amd64:3.1 \</span><br><span class="line">  --image-pull-progress-deadline=15m \</span><br><span class="line">  --volume-plugin-dir=/var/lib/kubelet/kubelet-plugins/volume/<span class="built_in">exec</span>/ \</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">StartLimitInterval=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>如果设置了 –hostname-override 选项，则 kube-proxy 也需要设置该选项，否则会出现找不到 Node 的情况；</li><li>–bootstrap-kubeconfig：指向 bootstrap kubeconfig 文件，kubelet 使用该文件中的用户名和 token 向 kube-apiserver 发送 TLS Bootstrapping 请求；</li><li>K8S approve kubelet 的 csr 请求后，在 –cert-dir 目录创建证书和私钥文件，然后写入 –kubeconfig 文件；</li><li>–pod-infra-container-image 不使用 redhat 的 pod-infrastructure:latest 镜像，它不能回收容器的僵尸；</li></ul><h4 id="2-4、Bootstrap-Token-Auth-和授予权限"><a href="#2-4、Bootstrap-Token-Auth-和授予权限" class="headerlink" title="2.4、Bootstrap Token Auth 和授予权限"></a>2.4、Bootstrap Token Auth 和授予权限</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet 启动时查找 –kubeletconfig 参数对应的文件是否存在，如果不存在则使用 –bootstrap-kubeconfig 指定的 kubeconfig 文件向 kube-apiserver 发送证书签名请求 (CSR)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kube-apiserver 收到 CSR 请求后，对其中的 Token 进行认证，认证通过后将请求的 user 设置为 system:bootstrap:<token>，group 设置为 system:bootstrappers，这一过程称为 Bootstrap Token Auth。</token></p><p>默认情况下，这个 user 和 group 没有创建 CSR 的权限，kubelet 启动失败，错误日志如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.858672   20385 reflector.go:126] k8s.io/client-go/informers/factory.go:133: Failed to list *v1beta1.RuntimeClass: Unauthorized</span><br><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.860429   20385 reflector.go:126] k8s.io/client-go/informers/factory.go:133: Failed to list *v1beta1.CSIDriver: Unauthorized</span><br><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.903098   20385 kubelet.go:2244] node <span class="string">"172.21.16.240"</span> not found</span><br><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.985568   20385 reflector.go:126] k8s.io/kubernetes/pkg/kubelet/kubelet.go:442: Failed to list *v1.Service: Unauthorized</span><br><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.986781   20385 reflector.go:126] k8s.io/kubernetes/pkg/kubelet/config/apiserver.go:47: Failed to list *v1.Pod: Unauthorized</span><br><span class="line">Sep 16 11:39:43 node-02 kubelet[20385]: E0916 11:39:43.987454   20385 reflector.go:126] k8s.io/kubernetes/pkg/kubelet/kubelet.go:451: Failed to list *v1.Node: Unauthorized</span><br></pre></td></tr></table></figure><p>解决办法是：创建一个 clusterrolebinding，将 group system:bootstrappers 和 clusterrole system:node-bootstrapper 绑定：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --group=system:bootstrappers</span></span><br></pre></td></tr></table></figure><h4 id="2-5、启动-kubelet-服务"><a href="#2-5、启动-kubelet-服务" class="headerlink" title="2.5、启动 kubelet 服务"></a>2.5、启动 kubelet 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /var/log/k8s/kubelet</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable kubelet &amp;&amp; systemctl restart kubelet &amp;&amp; systemctl status kubelet</span></span><br></pre></td></tr></table></figure><ul><li>启动服务前必须先创建工作目录；</li><li>关闭 swap 分区，否则 kubelet 会启动失败；</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet 启动后使用 –bootstrap-kubeconfig 向 kube-apiserver 发送 CSR 请求，当这个 CSR 被 approve 后，kube-controller-manager 为 kubelet 创建 TLS 客户端证书、私钥和 –kubeletconfig 文件。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>注意</strong>：kube-controller-manager 需要配置 –cluster-signing-cert-file 和 –cluster-signing-key-file 参数，才会为 TLS Bootstrap 创建证书和私钥。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get csr</span></span><br><span class="line">NAME        AGE     REQUESTOR                 CONDITION</span><br><span class="line">csr-bwcbm   82s     system:bootstrap:016e9x   Pending</span><br><span class="line">csr-gqdhf   105s    system:bootstrap:64pk36   Pending</span><br><span class="line">csr-q995g   6m57s   system:bootstrap:4l4tcx   Pending</span><br><span class="line">csr-xx45v   7m33s   system:bootstrap:4l4tcx   Pending</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line">No resources found.</span><br></pre></td></tr></table></figure><h4 id="2-6、自动-approve-CSR-请求"><a href="#2-6、自动-approve-CSR-请求" class="headerlink" title="2.6、自动 approve CSR 请求"></a>2.6、自动 approve CSR 请求</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/csr-crb.yaml</span></span><br><span class="line"><span class="comment"># Approve all CSRs for the group "system:bootstrappers"</span></span><br><span class="line"> kind: ClusterRoleBinding</span><br><span class="line"> apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"> metadata:</span><br><span class="line">   name: auto-approve-csrs-for-group</span><br><span class="line"> subjects:</span><br><span class="line"> - kind: Group</span><br><span class="line">   name: system:bootstrappers</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br><span class="line"> roleRef:</span><br><span class="line">   kind: ClusterRole</span><br><span class="line">   name: system:certificates.k8s.io:certificatesigningrequests:nodeclient</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br><span class="line">---</span><br><span class="line"> <span class="comment"># To let a node of the group "system:nodes" renew its own credentials</span></span><br><span class="line"> kind: ClusterRoleBinding</span><br><span class="line"> apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"> metadata:</span><br><span class="line">   name: node-client-cert-renewal</span><br><span class="line"> subjects:</span><br><span class="line"> - kind: Group</span><br><span class="line">   name: system:nodes</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br><span class="line"> roleRef:</span><br><span class="line">   kind: ClusterRole</span><br><span class="line">   name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br><span class="line">---</span><br><span class="line"><span class="comment"># A ClusterRole which instructs the CSR approver to approve a node requesting a</span></span><br><span class="line"><span class="comment"># serving cert matching its client cert.</span></span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: approve-node-server-renewal-csr</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [<span class="string">"certificates.k8s.io"</span>]</span><br><span class="line">  resources: [<span class="string">"certificatesigningrequests/selfnodeserver"</span>]</span><br><span class="line">  verbs: [<span class="string">"create"</span>]</span><br><span class="line">---</span><br><span class="line"> <span class="comment"># To let a node of the group "system:nodes" renew its own server credentials</span></span><br><span class="line"> kind: ClusterRoleBinding</span><br><span class="line"> apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line"> metadata:</span><br><span class="line">   name: node-server-cert-renewal</span><br><span class="line"> subjects:</span><br><span class="line"> - kind: Group</span><br><span class="line">   name: system:nodes</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br><span class="line"> roleRef:</span><br><span class="line">   kind: ClusterRole</span><br><span class="line">   name: approve-node-server-renewal-csr</span><br><span class="line">   apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure><ul><li>auto-approve-csrs-for-group：自动 approve node 的第一次 CSR； 注意第一次 CSR 时，请求的 Group 为 system:bootstrappers；</li><li>node-client-cert-renewal：自动 approve node 后续过期的 client 证书，自动生成的证书 Group 为 system:nodes;</li><li>node-server-cert-renewal：自动 approve node 后续过期的 server 证书，自动生成的证书 Group 为 system:nodes;</li></ul><h4 id="2-6、等查看-kubelet-的情况"><a href="#2-6、等查看-kubelet-的情况" class="headerlink" title="2.6、等查看 kubelet 的情况"></a>2.6、等查看 kubelet 的情况</h4><p>待一段时间(1-10 分钟)，三个节点的 CSR 都被自动 approved：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get csr</span></span><br><span class="line">NAME        AGE     REQUESTOR                   CONDITION</span><br><span class="line">csr-2t4bj   2m58s   system:node:172.21.16.240   Pending</span><br><span class="line">csr-2z2mq   4m14s   system:node:172.21.16.204   Pending</span><br><span class="line">csr-bwcbm   6m6s    system:bootstrap:016e9x     Approved,Issued</span><br><span class="line">csr-gqdhf   6m29s   system:bootstrap:64pk36     Approved,Issued</span><br><span class="line">csr-q995g   11m     system:bootstrap:4l4tcx     Approved,Issued</span><br><span class="line">csr-xx45v   12m     system:bootstrap:4l4tcx     Pending</span><br></pre></td></tr></table></figure><ul><li>所有节点均 ready：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME            STATUS   ROLES    AGE     VERSION</span><br><span class="line">172.21.16.204   Ready    &lt;none&gt;   4m17s   v1.14.6</span><br><span class="line">172.21.16.240   Ready    &lt;none&gt;   3m2s    v1.14.6</span><br><span class="line">172.21.16.231    Ready    &lt;none&gt;   3s      v1.14.6</span><br></pre></td></tr></table></figure></li></ul><p>kube-controller-manager 为各 node 生成了 kubeconfig 文件和公私钥：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls -l /etc/kubernetes/kubelet.kubeconfig</span></span><br><span class="line">-rw------- 1 root root 2311 Sep 16 11:31 /etc/kubernetes/kubelet.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls -l /etc/kubernetes/ssl/|grep kubelet</span></span><br><span class="line">-rw------- 1 root root 1281 Sep 16 11:43 kubelet-client-2019-09-16-11-43-20.pem</span><br><span class="line">lrwxrwxrwx 1 root root   58 Sep 16 11:43 kubelet-client-current.pem -&gt; /etc/kubernetes/ssl/kubelet-client-2019-09-16-11-43-20.pem</span><br></pre></td></tr></table></figure><p>没有自动生成 kubelet server 证书；</p><h4 id="2-8、手动-approve-server-cert-csr"><a href="#2-8、手动-approve-server-cert-csr" class="headerlink" title="2.8、手动 approve server cert csr"></a>2.8、手动 approve server cert csr</h4><p>基于<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls-bootstrapping/#kubelet-configuratio" target="_blank" rel="noopener">安全性考虑</a>，CSR approving controllers 不会自动 approve kubelet server 证书签名请求，需要手动 approve：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get csr</span></span><br><span class="line">NAME        AGE     REQUESTOR                   CONDITION</span><br><span class="line">csr-2t4bj   3m5s    system:node:172.21.16.240   Pending</span><br><span class="line">csr-2z2mq   4m21s   system:node:172.21.16.204   Pending</span><br><span class="line">csr-bwcbm   6m13s   system:bootstrap:016e9x     Approved,Issued</span><br><span class="line">csr-gqdhf   6m36s   system:bootstrap:64pk36     Approved,Issued</span><br><span class="line">csr-gtkrt   7s      system:node:172.21.16.231    Pending</span><br><span class="line">csr-q995g   11m     system:bootstrap:4l4tcx     Approved,Issued</span><br><span class="line">csr-xx45v   12m     system:bootstrap:4l4tcx     Pending</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl certificate approve csr-2t4bj</span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/csr-2t4bj approved</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl certificate approve csr-2z2mq </span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/csr-2z2mq approved</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl certificate approve csr-gtkrt</span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/csr-gtkrt approved</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls -l /etc/kubernetes/ssl/|grep kubelet</span></span><br><span class="line">-rw------- 1 root root 1281 Sep 16 11:43 kubelet-client-2019-09-16-11-43-20.pem</span><br><span class="line">lrwxrwxrwx 1 root root   58 Sep 16 11:43 kubelet-client-current.pem -&gt; /etc/kubernetes/ssl/kubelet-client-2019-09-16-11-43-20.pem</span><br><span class="line">-rw------- 1 root root 1305 Sep 16 11:44 kubelet-server-2019-09-16-11-44-12.pem</span><br><span class="line">lrwxrwxrwx 1 root root   58 Sep 16 11:44 kubelet-server-current.pem -&gt; /etc/kubernetes/ssl/kubelet-server-2019-09-16-11-44-12.pem</span><br></pre></td></tr></table></figure><h4 id="2-9、kubelet-提供的-API-接口"><a href="#2-9、kubelet-提供的-API-接口" class="headerlink" title="2.9、kubelet 提供的 API 接口"></a>2.9、kubelet 提供的 API 接口</h4><p>kubelet 启动后监听多个端口，用于接收 kube-apiserver 或其它客户端发送的请求：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -lnpt|grep kubelet</span></span><br><span class="line">tcp        0      0 127.0.0.1:43042         0.0.0.0:*               LISTEN      22726/kubelet       </span><br><span class="line">tcp        0      0 172.21.16.231:10248      0.0.0.0:*               LISTEN      22726/kubelet       </span><br><span class="line">tcp6       0      0 :::10250                :::*                    LISTEN      22726/kubelet</span><br></pre></td></tr></table></figure><ul><li>10248: healthz http 服务；</li><li>10250: https 服务，访问该端口时需要认证和授权（即使访问 /healthz 也需要）；</li><li>未开启只读端口 10255；</li><li>从 K8S v1.10 开始，去除了 –cadvisor-port 参数（默认 4194 端口），不支持访问 cAdvisor UI &amp; API。</li></ul><p>由于关闭了匿名认证，同时开启了 webhook 授权，所有访问 10250 端口 https API 的请求都需要被认证和授权。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;预定义的 ClusterRole system:kubelet-api-admin 授予访问 kubelet 所有 API 的权限(kube-apiserver 使用的 kubernetes 证书 User 授予了该权限)：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe clusterrole system:kubelet-api-admin</span></span><br><span class="line">Name:         system:kubelet-api-admin</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources      Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------      -----------------  --------------  -----</span><br><span class="line">  nodes/<span class="built_in">log</span>      []                 []              [*]</span><br><span class="line">  nodes/metrics  []                 []              [*]</span><br><span class="line">  nodes/proxy    []                 []              [*]</span><br><span class="line">  nodes/spec     []                 []              [*]</span><br><span class="line">  nodes/stats    []                 []              [*]</span><br><span class="line">  nodes          []                 []              [get list watch proxy]</span><br></pre></td></tr></table></figure><h4 id="2-10、kubelet-api-认证和授权"><a href="#2-10、kubelet-api-认证和授权" class="headerlink" title="2.10、kubelet api 认证和授权"></a>2.10、kubelet api 认证和授权</h4><p>kubelet 配置了如下认证参数:</p><ul><li>authentication.anonymous.enabled：设置为 false，不允许匿名访问 10250 端口；</li><li>authentication.x509.clientCAFile：指定签名客户端证书的 CA 证书，开启 HTTPs 证书认证；</li><li>authentication.webhook.enabled=true：开启 HTTPs bearer token 认证；</li></ul><p>同时配置了如下授权参数:</p><ul><li>authroization.mode=Webhook：开启 RBAC 授权</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubelet 收到请求后，使用 clientCAFile 对证书签名进行认证，或者查询 bearer token 是否有效。如果两者都没通过，则拒绝请求，提示 Unauthorized：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem https://172.21.16.231:10250/metrics</span></span><br><span class="line">Unauthorized</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem -H "Authorization: Bearer 123456"  https://172.21.16.231:10250/metrics</span></span><br><span class="line">Unauthorized</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过认证后，kubelet 使用 SubjectAccessReview API 向 kube-apiserver 发送请求，查询证书或 token 对应的 user、group 是否有操作资源的权限(RBAC)；</p><h4 id="2-11、证书认证和授权"><a href="#2-11、证书认证和授权" class="headerlink" title="2.11、证书认证和授权"></a>2.11、证书认证和授权</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 权限不足的证书；</span></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem --cert /etc/kubernetes/ssl/kube-controller-manager.pem --key /etc/kubernetes/ssl/kube-controller-manager-key.pem https://172.21.16.231:10250/metrics</span></span><br><span class="line">Forbidden (user=system:kube-controller-manager, verb=get, resource=nodes, subresource=metrics)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用部署 kubectl 命令行工具时创建的、具有最高权限的 admin 证书；</span></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem --cert /etc/kubernetes/ssl/admin.pem --key /etc/kubernetes/ssl/admin-key.pem https://172.21.16.231:10250/metrics</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"1800"</span>&#125; 0</span><br></pre></td></tr></table></figure><ul><li>–cacert、–cert、–key 的参数值必须是文件路径，如上面的 ./admin.pem 不能省略 ./，否则返回 401 Unauthorized；</li></ul><h4 id="2-12、bear-token-认证和授权"><a href="#2-12、bear-token-认证和授权" class="headerlink" title="2.12、bear token 认证和授权"></a>2.12、bear token 认证和授权</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建一个 ServiceAccount，将它和 ClusterRole system:kubelet-api-admin 绑定，从而具有调用 kubelet API 的权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create sa kubelet-api-test</span></span><br><span class="line"><span class="comment"># kubectl create clusterrolebinding kubelet-api-test --clusterrole=system:kubelet-api-admin --serviceaccount=default:kubelet-api-test</span></span><br><span class="line"><span class="comment"># SECRET=$(kubectl get secrets | grep kubelet-api-test | awk '&#123;print $1&#125;')</span></span><br><span class="line"><span class="comment"># TOKEN=$(kubectl describe secret $&#123;SECRET&#125; | grep -E '^token' | awk '&#123;print $2&#125;')</span></span><br><span class="line"><span class="comment"># echo $&#123;TOKEN&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem -H "Authorization: Bearer $&#123;TOKEN&#125;" https://172.21.16.231:10250/metrics|head</span></span><br></pre></td></tr></table></figure><h3 id="3、cadvisor-和-metrics"><a href="#3、cadvisor-和-metrics" class="headerlink" title="3、cadvisor 和 metrics"></a>3、cadvisor 和 metrics</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cadvisor 是内嵌在 kubelet 二进制中的，统计所在节点各容器的资源(CPU、内存、磁盘、网卡)使用情况的服务。<br>浏览器访问 <a href="https://172.21.16.231:10250/metrics" target="_blank" rel="noopener">https://172.21.16.231:10250/metrics</a> 和 <a href="https://172.21.16.231:10250/metrics/cadvisor" target="_blank" rel="noopener">https://172.21.16.231:10250/metrics/cadvisor</a> 分别返回 kubelet 和 cadvisor 的 metrics。<br><img src="https://img.xxlaila.cn/1568624798589.jpg" alt="img"></p><p><strong>注意:</strong></p><ul><li>kubelet.config.json 设置 authentication.anonymous.enabled 为 false，不允许匿名证书访问 10250 的 https 服务；</li><li>参考<a href="https://xxlaila.github.io/2019/09/04/kubelet提供api请求接口/" target="_blank" rel="noopener">kubelet提供api请求接口</a>，创建和导入相关证书，然后访问上面的 10250 端口；</li></ul><h4 id="3-1、获取-kubelet-的配置"><a href="#3-1、获取-kubelet-的配置" class="headerlink" title="3.1、获取 kubelet 的配置"></a>3.1、获取 kubelet 的配置</h4><p>从 kube-apiserver 获取各节点 kubelet 的配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用部署 kubectl 命令行工具时创建的、具有最高权限的 admin 证书；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># curl -sSL --cacert /etc/kubernetes/ssl/ca.pem --cert /etc/kubernetes/ssl/admin.pem --key /etc/kubernetes/ssl/admin-key.pem $&#123;KUBE_APISERVER&#125;/api/v1/nodes/172.21.16.231/proxy/configz | jq  '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1"'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"syncFrequency"</span>: <span class="string">"1m0s"</span>,</span><br><span class="line">  <span class="string">"fileCheckFrequency"</span>: <span class="string">"20s"</span>,</span><br><span class="line">  <span class="string">"httpCheckFrequency"</span>: <span class="string">"20s"</span>,</span><br><span class="line">  <span class="string">"address"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="string">"port"</span>: 10250,</span><br><span class="line">  <span class="string">"rotateCertificates"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"serverTLSBootstrap"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"authentication"</span>: &#123;</span><br><span class="line">    <span class="string">"x509"</span>: &#123;</span><br><span class="line">      <span class="string">"clientCAFile"</span>: <span class="string">"/etc/kubernetes/ssl/ca.pem"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"webhook"</span>: &#123;</span><br><span class="line">      <span class="string">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"cacheTTL"</span>: <span class="string">"2m0s"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"anonymous"</span>: &#123;</span><br><span class="line">      <span class="string">"enabled"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"authorization"</span>: &#123;</span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"Webhook"</span>,</span><br><span class="line">    <span class="string">"webhook"</span>: &#123;</span><br><span class="line">      <span class="string">"cacheAuthorizedTTL"</span>: <span class="string">"5m0s"</span>,</span><br><span class="line">      <span class="string">"cacheUnauthorizedTTL"</span>: <span class="string">"30s"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"registryPullQPS"</span>: 0,</span><br><span class="line">  <span class="string">"registryBurst"</span>: 20,</span><br><span class="line">  <span class="string">"eventRecordQPS"</span>: 0,</span><br><span class="line">  <span class="string">"eventBurst"</span>: 20,</span><br><span class="line">  <span class="string">"enableDebuggingHandlers"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"enableContentionProfiling"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"healthzPort"</span>: 10248,</span><br><span class="line">  <span class="string">"healthzBindAddress"</span>: <span class="string">"172.21.16.231"</span>,</span><br><span class="line">  <span class="string">"oomScoreAdj"</span>: -999,</span><br><span class="line">  <span class="string">"clusterDomain"</span>: <span class="string">"cluster.local"</span>,</span><br><span class="line">  <span class="string">"clusterDNS"</span>: [</span><br><span class="line">    <span class="string">"10.254.0.2"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"streamingConnectionIdleTimeout"</span>: <span class="string">"4h0m0s"</span>,</span><br><span class="line">  <span class="string">"nodeStatusUpdateFrequency"</span>: <span class="string">"10s"</span>,</span><br><span class="line">  <span class="string">"nodeStatusReportFrequency"</span>: <span class="string">"1m0s"</span>,</span><br><span class="line">  <span class="string">"nodeLeaseDurationSeconds"</span>: 40,</span><br><span class="line">  <span class="string">"imageMinimumGCAge"</span>: <span class="string">"2m0s"</span>,</span><br><span class="line">  <span class="string">"imageGCHighThresholdPercent"</span>: 85,</span><br><span class="line">  <span class="string">"imageGCLowThresholdPercent"</span>: 80,</span><br><span class="line">  <span class="string">"volumeStatsAggPeriod"</span>: <span class="string">"1m0s"</span>,</span><br><span class="line">  <span class="string">"cgroupsPerQOS"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"cgroupDriver"</span>: <span class="string">"cgroupfs"</span>,</span><br><span class="line">  <span class="string">"cpuManagerPolicy"</span>: <span class="string">"none"</span>,</span><br><span class="line">  <span class="string">"cpuManagerReconcilePeriod"</span>: <span class="string">"10s"</span>,</span><br><span class="line">  <span class="string">"runtimeRequestTimeout"</span>: <span class="string">"10m0s"</span>,</span><br><span class="line">  <span class="string">"hairpinMode"</span>: <span class="string">"promiscuous-bridge"</span>,</span><br><span class="line">  <span class="string">"maxPods"</span>: 100,</span><br><span class="line">  <span class="string">"podCIDR"</span>: <span class="string">"172.30.0.0/16"</span>,</span><br><span class="line">  <span class="string">"podPidsLimit"</span>: -1,</span><br><span class="line">  <span class="string">"resolvConf"</span>: <span class="string">"/etc/resolv.conf"</span>,</span><br><span class="line">  <span class="string">"cpuCFSQuota"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"cpuCFSQuotaPeriod"</span>: <span class="string">"100ms"</span>,</span><br><span class="line">  <span class="string">"maxOpenFiles"</span>: 1000000,</span><br><span class="line">  <span class="string">"contentType"</span>: <span class="string">"application/vnd.kubernetes.protobuf"</span>,</span><br><span class="line">  <span class="string">"kubeAPIQPS"</span>: 1000,</span><br><span class="line">  <span class="string">"kubeAPIBurst"</span>: 2000,</span><br><span class="line">  <span class="string">"serializeImagePulls"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"evictionHard"</span>: &#123;</span><br><span class="line">    <span class="string">"memory.available"</span>: <span class="string">"100Mi"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"evictionPressureTransitionPeriod"</span>: <span class="string">"5m0s"</span>,</span><br><span class="line">  <span class="string">"enableControllerAttachDetach"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"makeIPTablesUtilChains"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"iptablesMasqueradeBit"</span>: 14,</span><br><span class="line">  <span class="string">"iptablesDropBit"</span>: 15,</span><br><span class="line">  <span class="string">"failSwapOn"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"containerLogMaxSize"</span>: <span class="string">"20Mi"</span>,</span><br><span class="line">  <span class="string">"containerLogMaxFiles"</span>: 10,</span><br><span class="line">  <span class="string">"configMapAndSecretChangeDetectionStrategy"</span>: <span class="string">"Watch"</span>,</span><br><span class="line">  <span class="string">"enforceNodeAllocatable"</span>: [</span><br><span class="line">    <span class="string">"pods"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"kind"</span>: <span class="string">"KubeletConfiguration"</span>,</span><br><span class="line">  <span class="string">"apiVersion"</span>: <span class="string">"kubelet.config.k8s.io/v1beta1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、部署-kube-proxy-组件"><a href="#4、部署-kube-proxy-组件" class="headerlink" title="4、部署 kube-proxy 组件"></a>4、部署 kube-proxy 组件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kube-proxy 运行在所有 worker 节点上，它监听 apiserver 中 service 和 endpoint 的变化情况，创建路由规则以提供服务 IP 和负载均衡功能。</p><h4 id="4-1、创建-kube-proxy-证书"><a href="#4-1、创建-kube-proxy-证书" class="headerlink" title="4.1、创建 kube-proxy 证书"></a>4.1、创建 kube-proxy 证书</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; kube-proxy-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li><p>CN：指定该证书的 User 为 system:kube-proxy；</p></li><li><p>预定义的 RoleBinding system:node-proxier 将User system:kube-proxy 与 Role system:node-proxier 绑定，该 Role 授予了调用 kube-apiserver Proxy 相关 API 的权限；</p></li><li><p>该证书只会被 kube-proxy 当做 client 证书使用，所以 hosts 字段为空；</p></li><li><p>生成证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ls kube-proxy*.pem</span></span><br><span class="line">kube-proxy-key.pem  kube-proxy.pem</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-2、创建和分发-kubeconfig-文件"><a href="#4-2、创建和分发-kubeconfig-文件" class="headerlink" title="4.2、创建和分发 kubeconfig 文件"></a>4.2、创建和分发 kubeconfig 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-credentials kube-proxy \</span></span><br><span class="line">  --client-certificate=kube-proxy.pem \</span><br><span class="line">  --client-key=kube-proxy-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-context default \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-proxy \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span></span><br></pre></td></tr></table></figure><ul><li>–embed-certs=true：将 ca.pem 和 admin.pem 证书内容嵌入到生成的 kubectl-proxy.kubeconfig 文件中(不加时，写入的是证书文件路径)</li></ul><h4 id="4-3、创建-kube-proxy-配置文件"><a href="#4-3、创建-kube-proxy-配置文件" class="headerlink" title="4.3、创建 kube-proxy 配置文件"></a>4.3、创建 kube-proxy 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/kube-proxy-config.yaml</span></span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">clientConnection:</span><br><span class="line">  burst: 200</span><br><span class="line">  kubeconfig: <span class="string">"/etc/kubernetes/kube-proxy.kubeconfig"</span></span><br><span class="line">  qps: 100</span><br><span class="line">bindAddress: 0.0.0.0</span><br><span class="line">healthzBindAddress: <span class="comment">##node_ip##:10256</span></span><br><span class="line">metricsBindAddress: <span class="comment">##node_ip##:10249</span></span><br><span class="line">enableProfiling: <span class="literal">true</span></span><br><span class="line">clusterCIDR: 10.244.0.0/16</span><br><span class="line">hostnameOverride: <span class="comment">##node_ip##</span></span><br><span class="line">mode: <span class="string">"ipvs"</span></span><br><span class="line">portRange: <span class="string">""</span></span><br><span class="line">kubeProxyIPTablesConfiguration:</span><br><span class="line">  masqueradeAll: <span class="literal">false</span></span><br><span class="line">kubeProxyIPVSConfiguration:</span><br><span class="line">  scheduler: rr</span><br><span class="line">  excludeCIDRs: []</span><br></pre></td></tr></table></figure><ul><li>bindAddress: 监听地址；</li><li>clientConnection.kubeconfig: 连接 apiserver 的 kubeconfig 文件；</li><li>clusterCIDR: kube-proxy 根据 –cluster-cidr 判断集群内部和外部流量，指定 –cluster-cidr 或 –masquerade-all 选项后 kube-proxy 才会对访问 Service IP 的请求做 SNAT；</li><li>hostnameOverride: 参数值必须与 kubelet 的值一致，否则 kube-proxy 启动后会找不到该 Node，从而不会创建任何 ipvs 规则；</li><li>mode: 使用 ipvs 模式；</li></ul><h4 id="4-4、创建kube-proxy-systemd-unit-文件"><a href="#4-4、创建kube-proxy-systemd-unit-文件" class="headerlink" title="4.4、创建kube-proxy systemd unit 文件"></a>4.4、创建kube-proxy systemd unit 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-proxy.service </span></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/<span class="built_in">log</span>/k8s/kube-proxy</span><br><span class="line">ExecStart=/usr/bin/kube-proxy \</span><br><span class="line">  --config=/etc/kubernetes/kube-proxy-config.yaml \</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="4-5、启动-kube-proxy-服务"><a href="#4-5、启动-kube-proxy-服务" class="headerlink" title="4.5、启动 kube-proxy 服务"></a>4.5、启动 kube-proxy 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /var/log/k8s/kube-proxy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable kube-proxy &amp;&amp; systemctl restart kube-proxy &amp;&amp; systemctl status kube-proxy</span></span><br></pre></td></tr></table></figure><h4 id="4-5、检查"><a href="#4-5、检查" class="headerlink" title="4.5、检查"></a>4.5、检查</h4><ul><li><p>查看监听端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -lnpt|grep kube-prox</span></span><br><span class="line">tcp        0      0 172.21.16.231:10256      0.0.0.0:*               LISTEN      27423/kube-proxy    </span><br><span class="line">tcp        0      0 172.21.16.231:10249      0.0.0.0:*               LISTEN      27423/kube-proxy</span><br></pre></td></tr></table></figure></li><li><p>查看 ipvs 路由规则</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipvsadm -ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  10.254.0.1:443 rr</span><br><span class="line">  -&gt; 172.21.17.30:6443            Masq    1      0          0         </span><br><span class="line">  -&gt; 172.21.17.31:6443            Masq    1      0          0 </span><br><span class="line">  -&gt; 172.21.16.110:6443           Masq    1      0          0</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>v1.14 node安装</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-v1.14安装</title>
    <url>/2019/09/11/kubernetes-v1-14%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:43 GMT+0800 (China Standard Time) --><h3 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h3><table><thead><tr><th>ip</th><th>type</th><th>docker</th><th>os</th><th>k8s version</th></tr></thead><tbody><tr><td>172.21.17.30</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td>v1.14.6</td></tr><tr><td>172.21.17.31</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.110</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.87</td><td>node,flanneld</td><td>18.06.2-ce</td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.240</td><td>node,flanneld,ha+kee</td><td>18.06.2-ce</td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.204</td><td>node,flanneld,ha+kee</td><td>18.06.2-ce</td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.45</td><td>vip</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr></tbody></table><h3 id="2、初始化系统"><a href="#2、初始化系统" class="headerlink" title="2、初始化系统"></a>2、初始化系统</h3><h4 id="2-1、安装依赖包"><a href="#2-1、安装依赖包" class="headerlink" title="2.1、安装依赖包"></a>2.1、安装依赖包</h4><a id="more"></a><p>每台服务器均操作,关闭防火墙,关闭selinux</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install -y epel-release</span></span><br><span class="line"><span class="comment"># yum install -y conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget</span></span><br></pre></td></tr></table></figure><h4 id="2-2、关闭-swap-分区"><a href="#2-2、关闭-swap-分区" class="headerlink" title="2.2、关闭 swap 分区"></a>2.2、关闭 swap 分区</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果开启了 swap 分区，kubelet 会启动失败(可以通过将参数 –fail-swap-on 设置为 false 来忽略 swap on)，故需要在每台机器上关闭 swap 分区。同时注释 /etc/fstab 中相应的条目，防止开机自动挂载 swap 分区。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># swapoff -a</span></span><br><span class="line"><span class="comment"># sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab</span></span><br></pre></td></tr></table></figure><h4 id="2-3、加载内核模块"><a href="#2-3、加载内核模块" class="headerlink" title="2.3、加载内核模块"></a>2.3、加载内核模块</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># modprobe ip_vs_rr</span></span><br><span class="line"><span class="comment"># modprobe br_netfilter</span></span><br></pre></td></tr></table></figure><h5 id="2-3-1-加载内核，加入开机启动"><a href="#2-3-1-加载内核，加入开机启动" class="headerlink" title="2.3.1 加载内核，加入开机启动"></a>2.3.1 加载内核，加入开机启动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; /etc/rc.local  &lt;&lt; EOF</span></span><br><span class="line">modprobe ip_vs_rr</span><br><span class="line">modprobe br_netfilter</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h5 id="2-3-2-使用systemd-modules-load加载内核模块"><a href="#2-3-2-使用systemd-modules-load加载内核模块" class="headerlink" title="2.3.2 使用systemd-modules-load加载内核模块"></a>2.3.2 使用systemd-modules-load加载内核模块</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; /etc/modules-load.d/ipvs.conf &lt;&lt; EOF</span></span><br><span class="line"> ip_vs_rr</span><br><span class="line"> br_netfilter</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># systemctl enable --now systemd-modules-load.service</span></span><br></pre></td></tr></table></figure><h5 id="2-3-3-验证模块是否加载成功"><a href="#2-3-3-验证模块是否加载成功" class="headerlink" title="2.3.3 验证模块是否加载成功"></a>2.3.3 验证模块是否加载成功</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lsmod |egrep " ip_vs_rr|br_netfilter"</span></span><br><span class="line">为什么要使用IPVS,从k8s的1.8版本开始，kube-proxy引入了IPVS模式，IPVS模式与iptables同样基于Netfilter，但是采用的<span class="built_in">hash</span>表，因此当service数量达到一定规模时，<span class="built_in">hash</span>查表的速度优势就会显现出来，从而提高service的服务性能。</span><br></pre></td></tr></table></figure><h4 id="2-4、优化内核参数"><a href="#2-4、优化内核参数" class="headerlink" title="2.4、优化内核参数"></a>2.4、优化内核参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/sysctl.d/kubernetes.conf </span></span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv4.tcp_tw_recycle=0</span><br><span class="line">vm.swappiness=0</span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line">vm.panic_on_oom=0</span><br><span class="line">fs.inotify.max_user_instances=8192</span><br><span class="line">fs.inotify.max_user_watches=1048576</span><br><span class="line">fs.file-max=52706963</span><br><span class="line">fs.nr_open=52706963</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">net.netfilter.nf_conntrack_max=2310720</span><br><span class="line"></span><br><span class="line"><span class="comment"># sysctl -p /etc/sysctl.d/kubernetes.conf</span></span><br></pre></td></tr></table></figure><ul><li>必须关闭 tcp_tw_recycle，否则和 NAT 冲突，会导致服务不通；</li><li>关闭 IPV6，防止触发 docker BUG；</li></ul><h4 id="2-5、设置系统时区"><a href="#2-5、设置系统时区" class="headerlink" title="2.5、设置系统时区"></a>2.5、设置系统时区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># timedatectl set-timezone Asia/Shanghai</span></span><br><span class="line"><span class="comment"># timedatectl set-local-rtc 0</span></span><br><span class="line"><span class="comment"># systemctl restart rsyslog </span></span><br><span class="line"><span class="comment"># systemctl restart crond</span></span><br></pre></td></tr></table></figure><h4 id="2-6、关闭无关的服务"><a href="#2-6、关闭无关的服务" class="headerlink" title="2.6、关闭无关的服务"></a>2.6、关闭无关的服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl stop postfix &amp;&amp; systemctl disable postfix</span></span><br></pre></td></tr></table></figure><h3 id="3、升级内核"><a href="#3、升级内核" class="headerlink" title="3、升级内核"></a>3、升级内核</h3><p>以下在master节点操作<br>CentOS 7.x 系统自带的 3.10.x 内核存在一些 Bugs，导致运行的 Docker、Kubernetes 不稳定，例如:</p><ul><li>1.高版本的 docker(1.13 以后) 启用了 3.10 kernel 实验支持的 kernel memory account 功能(无法关闭)，当节点压力大如频繁启动和停止容器时会导致 cgroup memory leak；</li><li>2.网络设备引用计数泄漏，会导致类似于报错：”kernel:unregister_netdevice: waiting for eth0 to become free. Usage count = 1”;<br>解决方案如下:</li><li>1.升级内核到 4.4.X 以上</li><li>2.或者，手动编译内核，disable CONFIG_MEMCG_KMEM 特性</li><li>或者，安装修复了该问题的 Docker 18.09.1 及以上的版本。但由于 kubelet 也会设置 kmem（它 vendor 了 runc），所以需要重新编译 kubelet 并指定 GOFLAGS=”-tags=nokmem”</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --branch v1.14.1 --single-branch --depth 1 https://github.com/kubernetes/kubernetes</span><br><span class="line"><span class="built_in">cd</span> kubernetes</span><br><span class="line">KUBE_GIT_VERSION=v1.14.1 ./build/run.sh make kubelet GOFLAGS=<span class="string">"-tags=nokmem"</span></span><br></pre></td></tr></table></figure><h4 id="3-1、内核升级方法"><a href="#3-1、内核升级方法" class="headerlink" title="3.1、内核升级方法"></a>3.1、内核升级方法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span></span><br><span class="line"><span class="comment"># 安装完成后检查 /boot/grub2/grub.cfg 中对应内核 menuentry 中是否包含 initrd16 配置，如果没有，再安装一次！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yum --enablerepo=elrepo-kernel install -y kernel-lt</span></span><br><span class="line"><span class="comment"># 设置开机从新内核启动</span></span><br><span class="line"><span class="comment"># grub2-set-default 0</span></span><br></pre></td></tr></table></figure><h4 id="3-2、安装内核源文件"><a href="#3-2、安装内核源文件" class="headerlink" title="3.2、安装内核源文件"></a>3.2、安装内核源文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum --enablerepo=elrepo-kernel install kernel-lt-devel-$(uname -r) kernel-lt-headers-$(uname -r)</span></span><br></pre></td></tr></table></figure><h4 id="3-3、关闭-NUMA"><a href="#3-3、关闭-NUMA" class="headerlink" title="3.3、关闭 NUMA"></a>3.3、关闭 NUMA</h4><p>在其中一台master节点操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp /etc/default/grub&#123;,.bak&#125;</span></span><br><span class="line"><span class="comment"># 在 GRUB_CMDLINE_LINUX 一行添加 `numa=off` 参数，如下所示</span></span><br><span class="line"><span class="comment"># cat /etc/default/grub</span></span><br><span class="line">GRUB_TIMEOUT=1</span><br><span class="line">GRUB_DISTRIBUTOR=<span class="string">"<span class="variable">$(sed 's, release .*$,,g' /etc/system-release)</span>"</span></span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_DISABLE_SUBMENU=<span class="literal">true</span></span><br><span class="line">GRUB_TERMINAL=<span class="string">"serial console"</span></span><br><span class="line">GRUB_SERIAL_COMMAND=<span class="string">"serial --speed=115200"</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">"console=tty0 crashkernel=auto console=ttyS0,115200"</span></span><br><span class="line">numa=off</span><br><span class="line">GRUB_DISABLE_RECOVERY=<span class="string">"true"</span></span><br></pre></td></tr></table></figure><ul><li>重新生成 grub2 配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp /boot/grub2/grub.cfg&#123;,.bak&#125;</span></span><br><span class="line"><span class="comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4、创建CA证书和秘钥"><a href="#4、创建CA证书和秘钥" class="headerlink" title="4、创建CA证书和秘钥"></a>4、创建CA证书和秘钥</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为确保安全，kubernetes 系统各组件需要使用 x509 证书对通信进行加密和认证。CA (Certificate Authority) 是自签名的根证书，用来签名后续创建的其它证书。使用 CloudFlare 的 PKI 工具集 cfssl 创建所有证书，证书均在一台master节点进行操作，然后通过远程分发到其他的服务器上去。</p><ul><li><strong>注意</strong>: 每生成的证书均要进行分发到其他的master节点</li></ul><h4 id="4-1、安装-cfssl-工具集"><a href="#4-1、安装-cfssl-工具集" class="headerlink" title="4.1、安装 cfssl 工具集"></a>4.1、安装 cfssl 工具集</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -o cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span></span><br><span class="line"><span class="comment"># curl -o cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span></span><br><span class="line"><span class="comment"># curl -o cfssl-certinfo https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span></span><br><span class="line"><span class="comment"># chmod +x * &amp;&amp;mv cfssl* /usr/bin/</span></span><br><span class="line"><span class="comment"># scp /usr/bin/cfssl* &#123;master-ip&#125;:/usr/bin</span></span><br></pre></td></tr></table></figure><h4 id="4-2、创建根证书-CA"><a href="#4-2、创建根证书-CA" class="headerlink" title="4.2、创建根证书 (CA)"></a>4.2、创建根证书 (CA)</h4><p>CA 证书是集群所有节点共享的，只需要创建一个 CA 证书，后续创建的所有证书都由它签名。</p><h4 id="4-3、创建配置文件"><a href="#4-3、创建配置文件" class="headerlink" title="4.3、创建配置文件"></a>4.3、创建配置文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CA 配置文件用于配置根证书的使用场景 (profile) 和具体参数 (usage，过期时间、服务端认证、客户端认证、加密等)，后续在签名其它证书时需要指定特定场景。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir k8s &amp;&amp; cd k8s#后面k8s生成所需要的证书均在该目录执行</span></span><br></pre></td></tr></table></figure><ul><li><p>ca-config.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; ca-config.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"signing"</span>: &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">      <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profiles"</span>: &#123;</span><br><span class="line">      <span class="string">"kubernetes"</span>: &#123;</span><br><span class="line">        <span class="string">"usages"</span>: [</span><br><span class="line">            <span class="string">"signing"</span>,</span><br><span class="line">            <span class="string">"key encipherment"</span>,</span><br><span class="line">            <span class="string">"server auth"</span>,</span><br><span class="line">            <span class="string">"client auth"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>signing：表示该证书可用于签名其它证书，生成的 ca.pem 证书中 CA=TRUE；</p></li><li><p>server auth：表示 client 可以用该该证书对 server 提供的证书进行验证；</p></li><li><p>client auth：表示 server 可以用该该证书对 client 提供的证书进行验证；</p></li></ul><h4 id="4-4、创建证书签名请求文件"><a href="#4-4、创建证书签名请求文件" class="headerlink" title="4.4、创建证书签名请求文件"></a>4.4、创建证书签名请求文件</h4><ul><li><p>ca-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"ca"</span>: &#123;</span><br><span class="line">    <span class="string">"expiry"</span>: <span class="string">"876000h"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>CN：Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)，浏览器使用该字段验证网站是否合法；</p></li><li><p>O：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；</p></li><li><p>kube-apiserver 将提取的 User、Group 作为 RBAC 授权的用户标识；</p></li><li><p>生成 CA 证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span></span><br><span class="line"><span class="comment"># ls ca*</span></span><br><span class="line"><span class="comment"># mkdir -p /etc/kubernetes/ssl &amp;&amp; cp ca*.pem ca-config.json /etc/kubernetes/ssl</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-部署-kubectl-命令行工具"><a href="#5-部署-kubectl-命令行工具" class="headerlink" title="5.部署 kubectl 命令行工具"></a>5.部署 kubectl 命令行工具</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubectl 默认从 ~/.kube/config 文件读取 kube-apiserver 地址和认证信息，如果没有配置，执行 kubectl 命令时可能会出错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods</span></span><br><span class="line">The connection to the server localhost:8080 was refused - did you specify the right host or port?</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>:</li></ul><ul><li>本文档只需要部署一次，生成的 kubeconfig 文件是通用的，可以拷贝到需要执行 kubectl 命令的机器，重命名为 ~/.kube/config；</li></ul><h4 id="5-1、下载和分发-kubectl-二进制文件"><a href="#5-1、下载和分发-kubectl-二进制文件" class="headerlink" title="5.1、下载和分发 kubectl 二进制文件"></a>5.1、下载和分发 kubectl 二进制文件</h4><p>这里吧把node和master所需要的包均给一次性分发</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://dl.k8s.io/v1.14.6/kubernetes-server-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar -xzvf kubernetes-client-linux-amd64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># master 节点</span></span><br><span class="line"><span class="comment"># scp kubernetes/server/bin/&#123;apiextensions-apiserver,cloud-controller-manager,kube-apiserver,kube-controller-manager,kube-proxy,kube-scheduler,kubeadm,kubectl,kubelet,mounter&#125; &#123;master-ip&#125;:/usr/bin/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># node 节点</span></span><br><span class="line"><span class="comment"># scp kubernetes/server/bin/&#123;kube-proxy,kubelet&#125; &#123;node-ip&#125;:/usr/bin/</span></span><br></pre></td></tr></table></figure><h4 id="5-2、创建-admin-证书和私钥"><a href="#5-2、创建-admin-证书和私钥" class="headerlink" title="5.2、创建 admin 证书和私钥"></a>5.2、创建 admin 证书和私钥</h4><p>kubectl 与 apiserver https 安全端口通信，apiserver 对提供的证书进行认证和授权。<br>kubectl 作为集群的管理工具，需要被授予最高权限，这里创建具有<strong>最高权限</strong>的 admin 证书。</p><ul><li><p>创建证书签名请求:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; admin-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"admin"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"system:masters"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>O 为 system:masters，kube-apiserver 收到该证书后将请求的 Group 设置为 system:masters；</p></li><li><p>预定义的 ClusterRoleBinding cluster-admin 将 Group system:masters 与 Role cluster-admin 绑定，该 Role 授予所有 API的权限；</p></li><li><p>该证书只会被 kubectl 当做 client 证书使用，所以 hosts 字段为空；</p></li><li><p>生成证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json  -profile=kubernetes admin-csr.json | cfssljson -bare admin</span></span><br><span class="line"><span class="comment"># ls admin*</span></span><br><span class="line"><span class="comment"># cp admin*.pem /etc/kubernetes/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3、创建-kubeconfig-文件"><a href="#5-3、创建-kubeconfig-文件" class="headerlink" title="5.3、创建 kubeconfig 文件"></a>5.3、创建 kubeconfig 文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubeconfig 为 kubectl 的配置文件，包含访问 apiserver 的所有信息，如 apiserver 地址、CA 证书和自身使用的证书；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置集群API地址</span></span><br><span class="line"><span class="comment"># KUBE_APISERVER="https://172.21.16.45:8443"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kubectl.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials admin \</span><br><span class="line">  --client-certificate=admin.pem \</span><br><span class="line">  --client-key=admin-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kubectl.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context kubernetes \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=admin \</span><br><span class="line">  --kubeconfig=kubectl.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context kubernetes --kubeconfig=kubectl.kubeconfig</span><br></pre></td></tr></table></figure><ul><li><strong>提示</strong>: 分发<code>kubectl.kubeconfig</code>文件，吧文件命名<code>~/.kube/config</code>;</li><li>–certificate-authority：验证 kube-apiserver 证书的根证书；</li><li>–client-certificate、–client-key：刚生成的 admin 证书和私钥，连接 kube-apiserver 时使用；</li><li>–embed-certs=true：将 ca.pem 和 admin.pem 证书内容嵌入到生成的 kubectl.kubeconfig 文件中(不加时，写入的是证书文件路径，后续拷贝 kubeconfig 到其它机器时，还需要单独拷贝证书文件，不方便。)；</li></ul><h3 id="6、部署etcd集群"><a href="#6、部署etcd集群" class="headerlink" title="6、部署etcd集群"></a>6、部署etcd集群</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;etcd 是基于 Raft 的分布式 key-value 存储系统，由 CoreOS 开发，常用于服务发现、共享配置以及并发控制（如 leader 选举、分布式锁等）。kubernetes 使用 etcd 存储所有运行数据。</p><p>三节点高可用 etcd 集群的步骤：</p><ul><li>下载和分发 etcd 二进制文件；</li><li>创建 etcd 集群各节点的 x509 证书，用于加密客户端(如 etcdctl) 与 etcd 集群、etcd 集群之间的数据流；</li><li>创建 etcd 的 systemd unit 文件，配置服务参数</li><li>检查集群工作状态;</li></ul><ul><li><strong>注意</strong>: 均在一台master<code>[etcd]</code>节点操作，其他master<code>[etcd]</code>节点通过分发</li></ul><h4 id="6-1、下载和分发-etcd-二进制文件"><a href="#6-1、下载和分发-etcd-二进制文件" class="headerlink" title="6.1、下载和分发 etcd 二进制文件"></a>6.1、下载和分发 etcd 二进制文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir etcd &amp;&amp;cd etcd</span></span><br><span class="line"><span class="comment"># https://github.com/coreos/etcd/releases/download/v3.3.13/etcd-v3.3.13-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar -xvf etcd-v3.3.13-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># scp etcd* &#123;master-ip&#125;:/usr/bin/</span></span><br></pre></td></tr></table></figure><h4 id="6-2、创建-etcd-证书和私钥"><a href="#6-2、创建-etcd-证书和私钥" class="headerlink" title="6.2、创建 etcd 证书和私钥"></a>6.2、创建 etcd 证书和私钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; etcd-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"172.21.17.30"</span>,</span><br><span class="line">    <span class="string">"172.21.17.31"</span>,</span><br><span class="line">    <span class="string">"172.21.16.110"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li>hosts 字段指定授权使用该证书的 etcd 节点 IP 或域名列表，需要将 etcd 集群的三个节点 IP 都列在其中；</li><li>生成证书和私钥<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd</span></span><br><span class="line"><span class="comment"># ls etcd*pem</span></span><br><span class="line"><span class="comment"># mkdir -p /etc/etcd/ssl &amp;&amp; cp etcd*pem /etc/etcd/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-3、创建-etcd-的-systemd-unit-模板文件"><a href="#6-3、创建-etcd-的-systemd-unit-模板文件" class="headerlink" title="6.3、创建 etcd 的 systemd unit 模板文件"></a>6.3、创建 etcd 的 systemd unit 模板文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/systemd/system/etcd.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Documentation=https://github.com/coreos</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/data</span><br><span class="line">ExecStart=/usr/bin/etcd \</span><br><span class="line">  --data-dir=/var/lib/etcd/data \</span><br><span class="line">  --wal-dir=/var/lib/etcd/wal \</span><br><span class="line">  --name=etcd1 \<span class="comment">#根据节点名称进行变化</span></span><br><span class="line">  --cert-file=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --trusted-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --peer-cert-file=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">  --peer-key-file=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --peer-client-cert-auth \</span><br><span class="line">  --client-cert-auth \</span><br><span class="line">  --listen-peer-urls=https://172.21.17.30:2380 \</span><br><span class="line">  --initial-advertise-peer-urls=https://172.21.17.30:2380 \</span><br><span class="line">  --listen-client-urls=https://172.21.17.30:2379,http://127.0.0.1:2379 \</span><br><span class="line">  --advertise-client-urls=https://172.21.17.30:2379 \</span><br><span class="line">  --initial-cluster-token=etcd-cluster-0 \</span><br><span class="line">  --initial-cluster=etcd1=https://172.21.17.30:2380,etcd2=https://172.21.17.31:2380,etcd3=https://172.21.16.110:2380 \</span><br><span class="line">  --initial-cluster-state=new \</span><br><span class="line">  --auto-compaction-mode=periodic \</span><br><span class="line">  --auto-compaction-retention=1 \</span><br><span class="line">  --max-request-bytes=33554432 \</span><br><span class="line">  --quota-backend-bytes=6442450944 \</span><br><span class="line">  --heartbeat-interval=250 \</span><br><span class="line">  --election-timeout=2000</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir -p /var/lib/etcd/&#123;data,wal&#125;</span></span><br></pre></td></tr></table></figure><ul><li>WorkingDirectory、–data-dir：指定工作目录和数据目录为 ${ETCD_DATA_DIR}，需在启动服务前创建这个目录；</li><li>–wal-dir：指定 wal 目录，为了提高性能，一般使用 SSD 或者和 –data-dir 不同的磁盘；</li><li>–name：指定节点名称，当 –initial-cluster-state 值为 new 时，–name 的参数值必须位于 –initial-cluster 列表中；</li><li>–cert-file、–key-file：etcd server 与 client 通信时使用的证书和私钥；</li><li>–trusted-ca-file：签名 client 证书的 CA 证书，用于验证 client 证书；</li><li>–peer-cert-file、–peer-key-file：etcd 与 peer 通信使用的证书和私钥；</li><li>–peer-trusted-ca-file：签名 peer 证书的 CA 证书，用于验证 peer 证书；</li></ul><h4 id="6-4、启动-etcd-服务"><a href="#6-4、启动-etcd-服务" class="headerlink" title="6.4、启动 etcd 服务"></a>6.4、启动 etcd 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable etcd &amp;&amp; systemctl restart etcd &amp;&amp; systemctl status etcd</span></span><br></pre></td></tr></table></figure><h4 id="6-5、检查启动结果"><a href="#6-5、检查启动结果" class="headerlink" title="6.5、检查启动结果"></a>6.5、检查启动结果</h4><ul><li>确保状态为 active (running)，否则查看日志，确认原因：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># journalctl -u etcd</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="6-6、验证服务状态"><a href="#6-6、验证服务状态" class="headerlink" title="6.6、验证服务状态"></a>6.6、验证服务状态</h4><p>部署完 etcd 集群后，在任一 etcd 节点上执行如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ETCDCTL_API=3 etcdctl \</span></span><br><span class="line">    --endpoints=https://172.21.17.31:2379 \</span><br><span class="line">    --cacert=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">    --cert=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">    --key=/etc/etcd/ssl/etcd-key.pem endpoint health</span><br></pre></td></tr></table></figure><p>检查输出均为 healthy 时表示集群服务正常</p><h4 id="6-7、查看当前的-leader"><a href="#6-7、查看当前的-leader" class="headerlink" title="6.7、查看当前的 leader"></a>6.7、查看当前的 leader</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ETCD_ENDPOINTS="https://172.21.17.30:2379,https://172.21.17.31:2379,https://172.21.16.110:2379"</span></span><br><span class="line"><span class="comment"># ETCDCTL_API=3 etcdctl \</span></span><br><span class="line">  -w table --cacert=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">  --key=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> endpoint status </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">+----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|          ENDPOINT          |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |</span><br><span class="line">+----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|  https://172.21.17.30:2379 | 5d23ebc4382fa16f |  3.3.13 |  1.2 MB |     <span class="literal">false</span> |        83 |      58127 |</span><br><span class="line">|  https://172.21.17.31:2379 |  ceaae5134701946 |  3.3.13 |  1.2 MB |     <span class="literal">false</span> |        83 |      58127 |</span><br><span class="line">| https://172.21.16.110:2379 | 575020c8e15d3a06 |  3.3.13 |  1.2 MB |      <span class="literal">true</span> |        83 |      58128 |</span><br><span class="line">+----------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br></pre></td></tr></table></figure><ul><li>当前的 leader 为 172.21.16.110</li></ul><h3 id="7、部署-flannel-网络"><a href="#7、部署-flannel-网络" class="headerlink" title="7、部署 flannel 网络"></a>7、部署 flannel 网络</h3><p>flannel 网络部署在node节点，证书在master节点生成分发</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kubernetes 要求集群内各节点(包括 master 节点)能通过 Pod 网段互联互通。flannel 使用 vxlan 技术为各节点创建一个可以互通的 Pod 网络，使用的端口为 UDP 8472（需要开放该端口）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flanneld 第一次启动时，从 etcd 获取配置的 Pod 网段信息，为本节点分配一个未使用的地址段，然后创建 flannedl.1 网络接口（也可能是其它名称，如 flannel1 等）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flannel 将分配给自己的 Pod 网段信息写入 /run/flannel/docker 文件，docker 后续使用这个文件中的环境变量设置 docker0 网桥，从而从这个地址段为本节点的所有 Pod 容器分配 IP。</p><h4 id="7-1、下载和分发-flanneld-二进制文件"><a href="#7-1、下载和分发-flanneld-二进制文件" class="headerlink" title="7.1、下载和分发 flanneld 二进制文件"></a>7.1、下载和分发 flanneld 二进制文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir flannel &amp;&amp;cd flannel</span></span><br><span class="line"><span class="comment"># wget https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar -xzvf flannel-v0.11.0-linux-amd64.tar.gz -C flannel</span></span><br></pre></td></tr></table></figure><ul><li>分发flanneld 可执行文件到node节点</li></ul><h4 id="7-2、创建-flannel-证书和私钥"><a href="#7-2、创建-flannel-证书和私钥" class="headerlink" title="7.2、创建 flannel 证书和私钥"></a>7.2、创建 flannel 证书和私钥</h4><ul><li><p>flanneld-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt; flanneld-csr.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"flanneld"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>该证书只会被 kubectl 当做 client 证书使用，所以 hosts 字段为空；</p></li><li><p>生成证书和私钥:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes flanneld-csr.json | cfssljson -bare flanneld </span></span><br><span class="line"><span class="comment"># ls flanneld*pem</span></span><br><span class="line"><span class="comment"># scp flanneld*pem &#123;node-ip&#125;:/etc/flanneld/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="7-3、向-etcd-写入集群-Pod-网段信息"><a href="#7-3、向-etcd-写入集群-Pod-网段信息" class="headerlink" title="7.3、向 etcd 写入集群 Pod 网段信息"></a>7.3、向 etcd 写入集群 Pod 网段信息</h4><p><strong>注意</strong>：本步骤只需执行一次。在etcd集群上执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">etcdctl \</span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert-file=flanneld.pem \</span><br><span class="line">  --key-file=flanneld-key.pem \</span><br><span class="line">  mk /kubernetes/network/config <span class="string">'&#123;"Network":"172.30.0.0/16", "SubnetLen": 21, "Backend": &#123;"Type": "vxlan"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>flanneld 当前版本 (v0.11.0) 不支持 etcd v3，故使用 etcd v2 API 写入配置 key 和网段数据；</li><li>写入的 Pod 网段 ${CLUSTER_CIDR} 地址段（如 /16）必须小于 SubnetLen，必须与 kube-controller-manager 的 –cluster-cidr 参数值一致；</li></ul><h4 id="7-4、创建-flanneld-的-systemd-unit-文件"><a href="#7-4、创建-flanneld-的-systemd-unit-文件" class="headerlink" title="7.4、创建 flanneld 的 systemd unit 文件"></a>7.4、创建 flanneld 的 systemd unit 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/flanneld.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=etcd.service</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/bin/flanneld \</span><br><span class="line">  -etcd-cafile=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  -etcd-certfile=/etc/flanneld/ssl/flanneld.pem \</span><br><span class="line">  -etcd-keyfile=/etc/flanneld/ssl/flanneld-key.pem \</span><br><span class="line">  -etcd-endpoints=https://172.21.17.30:2379,https://172.21.17.31:2379,https://172.21.16.110:2379 \</span><br><span class="line">  -etcd-prefix=/kubernetes/network \</span><br><span class="line">  -iface=eth0 \</span><br><span class="line">  -ip-masq</span><br><span class="line">ExecStartPost=/usr/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">StartLimitInterval=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">RequiredBy=docker.service</span><br></pre></td></tr></table></figure><ul><li>mk-docker-opts.sh 脚本将分配给 flanneld 的 Pod 子网段信息写入 /run/flannel/docker 文件，后续 docker 启动时使用这个文件中的环境变量配置 docker0 网桥；</li><li>flanneld 使用系统缺省路由所在的接口与其它节点通信，对于有多个网络接口（如内网和公网）的节点，可以用 -iface 参数指定通信接口;</li><li>flanneld 运行时需要 root 权限；</li><li>-ip-masq: flanneld 为访问 Pod 网络外的流量设置 SNAT 规则，同时将传递给 Docker 的变量 –ip-masq（/run/flannel/docker 文件中）设置为 false，这样 Docker 将不再创建 SNAT 规则； Docker 的 –ip-masq 为 true 时，创建的 SNAT 规则比较“暴力”：将所有本节点 Pod 发起的、访问非 docker0 接口的请求做 SNAT，这样访问其他节点 Pod 的请求来源 IP 会被设置为 flannel.1 接口的 IP，导致目的 Pod 看不到真实的来源 Pod IP。 flanneld 创建的 SNAT 规则比较温和，只对访问非 Pod 网段的请求做 SNAT。</li></ul><h4 id="7-5、启动-flanneld-服务"><a href="#7-5、启动-flanneld-服务" class="headerlink" title="7.5、启动 flanneld 服务"></a>7.5、启动 flanneld 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable flanneld &amp;&amp; systemctl restart flanneld &amp;&amp; systemctl status flanneld</span></span><br></pre></td></tr></table></figure><h4 id="7-6、检查分配给各-flanneld-的-Pod-网段信息"><a href="#7-6、检查分配给各-flanneld-的-Pod-网段信息" class="headerlink" title="7.6、检查分配给各 flanneld 的 Pod 网段信息"></a>7.6、检查分配给各 flanneld 的 Pod 网段信息</h4><ul><li><p>查看集群 Pod 网段(/16)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl \</span></span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert-file=/etc/flanneld/ssl/flanneld.pem \</span><br><span class="line">  --key-file=/etc/flanneld/ssl/flanneld-key.pem \</span><br><span class="line">  get /kubernetes/network/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">&#123;<span class="string">"Network"</span>:<span class="string">"172.30.0.0/16"</span>, <span class="string">"SubnetLen"</span>: 21, <span class="string">"Backend"</span>: &#123;<span class="string">"Type"</span>: <span class="string">"vxlan"</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看已分配的 Pod 子网段列表(/24):</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl \</span></span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert-file=/etc/flanneld/ssl/flanneld.pem \</span><br><span class="line">  --key-file=/etc/flanneld/ssl/flanneld-key.pem \</span><br><span class="line">  ls /kubernetes/network/subnets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">/kubernetes/network/subnets/172.30.232.0-21</span><br><span class="line">/kubernetes/network/subnets/172.30.128.0-21</span><br><span class="line">/kubernetes/network/subnets/172.30.176.0-21</span><br></pre></td></tr></table></figure></li><li><p>查看某一 Pod 网段对应的节点 IP 和 flannel 接口地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl \</span></span><br><span class="line">  --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert-file=/etc/flanneld/ssl/flanneld.pem \</span><br><span class="line">  --key-file=/etc/flanneld/ssl/flanneld-key.pem \</span><br><span class="line">  get /kubernetes/network/subnets/172.30.232.0-21</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">&#123;<span class="string">"PublicIP"</span>:<span class="string">"172.21.16.204"</span>,<span class="string">"BackendType"</span>:<span class="string">"vxlan"</span>,<span class="string">"BackendData"</span>:&#123;<span class="string">"VtepMAC"</span>:<span class="string">"f6:50:05:5c:9a:20"</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>172.30.232.0/21 被分配给节点172.21.16.204）；</p></li><li><p>VtepMAC 为172.21.16.204节点的 flannel.1 网卡 MAC 地址；</p></li></ul><h4 id="7-7、检查节点-flannel-网络信息"><a href="#7-7、检查节点-flannel-网络信息" class="headerlink" title="7.7、检查节点 flannel 网络信息"></a>7.7、检查节点 flannel 网络信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip addr show</span></span><br></pre></td></tr></table></figure><ul><li><p>flannel.1 网卡的地址为分配的 Pod 子网段的第一个 IP（.0），且是 /32 的地址；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip route show |grep flannel.1</span></span><br><span class="line">172.30.128.0/21 via 172.30.128.0 dev flannel.1 onlink </span><br><span class="line">172.30.176.0/21 via 172.30.176.0 dev flannel.1 onlink</span><br></pre></td></tr></table></figure></li><li><p>到其它节点 Pod 网段请求都被转发到 flannel.1 网卡；</p></li><li><p>flanneld 根据 etcd 中子网段的信息，如/kubernetes/network/subnets/172.30.232.0-21 ，来决定进请求发送给哪个节点的互联 IP；</p></li><li><p>验证各节点能通过 Pod 网段互通</p></li></ul><h3 id="8、master节点部署"><a href="#8、master节点部署" class="headerlink" title="8、master节点部署"></a>8、master节点部署</h3><p>kubernetes master 节点运行如下组件：</p><ul><li>kube-apiserver</li><li>kube-scheduler</li><li>kube-controller-manager<br>kube-apiserver、kube-scheduler 和 kube-controller-manager 均以多实例模式运行：<br>1、kube-scheduler 和 kube-controller-manager 会自动选举产生一个 leader 实例，其它实例处于阻塞模式，当 leader 挂了后，重新选举产生新的 leader，从而保证服务可用性；<br>2、kube-apiserver 是无状态的，需要通过<a href="https://xxlaila.github.io/2019/08/10/haproxy-keepalived/" target="_blank" rel="noopener">haproxy+keepalived</a>进行代理访问，从而保证服务可用性；</li></ul><h4 id="8-1、创建-kubernetes-证书和私钥"><a href="#8-1、创建-kubernetes-证书和私钥" class="headerlink" title="8.1、创建 kubernetes 证书和私钥"></a>8.1、创建 kubernetes 证书和私钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; kubernetes-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"172.21.17.30"</span>,</span><br><span class="line">    <span class="string">"172.21.17.31"</span>,</span><br><span class="line">    <span class="string">"172.21.16.110"</span>,</span><br><span class="line">    <span class="string">"172.21.16.45"</span>,</span><br><span class="line">    <span class="string">"10.254.0.1"</span>,</span><br><span class="line">    <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc.cluster.local."</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li><p>hosts 字段指定授权使用该证书的 IP 和域名列表，这里列出了 master 节点 IP、kubernetes 服务的 IP 和域名,以及VIP地址；</p></li><li><p>kubernetes 服务 IP 是 apiserver 自动创建的，一般是 –service-cluster-ip-range 参数指定的网段的第一个IP,后续可以通过下面命令获取：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc kubernetes</span></span><br><span class="line">NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">kubernetes   ClusterIP   10.254.0.1   &lt;none&gt;        443/TCP   4h13m</span><br></pre></td></tr></table></figure></li><li><p>生成证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes</span></span><br><span class="line"><span class="comment"># ls kubernetes*pem</span></span><br><span class="line">kubernetes-key.pem  kubernetes.pem</span><br><span class="line"><span class="comment"># cp kubernetes*pem /etc/kubernetes/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="8-2、创建加密配置文件"><a href="#8-2、创建加密配置文件" class="headerlink" title="8.2、创建加密配置文件"></a>8.2、创建加密配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)</span></span><br><span class="line"><span class="comment"># cat &gt; encryption-config.yaml &lt;&lt;EOF</span></span><br><span class="line">kind: EncryptionConfig</span><br><span class="line">apiVersion: v1</span><br><span class="line">resources:</span><br><span class="line">  - resources:</span><br><span class="line">      - secrets</span><br><span class="line">    providers:</span><br><span class="line">      - aescbc:</span><br><span class="line">          keys:</span><br><span class="line">            - name: key1</span><br><span class="line">              secret: <span class="variable">$&#123;ENCRYPTION_KEY&#125;</span></span><br><span class="line">      - identity: &#123;&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># cp encryption-config.yaml /etc/kubernetes/</span></span><br></pre></td></tr></table></figure><h4 id="8-3、创建审计策略文件"><a href="#8-3、创建审计策略文件" class="headerlink" title="8.3、创建审计策略文件"></a>8.3、创建审计策略文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; audit-policy.yaml &lt;&lt;EOF</span></span><br><span class="line">apiVersion: audit.k8s.io/v1beta1</span><br><span class="line">kind: Policy</span><br><span class="line">rules:</span><br><span class="line">  <span class="comment"># The following requests were manually identified as high-volume and low-risk, so drop them.</span></span><br><span class="line">  - level: None</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - endpoints</span><br><span class="line">          - services</span><br><span class="line">          - services/status</span><br><span class="line">    users:</span><br><span class="line">      - <span class="string">'system:kube-proxy'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - watch</span><br><span class="line"></span><br><span class="line">  - level: None</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - nodes</span><br><span class="line">          - nodes/status</span><br><span class="line">    userGroups:</span><br><span class="line">      - <span class="string">'system:nodes'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line"></span><br><span class="line">  - level: None</span><br><span class="line">    namespaces:</span><br><span class="line">      - kube-system</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - endpoints</span><br><span class="line">    users:</span><br><span class="line">      - <span class="string">'system:kube-controller-manager'</span></span><br><span class="line">      - <span class="string">'system:kube-scheduler'</span></span><br><span class="line">      - <span class="string">'system:serviceaccount:kube-system:endpoint-controller'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - update</span><br><span class="line"></span><br><span class="line">  - level: None</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - namespaces</span><br><span class="line">          - namespaces/status</span><br><span class="line">          - namespaces/finalize</span><br><span class="line">    users:</span><br><span class="line">      - <span class="string">'system:apiserver'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Don't log HPA fetching metrics.</span></span><br><span class="line">  - level: None</span><br><span class="line">    resources:</span><br><span class="line">      - group: metrics.k8s.io</span><br><span class="line">    users:</span><br><span class="line">      - <span class="string">'system:kube-controller-manager'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Don't log these read-only URLs.</span></span><br><span class="line">  - level: None</span><br><span class="line">    nonResourceURLs:</span><br><span class="line">      - <span class="string">'/healthz*'</span></span><br><span class="line">      - /version</span><br><span class="line">      - <span class="string">'/swagger*'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Don't log events requests.</span></span><br><span class="line">  - level: None</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - events</span><br><span class="line"></span><br><span class="line">  <span class="comment"># node and pod status calls from nodes are high-volume and can be large, don't log responses for expected updates from nodes</span></span><br><span class="line">  - level: Request</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - nodes/status</span><br><span class="line">          - pods/status</span><br><span class="line">    users:</span><br><span class="line">      - kubelet</span><br><span class="line">      - <span class="string">'system:node-problem-detector'</span></span><br><span class="line">      - <span class="string">'system:serviceaccount:kube-system:node-problem-detector'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - update</span><br><span class="line">      - patch</span><br><span class="line"></span><br><span class="line">  - level: Request</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - nodes/status</span><br><span class="line">          - pods/status</span><br><span class="line">    userGroups:</span><br><span class="line">      - <span class="string">'system:nodes'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - update</span><br><span class="line">      - patch</span><br><span class="line"></span><br><span class="line">  <span class="comment"># deletecollection calls can be large, don't log responses for expected namespace deletions</span></span><br><span class="line">  - level: Request</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    users:</span><br><span class="line">      - <span class="string">'system:serviceaccount:kube-system:namespace-controller'</span></span><br><span class="line">    verbs:</span><br><span class="line">      - deletecollection</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Secrets, ConfigMaps, and TokenReviews can contain sensitive &amp; binary data,</span></span><br><span class="line">  <span class="comment"># so only log at the Metadata level.</span></span><br><span class="line">  - level: Metadata</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">        resources:</span><br><span class="line">          - secrets</span><br><span class="line">          - configmaps</span><br><span class="line">      - group: authentication.k8s.io</span><br><span class="line">        resources:</span><br><span class="line">          - tokenreviews</span><br><span class="line">  <span class="comment"># Get repsonses can be large; skip them.</span></span><br><span class="line">  - level: Request</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">      - group: admissionregistration.k8s.io</span><br><span class="line">      - group: apiextensions.k8s.io</span><br><span class="line">      - group: apiregistration.k8s.io</span><br><span class="line">      - group: apps</span><br><span class="line">      - group: authentication.k8s.io</span><br><span class="line">      - group: authorization.k8s.io</span><br><span class="line">      - group: autoscaling</span><br><span class="line">      - group: batch</span><br><span class="line">      - group: certificates.k8s.io</span><br><span class="line">      - group: extensions</span><br><span class="line">      - group: metrics.k8s.io</span><br><span class="line">      - group: networking.k8s.io</span><br><span class="line">      - group: policy</span><br><span class="line">      - group: rbac.authorization.k8s.io</span><br><span class="line">      - group: scheduling.k8s.io</span><br><span class="line">      - group: settings.k8s.io</span><br><span class="line">      - group: storage.k8s.io</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default level for known APIs</span></span><br><span class="line">  - level: RequestResponse</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">    resources:</span><br><span class="line">      - group: <span class="string">""</span></span><br><span class="line">      - group: admissionregistration.k8s.io</span><br><span class="line">      - group: apiextensions.k8s.io</span><br><span class="line">      - group: apiregistration.k8s.io</span><br><span class="line">      - group: apps</span><br><span class="line">      - group: authentication.k8s.io</span><br><span class="line">      - group: authorization.k8s.io</span><br><span class="line">      - group: autoscaling</span><br><span class="line">      - group: batch</span><br><span class="line">      - group: certificates.k8s.io</span><br><span class="line">      - group: extensions</span><br><span class="line">      - group: metrics.k8s.io</span><br><span class="line">      - group: networking.k8s.io</span><br><span class="line">      - group: policy</span><br><span class="line">      - group: rbac.authorization.k8s.io</span><br><span class="line">      - group: scheduling.k8s.io</span><br><span class="line">      - group: settings.k8s.io</span><br><span class="line">      - group: storage.k8s.io</span><br><span class="line">      </span><br><span class="line">  <span class="comment"># Default level for all other requests.</span></span><br><span class="line">  - level: Metadata</span><br><span class="line">    omitStages:</span><br><span class="line">      - RequestReceived</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp audit-policy.yaml /etc/kubernetes/</span></span><br></pre></td></tr></table></figure><h4 id="8-4、创建后续访问-metrics-server-使用的证书"><a href="#8-4、创建后续访问-metrics-server-使用的证书" class="headerlink" title="8.4、创建后续访问 metrics-server 使用的证书"></a>8.4、创建后续访问 metrics-server 使用的证书</h4><ul><li><p>创建证书签名请求:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; proxy-client-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"aggregator"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>CN 名称需要位于 kube-apiserver 的 –requestheader-allowed-names 参数中，否则后续访问 metrics 时会提示权限不足。</p></li><li><p>生成证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem  -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes proxy-client-csr.json | cfssljson -bare proxy-client</span></span><br><span class="line"><span class="comment"># ls proxy-client*.pem</span></span><br><span class="line">proxy-client-key.pem  proxy-client.pem</span><br><span class="line"><span class="comment"># cp proxy-client*.pem /etc/kubernetes/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="8-5、创建-kube-apiserver-systemd-unit-模板文件"><a href="#8-5、创建-kube-apiserver-systemd-unit-模板文件" class="headerlink" title="8.5、创建 kube-apiserver systemd unit 模板文件"></a>8.5、创建 kube-apiserver systemd unit 模板文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-apiserver.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/<span class="built_in">log</span>/k8s/kube-apiserver</span><br><span class="line">ExecStart=/usr/bin/kube-apiserver \</span><br><span class="line">  --advertise-address=172.21.17.30 \<span class="comment">#master 节点的ip</span></span><br><span class="line">  --default-not-ready-toleration-seconds=360 \</span><br><span class="line">  --default-unreachable-toleration-seconds=360 \</span><br><span class="line">  --feature-gates=DynamicAuditing=<span class="literal">true</span> \</span><br><span class="line">  --max-mutating-requests-inflight=2000 \</span><br><span class="line">  --max-requests-inflight=4000 \</span><br><span class="line">  --default-watch-cache-size=200 \</span><br><span class="line">  --delete-collection-workers=2 \</span><br><span class="line">  --encryption-provider-config=/etc/kubernetes/encryption-config.yaml \</span><br><span class="line">  --etcd-cafile=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --etcd-certfile=/etc/kubernetes/ssl/kubernetes.pem \</span><br><span class="line">  --etcd-keyfile=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="line">  --etcd-servers=https://172.21.17.30:2379,https://172.21.17.31:2379,https://172.21.16.110:2379 \</span><br><span class="line">  --<span class="built_in">bind</span>-address=0.0.0.0 \</span><br><span class="line">  --secure-port=6443 \</span><br><span class="line">  --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem \</span><br><span class="line">  --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="line">  --insecure-port=0 \</span><br><span class="line">  --audit-dynamic-configuration \</span><br><span class="line">  --audit-log-maxage=15 \</span><br><span class="line">  --audit-log-maxbackup=3 \</span><br><span class="line">  --audit-log-maxsize=100 \</span><br><span class="line">  --audit-log-truncate-enabled \</span><br><span class="line">  --audit-log-path=/var/<span class="built_in">log</span>/k8s/kube-apiserver/audit.log \</span><br><span class="line">  --audit-policy-file=/etc/kubernetes/audit-policy.yaml \</span><br><span class="line">  --profiling \</span><br><span class="line">  --anonymous-auth=<span class="literal">false</span> \</span><br><span class="line">  --client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --<span class="built_in">enable</span>-bootstrap-token-auth \</span><br><span class="line">  --requestheader-allowed-names=aggregator \</span><br><span class="line">  --requestheader-client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --requestheader-extra-headers-prefix=X-Remote-Extra- \</span><br><span class="line">  --requestheader-group-headers=X-Remote-Group \</span><br><span class="line">  --requestheader-username-headers=X-Remote-User \</span><br><span class="line">  --service-account-key-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --authorization-mode=Node,RBAC \</span><br><span class="line">  --runtime-config=api/all=<span class="literal">true</span> \</span><br><span class="line">  --<span class="built_in">enable</span>-admission-plugins=DefaultStorageClass,DefaultTolerationSeconds,LimitRanger,NamespaceExists,NamespaceLifecycle,NodeRestriction,OwnerReferencesPermissionEnforcement,PodNodeSelector,PersistentVolumeClaimResize,PodPreset,PodTolerationRestriction,ResourceQuota,ServiceAccount,StorageObjectInUseProtection,MutatingAdmissionWebhook,ValidatingAdmissionWebhook \</span><br><span class="line">  --allow-privileged=<span class="literal">true</span> \</span><br><span class="line">  --apiserver-count=3 \</span><br><span class="line">  --cors-allowed-origins=.* \</span><br><span class="line">  --<span class="built_in">enable</span>-swagger-ui \</span><br><span class="line">  --event-ttl=168h \</span><br><span class="line">  --kubelet-certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --kubelet-client-certificate=/etc/kubernetes/ssl/kubernetes.pem \</span><br><span class="line">  --kubelet-client-key=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="line">  --kubelet-https=<span class="literal">true</span> \</span><br><span class="line">  --kubelet-timeout=10s \</span><br><span class="line">  --proxy-client-cert-file=/etc/kubernetes/ssl/proxy-client.pem \</span><br><span class="line">  --proxy-client-key-file=/etc/kubernetes/ssl/proxy-client-key.pem \</span><br><span class="line">  --service-cluster-ip-range=10.254.0.0/16 \</span><br><span class="line">  --service-node-port-range=30000-32767 \</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \</span><br><span class="line">  --<span class="built_in">enable</span>-aggregator-routing=<span class="literal">true</span> \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10</span><br><span class="line">Type=notify</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># mkdir -p /var/log/k8s/kube-apiserver</span></span><br></pre></td></tr></table></figure><ul><li>–advertise-address：apiserver 对外通告的 IP（kubernetes 服务后端节点 IP）；</li><li>–default-*-toleration-seconds：设置节点异常相关的阈值；</li><li>–max-*-requests-inflight：请求相关的最大阈值；</li><li>–etcd-*：访问 etcd 的证书和 etcd 服务器地址；</li><li>–experimental-encryption-provider-config：指定用于加密 etcd 中 secret 的配置；</li><li>–bind-address： https 监听的 IP，不能为 127.0.0.1，否则外界不能访问它的安全端口 6443；</li><li>–secret-port：https 监听端口；</li><li>–insecure-port=0：关闭监听 http 非安全端口(8080)；</li><li>–tls-*-file：指定 apiserver 使用的证书、私钥和 CA 文件；</li><li>–audit-*：配置审计策略和审计日志文件相关的参数；</li><li>–client-ca-file：验证 client (kue-controller-manager、kube-scheduler、kubelet、kube-proxy 等)请求所带的证书；</li><li>–enable-bootstrap-token-auth：启用 kubelet bootstrap 的 token 认证；</li><li>–requestheader-*：kube-apiserver 的 aggregator layer 相关的配置参数，proxy-client &amp; HPA 需要使用；</li><li>–requestheader-client-ca-file：用于签名 –proxy-client-cert-file 和 –proxy-client-key-file 指定的证书；在启用了 metric aggregator 时使用；</li><li>–requestheader-allowed-names：不能为空，值为逗号分割的 –proxy-client-cert-file 证书的 CN 名称，这里设置为 “aggregator”；</li><li>–service-account-key-file：签名 ServiceAccount Token 的公钥文件，kube-controller-manager 的 –service-account-private-key-file 指定私钥文件，两者配对使用；</li><li>–runtime-config=api/all=true： 启用所有版本的 APIs，如 autoscaling/v2alpha1；</li><li>–authorization-mode=Node,RBAC、–anonymous-auth=false： 开启 Node 和 RBAC 授权模式，拒绝未授权的请求；</li><li>–enable-admission-plugins：启用一些默认关闭的 plugins；</li><li>–allow-privileged：运行执行 privileged 权限的容器；</li><li>–apiserver-count=3：指定 apiserver 实例的数量；</li><li>–event-ttl：指定 events 的保存时间；</li><li>–kubelet-<em>：如果指定，则使用 https 访问 kubelet APIs；需要为证书对应的用户(上面 kubernetes</em>.pem 证书的用户为 kubernetes) 用户定义 RBAC 规则，否则访问 kubelet API 时提示未授权；</li><li>–proxy-client-*：apiserver 访问 metrics-server 使用的证书；</li><li>–service-cluster-ip-range： 指定 Service Cluster IP 地址段；</li><li>–service-node-port-range： 指定 NodePort 的端口范围；</li><li>如果 kube-apiserver 机器没有运行 kube-proxy，则还需要添加 –enable-aggregator-routing=true 参数</li></ul><p><strong>注意</strong>:<br>1.requestheader-client-ca-file 指定的 CA 证书，必须具有 client auth and server auth；<br>2.如果 –requestheader-allowed-names 为空，或者 –proxy-client-cert-file 证书的 CN 名称不在 allowed-names 中，则后续查看 node 或 pods 的 metrics 失败，提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl top nodes</span></span><br><span class="line">Error from server (Forbidden): nodes.metrics.k8s.io is forbidden: User <span class="string">"aggregator"</span> cannot list resource <span class="string">"nodes"</span> <span class="keyword">in</span> API group <span class="string">"metrics.k8s.io"</span> at the cluster scope</span><br></pre></td></tr></table></figure><h4 id="8-6、启动-kube-apiserver-服务"><a href="#8-6、启动-kube-apiserver-服务" class="headerlink" title="8.6、启动 kube-apiserver 服务"></a>8.6、启动 kube-apiserver 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable kube-apiserver &amp;&amp; systemctl restart kube-apiserver &amp;&amp;systemctl status kube-apiserver</span></span><br><span class="line"><span class="comment"># systemctl status kube-apiserver |grep 'Active:'</span></span><br><span class="line">   Active: active (running) since Mon 2019-09-16 14:38:31 CST; 1min 41s ago</span><br></pre></td></tr></table></figure><h4 id="8-6、打印-kube-apiserver-写入-etcd-的数据"><a href="#8-6、打印-kube-apiserver-写入-etcd-的数据" class="headerlink" title="8.6、打印 kube-apiserver 写入 etcd 的数据"></a>8.6、打印 kube-apiserver 写入 etcd 的数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ETCDCTL_API=3 etcdctl \</span></span><br><span class="line">    --endpoints=<span class="variable">$&#123;ETCD_ENDPOINTS&#125;</span> \</span><br><span class="line">    --cacert=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">    --cert=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">    --key=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">    get /registry/ --prefix --keys-only</span><br></pre></td></tr></table></figure><h4 id="8-9、检查集群信息"><a href="#8-9、检查集群信息" class="headerlink" title="8.9、检查集群信息"></a>8.9、检查集群信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl cluster-info</span></span><br><span class="line">Kubernetes master is running at https://172.21.16.45:8443</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use <span class="string">'kubectl cluster-info dump'</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get all --all-namespaces</span></span><br><span class="line">NAMESPACE   NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">default     service/kubernetes   ClusterIP   10.254.0.1   &lt;none&gt;        443/TCP   12m</span><br><span class="line"></span><br><span class="line"><span class="comment">#  kubectl get componentstatuses</span></span><br><span class="line">NAME                 STATUS      MESSAGE                                                                                     ERROR</span><br><span class="line">controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: connect: connection refused</span><br><span class="line">scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused</span><br><span class="line">etcd-0               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">etcd-2               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">etcd-1               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>执行 kubectl get componentstatuses 命令时，apiserver 默认向 127.0.0.1 发送请求。当 controller-manager、scheduler 以集群模式运行时，有可能和 kube-apiserver 不在一台机器上，这时 controller-manager 或 scheduler 的状态为 Unhealthy，但实际上它们工作正常。</li></ul><h4 id="8-10、检查-kube-apiserver-监听的端口"><a href="#8-10、检查-kube-apiserver-监听的端口" class="headerlink" title="8.10、检查 kube-apiserver 监听的端口"></a>8.10、检查 kube-apiserver 监听的端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -lnpt|grep kube</span></span><br><span class="line">tcp6       0      0 :::6443                 :::*                    LISTEN      10845/kube-apiserve</span><br></pre></td></tr></table></figure><ul><li>6443: 接收 https 请求的安全端口，对所有请求做认证和授权；</li><li>由于关闭了非安全端口，故没有监听 8080；</li></ul><h4 id="8-11、授予-kube-apiserver-访问-kubelet-API-的权限"><a href="#8-11、授予-kube-apiserver-访问-kubelet-API-的权限" class="headerlink" title="8.11、授予 kube-apiserver 访问 kubelet API 的权限"></a>8.11、授予 kube-apiserver 访问 kubelet API 的权限</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在执行 kubectl exec、run、logs 等命令时，apiserver 会将请求转发到 kubelet 的 https 端口。这里定义 RBAC 规则，授权 apiserver 使用的证书（kubernetes.pem）用户名（CN：kuberntes）访问 kubelet API 的权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes</span><br><span class="line">kubectl create clusterrolebinding kubelet-node-clusterbinding --clusterrole=system:node --group=system:nodes</span><br><span class="line">kubectl create clusterrolebinding --user system:serviceaccount:kube-system:default kube-system-cluster-admin --clusterrole cluster-admin</span><br></pre></td></tr></table></figure><h3 id="9、部署高可用-kube-controller-manager"><a href="#9、部署高可用-kube-controller-manager" class="headerlink" title="9、部署高可用 kube-controller-manager"></a>9、部署高可用 kube-controller-manager</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该集群包含 3 个节点，启动后将通过竞争选举机制产生一个 leader 节点，其它节点为阻塞状态。当 leader 节点不可用时，阻塞的节点将再次进行选举产生新的 leader 节点，从而保证服务的可用性。<br>为保证通信安全，本文档先生成 x509 证书和私钥，kube-controller-manager 在如下两种情况下使用该证书：<br>1、与 kube-apiserver 的安全端口通信;<br>2、在安全端口(https，10252) 输出 prometheus 格式的 metrics；</p><h4 id="9-1、创建-kube-controller-manager-证书和私钥"><a href="#9-1、创建-kube-controller-manager-证书和私钥" class="headerlink" title="9.1、创建 kube-controller-manager 证书和私钥"></a>9.1、创建 kube-controller-manager 证书和私钥</h4><ul><li><p>创建证书签名请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; kube-controller-manager-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"172.21.17.30"</span>,</span><br><span class="line">      <span class="string">"172.21.17.31"</span>,</span><br><span class="line">      <span class="string">"172.21.16.110"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">        <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">        <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">        <span class="string">"O"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">        <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>hosts 列表包含所有 kube-controller-manager 节点 IP；</p></li><li><p>CN 和 O 均为 system:kube-controller-manager，kubernetes 内置的 ClusterRoleBindings system:kube-controller-manager 赋予 kube-controller-manager 工作所需的权限。</p></li><li><p>生成证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json   -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager</span></span><br><span class="line"><span class="comment"># ls kube-controller-manager*pem</span></span><br><span class="line">kube-controller-manager-key.pem  kube-controller-manager.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp kube-controller-manager*pem /etc/kubernetes/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="9-2、创建和分发-kubeconfig-文件"><a href="#9-2、创建和分发-kubeconfig-文件" class="headerlink" title="9.2、创建和分发 kubeconfig 文件"></a>9.2、创建和分发 kubeconfig 文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kube-controller-manager 使用 kubeconfig 文件访问 apiserver，该文件提供了 apiserver 地址、嵌入的 CA 证书和 kube-controller-manager 证书：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-credentials system:kube-controller-manager \</span></span><br><span class="line">  --client-certificate=kube-controller-manager.pem \</span><br><span class="line">  --client-key=kube-controller-manager-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-context system:kube-controller-manager \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-controller-manager \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config use-context system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cp kube-controller-manager.kubeconfig /etc/kubernetes/</span></span><br></pre></td></tr></table></figure><h4 id="9-3、创建-kube-controller-manager-systemd-unit文件"><a href="#9-3、创建-kube-controller-manager-systemd-unit文件" class="headerlink" title="9.3、创建 kube-controller-manager systemd unit文件"></a>9.3、创建 kube-controller-manager systemd unit文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-controller-manager.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/<span class="built_in">log</span>/k8s/kube-controller-manager</span><br><span class="line">ExecStart=/usr/bin/kube-controller-manager \</span><br><span class="line">  --profiling \</span><br><span class="line">  --cluster-name=kubernetes \</span><br><span class="line">  --allocate-node-cidrs=<span class="literal">true</span> \</span><br><span class="line">  --cluster-cidr=10.244.0.0/16 \</span><br><span class="line">  --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="line">  --kube-api-qps=1000 \</span><br><span class="line">  --kube-api-burst=2000 \</span><br><span class="line">  --leader-elect \</span><br><span class="line">  --use-service-account-credentials\</span><br><span class="line">  --concurrent-service-syncs=2 \</span><br><span class="line">  --<span class="built_in">bind</span>-address=0.0.0.0 \</span><br><span class="line">  --secure-port=10252 \</span><br><span class="line">  --tls-cert-file=/etc/kubernetes/ssl/kube-controller-manager.pem \</span><br><span class="line">  --tls-private-key-file=/etc/kubernetes/ssl/kube-controller-manager-key.pem \</span><br><span class="line">  --port=0 \</span><br><span class="line">  --authentication-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span><br><span class="line">  --client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --requestheader-allowed-names=<span class="string">""</span> \</span><br><span class="line">  --requestheader-client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --requestheader-extra-headers-prefix=X-Remote-Extra- \</span><br><span class="line">  --requestheader-group-headers=X-Remote-Group \</span><br><span class="line">  --requestheader-username-headers=X-Remote-User \</span><br><span class="line">  --authorization-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span><br><span class="line">  --cluster-signing-cert-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cluster-signing-key-file=/etc/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --experimental-cluster-signing-duration=876000h \</span><br><span class="line">  --horizontal-pod-autoscaler-sync-period=10s \</span><br><span class="line">  --horizontal-pod-autoscaler-use-rest-clients=<span class="literal">true</span> \</span><br><span class="line">  --concurrent-deployment-syncs=10 \</span><br><span class="line">  --concurrent-gc-syncs=30 \</span><br><span class="line">  --node-cidr-mask-size=24 \</span><br><span class="line">  --service-cluster-ip-range=10.254.0.0/16 \</span><br><span class="line">  --pod-eviction-timeout=6m \</span><br><span class="line">  --terminated-pod-gc-threshold=10000 \</span><br><span class="line">  --root-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --service-account-private-key-file=/etc/kubernetes/ssl/ca-key.pem \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>–port=0：关闭监听非安全端口（http），同时 –address 参数无效，–bind-address 参数有效；</li><li>–secure-port=10252、–bind-address=0.0.0.0: 在所有网络接口监听 10252 端口的 https /metrics 请求；</li><li>–kubeconfig：指定 kubeconfig 文件路径，kube-controller-manager 使用它连接和验证 kube-apiserver；</li><li>–authentication-kubeconfig 和 –authorization-kubeconfig：kube-controller-manager 使用它连接 apiserver，对 client 的请求进行认证和授权。kube-controller-manager 不再使用 –tls-ca-file 对请求 https metrics 的 Client 证书进行校验。如果没有配置这两个 kubeconfig 参数，则 client 连接 kube-controller-manager https 端口的请求会被拒绝(提示权限不足)。</li><li>–cluster-signing-*-file：签名 TLS Bootstrap 创建的证书；</li><li>–experimental-cluster-signing-duration：指定 TLS Bootstrap 证书的有效期；</li><li>–root-ca-file：放置到容器 ServiceAccount 中的 CA 证书，用来对 kube-apiserver 的证书进行校验；</li><li>–service-account-private-key-file：签名 ServiceAccount 中 Token 的私钥文件，必须和 kube-apiserver 的 –service-account-key-file 指定的公钥文件配对使用；</li><li>–service-cluster-ip-range ：指定 Service Cluster IP 网段，必须和 kube-apiserver 中的同名参数一致；</li><li>–leader-elect=true：集群运行模式，启用选举功能；被选为 leader 的节点负责处理工作，其它节点为阻塞状态；</li><li>–controllers=*,bootstrapsigner,tokencleaner：启用的控制器列表，tokencleaner 用于自动清理过期的 Bootstrap token；</li><li>–horizontal-pod-autoscaler-*：custom metrics 相关参数，支持 autoscaling/v2alpha1；</li><li>–tls-cert-file、–tls-private-key-file：使用 https 输出 metrics 时使用的 Server 证书和秘钥；</li><li>–use-service-account-credentials=true: kube-controller-manager 中各 controller 使用 serviceaccount 访问 kube-apiserver；</li></ul><h4 id="9-4、启动-kube-controller-manager-服务"><a href="#9-4、启动-kube-controller-manager-服务" class="headerlink" title="9.4、启动 kube-controller-manager 服务"></a>9.4、启动 kube-controller-manager 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /var/log/k8s/kube-controller-manager</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable kube-controller-manager &amp;&amp; systemctl restart kube-controller-manager &amp;&amp; systemctl status kube-controller-manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># netstat -lnpt|grep kube-con</span></span><br><span class="line">tcp6       0      0 :::10252                :::*                    LISTEN      8335/kube-controlle</span><br></pre></td></tr></table></figure><ul><li>授予 kubernetes API 的权限<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding controller-node-clusterrolebing --clusterrole=system:kube-controller-manager  --user=system:kube-controller-manager</span><br><span class="line">kubectl create clusterrolebinding controller-manager:system:auth-delegator --user system:kube-controller-manager --clusterrole system:auth-delegator</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-5、查看输出的-metrics"><a href="#9-5、查看输出的-metrics" class="headerlink" title="9.5、查看输出的 metrics"></a>9.5、查看输出的 metrics</h4><p><strong>注意:</strong> 以下命令在 kube-controller-manager 节点上执行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem --cert /etc/kubernetes/ssl/admin.pem --key /etc/kubernetes/ssl/admin-key.pem https://172.21.17.30:10252/metrics |head</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"1800"</span>&#125; 0</span><br></pre></td></tr></table></figure><h4 id="9-6-kube-controller-manager-的权限"><a href="#9-6-kube-controller-manager-的权限" class="headerlink" title="9.6 kube-controller-manager 的权限"></a>9.6 kube-controller-manager 的权限</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ClusteRole system:kube-controller-manager 的权限很小，只能创建 secret、serviceaccount 等资源对象，各 controller 的权限分散到 ClusterRole system:controller:XXX 中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe clusterrole system:kube-controller-manager</span></span><br><span class="line">Name:         system:kube-controller-manager</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources                                  Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------                                  -----------------  --------------  -----</span><br><span class="line">  secrets                                    []                 []              [create delete get update]</span><br><span class="line">  endpoints                                  []                 []              [create get update]</span><br><span class="line">  serviceaccounts                            []                 []              [create get update]</span><br><span class="line">  events                                     []                 []              [create patch update]</span><br><span class="line">  tokenreviews.authentication.k8s.io         []                 []              [create]</span><br><span class="line">  subjectaccessreviews.authorization.k8s.io  []                 []              [create]</span><br><span class="line">  configmaps                                 []                 []              [get]</span><br><span class="line">  namespaces                                 []                 []              [get]</span><br><span class="line">  *.*                                        []                 []              [list watch]</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;需要在 kube-controller-manager 的启动参数中添加 –use-service-account-credentials=true 参数，这样 main controller 会为各 controller 创建对应的 ServiceAccount XXX-controller。内置的 ClusterRoleBinding system:controller:XXX 将赋予各 XXX-controller ServiceAccount 对应的 ClusterRole system:controller:XXX 权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get clusterrole|grep controller</span></span><br><span class="line">system:controller:attachdetach-controller                              4h52m</span><br><span class="line">system:controller:certificate-controller                               4h52m</span><br><span class="line">system:controller:clusterrole-aggregation-controller                   4h52m</span><br><span class="line">system:controller:cronjob-controller                                   4h52m</span><br><span class="line">system:controller:daemon-set-controller                                4h52m</span><br><span class="line">system:controller:deployment-controller                                4h52m</span><br><span class="line">system:controller:disruption-controller                                4h52m</span><br><span class="line">system:controller:endpoint-controller                                  4h52m</span><br><span class="line">system:controller:expand-controller                                    4h52m</span><br><span class="line">system:controller:generic-garbage-collector                            4h52m</span><br><span class="line">system:controller:horizontal-pod-autoscaler                            4h52m</span><br><span class="line">system:controller:job-controller                                       4h52m</span><br><span class="line">system:controller:namespace-controller                                 4h52m</span><br><span class="line">system:controller:node-controller                                      4h52m</span><br><span class="line">system:controller:persistent-volume-binder                             4h52m</span><br><span class="line">system:controller:pod-garbage-collector                                4h52m</span><br><span class="line">system:controller:pv-protection-controller                             4h52m</span><br><span class="line">system:controller:pvc-protection-controller                            4h52m</span><br><span class="line">system:controller:replicaset-controller                                4h52m</span><br><span class="line">system:controller:replication-controller                               4h52m</span><br><span class="line">system:controller:resourcequota-controller                             4h52m</span><br><span class="line">system:controller:route-controller                                     4h52m</span><br><span class="line">system:controller:service-account-controller                           4h52m</span><br><span class="line">system:controller:service-controller                                   4h52m</span><br><span class="line">system:controller:statefulset-controller                               4h52m</span><br><span class="line">system:controller:ttl-controller                                       4h52m</span><br><span class="line">system:kube-controller-manager                                         4h52m</span><br></pre></td></tr></table></figure><ul><li>以 deployment controller 为例：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe clusterrole system:controller:deployment-controller</span></span><br><span class="line">Name:         system:controller:deployment-controller</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources                          Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------                          -----------------  --------------  -----</span><br><span class="line">  replicasets.apps                   []                 []              [create delete get list patch update watch]</span><br><span class="line">  replicasets.extensions             []                 []              [create delete get list patch update watch]</span><br><span class="line">  events                             []                 []              [create patch update]</span><br><span class="line">  pods                               []                 []              [get list update watch]</span><br><span class="line">  deployments.apps                   []                 []              [get list update watch]</span><br><span class="line">  deployments.extensions             []                 []              [get list update watch]</span><br><span class="line">  deployments.apps/finalizers        []                 []              [update]</span><br><span class="line">  deployments.apps/status            []                 []              [update]</span><br><span class="line">  deployments.extensions/finalizers  []                 []              [update]</span><br><span class="line">  deployments.extensions/status      []                 []              [update]</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-7、查看当前的-leader"><a href="#9-7、查看当前的-leader" class="headerlink" title="9.7、查看当前的 leader"></a>9.7、查看当前的 leader</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get endpoints kube-controller-manager --namespace=kube-system  -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    control-plane.alpha.kubernetes.io/leader: <span class="string">'&#123;"holderIdentity":"k8s-master-01-2.kxl_8890f530-d829-11e9-873f-fa163e5af833","leaseDurationSeconds":15,"acquireTime":"2019-09-16T06:00:15Z","renewTime":"2019-09-16T07:05:38Z","leaderTransitions":1&#125;'</span></span><br><span class="line">  creationTimestamp: <span class="string">"2019-09-16T02:27:06Z"</span></span><br><span class="line">  name: kube-controller-manager</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">"25734"</span></span><br><span class="line">  selfLink: /api/v1/namespaces/kube-system/endpoints/kube-controller-manager</span><br><span class="line">  uid: 7a5b872e-d829-11e9-9b67-fa163effd55b</span><br></pre></td></tr></table></figure><p>当前的 leader 为k8s-master-01-2节点。</p><p>测试 kube-controller-manager 集群的高可用,停掉一个或两个节点的 kube-controller-manager 服务，观察其它节点的日志，看是否获取了 leader 权限。</p><h3 id="10、scheduler集群"><a href="#10、scheduler集群" class="headerlink" title="10、scheduler集群"></a>10、scheduler集群</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 个节点，启动后将通过竞争选举机制产生一个 leader 节点，其它节点为阻塞状态。当 leader 节点不可用后，剩余节点将再次进行选举产生新的 leader 节点，从而保证服务的可用性。</p><p>为保证通信安全，本文档先生成 x509 证书和私钥，kube-scheduler 在如下两种情况下使用该证书：<br>1.与 kube-apiserver 的安全端口通信;<br>2.在安全端口(https，10251) 输出 prometheus 格式的 metrics；</p><h4 id="10-1、创建-kube-scheduler-证书和私钥"><a href="#10-1、创建-kube-scheduler-证书和私钥" class="headerlink" title="10.1、创建 kube-scheduler 证书和私钥"></a>10.1、创建 kube-scheduler 证书和私钥</h4><ul><li><p>创建证书签名请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; kube-scheduler-csr.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"172.21.17.30"</span>,</span><br><span class="line">      <span class="string">"172.21.17.31"</span>,</span><br><span class="line">      <span class="string">"172.21.16.110"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">        <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">        <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">        <span class="string">"O"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">        <span class="string">"OU"</span>: <span class="string">"4Paradigm"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>hosts 列表包含所有 kube-scheduler 节点 IP；</p></li><li><p>CN 和 O 均为 system:kube-scheduler，kubernetes 内置的 ClusterRoleBindings system:kube-scheduler 将赋予 kube-scheduler 工作所需的权限；</p></li><li><p>生成证书和私钥:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ls kube-scheduler*pem</span></span><br><span class="line">kube-scheduler-key.pem  kube-scheduler.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp kube-scheduler*pem  /etc/kubernetes/ssl/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="10-2、创建和分发-kubeconfig-文件"><a href="#10-2、创建和分发-kubeconfig-文件" class="headerlink" title="10.2、创建和分发 kubeconfig 文件"></a>10.2、创建和分发 kubeconfig 文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kube-scheduler 使用 kubeconfig 文件访问 apiserver，该文件提供了 apiserver 地址、嵌入的 CA 证书和 kube-scheduler 证书：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-credentials system:kube-scheduler \</span></span><br><span class="line">  --client-certificate=kube-scheduler.pem \</span><br><span class="line">  --client-key=kube-scheduler-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config set-context system:kube-scheduler \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-scheduler \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl config use-context system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cp kube-scheduler.kubeconfig /etc/kubernetes/</span></span><br></pre></td></tr></table></figure><h4 id="10-3、创建-kube-scheduler-配置文件"><a href="#10-3、创建-kube-scheduler-配置文件" class="headerlink" title="10.3、创建 kube-scheduler 配置文件"></a>10.3、创建 kube-scheduler 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;kube-scheduler.yaml &lt;&lt;EOF</span></span><br><span class="line">apiVersion: kubescheduler.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeSchedulerConfiguration</span><br><span class="line">bindTimeoutSeconds: 600</span><br><span class="line">clientConnection:</span><br><span class="line">  burst: 200</span><br><span class="line">  kubeconfig: <span class="string">"/etc/kubernetes/kube-scheduler.kubeconfig"</span></span><br><span class="line">  qps: 100</span><br><span class="line">enableContentionProfiling: <span class="literal">false</span></span><br><span class="line">enableProfiling: <span class="literal">true</span></span><br><span class="line">hardPodAffinitySymmetricWeight: 1</span><br><span class="line">healthzBindAddress: 127.0.0.1:10251</span><br><span class="line">leaderElection:</span><br><span class="line">  leaderElect: <span class="literal">true</span></span><br><span class="line">metricsBindAddress: <span class="comment">##NODE_IP##:10251</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp kube-scheduler.yaml /etc/kubernetes/</span></span><br></pre></td></tr></table></figure><ul><li>–kubeconfig：指定 kubeconfig 文件路径，kube-scheduler 使用它连接和验证 kube-apiserver；</li><li>–leader-elect=true：集群运行模式，启用选举功能；被选为 leader 的节点负责处理工作，其它节点为阻塞状态；</li></ul><h4 id="10-4、创建-kube-scheduler-systemd-unit-模板文件"><a href="#10-4、创建-kube-scheduler-systemd-unit-模板文件" class="headerlink" title="10.4、创建 kube-scheduler systemd unit 模板文件"></a>10.4、创建 kube-scheduler systemd unit 模板文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-scheduler.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/<span class="built_in">log</span>/k8s/kube-scheduler</span><br><span class="line">ExecStart=/usr/bin/kube-scheduler \</span><br><span class="line">  --config=/etc/kubernetes/kube-scheduler.yaml \</span><br><span class="line">  --<span class="built_in">bind</span>-address=0.0.0.0 \</span><br><span class="line">  --secure-port=10259 \</span><br><span class="line">  --port=0 \</span><br><span class="line">  --tls-cert-file=/etc/kubernetes/ssl/kube-scheduler.pem \</span><br><span class="line">  --tls-private-key-file=/etc/kubernetes/ssl/kube-scheduler-key.pem \</span><br><span class="line">  --authentication-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span><br><span class="line">  --client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --requestheader-allowed-names=<span class="string">""</span> \</span><br><span class="line">  --requestheader-client-ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --requestheader-extra-headers-prefix=<span class="string">"X-Remote-Extra-"</span> \</span><br><span class="line">  --requestheader-group-headers=X-Remote-Group \</span><br><span class="line">  --requestheader-username-headers=X-Remote-User \</span><br><span class="line">  --authorization-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span><br><span class="line">  --logtostderr=<span class="literal">true</span> \</span><br><span class="line">  --v=2</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">StartLimitInterval=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="10-5、启动-kube-scheduler-服务"><a href="#10-5、启动-kube-scheduler-服务" class="headerlink" title="10.5、启动 kube-scheduler 服务"></a>10.5、启动 kube-scheduler 服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /var/log/k8s/kube-scheduler</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable kube-scheduler &amp;&amp; systemctl restart kube-scheduler &amp;&amp; systemctl status kube-scheduler</span></span><br></pre></td></tr></table></figure><ul><li>授予 kubernetes API 的权限<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding scheduler-node-clusterrolebing  --clusterrole=system:kube-scheduler --user=system:kube-scheduler</span><br></pre></td></tr></table></figure></li></ul><h4 id="10-6、查看输出的-metrics"><a href="#10-6、查看输出的-metrics" class="headerlink" title="10.6、查看输出的 metrics"></a>10.6、查看输出的 metrics</h4><p>kube-scheduler 监听 10251 和 10251 端口：</p><ul><li>10251：接收 http 请求，非安全端口，不需要认证授权</li><li>10259：接收 https 请求，安全端口，需要认证授权</li></ul><p>两个接口都对外提供 /metrics 和 /healthz 的访问。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat -lnpt |grep kube-sch</span></span><br><span class="line">tcp        0      0 172.21.17.31:10251      0.0.0.0:*               LISTEN      8441/kube-scheduler </span><br><span class="line">tcp6       0      0 :::10259                :::*                    LISTEN      8441/kube-scheduler</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s http://172.21.17.30:10251/metrics |head</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"1800"</span>&#125; 0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/ca.pem --cert /etc/kubernetes/ssl/admin.pem --key /etc/kubernetes/ssl/admin-key.pem https://172.21.17.30:10259/metrics |head</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"1800"</span>&#125; 0</span><br></pre></td></tr></table></figure><h4 id="10-7、查看当前的-leader"><a href="#10-7、查看当前的-leader" class="headerlink" title="10.7、查看当前的 leader"></a>10.7、查看当前的 leader</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  kubectl get endpoints kube-scheduler --namespace=kube-system  -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    control-plane.alpha.kubernetes.io/leader: <span class="string">'&#123;"holderIdentity":"k8s-master-01.kxl_2a6e0bf9-d82b-11e9-b946-fa163effd55b","leaseDurationSeconds":15,"acquireTime":"2019-09-16T06:00:28Z","renewTime":"2019-09-16T07:41:57Z","leaderTransitions":1&#125;'</span></span><br><span class="line">  creationTimestamp: <span class="string">"2019-09-16T02:38:55Z"</span></span><br><span class="line">  name: kube-scheduler</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">"29215"</span></span><br><span class="line">  selfLink: /api/v1/namespaces/kube-system/endpoints/kube-scheduler</span><br><span class="line">  uid: 20a04151-d82b-11e9-baf3-fa163e53d4c8</span><br></pre></td></tr></table></figure><h4 id="10-8-检查集群endpoints状态"><a href="#10-8-检查集群endpoints状态" class="headerlink" title="10.8 检查集群endpoints状态"></a>10.8 检查集群endpoints状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get endpoints</span></span><br><span class="line">NAME          ENDPOINTS                                                AGE</span><br><span class="line">kubernetes    172.21.16.110:6443,172.21.17.30:6443,172.21.17.31:6443   18h</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kuberntes v1.14</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器端口映射</title>
    <url>/2019/09/10/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>好记性不如烂笔头，h3c MSR3620路由器做端口映射到后端服务器,包含单个端口和端口段的映射</p><a id="more"></a><h3 id="单个端口的映射"><a href="#单个端口的映射" class="headerlink" title="单个端口的映射"></a>单个端口的映射</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[router] interface GigabitEthernet0/2 公网ip接口</span><br><span class="line">[router] nat server protocol tcp global 公网ip 80 inside 内网ip 80</span><br></pre></td></tr></table></figure><h3 id="多端口"><a href="#多端口" class="headerlink" title="多端口"></a>多端口</h3><p>vsftp可以使用这个</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[router] interface GigabitEthernet0/2 公网ip接口</span><br><span class="line">[router] nat server protocol tcp global current-interface 9000 9045 inside 内网ip 9000 9045</span><br></pre></td></tr></table></figure><p><strong>备注:</strong> 可以使用vsftp场景，<a href="https://xxlaila.github.io/2019/08/09/vsftpd%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">vsftp安装</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
      <tags>
        <tag>MSR3620</tag>
      </tags>
  </entry>
  <entry>
    <title>traefik https应用</title>
    <url>/2019/09/06/traefik-https%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前已经使用traefik服务作为入口，测试并访问了tomcat应用，之前是通过http来访问的，而我们在yaml文件里面也添加8443端口用于https访问，在实际环境中我们也是需要https来进行访问应用，通过traefik实现https，<a href="https://xxlaila.github.io/2019/09/05/traefik-ingress%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">traefik http应用</a></p><h3 id="操作实践"><a href="#操作实践" class="headerlink" title="操作实践"></a>操作实践</h3><ul><li>这里我用了公司的证书，就是为了贴近真实，也满足测试需求，</li><li>创建一个secret，保存https证书</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line">1_test.xxlaila.cn_bundle.crt  2_test.xxlaila.cn.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl create secret generic traefik-cert --from-file=1_test.xxlaila.cn_bundle.crt --from-file=2_test.xxlaila.cn.key -n kube-system</span></span><br><span class="line">secret/traefik-cert created</span><br></pre></td></tr></table></figure><p>把证书拷贝到k8s node节点，存放路径为/etc/kubernetes/certs。</p><h3 id="创建一个configmap，保存traefix的配置"><a href="#创建一个configmap，保存traefix的配置" class="headerlink" title="创建一个configmap，保存traefix的配置"></a>创建一个configmap，保存traefix的配置</h3><p>traefix中配置了把所有http请求全部rewrite为https的规则，并配置相应的证书位置</p><ul><li>traefik.toml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaultEntryPoints = [<span class="string">"http"</span>,<span class="string">"https"</span>]</span><br><span class="line">[entryPoints]</span><br><span class="line">  [entryPoints.http]</span><br><span class="line">  address = <span class="string">":80"</span></span><br><span class="line">    [entryPoints.http.redirect]</span><br><span class="line">    entryPoint = <span class="string">"https"</span></span><br><span class="line">  [entryPoints.https]</span><br><span class="line">  address = <span class="string">":443"</span></span><br><span class="line">    [entryPoints.https.tls]</span><br><span class="line">      [[entryPoints.https.tls.certificates]]</span><br><span class="line">      certFile = <span class="string">"/etc/kubernetes/certs/1_test.xxlaila.cn_bundle.crt"</span></span><br><span class="line">      keyFile = <span class="string">"/etc/kubernetes/certs/2_test.xxlaila.cn.key"</span></span><br><span class="line"></span><br><span class="line">$ kubectl create configmap traefik-conf --from-file=traefik.toml -n kube-system</span><br><span class="line">configmap/traefik-conf created</span><br></pre></td></tr></table></figure></li></ul><p>把traefik.toml文件拷贝到k8s node节点,存放路径为/etc/kubernetes/conf。</p><h3 id="重新部署Traefix"><a href="#重新部署Traefix" class="headerlink" title="重新部署Traefix"></a>重新部署Traefix</h3><p>主要是要关联创建的secret和configMap，并挂载相对应的主机目录。</p><ul><li>deployment.yaml</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat deployment.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-lb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2 <span class="comment"># 增加行</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: traefik-ingress-lb</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      serviceAccountName: ingress</span><br><span class="line">      containers:</span><br><span class="line">      - image: traefik</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">"/etc/kubernetes/certs"</span></span><br><span class="line">          name: <span class="string">"ssl"</span></span><br><span class="line">        - mountPath: <span class="string">"/etc/kubernetes/conf"</span></span><br><span class="line">          name: <span class="string">"config"</span></span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">            memory: 3000Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 2000Mi</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 80</span><br><span class="line">        - name: admin</span><br><span class="line">          containerPort: 8580</span><br><span class="line">          hostPort: 8580</span><br><span class="line">        args:</span><br><span class="line">        - --configFile=/etc/kubernetes/conf/traefik.toml</span><br><span class="line">        - --web</span><br><span class="line">        - --web.address=:8580</span><br><span class="line">        - --kubernetes</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f deployment.yaml </span><br><span class="line">deployment.extensions/traefik-ingress-lb configured</span><br></pre></td></tr></table></figure><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3><p>登陆traefik-ui界面,用原本http的访问，traefik会直接给我们重定向至https。<br><img src="https://img.xxlaila.cn/1567748749337.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于traefik-ui使用的域名不是我们证书所支持的域名，所以这里提示不安全，修改之前创建的ingress，修改其中的域名为支持证书的域名</p><ul><li>traefik-ui.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system </span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 8580</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: traefik.test.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: traefik-web-ui</span><br><span class="line">          servicePort: web</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f traefik-ui.yaml </span><br><span class="line">service/traefik-web-ui unchanged</span><br><span class="line">ingress.extensions/traefik-web-ui configured</span><br></pre></td></tr></table></figure></li></ul><p>修改hosts版定的域名进行访问<br><img src="https://img.xxlaila.cn/1567749086159.jpg" alt="img"></p><ul><li><p>修改之前部署的tomcat程序</p></li><li><p>ingress-tomcat.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test-web</span><br><span class="line">  namespace: default</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">    traefik.frontend.rule.type: PathPrefixStrip</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: tomcat.test.xxlaila.cn</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /test1/</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: tomcat-test1</span><br><span class="line">          servicePort: 8080</span><br><span class="line">      - path: /test2/</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: tomcat-test2</span><br><span class="line">          servicePort: 8080</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f ingress-tomcat.yaml </span><br><span class="line">ingress.extensions/tomcat-test-web configured</span><br></pre></td></tr></table></figure></li></ul><p>访问链接测试<br><img src="https://img.xxlaila.cn/1567749278980.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1567749309772.jpg" alt="img"></p><h3 id="其他需求"><a href="#其他需求" class="headerlink" title="其他需求"></a>其他需求</h3><p>在我们真实的应用场景中，需求肯定有不同的，比如我所在的公司开发环境就要只是http和https，测试环境以上的就全部强制https。这就得分开进行配置</p><h4 id="同时支持http和https"><a href="#同时支持http和https" class="headerlink" title="同时支持http和https"></a>同时支持http和https</h4><p>把http中的rewrite代码改掉</p><ul><li>traefik.toml</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaultEntryPoints = [<span class="string">"http"</span>,<span class="string">"https"</span>]</span><br><span class="line">[entryPoints]</span><br><span class="line">  [entryPoints.http]</span><br><span class="line">  address = <span class="string">":80"</span></span><br><span class="line">    entryPoint = <span class="string">"https"</span></span><br><span class="line">  [entryPoints.https]</span><br><span class="line">  address = <span class="string">":443"</span></span><br><span class="line">    [entryPoints.https.tls]</span><br><span class="line">      [[entryPoints.https.tls.certificates]]</span><br><span class="line">      certFile = <span class="string">"/etc/kubernetes/certs/1_test.xxlaila.cn_bundle.crt"</span></span><br><span class="line">      keyFile = <span class="string">"/etc/kubernetes/certs/2_test.xxlaila.cn.key"</span></span><br><span class="line">      [[entryPoints.https.tls.certificates]]</span><br><span class="line">      certFile = <span class="string">"/etc/kubernetes/certs/1_dev.xxlaila.cn_bundle.crt"</span></span><br><span class="line">      keyFile = <span class="string">"/etc/kubernetes/certs/2_dev.xxlaila.cn.key"</span></span><br><span class="line"></span><br><span class="line">[file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># rules</span></span><br><span class="line">[entryPoints]</span><br><span class="line">  [entryPoints.http]</span><br><span class="line">  address = <span class="string">":80"</span></span><br><span class="line">    [entryPoints.http.redirect]</span><br><span class="line">      regex = <span class="string">"^http://traefix.test.xxlaila.cn/(.*)"</span></span><br><span class="line">      replacement = <span class="string">"https://traefix.test.xxlaila.cn/<span class="variable">$1</span>"</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>traefik</tag>
      </tags>
  </entry>
  <entry>
    <title>traefik ingress使用</title>
    <url>/2019/09/05/traefik-ingress%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:43 GMT+0800 (China Standard Time) --><h3 id="Traefik介绍"><a href="#Traefik介绍" class="headerlink" title="Traefik介绍"></a>Traefik介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单的说，ingress就是从kubernetes集群外访问集群的入口，将用户的URL请求转发到不同的service上。Ingress相当于nginx、apache等负载均衡反向代理服务器，其中还包括规则定义，即URL的路由信息。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Traefik是一款开源的反向代理与负载均衡工具。它最大的优点是能够与常见的微服务系统直接整合，实现自动化动态配置。Traefik通过不断地跟 kubernetes API 打交道，实时的感知后端 service、pod 等变化，比如pod，service 增加与减少等；当得到这些变化信息后，Ingress自动更新配置并热重载 ，达到服务发现的作用。</p><a id="more"></a><p>traefix 整体架构图如下:<br><img src="https://img.xxlaila.cn/34238937snkhfskdy8923.png" alt="img"></p><h3 id="Traefik主要特性详解"><a href="#Traefik主要特性详解" class="headerlink" title="Traefik主要特性详解"></a>Traefik主要特性详解</h3><ul><li><p>自动熔断</p><ul><li>在集群中，当某一个服务大量出现请求错误，或者请求响应时间过久，或者返回500+错误状态码时，我们希望可以主动剔除该服务，也就是不在将请求转发到该服务上，而这一个过程是自动完成，不需要人工执行。Traefik 通过配置很容易就能帮我们实现，Traefik 可以通过定义策略来主动熔断服务。</li><li>NetworkErrorRatio() &gt; 0.5：监测服务错误率达到50%时，熔断</li><li>LatencyAtQuantileMS(50.0) &gt; 50：监测延时大于50ms时，熔断</li><li>ResponseCodeRatio(500, 600, 0, 600) &gt; 0.5：监测返回状态码为[500-600]在[0-600]区间占比超过50%时，熔断</li></ul></li><li><p>负载均衡策略</p><ul><li>Traefik 提供两种负载均衡策略支持。一种是 wrr（加权轮训调度算法），一种是 drr（动态加权循环调度算法）</li><li>wrr是默认的负载均衡策略，新创建的 service 权重都是一样为1，这样的话，请求会平均分给每个服务，但是这样很多时候会出现资源分配不均衡的问题，比如由于集群中每个机器配置不一样，而且服务消耗不一样，假设 A 资源使用率已经很高，而 B 属于空闲状态，如果还是均摊到每个服务的话，会加重 A 的负荷，这时候因该有一种策略能够主动识别并分担更多流量到 B 才对</li><li>drr 就更加智能，它是一种动态加权轮训调度方式，它会记录一段时间内转发到 A 的请求数，跟转发到 B 的请求数对比，转发数量多，说明处理速度快，响应时间快。如果 A 处理请求速度比 B 快，那么就会调整 A 的权重，接下来的一段时间，就会转发更多请求给 A，相应的 B 的转发就少一些。整个过程都在不断的调整权重，实现请求的合理分配，从而达到资源使用最大化</li></ul></li></ul><h3 id="部署Traefik-ingress"><a href="#部署Traefik-ingress" class="headerlink" title="部署Traefik ingress"></a>部署Traefik ingress</h3><ul><li><p>创建ingress-rbac.yaml，将用于service account验证。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat ingress-rbac.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: ingress</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure></li><li><p>创建Depeloyment部署traefik，如文件名为deployment.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-lb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2 <span class="comment"># 增加行</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: traefik-ingress-lb</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      serviceAccountName: ingress</span><br><span class="line">      containers:</span><br><span class="line">      - image: traefik</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">            memory: 3000Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 2000Mi</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 80</span><br><span class="line">        - name: admin</span><br><span class="line">          containerPort: 8580</span><br><span class="line">          hostPort: 8580</span><br><span class="line">        args:</span><br><span class="line">        - --web</span><br><span class="line">        - --web.address=:8580</span><br><span class="line">        - --kubernetes</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>注意</strong>: 我们这里用的是Deploy类型，没有限定该pod运行在哪个主机上。Traefik的端口是8580。</li></ul><ul><li>编写Traefik UI的ingress部署文件，如文件名为traefik-ui.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system <span class="comment">#增加行</span></span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 8580</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: traefik.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: traefik-web-ui</span><br><span class="line">          servicePort: web</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><ul><li><code>backend</code>中要配置default namespace中启动的service名字。</li><li><code>path</code>就是URL地址后的路径，如<code>traefik.frontend.io/path</code>，service将会接受path这个路径</li><li><code>host</code>最好使用service-name.filed1.filed2.domain-name这种类似主机名称的命名方式，方便区分服务。</li></ul><ul><li><strong>逼逼一下</strong>: 目前我所在的公司后端微服务100+，前端60+，如果用传统nginx的local来匹配，估计要写死人，而且对于运维自动化来也不是很好做，再则是出了问题也还要去看一下是哪个应用；我们目前是通过每个服务每一个域名，域名是根据服务名来自动生成，除了几个特定对外公开的是特制的域名，其他的均采用这种机制，当有问题的时候，一下就能判断出那里出问题，很好定位，有域名有特殊配置的时候，也可以单独的进行设置，但是截止目前两年多来，运维拒绝这种特殊需求(有还有，很少，只有那么两三个)</li></ul><ul><li><p>配置完成后就可以启动treafik ingress了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f ./</span></span><br><span class="line">deployment.extensions/traefik-ingress-lb created</span><br><span class="line">serviceaccount/ingress created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/ingress created</span><br><span class="line">service/traefik-web-ui created</span><br><span class="line">ingress.extensions/traefik-web-ui created</span><br></pre></td></tr></table></figure></li><li><p>查看是否部署成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n kube-system | grep traefik</span></span><br><span class="line"></span><br><span class="line">traefik-ingress-lb-5d7f658cfd-4vkjc     1/1     Running   0          29m</span><br><span class="line">traefik-ingress-lb-5d7f658cfd-7sszp     1/1     Running   0          19m</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get ingress -o wide --all-namespaces </span></span><br><span class="line">NAMESPACE     NAME                HOSTS                ADDRESS   PORTS   AGE</span><br><span class="line">kube-system   traefik-web-ui      traefik.xxlaila.io             80      29m</span><br></pre></td></tr></table></figure></li></ul><p>在浏览器绑定hosts域名解析，node的ip地址，在浏览器输入traefik.xxlaila.io即可访问了<br><img src="https://img.xxlaila.cn/1567676343800.jpg" alt="img"></p><p>左侧蓝色部分列出的是所有的前端(frontends)，右侧绿色部分是所有的后端(backend)。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>下面模拟部署一个程序，以Nginx 为例，并使用drr动态轮训加权策略。</p><ul><li><p>nginx-deployment.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx-pod</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.15.5</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service</span><br><span class="line">  annotations:</span><br><span class="line">    traefik.ingress.kubernetes.io/load-balancer-method: drr</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx-service</span><br><span class="line">        namespace: default</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx-pod</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: k8s.nginx.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: nginx-service</span><br><span class="line">          servicePort: 80</span><br></pre></td></tr></table></figure></li><li><p>创建nginx</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f nginx-deployment.yaml </span></span><br><span class="line">deployment.apps/nginx-pod created</span><br><span class="line">service/nginx-service created</span><br><span class="line">ingress.extensions/nginx-ingress created</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get pods</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有访问这些地址的流量都会发送给172.16.0.180这台主机，就是我们启动traefik的主机。Traefik会解析http请求header里的Host参数将流量转发给Ingress配置里的相应service。<br><img src="https://img.xxlaila.cn/1567676984150.jpg" alt="img"></p><p>客户端绑定host，浏览器进行访问: <a href="http://k8s.nginx.com" target="_blank" rel="noopener">http://k8s.nginx.com</a><br><img src="https://img.xxlaila.cn/1567677018297.jpg" alt="img"></p><p>在K8s集群节点上访问测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -x 172.21.16.204 http://k8s.nginx.com</span></span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;503 Service Unavailable&lt;/h1&gt;</span><br><span class="line">No server is available to handle this request.</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">[root@k8s ~]<span class="comment"># curl -x 172.21.16.204:80 http://k8s.nginx.com</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.org/"</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.com/"</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="ingress配置同域名不同路径代理web应用"><a href="#ingress配置同域名不同路径代理web应用" class="headerlink" title="ingress配置同域名不同路径代理web应用"></a>ingress配置同域名不同路径代理web应用</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多时候我们不想配置太多的域名来区别应用，使用同域名分路径的方式来区别应用就简洁方便很多。ingress也提供了相关的配置。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设两个应用tomcat-test1和tomcat-test2。这里可配置域名tomcat.xxlaila.io，通过路径test1、test2来分别代理两个tomcat应用。其中，分路径配置需添加配置：traefik.frontend.rule.type: PathPrefixStrip,首先，我先创建tomcat-test1和tomcat-test2的pod和service，其中8080为tomcat的http端口，8443为tomcat的https端口，本例中仅使用http端口测试。</p><ul><li><p>tomcat-test1.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test1</span><br><span class="line">  labels: </span><br><span class="line">    app: tomcat-test1</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1 </span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: tomcat-test1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: tomcat-test1</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: tomcat-test1</span><br><span class="line">        image: tomcat</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8443</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test1</span><br><span class="line">  labels:</span><br><span class="line">    name: tomcat-test1</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8443</span><br><span class="line">    targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    app: tomcat-test1</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8080 </span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    app: tomcat-test1</span><br></pre></td></tr></table></figure></li><li><p>tomcat-test2.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test2</span><br><span class="line">  labels: </span><br><span class="line">    app: tomcat-test2</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1 </span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: tomcat-test2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: tomcat-test2</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: tomcat-test2</span><br><span class="line">        image: manjeetchauhan211/tomcat_test2</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8443</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test2</span><br><span class="line">  labels:</span><br><span class="line">    name: tomcat-test2</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8443</span><br><span class="line">    targetPort: 8443</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8080 </span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    app: tomcat-test2</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f ./</span></span><br><span class="line"></span><br><span class="line">$ kubectl get deployment</span><br><span class="line">NAME           READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-pod      2/2     2            2           17h</span><br><span class="line">tomcat-test1   1/1     1            1           42m</span><br><span class="line">tomcat-test2   1/1     1            1           42m</span><br><span class="line"></span><br><span class="line">$ kubectl get svc</span><br><span class="line">NAME             TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">kubernetes       ClusterIP   10.254.0.1       &lt;none&gt;        443/TCP    5d23h</span><br><span class="line">nginx-service    ClusterIP   10.254.149.69    &lt;none&gt;        80/TCP     17h</span><br><span class="line">tomcat-test1     ClusterIP   10.254.195.108   &lt;none&gt;        8080/TCP   42m</span><br><span class="line">tomcat-test2     ClusterIP   10.254.6.88      &lt;none&gt;        8080/TCP   42m</span><br><span class="line">traefik-web-ui   ClusterIP   10.254.22.102    &lt;none&gt;        80/TCP     17h</span><br></pre></td></tr></table></figure></li></ul><p>创建test1的ingress，来发布tomcat-test1服务</p><ul><li>ingress-tomcat1.yam<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat ingress-tomcat1.yaml </span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test1-web</span><br><span class="line">  namespace: default</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: tomcat.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: tomcat-test1</span><br><span class="line">          servicePort: 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl create -f ingress-tomcat.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>在traefix-ui界面上，可以看到已经有了一个<code>tomcat.xxlaila.io</code>的域名规则.<br><img src="https://img.xxlaila.cn/1567739051461.jpg" alt="img"></p><p>在hosts文件添加tomcat.xxlaila.io绑定来进行访问<br><img src="https://img.xxlaila.cn/1567739162707.jpg" alt="img"></p><h5 id="ingress配置同域名对应location"><a href="#ingress配置同域名对应location" class="headerlink" title="ingress配置同域名对应location"></a>ingress配置同域名对应location</h5><ul><li><p>ingress-tomcat.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: tomcat-test-web</span><br><span class="line">  namespace: default</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: traefik</span><br><span class="line">    traefik.frontend.rule.type: PathPrefixStrip</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: tomcat.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /test1/</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: tomcat-test1</span><br><span class="line">          servicePort: 8080</span><br><span class="line">      - path: /test2/</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: tomcat-test2</span><br><span class="line">          servicePort: 8080</span><br></pre></td></tr></table></figure></li><li><p>创建并查看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f ingress-tomcat.yaml </span><br><span class="line"></span><br><span class="line">$ kubectl describe ingress tomcat-test-web</span><br><span class="line">Name:             tomcat-test-web</span><br><span class="line">Namespace:        default</span><br><span class="line">Address:          </span><br><span class="line">Default backend:  default-http-backend:80 (&lt;none&gt;)</span><br><span class="line">Rules:</span><br><span class="line">  Host               Path  Backends</span><br><span class="line">  ----               ----  --------</span><br><span class="line">  tomcat.xxlaila.io  </span><br><span class="line">                     /test1/   tomcat-test1:8080 (&lt;none&gt;)</span><br><span class="line">                     /test2/   tomcat-test2:8080 (&lt;none&gt;)</span><br><span class="line">Annotations:</span><br><span class="line">  traefik.frontend.rule.type:                        PathPrefixStrip</span><br><span class="line">  kubectl.kubernetes.io/last-applied-configuration:  &#123;<span class="string">"apiVersion"</span>:<span class="string">"extensions/v1beta1"</span>,<span class="string">"kind"</span>:<span class="string">"Ingress"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;<span class="string">"kubernetes.io/ingress.class"</span>:<span class="string">"traefik"</span>,<span class="string">"traefik.frontend.rule.type"</span>:<span class="string">"PathPrefixStrip"</span>&#125;,<span class="string">"name"</span>:<span class="string">"tomcat-test-web"</span>,<span class="string">"namespace"</span>:<span class="string">"default"</span>&#125;,<span class="string">"spec"</span>:&#123;<span class="string">"rules"</span>:[&#123;<span class="string">"host"</span>:<span class="string">"tomcat.xxlaila.io"</span>,<span class="string">"http"</span>:&#123;<span class="string">"paths"</span>:[&#123;<span class="string">"backend"</span>:&#123;<span class="string">"serviceName"</span>:<span class="string">"tomcat-test1"</span>,<span class="string">"servicePort"</span>:8080&#125;,<span class="string">"path"</span>:<span class="string">"/test1/"</span>&#125;,&#123;<span class="string">"backend"</span>:&#123;<span class="string">"serviceName"</span>:<span class="string">"tomcat-test2"</span>,<span class="string">"servicePort"</span>:8080&#125;,<span class="string">"path"</span>:<span class="string">"/test2/"</span>&#125;]&#125;&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line">  kubernetes.io/ingress.class:  traefik</span><br><span class="line">Events:                         &lt;none&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="给节点设置label"><a href="#给节点设置label" class="headerlink" title="给节点设置label"></a>给节点设置label</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于是 Kubernetes DeamonSet 这种方式部署 Traefik，所以需要提前给节点设置 Label，这样当程序部署时 Pod 会自动调度到设置 Label 的点上。</p><h4 id="节点设置-Label-标签"><a href="#节点设置-Label-标签" class="headerlink" title="节点设置 Label 标签"></a>节点设置 Label 标签</h4><ul><li>格式：kubectl label nodes [节点名] [key=value]<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> kubectl get nodes</span><br><span class="line">NAME            STATUS   ROLES    AGE    VERSION</span><br><span class="line">172.21.16.204   Ready    &lt;none&gt;   7d5h   v1.13.3</span><br><span class="line">172.21.16.240   Ready    &lt;none&gt;   7d2h   v1.13.3</span><br><span class="line">172.21.16.87    Ready    &lt;none&gt;   7d2h   v1.13.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl label nodes 172.21.16.204 IngressProxy=true</span></span><br><span class="line">node/172.21.16.204 labeled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点label设置是否成功</span></span><br><span class="line"><span class="comment"># kubectl get nodes --show-labels</span></span><br><span class="line">NAME            STATUS   ROLES    AGE    VERSION   LABELS</span><br><span class="line">172.21.16.204   Ready    &lt;none&gt;   7d5h   v1.13.3   IngressProxy=<span class="literal">true</span>,beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=172.21.16.204,node.kubernetes.io/k8s-node=<span class="literal">true</span></span><br><span class="line">172.21.16.240   Ready    &lt;none&gt;   7d2h   v1.13.3   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=172.21.16.240,node.kubernetes.io/k8s-node=<span class="literal">true</span></span><br><span class="line">172.21.16.87    Ready    &lt;none&gt;   7d2h   v1.13.3   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=172.21.16.87,node.kubernetes.io/k8s-node=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="修改Traefix部署文件"><a href="#修改Traefix部署文件" class="headerlink" title="修改Traefix部署文件"></a>修改Traefix部署文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat deployment.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-lb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2 <span class="comment"># 增加行</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: traefik-ingress-lb</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      volumes:</span><br><span class="line">      - name: ssl</span><br><span class="line">        secret:</span><br><span class="line">          secretName: traefik-cert</span><br><span class="line">      - name: config</span><br><span class="line">        configMap:</span><br><span class="line">          name: traefik-conf</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      serviceAccountName: ingress</span><br><span class="line">      containers:</span><br><span class="line">      - image: traefik</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">"/etc/kubernetes/certs"</span></span><br><span class="line">          name: <span class="string">"ssl"</span></span><br><span class="line">        - mountPath: <span class="string">"/etc/kubernetes/conf"</span></span><br><span class="line">          name: <span class="string">"config"</span></span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">            memory: 3000Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 2000Mi</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 80</span><br><span class="line">        - name: admin</span><br><span class="line">          containerPort: 8580</span><br><span class="line">          hostPort: 8580</span><br><span class="line">        args:</span><br><span class="line">        - --configFile=/etc/kubernetes/conf/traefik.toml</span><br><span class="line">        - --web</span><br><span class="line">        - --web.address=:8580</span><br><span class="line">        - --kubernetes</span><br><span class="line">      nodeSelector:</span><br><span class="line">        IngressProxy: <span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行部署即可</span></span><br></pre></td></tr></table></figure><ul><li>traefix-ui界面上可以看到<br><img src="https://img.xxlaila.cn/1567739737385.jpg" alt="img"></li></ul><p>从describe信息和ui界面上可以看到，tomcat.test.k8s分别有了/test1/和/test2/的域名代理以及相对应的后端<br><img src="https://img.xxlaila.cn/1567739822127.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1567739856570.jpg" alt="img"></p><p><a href="https://xuchao918.github.io/2019/03/01/Kubernetes-traefik-ingress%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">参考文献2</a><br><a href="https://blog.51cto.com/icenycmh/2124502" target="_blank" rel="noopener">参考文献1</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>traefik</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-helm</title>
    <url>/2019/09/04/k8s-helm/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Helm类似与linux下面的yum，Helm是一个用于kubernetes的包管理器，每一个包为一个chart，一个chart是一个目录，常常会对目录进行打包压缩，形成一个${name}-version.tgz的格式进行传输和存储。</p><ul><li>对于应用发布者而言，可以通过Helm打包应用，管理应用依赖关系，管理应用版本并发布应用到软件仓库。</li><li>对于使用者而言，使用Helm后不用需要了解Kubernetes的Yaml语法并编写应用部署文件，可以通过Helm下载并在kubernetes上安装需要的应用。</li></ul><p>Helm还提供了kubernetes上的软件部署，删除，升级，回滚应用的强大功能</p><a id="more"></a><h3 id="1、helm组件"><a href="#1、helm组件" class="headerlink" title="1、helm组件"></a>1、helm组件</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Helm 是一个命令行下的客户端工具。主要用于 Kubernetes 应用程序 Chart 的创建、打包、发布以及创建和管理本地和远程的 Chart 仓库。</p><h4 id="1-1、Tiller"><a href="#1-1、Tiller" class="headerlink" title="1.1、Tiller"></a>1.1、Tiller</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tiller 是 Helm 的服务端，部署在 Kubernetes 集群中。Tiller 用于接收 Helm 的请求，并根据 Chart 生成 Kubernetes 的部署文件（ Helm 称为 Release ），然后提交给 Kubernetes 创建应用。Tiller 还提供了 Release 的升级、删除、回滚等一系列功能。</p><h4 id="1-2、Chart"><a href="#1-2、Chart" class="headerlink" title="1.2、Chart"></a>1.2、Chart</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Helm 的软件包，采用 TAR 格式。类似于 APT 的 DEB 包或者 YUM 的 RPM 包，其包含了一组定义 Kubernetes 资源相关的 YAML 文件</p><h4 id="1-3、Repoistory"><a href="#1-3、Repoistory" class="headerlink" title="1.3、Repoistory"></a>1.3、Repoistory</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Helm 的软件仓库，Repository 本质上是一个 Web 服务器，该服务器保存了一系列的 Chart 软件包以供用户下载，并且提供了一个该 Repository 的 Chart 包的清单文件以供查询。Helm 可以同时管理多个不同的 Repository</p><h4 id="1-4、Release"><a href="#1-4、Release" class="headerlink" title="1.4、Release"></a>1.4、Release</h4><p>使用 helm install 命令在 Kubernetes 集群中部署的 Chart 称为 Release</p><h3 id="2、helm安装"><a href="#2、helm安装" class="headerlink" title="2、helm安装"></a>2、helm安装</h3><ul><li>下载helm<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://storage.googleapis.com/kubernetes-helm/helm-v2.14.3-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar zxf helm-v2.14.3-linux-amd64.tar.gz &amp;&amp; mv linux-amd64/&#123;helm,tiller&#125; /usr/bin</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-1、创建分蘖服务帐户"><a href="#2-1、创建分蘖服务帐户" class="headerlink" title="2.1、创建分蘖服务帐户"></a>2.1、创建分蘖服务帐户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create serviceaccount tiller --namespace kube-system</span></span><br><span class="line">serviceaccount/tiller created</span><br></pre></td></tr></table></figure><h4 id="2-2、授予分蘖集群管理员角色"><a href="#2-2、授予分蘖集群管理员角色" class="headerlink" title="2.2、授予分蘖集群管理员角色"></a>2.2、授予分蘖集群管理员角色</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create clusterrolebinding tiller-admin-binding --clusterrole=cluster-admin --serviceaccount=kube-system:tiller</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/tiller-admin-binding created</span><br></pre></td></tr></table></figure><h4 id="2-2、安装tiller"><a href="#2-2、安装tiller" class="headerlink" title="2.2、安装tiller"></a>2.2、安装tiller</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm init --service-account tiller --upgrade -i docker.io/sapcc/tiller:v2.14.3 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span></span><br></pre></td></tr></table></figure><h5 id="2-2-1、检查是否安装成功"><a href="#2-2-1、检查是否安装成功" class="headerlink" title="2.2.1、检查是否安装成功"></a>2.2.1、检查是否安装成功</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -n kube-system get pods|grep tiller</span></span><br><span class="line">tiller-deploy-75b8f8575d-fplck          1/1     Running   0          17h</span><br><span class="line"></span><br><span class="line"><span class="comment"># helm version</span></span><br><span class="line">Client: &amp;version.Version&#123;SemVer:<span class="string">"v2.14.3"</span>, GitCommit:<span class="string">"0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085"</span>, GitTreeState:<span class="string">"clean"</span>&#125;</span><br><span class="line">Server: &amp;version.Version&#123;SemVer:<span class="string">"v2.14.3"</span>, GitCommit:<span class="string">"0e7f3b6637f7af8fcfddb3d2941fcc7cbebb0085"</span>, GitTreeState:<span class="string">"clean"</span>&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>错误</strong>: 这里安装完成后执行<code>helm version</code>提示错误，内容如下:<br><code>E0904 18:51:07.730671 22845 portforward.go:391] an error occurred forwarding 38767 -&gt; 44134: error forwarding port 44134 to pod b52064300cfa79e6d83795535584f89c97c33dc91ea39c024492b7b40e3fb68e, uid : unable to do port forwarding: socat not found.</code>这个错误需要在客户端安装一个<a href="https://github.com/helm/helm/issues/1371" target="_blank" rel="noopener">socat插件</a></li></ul><ul><li><p>在node安装socat</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install -y socat</span></span><br></pre></td></tr></table></figure></li><li><p>修改helm第三方存储库(可选)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm repo add stable https://burdenbear.github.io/kube-charts-mirror/</span></span><br><span class="line"><span class="comment"># helm repo list</span></span><br><span class="line">NAME     URL                                             </span><br><span class="line"><span class="built_in">local</span>    http://127.0.0.1:8879/charts                    </span><br><span class="line">monocular https://helm.github.io/monocular                </span><br><span class="line">stable   https://burdenbear.github.io/kube-charts-mirror/</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、测试和启动本地helm-web"><a href="#3、测试和启动本地helm-web" class="headerlink" title="3、测试和启动本地helm web"></a>3、测试和启动本地helm web</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm list</span></span><br><span class="line"><span class="comment"># helm search</span></span><br><span class="line"><span class="comment"># helm search mysql --versions</span></span><br><span class="line"><span class="comment"># helm repo list</span></span><br><span class="line"><span class="comment"># helm serve --address 0.0.0.0:8879 &amp;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/1567651293339.jpg" alt="img"></p><h3 id="4、helm-web-ui"><a href="#4、helm-web-ui" class="headerlink" title="4、helm web ui"></a>4、helm web ui</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;helm安装以后，经常使用helm cli命来进行部署还是比较吃力的，而且对于有些人不喜欢cli的来说，是一个非常痛苦的事情，这里介绍一款kubeapps，Kubeapps是一个基于Web的UI，用于在Kubernetes集群中部署和管理应用程序。 Kubeapps允许您：</p><ul><li>从图表存储库中浏览和部署Helm图表</li><li>检查，升级和删除群集中安装的基于Helm的应用程序</li><li>添加自定义和私有图表存储库（支持ChartMuseum和JFrog Artifactory)</li><li>从服务目录和可用的Service Brokers浏览和配置外部服务</li><li>使用服务目录绑定将基于Helm的应用程序连接到外部服务</li><li>基于Kubernetes基于角色的访问控制的安全身份验证和授权</li></ul><h4 id="4-1、安装kubeapps"><a href="#4-1、安装kubeapps" class="headerlink" title="4.1、安装kubeapps"></a>4.1、安装kubeapps</h4><p>使用Helm图表安装<a href="https://github.com/kubeapps/kubeapps" target="_blank" rel="noopener">最新版本的Kubeapps</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># helm repo add bitnami https://charts.bitnami.com/bitnami</span></span><br><span class="line"><span class="comment"># helm install --name kubeapps --namespace kubeapps bitnami/kubeapps</span></span><br></pre></td></tr></table></figure><h4 id="4-2、启动kubeappsDashboard"><a href="#4-2、启动kubeappsDashboard" class="headerlink" title="4.2、启动kubeappsDashboard"></a>4.2、启动kubeappsDashboard</h4><p>安装Kubeapps后，运行以下命令从系统安全访问Kubeapps Dashboard</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export POD_NAME=$(kubectl get pods --namespace kubeapps -l "app=kubeapps" -o jsonpath="&#123;.items[0].metadata.name&#125;")</span></span><br><span class="line"><span class="comment"># kubectl port-forward -n kubeapps $POD_NAME --address 0.0.0.0 8081:8080 &amp;</span></span><br><span class="line"><span class="comment"># 把容器的8080 映射到本地的8081端口，用于浏览器访问</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/1567650844980.jpg" alt="img"></p><h4 id="4-3、创建token"><a href="#4-3、创建token" class="headerlink" title="4.3、创建token"></a>4.3、创建token</h4><p>访问仪表板需要Kubernetes API令牌才能通过Kubernetes API服务器进行身份验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create serviceaccount kubeapps-operator</span></span><br><span class="line">serviceaccount/kubeapps-operator created</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl create clusterrolebinding kubeapps-operator --clusterrole=cluster-admin --serviceaccount=default:kubeapps-operator</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubeapps-operator created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取token</span></span><br><span class="line"><span class="comment"># kubectl get secret $(kubectl get serviceaccount kubeapps-operator -o jsonpath='&#123;.secrets[].name&#125;') -o jsonpath='&#123;.data.token&#125;' | base64 --decode</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/1567650971425.jpg" alt="img"></p><h5 id="4-3-1、创建token访问脚本"><a href="#4-3-1、创建token访问脚本" class="headerlink" title="4.3.1、创建token访问脚本"></a>4.3.1、创建token访问脚本</h5><p>每次访问kubeapps的token 都要输入一长串，这里我们写一个shell脚本，放在<code>/usr/bin</code>目录，需要的时候执行命令即可，这样方便用于记</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /usr/bin/kubeapps</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">kubectl get secret $(kubectl get serviceaccount kubeapps-operator -o jsonpath=<span class="string">'&#123;.secrets[].name&#125;'</span>) -o jsonpath=<span class="string">'&#123;.data.token&#125;'</span> | base64 --decode</span><br><span class="line"><span class="comment"># chmod +x /usr/bin/kubeapps</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>helm</tag>
      </tags>
  </entry>
  <entry>
    <title>metrics-server安装季</title>
    <url>/2019/09/04/metrics-server%E5%AE%89%E8%A3%85%E5%AD%A3/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;metrics-server 通过 kube-apiserver 发现所有节点，然后调用 kubelet APIs（通过 https 接口）获得各节点（Node）和 Pod 的 CPU、Memory 等资源使用情况。Kubernetes 1.12 开始，kubernetes 的安装脚本移除了 Heapster，从 1.13 开始完全移除了对 Heapster 的支持，Heapster 不再被维护。</p><ul><li>替代方案如下:<ul><li>用于支持自动扩缩容的 CPU/memory HPA metrics：metrics-server</li><li>通用的监控方案：使用第三方可以获取 Prometheus 格式监控指标的监控系统，如 Prometheus Operator</li><li>事件传输：使用第三方工具来传输、归档 kubernetes events</li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用 metrics-server 替代 Heapster，将无法在 dashboard 中以图形展示 Pod 的内存和 CPU 情况，需要通过 Prometheus、Grafana 等监控方案来弥补。</p><a id="more"></a><h4 id="1、监控架构"><a href="#1、监控架构" class="headerlink" title="1、监控架构"></a>1、监控架构</h4><p><img src="https://img.xxlaila.cn/2748678bdjsg848sd.png" alt="img"></p><h4 id="2、安装-metrics-server"><a href="#2、安装-metrics-server" class="headerlink" title="2、安装 metrics-server"></a>2、安装 metrics-server</h4><ul><li>从 github clone 源码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/xxlaila/kubernetes-yaml.git</span></span><br><span class="line"><span class="comment"># cd kubernetes-yaml/metrics-server</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">aggregated-metrics-reader.yaml  auth-delegator.yaml  auth-reader.yaml  metrics-apiservice.yaml  metrics-server-deployment.yaml  metrics-server-service.yaml  resource-reader.yaml</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>注意</strong>: 之前在安装的时候遇到很多坑，而且网上看了教程基本上不能用，很坑，自己看网上教程，然后根据每一个错误来进行解决，终于，功夫不负有心人，花了一天半终于搞定啦。</li></ul><h4 id="3、metrics-server-文件修改"><a href="#3、metrics-server-文件修改" class="headerlink" title="3、metrics-server 文件修改"></a>3、metrics-server 文件修改</h4><p>metrics-server yaml文件这里文件已经修改好了，可以直接拿来用，<a href="https://github.com/kubernetes-incubator/metrics-server/issues/247" target="_blank" rel="noopener">参考文献</a>，</p><h5 id="3-1、metrics-server-deployment-yaml"><a href="#3-1、metrics-server-deployment-yaml" class="headerlink" title="3.1、metrics-server-deployment.yaml"></a>3.1、metrics-server-deployment.yaml</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat metrics-server-deployment.yaml</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: metrics-server</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: metrics-server</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: metrics-server</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: metrics-server</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: metrics-server</span><br><span class="line">      hostNetwork: <span class="literal">true</span>   <span class="comment">#增加行</span></span><br><span class="line">      volumes:</span><br><span class="line">      <span class="comment"># mount in tmp so we can safely use from-scratch images and/or read-only containers</span></span><br><span class="line">      - name: tmp-dir</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      containers:</span><br><span class="line">      - name: metrics-server</span><br><span class="line">        image: mirrorgooglecontainers/metrics-server-amd64:v0.3.3</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /etc/ssl/kubernetes/</span><br><span class="line">          name: ca-ssl</span><br><span class="line">        <span class="built_in">command</span>:   <span class="comment"># command内容均为增加</span></span><br><span class="line">        - /metrics-server</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIP,Hostname,InternalDNS,ExternalDNS,ExternalIP</span><br><span class="line">        - --requestheader-client-ca-file=/etc/ssl/kubernetes/front-proxy-ca.pem</span><br><span class="line">        - --kubelet-insecure-tls=<span class="literal">true</span></span><br><span class="line">      volumes:</span><br><span class="line">       - name: ca-ssl</span><br><span class="line">         hostPath:</span><br><span class="line">          path: /etc/kubernetes/ssl</span><br></pre></td></tr></table></figure><h5 id="3-2、"><a href="#3-2、" class="headerlink" title="3.2、"></a>3.2、</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat resource-reader.yaml</span></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  - nodes</span><br><span class="line">  - nodes/stats</span><br><span class="line">  - namespaces</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups: <span class="comment"># 增加</span></span><br><span class="line">  - <span class="string">"extensions"</span></span><br><span class="line">  resources:</span><br><span class="line">  - deployments</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:metrics-server</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: metrics-server</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure><h4 id="4、准备证书"><a href="#4、准备证书" class="headerlink" title="4、准备证书"></a>4、准备证书</h4><p>这些证书文件主要用在Metrics API aggregator 上,<a href="https://blog.51cto.com/ylw6006/2114338" target="_blank" rel="noopener">参考文献</a></p><ul><li><p>front-proxy-ca-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat front-proxy-ca-csr.json </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>front-proxy-client-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"front-proxy-client"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-1、生成证书"><a href="#4-1、生成证书" class="headerlink" title="4.1、生成证书"></a>4.1、生成证书</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert   -initca front-proxy-ca-csr.json | cfssljson -bare front-proxy-ca</span></span><br><span class="line"><span class="comment"># cfssl gencert \</span></span><br><span class="line"> -ca=front-proxy-ca.pem \</span><br><span class="line"> -ca-key=front-proxy-ca-key.pem \</span><br><span class="line"> -config=/root/ssl/kubernetes-gencert.json \</span><br><span class="line"> -profile=kubernetes \</span><br><span class="line"> front-proxy-client-csr.json | cfssljson -bare front-proxy-client</span><br><span class="line"><span class="comment"># ls *.pem</span></span><br><span class="line">front-proxy-ca-key.pem  front-proxy-ca.pem  front-proxy-client-key.pem  front-proxy-client.pem</span><br></pre></td></tr></table></figure><ul><li>证书生成完成后，吧证书复制到所有的master节点和node节点</li></ul><h4 id="5、master修改配置文件"><a href="#5、master修改配置文件" class="headerlink" title="5、master修改配置文件"></a>5、master修改配置文件</h4><h4 id="5-1、apiserver"><a href="#5-1、apiserver" class="headerlink" title="5.1、apiserver"></a>5.1、apiserver</h4><p>在apiserver配置文件里面增加如下配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--runtime-config=api/all=<span class="literal">true</span> \</span><br><span class="line">--<span class="built_in">enable</span>-aggregator-routing=<span class="literal">true</span> \</span><br><span class="line">--requestheader-client-ca-file=/etc/kubernetes/ssl/front-proxy-ca.pem \</span><br><span class="line">--requestheader-allowed-names=aggregator \</span><br><span class="line">--requestheader-extra-headers-prefix=X-Remote-Extra- \</span><br><span class="line">--requestheader-group-headers=X-Remote-Group \</span><br><span class="line">--requestheader-username-headers=X-Remote-User \</span><br><span class="line">--proxy-client-cert-file=/etc/kubernetes/ssl/front-proxy-client.pem \</span><br><span class="line">--proxy-client-key-file=/etc/kubernetes/ssl/front-proxy-client-key.pem \</span><br></pre></td></tr></table></figure><ul><li>apiserver配置文件KUBE_API_ARGS内容如下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KUBE_API_ARGS=<span class="string">" --allow-privileged=true \</span></span><br><span class="line"><span class="string">                --anonymous-auth=false \</span></span><br><span class="line"><span class="string">                --alsologtostderr \</span></span><br><span class="line"><span class="string">                --apiserver-count=3 \</span></span><br><span class="line"><span class="string">                --audit-log-maxage=30 \</span></span><br><span class="line"><span class="string">                --audit-log-maxbackup=3 \</span></span><br><span class="line"><span class="string">                --audit-log-maxsize=100 \</span></span><br><span class="line"><span class="string">                --enable-aggregator-routing=true \</span></span><br><span class="line"><span class="string">                --audit-log-path=/var/log/kube-audit/audit.log \</span></span><br><span class="line"><span class="string">                --audit-policy-file=/etc/kubernetes/audit-policy.yaml \</span></span><br><span class="line"><span class="string">                --authorization-mode=Node,RBAC \</span></span><br><span class="line"><span class="string">                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --enable-bootstrap-token-auth \</span></span><br><span class="line"><span class="string">                --enable-garbage-collector \</span></span><br><span class="line"><span class="string">                --enable-logs-handler \</span></span><br><span class="line"><span class="string">                --endpoint-reconciler-type=lease \</span></span><br><span class="line"><span class="string">                --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem \</span></span><br><span class="line"><span class="string">                --etcd-certfile=/etc/etcd/ssl/etcd.pem \</span></span><br><span class="line"><span class="string">                --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</span></span><br><span class="line"><span class="string">                --etcd-compaction-interval=0s \</span></span><br><span class="line"><span class="string">                --event-ttl=168h0m0s \</span></span><br><span class="line"><span class="string">                --kubelet-https=true \</span></span><br><span class="line"><span class="string">                --kubelet-certificate-authority=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --kubelet-client-certificate=/etc/kubernetes/ssl/kubelet-api-admin.pem \</span></span><br><span class="line"><span class="string">                --kubelet-client-key=/etc/kubernetes/ssl/kubelet-api-admin-key.pem \</span></span><br><span class="line"><span class="string">                --kubelet-timeout=3s \</span></span><br><span class="line"><span class="string">                --runtime-config=api/all=true \</span></span><br><span class="line"><span class="string">                --service-node-port-range=30000-50000 \</span></span><br><span class="line"><span class="string">                --service-account-key-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem \</span></span><br><span class="line"><span class="string">                --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span></span><br><span class="line"><span class="string">                --requestheader-client-ca-file=/etc/kubernetes/ssl/front-proxy-ca.pem \</span></span><br><span class="line"><span class="string">                --requestheader-allowed-names=aggregator \</span></span><br><span class="line"><span class="string">                --requestheader-extra-headers-prefix=X-Remote-Extra- \</span></span><br><span class="line"><span class="string">                --requestheader-group-headers=X-Remote-Group \</span></span><br><span class="line"><span class="string">                --requestheader-username-headers=X-Remote-User \</span></span><br><span class="line"><span class="string">                --proxy-client-cert-file=/etc/kubernetes/ssl/front-proxy-client.pem \</span></span><br><span class="line"><span class="string">                --proxy-client-key-file=/etc/kubernetes/ssl/front-proxy-client-key.pem \</span></span><br><span class="line"><span class="string">                --v=2"</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="5-2、kube-control-manager"><a href="#5-2、kube-control-manager" class="headerlink" title="5.2、kube-control-manager"></a>5.2、kube-control-manager</h5><p>在controller-manager文件增加如下配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--horizontal-pod-autoscaler-use-rest-clients=<span class="literal">true</span> \</span><br></pre></td></tr></table></figure><ul><li>kube-control-manager配置文件KUBE_CONTROLLER_MANAGER_ARGS如下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KUBE_CONTROLLER_MANAGER_ARGS=<span class="string">"  --address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                                --authentication-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --authorization-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --bind-address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                                --cluster-name=kubernetes \</span></span><br><span class="line"><span class="string">                                --cluster-signing-cert-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --cluster-signing-key-file=/etc/kubernetes/ssl/kubernetes-ca-key.pem \</span></span><br><span class="line"><span class="string">                                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --controllers=*,bootstrapsigner,tokencleaner \</span></span><br><span class="line"><span class="string">                                --deployment-controller-sync-period=10s \</span></span><br><span class="line"><span class="string">                                --experimental-cluster-signing-duration=87600h0m0s \</span></span><br><span class="line"><span class="string">                                --enable-garbage-collector=true \</span></span><br><span class="line"><span class="string">                                --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --leader-elect=true \</span></span><br><span class="line"><span class="string">                                --node-monitor-grace-period=20s \</span></span><br><span class="line"><span class="string">                                --node-monitor-period=5s \</span></span><br><span class="line"><span class="string">                                --port=10252 \</span></span><br><span class="line"><span class="string">                                --pod-eviction-timeout=2m0s \</span></span><br><span class="line"><span class="string">                                --requestheader-client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --terminated-pod-gc-threshold=50 \</span></span><br><span class="line"><span class="string">                                --tls-cert-file=/etc/kubernetes/ssl/kube-controller-manager.pem \</span></span><br><span class="line"><span class="string">                                --tls-private-key-file=/etc/kubernetes/ssl/kube-controller-manager-key.pem \</span></span><br><span class="line"><span class="string">                                --root-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --secure-port=10257 \</span></span><br><span class="line"><span class="string">                                --service-cluster-ip-range=10.254.0.0/16 \</span></span><br><span class="line"><span class="string">                                --service-account-private-key-file=/etc/kubernetes/ssl/kubernetes-ca-key.pem \</span></span><br><span class="line"><span class="string">                                --use-service-account-credentials=true \</span></span><br><span class="line"><span class="string">                                --horizontal-pod-autoscaler-use-rest-clients=true \</span></span><br><span class="line"><span class="string">                                --v=2"</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="5-3、重启服务"><a href="#5-3、重启服务" class="headerlink" title="5.3、重启服务"></a>5.3、重启服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl  restart kube-apiserver.service &amp;&amp;systemctl  restart kube-controller-manager</span></span><br></pre></td></tr></table></figure><h4 id="6、node节点配置文件修改"><a href="#6、node节点配置文件修改" class="headerlink" title="6、node节点配置文件修改"></a>6、node节点配置文件修改</h4><p>node 节点修改修改kubelet文件</p><ul><li><p>kubelet配置文件完成的KUBELET_ARGS参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KUBELET_ARGS=<span class="string">"  --address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                --allow-privileged \</span></span><br><span class="line"><span class="string">                --anonymous-auth=false \</span></span><br><span class="line"><span class="string">                --authorization-mode=Webhook \</span></span><br><span class="line"><span class="string">                --authentication-token-webhook=true \</span></span><br><span class="line"><span class="string">                --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span></span><br><span class="line"><span class="string">                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --cgroup-driver=cgroupfs \</span></span><br><span class="line"><span class="string">                --cert-dir=/etc/kubernetes/ssl \</span></span><br><span class="line"><span class="string">                --cluster-dns=10.254.0.2 \</span></span><br><span class="line"><span class="string">                --cluster-domain=cluster.local \</span></span><br><span class="line"><span class="string">                --eviction-soft=imagefs.available&lt;15%,memory.available&lt;512Mi,nodefs.available&lt;15%,nodefs.inodesFree&lt;10% \</span></span><br><span class="line"><span class="string">                --eviction-soft-grace-period=imagefs.available=3m,memory.available=1m,nodefs.available=3m,nodefs.inodesFree=1m \</span></span><br><span class="line"><span class="string">                --eviction-hard=imagefs.available&lt;10%,memory.available&lt;256Mi,nodefs.available&lt;10%,nodefs.inodesFree&lt;5% \</span></span><br><span class="line"><span class="string">                --eviction-max-pod-grace-period=30 \</span></span><br><span class="line"><span class="string">                --image-gc-high-threshold=80 \</span></span><br><span class="line"><span class="string">                --image-gc-low-threshold=70 \</span></span><br><span class="line"><span class="string">                --image-pull-progress-deadline=30s \</span></span><br><span class="line"><span class="string">                --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span></span><br><span class="line"><span class="string">                --max-pods=100 \</span></span><br><span class="line"><span class="string">                --minimum-image-ttl-duration=720h0m0s \</span></span><br><span class="line"><span class="string">                --node-labels=node.kubernetes.io/k8s-node=true \</span></span><br><span class="line"><span class="string">                --pod-infra-container-image=docker.io/kubernetes/pause:latest \</span></span><br><span class="line"><span class="string">                --port=10250 \</span></span><br><span class="line"><span class="string">                --read-only-port=0 \</span></span><br><span class="line"><span class="string">                --rotate-certificates \</span></span><br><span class="line"><span class="string">                --rotate-server-certificates \</span></span><br><span class="line"><span class="string">                --fail-swap-on=false \</span></span><br><span class="line"><span class="string">                --v=2"</span></span><br></pre></td></tr></table></figure></li><li><p>重启kubelet</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl restart kubelet</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="7、创建metrics"><a href="#7、创建metrics" class="headerlink" title="7、创建metrics"></a>7、创建metrics</h4><p>通过yaml文件创建对应的资源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f ./</span></span><br></pre></td></tr></table></figure><h5 id="7-1、查看运行情况"><a href="#7-1、查看运行情况" class="headerlink" title="7.1、查看运行情况"></a>7.1、查看运行情况</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl -n kube-system get pods -l k8s-app=metrics-server</span></span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">metrics-server-84b786c9bb-7trdr   1/1     Running   0          62m</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get svc -n kube-system  metrics-server</span></span><br><span class="line">NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">metrics-server   ClusterIP   10.254.45.238   &lt;none&gt;        443/TCP   3h6m</span><br></pre></td></tr></table></figure><h5 id="7-2、获取v1beta1-metrics-k8s-io并验证"><a href="#7-2、获取v1beta1-metrics-k8s-io并验证" class="headerlink" title="7.2、获取v1beta1.metrics.k8s.io并验证"></a>7.2、获取v1beta1.metrics.k8s.io并验证</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;之前<code>v1beta1.metrics.k8s.io kube-system/metrics-server True 3h</code>参数一直是<code>v1beta1.metrics.k8s.io kube-system/metrics-server False (FailedDiscoveryCheck) 16m</code>,</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  kubectl get apiservice</span></span><br><span class="line">NAME                                    SERVICE                      AVAILABLE   AGE</span><br><span class="line">v1.                                     Local                        True        4d</span><br><span class="line">v1.apps                                 Local                        True        4d</span><br><span class="line">v1.authentication.k8s.io                Local                        True        4d</span><br><span class="line">v1.authorization.k8s.io                 Local                        True        4d</span><br><span class="line">v1.autoscaling                          Local                        True        4d</span><br><span class="line">v1.batch                                Local                        True        4d</span><br><span class="line">v1.networking.k8s.io                    Local                        True        4d</span><br><span class="line">v1.rbac.authorization.k8s.io            Local                        True        4d</span><br><span class="line">v1.storage.k8s.io                       Local                        True        4d</span><br><span class="line">v1alpha1.admissionregistration.k8s.io   Local                        True        4d</span><br><span class="line">v1alpha1.auditregistration.k8s.io       Local                        True        4d</span><br><span class="line">v1alpha1.rbac.authorization.k8s.io      Local                        True        4d</span><br><span class="line">v1alpha1.scheduling.k8s.io              Local                        True        4d</span><br><span class="line">v1alpha1.settings.k8s.io                Local                        True        4d</span><br><span class="line">v1alpha1.storage.k8s.io                 Local                        True        4d</span><br><span class="line">v1beta1.admissionregistration.k8s.io    Local                        True        4d</span><br><span class="line">v1beta1.apiextensions.k8s.io            Local                        True        4d</span><br><span class="line">v1beta1.apps                            Local                        True        4d</span><br><span class="line">v1beta1.authentication.k8s.io           Local                        True        4d</span><br><span class="line">v1beta1.authorization.k8s.io            Local                        True        4d</span><br><span class="line">v1beta1.batch                           Local                        True        4d</span><br><span class="line">v1beta1.certificates.k8s.io             Local                        True        4d</span><br><span class="line">v1beta1.coordination.k8s.io             Local                        True        4d</span><br><span class="line">v1beta1.events.k8s.io                   Local                        True        4d</span><br><span class="line">v1beta1.extensions                      Local                        True        4d</span><br><span class="line">v1beta1.metrics.k8s.io                  kube-system/metrics-server   True        3h</span><br><span class="line">v1beta1.policy                          Local                        True        4d</span><br><span class="line">v1beta1.rbac.authorization.k8s.io       Local                        True        4d</span><br><span class="line">v1beta1.scheduling.k8s.io               Local                        True        4d</span><br><span class="line">v1beta1.storage.k8s.io                  Local                        True        4d</span><br><span class="line">v1beta2.apps                            Local                        True        4d</span><br><span class="line">v2alpha1.batch                          Local                        True        4d</span><br><span class="line">v2beta1.autoscaling                     Local                        True        4d</span><br><span class="line">v2beta2.autoscaling                     Local                        True        4d</span><br></pre></td></tr></table></figure><h4 id="8、查看-metrics-server-输出的-metrics"><a href="#8、查看-metrics-server-输出的-metrics" class="headerlink" title="8、查看 metrics-server 输出的 metrics"></a>8、查看 metrics-server 输出的 metrics</h4><h5 id="8-1、通过-kube-apiserver-或-kubectl-proxy-访问"><a href="#8-1、通过-kube-apiserver-或-kubectl-proxy-访问" class="headerlink" title="8.1、通过 kube-apiserver 或 kubectl proxy 访问"></a>8.1、通过 kube-apiserver 或 kubectl proxy 访问</h5><ul><li><a href="https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/nodes" target="_blank" rel="noopener">https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/nodes</a></li><li><a href="https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/nodes/" target="_blank" rel="noopener">https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/nodes/</a></li><li><a href="https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/pods" target="_blank" rel="noopener">https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/pods</a></li><li><a href="https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/namespace//pods/" target="_blank" rel="noopener">https://172.21.17.31:6443/apis/metrics.k8s.io/v1beta1/namespace//pods/</a></li></ul><h5 id="8-2、直接使用-kubectl-命令访问"><a href="#8-2、直接使用-kubectl-命令访问" class="headerlink" title="8.2、直接使用 kubectl 命令访问"></a>8.2、直接使用 kubectl 命令访问</h5><ul><li>kubectl get –raw /apis/metrics.k8s.io/v1beta1/nodes</li><li>kubectl get –raw /apis/metrics.k8s.io/v1beta1/pods</li><li>kubectl get –raw /apis/metrics.k8s.io/v1beta1/nodes/</li><li>kubectl get –raw /apis/metrics.k8s.io/v1beta1/namespace//pods/</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get --raw "/apis/metrics.k8s.io/v1beta1" | jq .</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"kind"</span>: <span class="string">"APIResourceList"</span>,</span><br><span class="line">  <span class="string">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">  <span class="string">"groupVersion"</span>: <span class="string">"metrics.k8s.io/v1beta1"</span>,</span><br><span class="line">  <span class="string">"resources"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"nodes"</span>,</span><br><span class="line">      <span class="string">"singularName"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"namespaced"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"kind"</span>: <span class="string">"NodeMetrics"</span>,</span><br><span class="line">      <span class="string">"verbs"</span>: [</span><br><span class="line">        <span class="string">"get"</span>,</span><br><span class="line">        <span class="string">"list"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"pods"</span>,</span><br><span class="line">      <span class="string">"singularName"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"namespaced"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"kind"</span>: <span class="string">"PodMetrics"</span>,</span><br><span class="line">      <span class="string">"verbs"</span>: [</span><br><span class="line">        <span class="string">"get"</span>,</span><br><span class="line">        <span class="string">"list"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get --raw "/apis/metrics.k8s.io/v1beta1/nodes" | jq .</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"kind"</span>: <span class="string">"NodeMetricsList"</span>,</span><br><span class="line">  <span class="string">"apiVersion"</span>: <span class="string">"metrics.k8s.io/v1beta1"</span>,</span><br><span class="line">  <span class="string">"metadata"</span>: &#123;</span><br><span class="line">    <span class="string">"selfLink"</span>: <span class="string">"/apis/metrics.k8s.io/v1beta1/nodes"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"items"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"metadata"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"172.21.16.204"</span>,</span><br><span class="line">        <span class="string">"selfLink"</span>: <span class="string">"/apis/metrics.k8s.io/v1beta1/nodes/172.21.16.204"</span>,</span><br><span class="line">        <span class="string">"creationTimestamp"</span>: <span class="string">"2019-09-04T07:00:44Z"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2019-09-04T07:00:40Z"</span>,</span><br><span class="line">      <span class="string">"window"</span>: <span class="string">"30s"</span>,</span><br><span class="line">      <span class="string">"usage"</span>: &#123;</span><br><span class="line">        <span class="string">"cpu"</span>: <span class="string">"63788460n"</span>,</span><br><span class="line">        <span class="string">"memory"</span>: <span class="string">"1033152Ki"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"metadata"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"172.21.16.240"</span>,</span><br><span class="line">        <span class="string">"selfLink"</span>: <span class="string">"/apis/metrics.k8s.io/v1beta1/nodes/172.21.16.240"</span>,</span><br><span class="line">        <span class="string">"creationTimestamp"</span>: <span class="string">"2019-09-04T07:00:44Z"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2019-09-04T07:00:40Z"</span>,</span><br><span class="line">      <span class="string">"window"</span>: <span class="string">"30s"</span>,</span><br><span class="line">      <span class="string">"usage"</span>: &#123;</span><br><span class="line">        <span class="string">"cpu"</span>: <span class="string">"41797865n"</span>,</span><br><span class="line">        <span class="string">"memory"</span>: <span class="string">"837420Ki"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"metadata"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"172.21.16.87"</span>,</span><br><span class="line">        <span class="string">"selfLink"</span>: <span class="string">"/apis/metrics.k8s.io/v1beta1/nodes/172.21.16.87"</span>,</span><br><span class="line">        <span class="string">"creationTimestamp"</span>: <span class="string">"2019-09-04T07:00:44Z"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"timestamp"</span>: <span class="string">"2019-09-04T07:00:34Z"</span>,</span><br><span class="line">      <span class="string">"window"</span>: <span class="string">"30s"</span>,</span><br><span class="line">      <span class="string">"usage"</span>: &#123;</span><br><span class="line">        <span class="string">"cpu"</span>: <span class="string">"37347688n"</span>,</span><br><span class="line">        <span class="string">"memory"</span>: <span class="string">"851232Ki"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>/apis/metrics.k8s.io/v1beta1/nodes 和 /apis/metrics.k8s.io/v1beta1/pods 返回的 usage 包含 CPU 和 Memory；</li></ul><h4 id="使用-kubectl-top"><a href="#使用-kubectl-top" class="headerlink" title="使用 kubectl top"></a>使用 kubectl top</h4><p>使用 kubectl top 命令查看集群节点资源使用情况,kubectl top 命令从 metrics-server 获取集群节点基本的指标信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl top node</span></span><br><span class="line">NAME            CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   </span><br><span class="line">172.21.16.204   69m          1%     1008Mi          13%       </span><br><span class="line">172.21.16.240   41m          2%     817Mi           23%       </span><br><span class="line">172.21.16.87    39m          1%     831Mi           23%</span><br></pre></td></tr></table></figure><p>metrics到这里就已经成功的部署，参数没有一一介绍，后期有时间在列出来</p><p>这里还有很多参考的文档没有一一列出来，主要是浏览器被关闭啦，感谢那些参考的文档，😊😊😊</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>metrics-server</tag>
      </tags>
  </entry>
  <entry>
    <title>kubelet提供api请求接口</title>
    <url>/2019/09/04/kubelet%E6%8F%90%E4%BE%9Bapi%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="kubelet-提供的-API-接口认证"><a href="#kubelet-提供的-API-接口认证" class="headerlink" title="kubelet 提供的 API 接口认证"></a>kubelet 提供的 API 接口认证</h3><p><a href="https://xxlaila.github.io/2019/08/10/kubernetes-node%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">node安装参考</a></p><p>kubelet 启动后监听多个端口，用于接收 kube-apiserver 或其它客户端发送的请求：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-3 ~]<span class="comment">#  netstat -lnpt|grep kubelet</span></span><br><span class="line">tcp        0      0 127.0.0.1:46395         0.0.0.0:*               LISTEN      8941/kubelet        </span><br><span class="line">tcp        0      0 127.0.0.1:10248         0.0.0.0:*               LISTEN      8941/kubelet        </span><br><span class="line">tcp6       0      0 :::10250                :::*                    LISTEN      8941/kubelet</span><br></pre></td></tr></table></figure><ul><li><strong>10248</strong>: healthz http 服务</li><li><strong>10250</strong>: https 服务，访问该端口时需要认证和授权（即使访问 /healthz 也需要）</li><li>未开启只读端口 10255</li><li>从 K8S v1.10 开始，去除了 –cadvisor-port 参数（默认 4194 端口），不支持访问 cAdvisor UI &amp; API</li></ul><a id="more"></a><p>kubelet 接收 10250 端口的 https 请求，可以访问如下资源：</p><ul><li>/pods、/runningpods</li><li>/metrics、/metrics/cadvisor、/metrics/probes</li><li>/spec</li><li>/stats、/stats/container</li><li>/logs</li><li>/run/、/exec/, /attach/, /portForward/, /containerLogs/<br><a href="https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/server/server.go#L434:3" target="_blank" rel="noopener">详情参考</a></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;由于关闭了匿名认证，同时开启了 webhook 授权，所有访问 10250 端口 https API 的请求都需要被认证和授权。<br>&nbsp;&nbsp;&nbsp;&nbsp;预定义的 ClusterRole system:kubelet-api-admin 授予访问 kubelet 所有 API 的权限(kube-apiserver 使用的 kubernetes 证书 User 授予了该权限)：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe clusterrole system:kubelet-api-admin</span></span><br><span class="line">Name:         system:kubelet-api-admin</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources      Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------      -----------------  --------------  -----</span><br><span class="line">  nodes/<span class="built_in">log</span>      []                 []              [*]</span><br><span class="line">  nodes/metrics  []                 []              [*]</span><br><span class="line">  nodes/proxy    []                 []              [*]</span><br><span class="line">  nodes/spec     []                 []              [*]</span><br><span class="line">  nodes/stats    []                 []              [*]</span><br><span class="line">  nodes          []                 []              [get list watch proxy]</span><br></pre></td></tr></table></figure><h3 id="kubelet-api-认证和授权"><a href="#kubelet-api-认证和授权" class="headerlink" title="kubelet api 认证和授权"></a>kubelet api 认证和授权</h3><p>kubelet 配置了如下认证参数:</p><ul><li><strong>–anonymous-auth=false</strong>: 设置为 false，不允许匿名�访问 10250 端口</li><li><strong>–authentication-token-webhook=true</strong>: 指定签名客户端证书的 CA 证书，开启 HTTPs 证书认证</li><li><strong>–client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem</strong>: 开启 HTTPs bearer token 认证</li><li><strong>–authorization-mode=Webhook</strong>: 开启 RBAC 授权</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;kubelet 收到请求后，使用 clientCAFile 对证书签名进行认证，或者查询 bearer token 是否有效。如果两者都没通过，则拒绝请求，提示 Unauthorized</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 ~]<span class="comment"># curl -s --cacert /etc/kubernetes/ssl/kubernetes-ca.pem https://172.21.16.204:10250/metrics</span></span><br><span class="line">Unauthorized</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;通过认证后，kubelet 使用 SubjectAccessReview API 向 kube-apiserver 发送请求，查询证书或 token 对应的 user、group 是否有操作资源的权限(RBAC)；</p><h3 id="证书认证和授权"><a href="#证书认证和授权" class="headerlink" title="证书认证和授权"></a>证书认证和授权</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 权限不足</span></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/kubernetes-ca.pem  --cert /etc/kubernetes/ssl/kube-controller-manager.pem --key /etc/kubernetes/ssl/kube-controller-manager-key.pem https://172.21.16.204:10250/metrics</span></span><br><span class="line">Forbidden (user=system:kube-controller-manager, verb=get, resource=nodes, subresource=metrics)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用部署 kubectl 命令行工具时创建的、具有最高权限的 admin 证书</span></span><br><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/kubernetes-ca.pem --cert /etc/kubernetes/ssl/admin.pem --key /etc/kubernetes/ssl/admin-key.pem https://172.21.16.204:10250/metrics|head</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"21600"</span>&#125; 0</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>: –cacert、–cert、–key 的参数值必须是文件路径，否则返回 401 Unauthorized；</li></ul><h4 id="bear-token-认证和授权"><a href="#bear-token-认证和授权" class="headerlink" title="bear token 认证和授权"></a>bear token 认证和授权</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;创建一个 ServiceAccount，将它和 ClusterRole system:kubelet-api-admin 绑定，从而具有调用 kubelet API 的权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">horization.k8s.io/kubelet-api-test created</span><br><span class="line"><span class="comment"># SECRET=$(kubectl get secrets | grep kubelet-api-test | awk '&#123;print $1&#125;')</span></span><br><span class="line"><span class="comment"># TOKEN=$(kubectl describe secret $&#123;SECRET&#125; | grep -E '^token' | awk '&#123;print $2&#125;')</span></span><br><span class="line"><span class="comment"># echo $&#123;TOKEN&#125;</span></span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Imt1YmVsZXQtYXBpLXRlc3QtdG9rZW4tNGJra3MiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoia3ViZWxldC1hcGktdGVzdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijk3MDRhZDEwLWNlYjQtMTFlOS04ZDIwLWZhMTYzZTVhZjgzMyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0Omt1YmVsZXQtYXBpLXRlc3QifQ.ishvOaC5tppYKDNpEOXIiVhVtgjyqzjySZjzndot5Z5U9MkY9LN8ZSMWRe6lNsB1UuTgEWTsHlG3OIRfExnHehYhWIt59V9e39KKbeY17hHoT-RZSaD6GoB449t_vUdIJedd1FGZ8DckQvDr6X5fMuD7MSU3vRL077j-uls-y4IW5kaJHeAGJfc6eWoCnv96DCbI8mQ8yuYbwLFpfIPLb4u6FPkwMQL2KXy6FhWPY1va6zAh4LdjGWhH6IAkKleq0aqfMwvmlnk1_OUmnmBoGJGuB96IwqBATP0jFzrd-Sv6af3RsSYz2r8YzJUj3kat9bd__HNCCXampYYr8ffu8YEdn-J9p6HK13FWU4O9QSIDrRONNIOpUXclJ-ov3z6N1hiIcVq5UJU6xR2z4ccvPXmH9Sj7p8CquqKEuobZxK97TFtECGlb2Ex43u4t0UHRo23UCQA-qP2Zs4-U2Zmf_qu3I-Lm7jzuYzXFCAb27yZx_XOUY-ycnKhtM6PpUfVKhkcHfWBOYY-QtBEbYf6yHRqCWcjrsZ63C_B56qAYaU5ca3hAcr6RBuHmmHISGESlLbmrpGgJ_ajd5mrJSh3Z_qdqu-Xt0Ya0NLfXgAcGi5n8xWJLztRTeyHrFTj7g82MqERUfFk9bdLHcz77xmrNLnhRZ87GW9sTZLw8QRUjF1g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s --cacert /etc/kubernetes/ssl/kubernetes-ca.pem -H "Authorization: Bearer $&#123;TOKEN&#125;" https://172.21.16.204:10250/metrics|head</span></span><br><span class="line"><span class="comment"># HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_event_total counter</span></span><br><span class="line">apiserver_audit_event_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_audit_requests_rejected_total counter</span></span><br><span class="line">apiserver_audit_requests_rejected_total 0</span><br><span class="line"><span class="comment"># HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request.</span></span><br><span class="line"><span class="comment"># TYPE apiserver_client_certificate_expiration_seconds histogram</span></span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"0"</span>&#125; 0</span><br><span class="line">apiserver_client_certificate_expiration_seconds_bucket&#123;le=<span class="string">"21600"</span>&#125; 0</span><br></pre></td></tr></table></figure><h4 id="cadvisor-和-metrics"><a href="#cadvisor-和-metrics" class="headerlink" title="cadvisor 和 metrics"></a>cadvisor 和 metrics</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;cadvisor 是内嵌在 kubelet 二进制中的，统计所在节点各容器的资源(CPU、内存、磁盘、网卡)使用情况的服务.</p><blockquote><p>在访问api-server安全端口之前，我们需要做一些操作才能访问，否则无法进行访问</p></blockquote><h5 id="在浏览器访问kube-apiserver安全端口"><a href="#在浏览器访问kube-apiserver安全端口" class="headerlink" title="在浏览器访问kube-apiserver安全端口"></a>在浏览器访问kube-apiserver安全端口</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;提示证书不被信任,这是因为 kube-apiserver 的 server 证书是我们创建的根证书 ca.pem 签名的，需要将根证书 ca.pem 导入操作系统，并设置永久信任。<br><img src="https://img.xxlaila.cn/1567564092242.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;给浏览器生成一个 client 证书，访问 apiserver 的 6443 https 端口时使用。这里使用部署 kubectl 命令行工具时创建的 admin 证书、私钥和上面的 ca 证书，创建一个浏览器可以使用 PKCS#12/PFX 格式的证书：</p><ul><li><p>会提示输入密码，这里密码需要记住，一会倒入证书到浏览器的时候需要</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openssl pkcs12 -export -out admin.pfx -inkey admin-key.pem -in admin.pem -certfile kubernetes-ca.pem</span></span><br><span class="line">Enter Export Password:</span><br><span class="line">Verifying - Enter Export Password:</span><br></pre></td></tr></table></figure></li><li><p>将创建的 admin.pfx 导入到系统的证书中,<br><img src="https://img.xxlaila.cn/1567564289155.jpg" alt="img"></p></li></ul><p>再次访问 apiserver 地址，提示选择一个浏览器证书，这里选中上面导入的 admin.pfx<br><img src="https://img.xxlaila.cn/1567564393274.jpg" alt="img"></p><ul><li><p>提示需要输入系统的密码,这里是mac的电脑<br><img src="https://img.xxlaila.cn/1567564441293.jpg" alt="img"></p></li><li><p>被授权访问 kube-apiserver 的安全端口<br><img src="https://img.xxlaila.cn/1567564526664.jpg" alt="img"></p></li></ul><h5 id="客户端选择证书的原理"><a href="#客户端选择证书的原理" class="headerlink" title="客户端选择证书的原理"></a>客户端选择证书的原理</h5><ul><li>证书选择是在客户端和服务端 SSL/TLS 握手协商阶段商定的；</li><li>服务端如果要求客户端提供证书，则在握手时会向客户端发送一个它接受的 CA 列表；</li><li>客户端查找它的证书列表(一般是操作系统的证书，对于 Mac 为 keychain)，看有没有被 CA 签名的证书，如果有，则将它们提供给用户选择（证书的私钥）；</li><li>用户选择一个证书私钥，然后客户端将使用它和服务端通信；</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;在浏览器访问 <a href="https://172.21.16.204:10250/metrics" target="_blank" rel="noopener">https://172.21.16.204:10250/metrics</a> 和 <a href="https://172.21.16.204:10250/metrics/cadvisor" target="_blank" rel="noopener">https://172.21.16.204:10250/metrics/cadvisor</a> 分别返回 kubelet 和 cadvisor 的 metrics。<br><img src="https://img.xxlaila.cn/1567563858215.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1567564733531.jpg" alt="img"></p><ul><li><strong>原因</strong>: kubelet配置文件设置<code>--anonymous-auth=false</code>不允许匿名证书访问 10250 的 https 服务,所以我们才需要配置证书来进行访问</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubelet</tag>
      </tags>
  </entry>
  <entry>
    <title>centos-nfs-512错误</title>
    <url>/2019/09/03/centos-nfs-512%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>nfs 错误kernel: NFS: nfs4_discover_server_trunking unhandled error -512. Exiting with error EIO</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很久没挂载过nfs，忘记客户端怎么挂在nfs的了，服务端很早就安装好了，今天一台客户机需要挂载nfs，然后居然报错了，然后找了一圈居然没找到怎么解决，然后又重新看了一次centos nfs的配置。</p><p>在客户端挂载nfs的提示很慢，长时间无响应，强行结束看看是什么问题，查看日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo tail -f /var/<span class="built_in">log</span>/messages</span><br><span class="line">Sep  3 11:23:51 dev-application kernel: NFS: nfs4_discover_server_trunking unhandled error -512. Exiting with error EIO</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1、nfs服务端"><a href="#1、nfs服务端" class="headerlink" title="1、nfs服务端"></a>1、nfs服务端</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;登录nfs服务器查看nfs服务正常，查看rpc服务正常，查看服务貌似没有看出异常。查看nfs日志，在日志里面发现比较奇怪的东西。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Nov 13 14:53:41 dev-nfs systemd-logind: New session 11875 of user root.</span><br><span class="line">Nov 13 14:53:41 dev-nfs systemd: Starting Session 11875 of user root.</span><br><span class="line">Nov 13 14:54:28 dev-nfs systemd: Stopping RPC <span class="built_in">bind</span> service...</span><br><span class="line">Nov 13 14:54:28 dev-nfs systemd: Starting RPC <span class="built_in">bind</span> service...</span><br><span class="line">Nov 13 14:54:28 dev-nfs systemd: Started RPC <span class="built_in">bind</span> service.</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Stopping NFS server and services...</span><br><span class="line">Nov 13 14:54:31 dev-nfs kernel: nfsd: last server has exited, flushing <span class="built_in">export</span> cache</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Stopping NFS Mount Daemon...</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Stopping NFSv4 ID-name mapping service...</span><br><span class="line">Nov 13 14:54:31 dev-nfs rpc.mountd[3533]: Caught signal 15, un-registering and exiting.</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Starting Preprocess NFS configuration...</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Started Preprocess NFS configuration.</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Starting NFSv4 ID-name mapping service...</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Starting NFS Mount Daemon...</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Started NFSv4 ID-name mapping service.</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Started NFS Mount Daemon.</span><br><span class="line">Nov 13 14:54:31 dev-nfs systemd: Starting NFS server and services...</span><br><span class="line">Nov 13 14:54:31 dev-nfs rpc.mountd[11423]: Version 1.3.0 starting</span><br><span class="line">Nov 13 14:54:31 dev-nfs kernel: NFSD: starting 90-second grace period (net ffffffff81ad9d40)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;继续看日志发现一致在这里循环操作，懵逼啊。利用rpcinfo -p localhost | grep nfs和netstat 查看端口看起来工作是正常的。就是日志看出来有问题</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpcinfo -p localhost | grep nfs</span></span><br><span class="line">    100003    3   tcp   2049  nfs</span><br><span class="line">    100003    4   tcp   2049  nfs</span><br><span class="line">    100227    3   tcp   2049  nfs_acl</span><br><span class="line">    100003    3   udp   2049  nfs</span><br><span class="line">    100003    4   udp   2049  nfs</span><br><span class="line">    100227    3   udp   2049  nfs_acl</span><br></pre></td></tr></table></figure><h3 id="2、恢复nfs"><a href="#2、恢复nfs" class="headerlink" title="2、恢复nfs"></a>2、恢复nfs</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网上看了一下，只能重启nfs、和rpcbind服务才能解决。</p><h4 id="2-1、刷新nfs"><a href="#2-1、刷新nfs" class="headerlink" title="2.1、刷新nfs"></a>2.1、刷新nfs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo exportfs -arv</span></span><br></pre></td></tr></table></figure><p>感觉没多大效果</p><h4 id="2-2、重启nfs"><a href="#2-2、重启nfs" class="headerlink" title="2.2、重启nfs"></a>2.2、重启nfs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl restart rpcbind.service</span></span><br><span class="line"><span class="comment"># systemctl restart nfs.service</span></span><br></pre></td></tr></table></figure><h3 id="3、客户端挂载"><a href="#3、客户端挂载" class="headerlink" title="3、客户端挂载"></a>3、客户端挂载</h3><p>再次来到客户机挂载，可以成功的挂载</p><h3 id="4、rpcbind服务介绍"><a href="#4、rpcbind服务介绍" class="headerlink" title="4、rpcbind服务介绍"></a>4、rpcbind服务介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;共享和加载NFS文件系统需要服务，红帽企业Linux使用核心级的支持和守护进程的组合来提供NFS文件共享.NFS依靠远程过程调用(RPC)在客户端和服务器端路由请求。在Linux下RPC服务由portmap服务控制。</p><h4 id="4-1、为了共享和加载NFS文件系统，下面的服务要一起工作"><a href="#4-1、为了共享和加载NFS文件系统，下面的服务要一起工作" class="headerlink" title="4.1、为了共享和加载NFS文件系统，下面的服务要一起工作:"></a>4.1、为了共享和加载NFS文件系统，下面的服务要一起工作:</h4><ul><li>nfs - 启动相应RPC服务进程来服务对于NFS文件系统的请求.</li><li>nfslock - 一个可选的服务，用于启动相应的RPC进程，允许NFS客户端在服务器上对文件加锁.</li><li>portmap - Linux的RPC服务,它响应RPC服务的请求和与请求的RPC服务建立连接.</li></ul><h4 id="4-2、RPC进程在后台一起工作服务于NFS服务"><a href="#4-2、RPC进程在后台一起工作服务于NFS服务" class="headerlink" title="4.2、RPC进程在后台一起工作服务于NFS服务"></a>4.2、RPC进程在后台一起工作服务于NFS服务</h4><ul><li>rpc.mountd - 这个进程接受来自NFS客户端的加载请求和验证请求的文件系统正在被输出.这个进程由NFS服务自动启动，不需要用户的配置.</li><li>rpc.nfsd - 这个进程是NFS服务器.它和Linux核心一起工作来满足NFS客户端的动态需求，例如提供为每个NFS客户端的每次请求服务器线程.这个进程对应于nfs服务.</li><li>rpc.lockd - 一个可选的进程，它允许NFS客户端在服务器上对文件加锁.这个进程对应于nfslock服务.</li><li>rpc.statd - 这个进程实现了网络状态监控(NSM)RPC协议,通知NFS客户端什么时候一个NFS服务器非正常重启动.这个进程被nfslock服务自动启动，不需要用户的配置.</li><li>rpc.rquotad - 这个进程对于远程用户提供用户配额信息. 这个进程被nfs服务自动启动，不需要用户的配置.</li></ul><h3 id="整体异常现象"><a href="#整体异常现象" class="headerlink" title="整体异常现象"></a>整体异常现象</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nfs服务异常的时候，客户端会不断的去尝试连接nfs服务器，导致在客户端使用df命令卡死，到挂在目录的上层目录执行ls 也出现卡死。df 卡死可以使用ctrl+c 结束，ls的时候就不行啦，需要在另外一个终端kill 进程。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在网上看到一篇文章，上门说的是有可能是性能问题。解决办法是</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl stop rpcbind.service</span></span><br><span class="line"><span class="comment"># systemctl stop nfs.service</span></span><br><span class="line"><span class="comment"># rm -rf /var/lib/nfs/sm/*</span></span><br><span class="line"><span class="comment"># rm -rf /var/lib/nfs/sm.bak/*</span></span><br><span class="line"><span class="comment"># systemctl restart rpcbind.service</span></span><br><span class="line"><span class="comment"># systemctl restart nfs.service</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我执行了，结果还在观察中，<a href="https://qexe.de/question/nfsd-letzter-server-wurde-beendet-der-exportcache-wird-geleert" target="_blank" rel="noopener">参考</a></p><p>将持续关注这块和更新</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>nfs</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s配置Dashboard</title>
    <url>/2019/08/29/k8s%E9%85%8D%E7%BD%AEDashboard/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;K8S Dashboard是官方的一个基于WEB的用户界面，专门用来管理K8S集群，并可展示集群的状态。K8S集群安装好后默认没有包含Dashboard，我们需要额外创建它。</p><h3 id="1、安装dashboard"><a href="#1、安装dashboard" class="headerlink" title="1、安装dashboard"></a>1、安装dashboard</h3><h4 id="1-1、下载准备需要的文件"><a href="#1-1、下载准备需要的文件" class="headerlink" title="1.1、下载准备需要的文件"></a>1.1、下载准备需要的文件</h4><p>经过修改过后的文件，已经可以正常使用的<a href="https://github.com/xxlaila/kubernetes-yaml/" target="_blank" rel="noopener">文件</a></p><a id="more"></a><ul><li>创建dashboard<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 dashboard]<span class="comment"># kubectl create -f kubernetes-dashboard.yaml </span></span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-2、查看服务状态和pod"><a href="#1-2、查看服务状态和pod" class="headerlink" title="1.2、查看服务状态和pod"></a>1.2、查看服务状态和pod</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 ~]<span class="comment"># kubectl get service --all-namespaces</span></span><br><span class="line">NAMESPACE     NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">default       kubernetes             ClusterIP   10.254.0.1      &lt;none&gt;        443/TCP         18h</span><br><span class="line">kube-system   coredns                ClusterIP   10.254.0.10     &lt;none&gt;        53/UDP,53/TCP   16h</span><br><span class="line">kube-system   kubernetes-dashboard   NodePort    10.254.51.226   &lt;none&gt;        443:30001/TCP   15h</span><br></pre></td></tr></table></figure><ul><li><p>查看service描述</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 ~]<span class="comment"># kubectl describe  service kubernetes-dashboard -n kube-system</span></span><br><span class="line">Name:                     kubernetes-dashboard</span><br><span class="line">Namespace:                kube-system</span><br><span class="line">Labels:                   k8s-app=kubernetes-dashboard</span><br><span class="line">Annotations:              &lt;none&gt;</span><br><span class="line">Selector:                 k8s-app=kubernetes-dashboard</span><br><span class="line">Type:                     NodePort</span><br><span class="line">IP:                       10.254.51.226</span><br><span class="line">Port:                     &lt;<span class="built_in">unset</span>&gt;  443/TCP</span><br><span class="line">TargetPort:               8443/TCP</span><br><span class="line">NodePort:                 &lt;<span class="built_in">unset</span>&gt;  30001/TCP</span><br><span class="line">Endpoints:                10.254.39.3:8443</span><br><span class="line">Session Affinity:         None</span><br><span class="line">External Traffic Policy:  Cluster</span><br><span class="line">Events:                   &lt;none&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看pod描述</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 ~]<span class="comment"># kubectl describe pod kubernetes-dashboard-6c655d9445-6zntr --namespace=kube-system</span></span><br><span class="line">Name:           kubernetes-dashboard-6c655d9445-6zntr</span><br><span class="line">Namespace:      kube-system</span><br><span class="line">Node:           172.21.17.31/172.21.17.31</span><br><span class="line">Start Time:     Thu, 29 Aug 2019 17:47:20 +0800</span><br><span class="line">Labels:         k8s-app=kubernetes-dashboard</span><br><span class="line">                pod-template-hash=6c655d9445</span><br><span class="line">Annotations:    &lt;none&gt;</span><br><span class="line">Status:         Running</span><br><span class="line">IP:             10.254.39.3</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、授权Dashboard账户集群管理权限"><a href="#2、授权Dashboard账户集群管理权限" class="headerlink" title="2、授权Dashboard账户集群管理权限"></a>2、授权Dashboard账户集群管理权限</h3><p>若果不进行授权操作，打开dashboard会报错，如下图<br><img src="https://img.xxlaila.cn/WechatIMG28864.png" alt="img"></p><ul><li><p>新建kubrnetes-dashboard-admin-rbac.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kubernetes-dashboard-admin-rbac.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line"><span class="comment"># Create ClusterRoleBinding</span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f kubernetes-dashboard-admin-rbac.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>找到kubernete-dashboard-admin的token，复制token在dashboard页面进行登录，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 dashboard]<span class="comment"># kubectl -n kube-system get secret | grep admin-user</span></span><br><span class="line">admin-user-token-qv49g             kubernetes.io/service-account-token   3      15h</span><br><span class="line"></span><br><span class="line">[root@k8s-master-01 dashboard]<span class="comment"># kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '&#123;print $1&#125;')</span></span><br><span class="line">Name:         admin-user-token-qv49g</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class="line">              kubernetes.io/service-account.uid: ea3f0e3f-ca42-11e9-8716-fa163effd55b</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1359 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXF2NDlnIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJlYTNmMGUzZi1jYTQyLTExZTktODcxNi1mYTE2M2VmZmQ1NWIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.AbdsJdgi9d0rCYrmvoJkWf32HKSMT03OyOX55aRhPptjzIjDcGxxQYecT0w58N7Z_2L2RwTBfOrm4B3wTEDfFZKgYsnGJQOzJMtZDN9w5YJg2xGQ27E3KisTbbQzd_I5DgxSZWW75GwWf756_bIQpWuXNRO_KjheyWuNNv0tSEYRiXpcboSQpb-8R-Km-vP85mxke6s5cJFSk0WLMjFWow1vOF1ns23NZ5nslEmYOMZF3_Fxybh3LbiCyrpD4c0FtfRcXaBIBqACeyCPRriYMIIJq3OJjI-DzuqUedu1x2xH2prB4mNjxlKt2-7q0M1zCuvm5JhW_LzWgveu9ni2ig</span><br></pre></td></tr></table></figure><h3 id="3、配置文件修改说明"><a href="#3、配置文件修改说明" class="headerlink" title="3、配置文件修改说明"></a>3、配置文件修改说明</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;dashboard 文件被修改，默认的token失效的时间是900秒，15分钟，每15分钟就要进行一次认证，这样对于运维人员来说就不是特别的方便，我们可以通过修改token-ttl参数来设置，主要是修改dashborad的yaml文件，并重新建立即可</p><h4 id="3-1、在配置文件修改-添加"><a href="#3-1、在配置文件修改-添加" class="headerlink" title="3.1、在配置文件修改/添加"></a>3.1、在配置文件修改/添加</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ports:</span><br><span class="line">- containerPort: 8443</span><br><span class="line">  protocol: TCP</span><br><span class="line">args:</span><br><span class="line">  - --auto-generate-certificates</span><br><span class="line">  - --token-ttl=43200</span><br></pre></td></tr></table></figure><ul><li>重建pod<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01 dashboard]<span class="comment"># kubectl apply -f kubernetes-dashboard.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>我们可以输入任意节点的ip加30001端口就可以访问dashboard, https://{ip}:30001。</p><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;每天我们来公司要登录dashboard的时候都要去输入一次token，每次去获取token的时候都要输入很长的一串，这里为了方便，可以写一个脚本，要token的时候执行一下脚本，就可以。</p><ul><li><p>创建脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim kube-token</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure></li><li><p>设置脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod +x kube-token</span></span><br><span class="line"><span class="comment"># mv kube-token /usr/bin</span></span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>dashboard</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s删除node重新加入</title>
    <url>/2019/08/29/k8s%E5%88%A0%E9%99%A4node%E9%87%8D%E6%96%B0%E5%8A%A0%E5%85%A5/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;有时候k8s node 在加入集群的时候不经意的时候弄错啦某些东西，这时候可以把这个node删除，然后重新加入，删除节点之前我们需要做一下常规化的操作，来保障运行在该节点的pod迁移到其他的node上。</p><a id="more"></a><ul><li><p>1、先驱赶上面的pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl drain 172.21.110 --delete-local-data</span></span><br><span class="line">node/172.21.110 cordoned</span><br><span class="line">node/172.21.110 drained</span><br></pre></td></tr></table></figure></li><li><p>2、删除节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl delete node 172.21.110</span></span><br><span class="line">node <span class="string">"172.21.110"</span> deleted</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>kubectl delete</code> 命令本身是通用的，可以进行任何资源的删除<code>kubectl delete type typename</code>，type是资源类型，可以是<code>node, pod, rs, rc, deployment, service</code>等等，typename是这个资源的名称</p><ul><li><p>3、查看node是否被删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME           STATUS   ROLES    AGE   VERSION</span><br><span class="line">172.21.17.30   Ready    &lt;none&gt;   20m   v1.13.3</span><br><span class="line">172.21.17.31   Ready    &lt;none&gt;   10m   v1.13.3</span><br></pre></td></tr></table></figure></li><li><p>4、彻底删除node<br>进入该节点。删除<code>kubelet.kubeconfig</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-3 kubernetes]<span class="comment"># rm -rf  kubelet.kubeconfig</span></span><br></pre></td></tr></table></figure></li><li><p>4、node重新加入集群<br>&nbsp;&nbsp;&nbsp;&nbsp;当我们的node执行删除以后，重新启动kubelet服务以后。node又会自动的加入到集群里面来，怎么彻底的删除，让后重启kubelet的时候重新像集群里面发出csr请求，集群重新通过该节点的csr请求吧该节点加入到集群来，<code>kubelet.kubeconfig</code>也重新生成</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl get csr</span></span><br><span class="line">NAME                                                   AGE     REQUESTOR           CONDITION</span><br><span class="line">node-csr-H1CAqJw4VZYY67-tk4Akuso_uuPPwpj3d5jK3xcL88M   8m      kubelet-bootstrap   Approved,Issued</span><br><span class="line">node-csr-YPvpbITaxGBrOxuCpGiY7jrGpPNSZ4sdbKhSkUEcdnc   7m54s   kubelet-bootstrap   Approved,Issued</span><br><span class="line">node-csr-odhUT58g0mdVuZdUeclj7doEpUmWzv1YzaiJYQaPeek   5s      kubelet-bootstrap   Pending</span><br><span class="line">node-csr-u4oi5e0Upt-ZmejSDEFm9Q0RU3wZf9bThU_o51nclgg   17m     kubelet-bootstrap   Approved,Issued</span><br></pre></td></tr></table></figure></li><li><p>5、重新通过csr</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl certificate approve node-csr-odhUT58g0mdVuZdUeclj7doEpUmWzv1YzaiJYQaPeek </span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/node-csr-odhUT58g0mdVuZdUeclj7doEpUmWzv1YzaiJYQaPeek approved</span><br></pre></td></tr></table></figure></li><li><p>6、在集群查看节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-01-2 kubernetes]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME            STATUS   ROLES    AGE   VERSION</span><br><span class="line">172.21.16.110   Ready    &lt;none&gt;   36s   v1.13.3</span><br><span class="line">172.21.17.30    Ready    &lt;none&gt;   28m   v1.13.3</span><br><span class="line">172.21.17.31    Ready    &lt;none&gt;   17m   v1.13.3</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos route策略</title>
    <url>/2019/08/28/Centos-route%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><blockquote><p>场景:<br>&nbsp;&nbsp;&nbsp;&nbsp;公司业务在一个新的云平台上线，该云平台使用的是比较传统的VMware vSphere来做的虚拟化，而且该云平台网络也是我们不清楚的，反正就是不能设置(不能像现在主流云平台自定义网络或者是地址段)，是一个政府的云平台，具体各种奇葩的限制就不说啦，你懂的……</p></blockquote><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;根据我们自身业务的需求，我们需要一个内网地址段，和对方协商后给我们开了一个10网段，20的子网，然后要了两台带有外网ip的服务器，一个用来做跳板机，一个用来做反向代理。然后等了两天对方吧服务器给我们开好了，我们登录跳板机，发现只有外网ip的服务器才能上网，其他的均不能上网，做nat也不能上，但是跳板机是公网，没有内网，可以通内网的ip服务器，所以猜测网络策略肯定是他们在交换机上做的。然后我们自己yum源来安装一些中间件。（不说了，后面还有一堆的奇葩问题，进入正题吧）</p><h3 id="后期问题"><a href="#后期问题" class="headerlink" title="后期问题"></a>后期问题</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;当我们把业务部署上线以后，运行一段时间后出现微服务之间调用超时，然后我们登录服务器排查网络问题，在服务器之间ping内网没问题，ping注册中心、数据库都没问题。服务器有公网，然后公网之间ping都没问题，网络层面没有任何的问题，查看系统日志也有发现错误，然后单独的吧借口地址拿出来进行<code>curl</code>能过但是有点慢，然后就吧这个命令写在脚本里面，让他每30秒跑一次，然后追加日志，跑了两三个小时，我们查看日志，日志里面也有超时现象，奇怪了，然后吧这个问题联系对方云平台的工程师，系统工程师、网络工程师拉群讨论，最后对方系统工程师提示我们让我们吧路由的<code>Metric</code>值两个网卡不要一样，对<code>Metric</code>刚开始一年懵逼，先不管，解决问题再说：</p><ul><li><p>修改Metric(内网卡)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ route -n</span><br><span class="line">$ sudo route add -net 10.10.20.0/22 dev ens160 metric 98</span><br><span class="line">$ sudo route  del -net 10.10.20.0/22 dev ens160 metric 100</span><br></pre></td></tr></table></figure></li><li><p>记住是先添加删除，顺序不要颠倒</p></li><li><p>查看路由</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         119.126.116.254 0.0.0.0         UG    100    0        0 ens192</span><br><span class="line">10.10.20.0      0.0.0.0         255.255.252.0   U     98     0        0 ens160</span><br><span class="line">119.126.116.128 0.0.0.0         255.255.255.128 U     100    0        0 ens192</span><br></pre></td></tr></table></figure></li><li><p>ens192(外网卡)</p></li><li><p>ens160(内网卡)</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;涉及到的业务服务器都修改，修改Metric值以后，我们<code>curl</code>一次，速度比以前快多了，又跑了一次脚本，观察了几个小时没问题，观察了两天，业务没有出现问题，日志里面也没有出现超时，问题得到解决</p><h3 id="Metric-介绍"><a href="#Metric-介绍" class="headerlink" title="Metric 介绍"></a>Metric 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;为路由指定所需跃点数的整数值（范围是 1 ~ 9999），它用来在路由表里的多个路由中选择与转发包中的目标地址最为匹配的路由。所选的路由具有最少的跃点数。跃点数能够反映跃点的数量、路径的速度、路径可靠性、路径吞吐量以及管理属性。Metric的值越小，优先级越高；如果两块网卡的Metric的值相同，就会出现抢占优先级继而网卡冲突，将会有一块网卡无法连接</p><p>更多介绍<a href="https://www.cyberciti.biz/faq/what-is-a-routing-table/" target="_blank" rel="noopener">参考</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>route</tag>
        <tag>Metric</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署ingress</title>
    <url>/2019/08/26/k8s%E9%83%A8%E7%BD%B2ingress/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>在kubernetes 集群中，一个服务安装以后怎么对外提供访问，外部用户怎么来访问我们容器中业务。</p><p><img src="https://img.xxlaila.cn/2373874sds43.png" alt="img"></p><h3 id="1、Ingress-介绍"><a href="#1、Ingress-介绍" class="headerlink" title="1、Ingress 介绍"></a>1、Ingress 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes 暴露服务的方式目前只有三种：LoadBlancer Service、NodePort Service、Ingress；本文主要通过Ingress来访问</p><h3 id="2、Ingress-是什么"><a href="#2、Ingress-是什么" class="headerlink" title="2、Ingress 是什么"></a>2、Ingress 是什么</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Ingress 就是能利用 Nginx、Haproxy 啥的负载均衡器暴露集群内服务的工具问题来了，集群内服务想要暴露出去面临着几个问题：</p><a id="more"></a><ul><li><p>Pod 漂移问题<br>&nbsp;&nbsp;&nbsp;&nbsp;众所周知 Kubernetes 具有强大的副本控制能力，能保证在任意副本(Pod)挂掉时自动从其他机器启动一个新的，还可以动态扩容等，总之一句话，这个 Pod 可能在任何时刻出现在任何节点上，也可能在任何时刻死在任何节点上；那么自然随着 Pod 的创建和销毁，Pod IP 肯定会动态变化；那么如何把这个动态的 Pod IP 暴露出去？这里借助于 Kubernetes 的 Service 机制，Service 可以以标签的形式选定一组带有指定标签的 Pod，并监控和自动负载他们的 Pod IP，那么我们向外暴露只暴露 Service IP 就行了；这就是 NodePort 模式：即在每个节点上开起一个端口，然后转发到内部 Service IP 上，如下图所示：<br><img src="https://img.xxlaila.cn/4dfs98347sdhsfs.png" alt="img"></p></li><li><p>端口管理问题<br>&nbsp;&nbsp;&nbsp;&nbsp;采用 NodePort 方式暴露服务面临一个坑爹的问题是，服务一旦多起来，NodePort 在每个节点上开启的端口会及其庞大，而且难以维护；这时候引出的思考问题是 “能不能使用 Nginx 啥的只监听一个端口，比如 80，然后按照域名向后转发？” 简单的实现就是使用 DaemonSet 在每个 node 上监听 80，然后写好规则，因为 Nginx 外面绑定了宿主机 80 端口(就像 NodePort)，本身又在集群内，那么向后直接转发到相应 Service IP 就行了，如下图所示<br><img src="https://img.xxlaila.cn/85793kdfksdo43.png" alt="img"></p></li><li><p>域名分配及动态更新问题<br>&nbsp;&nbsp;&nbsp;&nbsp;从上面的思路，采用 Nginx 似乎已经解决了问题，但是其实这里面有一个很大缺陷：每次有新服务加入怎么改 Nginx 配置？总不能手动改或者来个 Rolling Update 前端 Nginx Pod 吧？这时候 “伟大而又正直勇敢的” Ingress 登场，如果不算上面的 Nginx，Ingress 只有两大组件：Ingress Controller 和 Ingress<br>&nbsp;&nbsp;&nbsp;&nbsp;Ingress 简单的理解就是 你原来要改 Nginx 配置，然后配置各种域名对应哪个 Service，现在把这个动作抽象出来，变成一个 Ingress 对象，你可以用 yml 创建，每次不要去改 Nginx 了，直接改 yml 然后创建/更新就行了；那么问题来了：”Nginx 咋整？”<br>&nbsp;&nbsp;&nbsp;&nbsp;Ingress Controller 这东西就是解决 “Nginx 咋整” 的；Ingress Controoler 通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取他，按照他自己模板生成一段 Nginx 配置，再写到 Nginx Pod 里，最后 reload 一下，工作流程如下图:</p></li></ul><p><img src="https://img.xxlaila.cn/3248kjfiy4789wodjkshf3.png" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;当然在实际应用中，最新版本 Kubernetes 已经将 Nginx 与 Ingress Controller 合并为一个组件，所以 Nginx 无需单独部署，只需要部署 Ingress Controller 即可。</p><h3 id="3、Nginx-Ingress"><a href="#3、Nginx-Ingress" class="headerlink" title="3、Nginx Ingress"></a>3、Nginx Ingress</h3><h4 id="3-1、下载官方文件"><a href="#3-1、下载官方文件" class="headerlink" title="3.1、下载官方文件"></a>3.1、下载官方文件</h4><p>官方的mandatory.yaml文件里面包含了ingress RBAC，重要的组件 <a href="https://github.com/kubernetes/ingress-nginx/tree/nginx-0.20.0/deploy" target="_blank" rel="noopener">Nginx+Ingres Controller</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat mandatory.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-configuration</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: tcp-services</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: udp-services</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-serviceaccount</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRole</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-clusterrole</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">      - endpoints</span><br><span class="line">      - nodes</span><br><span class="line">      - pods</span><br><span class="line">      - secrets</span><br><span class="line">    verbs:</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - nodes</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - services</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">"extensions"</span></span><br><span class="line">    resources:</span><br><span class="line">      - ingresses</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - list</span><br><span class="line">      - watch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - events</span><br><span class="line">    verbs:</span><br><span class="line">      - create</span><br><span class="line">      - patch</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">"extensions"</span></span><br><span class="line">    resources:</span><br><span class="line">      - ingresses/status</span><br><span class="line">    verbs:</span><br><span class="line">      - update</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-role</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">      - pods</span><br><span class="line">      - secrets</span><br><span class="line">      - namespaces</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">    resourceNames:</span><br><span class="line">      <span class="comment"># Defaults to "&lt;election-id&gt;-&lt;ingress-class&gt;"</span></span><br><span class="line">      <span class="comment"># Here: "&lt;ingress-controller-leader&gt;-&lt;nginx&gt;"</span></span><br><span class="line">      <span class="comment"># This has to be adapted if you change either parameter</span></span><br><span class="line">      <span class="comment"># when launching the nginx-ingress-controller.</span></span><br><span class="line">      - <span class="string">"ingress-controller-leader-nginx"</span></span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line">      - update</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - configmaps</span><br><span class="line">    verbs:</span><br><span class="line">      - create</span><br><span class="line">  - apiGroups:</span><br><span class="line">      - <span class="string">""</span></span><br><span class="line">    resources:</span><br><span class="line">      - endpoints</span><br><span class="line">    verbs:</span><br><span class="line">      - get</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-role-nisa-binding</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: nginx-ingress-role</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nginx-ingress-serviceaccount</span><br><span class="line">    namespace: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-clusterrole-nisa-binding</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nginx-ingress-clusterrole</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nginx-ingress-serviceaccount</span><br><span class="line">    namespace: ingress-nginx</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-ingress-controller</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    app.kubernetes.io/name: ingress-nginx</span><br><span class="line">    app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app.kubernetes.io/name: ingress-nginx</span><br><span class="line">      app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app.kubernetes.io/name: ingress-nginx</span><br><span class="line">        app.kubernetes.io/part-of: ingress-nginx</span><br><span class="line">      annotations:</span><br><span class="line">        prometheus.io/port: <span class="string">"10254"</span></span><br><span class="line">        prometheus.io/scrape: <span class="string">"true"</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nginx-ingress-serviceaccount</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx-ingress-controller</span><br><span class="line">          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.22.0</span><br><span class="line">          args:</span><br><span class="line">            - /nginx-ingress-controller</span><br><span class="line">            - --configmap=$(POD_NAMESPACE)/nginx-configuration</span><br><span class="line">            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services</span><br><span class="line">            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services</span><br><span class="line">            - --publish-service=$(POD_NAMESPACE)/ingress-nginx</span><br><span class="line">            - --annotations-prefix=nginx.ingress.kubernetes.io</span><br><span class="line">     --default-ssl-certificate=$(POD_NAMESPACE)/ingress-secret</span><br><span class="line">      --default-backend-service=$(POD_NAMESPACE)/default-http-backend</span><br><span class="line">          securityContext:</span><br><span class="line">            allowPrivilegeEscalation: <span class="literal">true</span></span><br><span class="line">            capabilities:</span><br><span class="line">              drop:</span><br><span class="line">                - ALL</span><br><span class="line">              add:</span><br><span class="line">                - NET_BIND_SERVICE</span><br><span class="line">            <span class="comment"># www-data -&gt; 33</span></span><br><span class="line">            runAsUser: 33</span><br><span class="line">          env:</span><br><span class="line">            - name: POD_NAME</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.name</span><br><span class="line">            - name: POD_NAMESPACE</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.namespace</span><br><span class="line">          ports:</span><br><span class="line">            - name: http</span><br><span class="line">              containerPort: 80</span><br><span class="line">              hostPort: 80</span><br><span class="line">            - name: https</span><br><span class="line">              containerPort: 443</span><br><span class="line">              hostPort: 443</span><br><span class="line">          livenessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            initialDelaySeconds: 10</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 1</span><br><span class="line">          readinessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            httpGet:</span><br><span class="line">              path: /healthz</span><br><span class="line">              port: 10254</span><br><span class="line">              scheme: HTTP</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 1</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;<code>hostNetwork: true</code>是增加的， 官方的 Ingress Controller 有个坑，默认注释了hostNetwork 工作方式。以防止端口的在宿主机的冲突。没有绑定到宿主机 80 端口，也就是说前端 Nginx 没有监听宿主机 80 端口；所以需要把配置搞下来自己加一下 hostNetwork。</p><h4 id="3-2、部署默认后端"><a href="#3-2、部署默认后端" class="headerlink" title="3.2、部署默认后端"></a>3.2、部署默认后端</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;我们知道 前端的 Nginx 最终要负载到后端 service 上，那么如果访问不存在的域名咋整？官方给出的建议是部署一个 默认后端，对于未知请求全部负载到这个默认后端上；这个后端啥也不干，就是返回 404，部署如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat default-backend.yaml </span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: default-http-backend</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: default-http-backend</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: default-http-backend</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      containers:</span><br><span class="line">      - name: default-http-backend</span><br><span class="line">        <span class="comment"># Any image is permissable as long as:</span></span><br><span class="line">        <span class="comment"># 1. It serves a 404 page at /</span></span><br><span class="line">        <span class="comment"># 2. It serves 200 on a /healthz endpoint</span></span><br><span class="line">        image: docker.io/xxlaila/defaultbackend:1.4</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /healthz</span><br><span class="line">            port: 8080</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 20Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 10m</span><br><span class="line">            memory: 20Mi</span><br><span class="line"><span class="comment">#      nodeSelector:</span></span><br><span class="line"><span class="comment">#        kubernetes.io/hostname: 172.21.16.231</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: default-http-backend</span><br><span class="line">  namespace: ingress-nginx</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: default-http-backend</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: default-http-backend</span><br></pre></td></tr></table></figure><h4 id="3-3、执行创建-完成后可以看到"><a href="#3-3、执行创建-完成后可以看到" class="headerlink" title="3.3、执行创建,完成后可以看到"></a>3.3、执行创建,完成后可以看到</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f mandatory.yaml </span></span><br><span class="line"><span class="comment"># kubectl create -f default-backend.yaml</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/34dnksjfh384yksfkjdsfsd.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n ingress-nginx</span></span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">default-http-backend-66cdcb6c7d-pb9sp      1/1     Running   0          8h</span><br><span class="line">nginx-ingress-controller-69585dbb4-m6fcm   1/1     Running   0          8h</span><br><span class="line"><span class="comment"># kubectl get svc -n ingress-nginx</span></span><br><span class="line">NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">default-http-backend   ClusterIP   10.102.60.154   &lt;none&gt;        80/TCP    8h</span><br></pre></td></tr></table></figure><h3 id="4、部署-Ingress"><a href="#4、部署-Ingress" class="headerlink" title="4、部署 Ingress"></a>4、部署 Ingress</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;从上面可以知道 Ingress 就是个规则，指定哪个域名转发到哪个 Service，所以说首先我们得有个 Service，当然 Service 去哪找这里就不管了；这里默认为已经有了两个可用的 Service，以下以 jenkins、Dashboard 为例<br>&nbsp;&nbsp;&nbsp;&nbsp;先写一个 Ingress 文件，语法格式啥的请参考 官方文档，由于我的 jenkins在kube-ops，Dashboard 在kube-system 这个命名空间，所以要指定 namespace.参考下面实例</p><h4 id="4-1、部署jenkins实例"><a href="#4-1、部署jenkins实例" class="headerlink" title="4.1、部署jenkins实例"></a>4.1、部署jenkins实例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat jenkins-ingress.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-ingress</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">"nginx"</span></span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: ci.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: jenkins2</span><br><span class="line">          servicePort: 8080</span><br><span class="line"><span class="comment"># kubectl create -f jenkins-ingress.yaml</span></span><br></pre></td></tr></table></figure><p>执行域名解析到ip地址，访问jenkins</p><p><img src="https://img.xxlaila.cn/1566808344775.jpg" alt="img"></p><h4 id="4-2、部署kubernetes-dashboard"><a href="#4-2、部署kubernetes-dashboard" class="headerlink" title="4.2、部署kubernetes-dashboard"></a>4.2、部署kubernetes-dashboard</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat nginx-kubernetes-dashboard.yaml </span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard-ingress</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    nginx.ingress.kubernetes.io/ingress.class: nginx</span><br><span class="line">    nginx.ingress.kubernetes.io/secure-backends: <span class="string">"true"</span></span><br><span class="line">    nginx.ingress.kubernetes.io/ssl-passthrough: <span class="string">"true"</span></span><br><span class="line">spec:</span><br><span class="line">  tls:</span><br><span class="line">  - hosts:</span><br><span class="line">    - k8s.xxlaila.io</span><br><span class="line">    secretName: ingress-secret</span><br><span class="line">  rules:</span><br><span class="line">    - host: dashboard.xxlaila.io</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">        - path: /</span><br><span class="line">          backend:</span><br><span class="line">            serviceName: kubernetes-dashboard</span><br><span class="line">            servicePort: 443</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/786jg656iojhf0.png" alt="img"></p><h3 id="5、部署-Ingress-TLS"><a href="#5、部署-Ingress-TLS" class="headerlink" title="5、部署 Ingress TLS"></a>5、部署 Ingress TLS</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;上面已经做好了 Ingress，接下来配置TLS ；官方给出的样例很简单，大致步骤就两步：创建一个含有证书的 secret、在 Ingress 开启证书；但是官方的有坑，下面是操作步骤</p><h4 id="5-1、创建证书"><a href="#5-1、创建证书" class="headerlink" title="5.1、创建证书"></a>5.1、创建证书</h4><p>首先第一步当然要有个证书，由于我这个 Ingress 有两个服务域名，所以证书要支持两个域名；生成证书命令如下：</p><ul><li><p>生成CA证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir cert &amp;&amp; cd cert</span></span><br></pre></td></tr></table></figure></li><li><p>编辑 openssl 配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp /etc/pki/tls/openssl.cnf .</span></span><br></pre></td></tr></table></figure></li><li><p>修改主要配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi openssl.cnf</span></span><br><span class="line">	[req]</span><br><span class="line">	req_extensions = v3_req <span class="comment"># 这行默认注释关着的 把注释删掉</span></span><br></pre></td></tr></table></figure></li><li><p>增加配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi openssl.cnf</span></span><br><span class="line">[ v3_req ]</span><br><span class="line">basicConstraints = CA:FALSE</span><br><span class="line">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 = dashboard.mritd.me		<span class="comment">#需要增加的域名</span></span><br><span class="line">DNS.2 = kibana.mritd.me</span><br></pre></td></tr></table></figure></li><li><p>生成证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openssl genrsa -out ingress-key.pem 2048</span></span><br><span class="line"><span class="comment"># openssl req -new -key ingress-key.pem -out ingress.csr -subj "/CN=kube-ingress" -config openssl.cnf</span></span><br><span class="line"><span class="comment"># openssl x509 -req -in ingress.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out ingress.pem -days 365 -extensions v3_req -extfile openssl.cnf</span></span><br></pre></td></tr></table></figure></li><li><p>查看生成后的证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls</span></span><br><span class="line">ca-key.pem  ca.pem  ca.srl  ingress-key.pem  ingress.csr  ingress.pem  openssl.cnf</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-2、创建-secret"><a href="#5-2、创建-secret" class="headerlink" title="5.2、创建 secret"></a>5.2、创建 secret</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;创建好证书以后，需要将证书内容放到 secret 中，secret 中全部内容需要 base64 编码，然后注意去掉换行符(变成一行)；以下是我的 secret 样例(上一步中 ingress.pem 是证书crt，ingress-key.pem 是证书的 key)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim ingress-secret.yml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  tls.crt: MIIDAjCCAeqgAwIBAgIJAIUNBpFKFrg4MA0GCSqGSIb3DQEBCwUAMBIxEDAOBgNVBAMMB2t1YmUtY2EwHhcNMTkwMTI5MTAzMzQ3WhcNMjAwMTI5MTAzMzQ3WjAXMRUwEwYDVQQDDAxrdWJlLWluZ3Jlc3MwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC0rLcpYHdqVjN84vCJYF2l61F+LYuPRczPNWyo8Rba4XpT6MMMqoGqgmI164r4of2klBEMPZ0dm1mJaYnjb1Zq/qzVUlqaednxfXsr6u8Xm0a6l7ep+Yr+XcRISZC9AjgyqlFtgjzbNJauHkHTy0i+jqV2A4SkVUT2whBqF00WEKC6kQLhw4Ab1XBG5aOK2Jz4TZdP+Mw4n3AsihycHgjhFvhGNixKl4mpfHfLvFeKxmBa8ZoWT+3AGgkX186EXhdhsfdYqHeLT2TvwsqbUJI8E8F7nleo5VMifr9KGHxaCJ+ynr/WFX1c+0wYAGmSKsw4CnXh4EE+IvaeQjBz8O2HAgMBAAGjVjBUMAkGA1UdEwQCMAAwCwYDVR0PBAQDAgXgMDoGA1UdEQQzMDGCFmNpLnp4Yy5raW5neHVubGlhbi5jb22CF2s4cy56eGMua2luZ3h1bmxpYW4uY29tMA0GCSqGSIb3DQEBCwUAA4IBAQCShThVXg3Fnkrm82sHowxCEc9UG9uzOY2LbxhVN7mcm8U0cXy3acAXdKWLHUwdZnOxNJytpaBBWb/6KFFKrIekaSK+tSD+oRISJf43c1tbt0QEpplUaDagQ35NANyQY2VHQntDdVK4/NNJULbHNEqsu19vDDvmDFi0aLHvqPFAvlGnEBPgO1Ac297pDR2thHyMCGBzRKTQOJy2q3HKexa1pItHjAVmv/k71HBeTJ1en2tFHLUlR0kEhYYPBeRclVZ1oYWn7THRaBW8NtugdM6mxVNFAWQTq5goP0VcW44lWYiUF6mX/UZa2c+5FwsGWdSwbTqmZj7ptA2QcveUcN2/</span><br><span class="line">  tls.key: MIIEowIBAAKCAQEAtKy3KWB3alYzfOLwiWBdpetRfi2Lj0XMzzVsqPEW2uF6U+jDDKqBqoJiNeuK+KH9pJQRDD2dHZtZiWmJ429Wav6s1VJamnnZ8X17K+rvF5tGupe3qfmK/l3ESEmQvQI4MqpRbYI82zSWrh5B08tIvo6ldgOEpFVE9sIQahdNFhCgupEC4cOAG9VwRuWjitic+E2XT/jMOJ9wLIocnB4I4Rb4RjYsSpeJqXx3y7xXisZgWvGaFk/twBoJF9fOhF4XYbH3WKh3i09k78LKm1CSPBPBe55XqOVTIn6/Shh8Wgifsp6/1hV9XPtMGABpkirMOAp14eBBPiL2nkIwc/DthwIDAQABAoIBACLj97sV1fnDC85iRPFCmtMfzmz/fqP8ZsDdIE6/wBok0OrDWGdpxgCXjT+8bOn23nSZ43DptR2ykmfm6anyJk4jQF0xui16uovYH6ErjWCRq+b8xYsdlanpka4kBr95XkDqgy8Sp43taevWDABKkZG7Gljf9Q2HKfo9H85dEZXg7RKKz77wahcHpZofthNo0s5kkH2ckVpjwh5svM+M/gm8KhZkKayndr1ezEAmndT+K/P4EVuYbpPQyk5A6E1G7Dh9M2TczZZa6oiR5etloDk2sOIYxysIZqAblyMN2IrIO0hf4nGqSmfe0TZMCKzSXoVOV2Qe+ckJ+mSyOPcdbIECgYEA3EMWrrr4oc9R8o35mQ2FDCG0FUyXrCo9SN/CyhScdeUx1IRV00CBwL340H1CwzEpj5g4bj6LGGSeEw2g8qfPoPdzr1yxNnCv43dhaGrWRrSxGL6kGfKmIlbgHTPIuzRkAXGWiCgo5JnzPjQtjmpUTmwmxXwqDih8kpRsBSTsmx0CgYEA0f1ORGtmrj/bRBQU0NF+ztTVFJQbPV3lTHl21Qgd8QcEIcOHqzpI2fmkeGZdyYQXIfODA/X+PFng+Z6J5ubtvplN5jPzpQuQRtIZ47NRmtgn4DoH+GAqxIb2hFbwXpXuSR/LelFtzxb91nGiVKpdizvuwnitgOuAIbgGHYbgpfMCgYAvvA5fYb/eeWq+EUzFgauS3H8FmqrIMgNEFtJFL0BVQI2TC/b5qGI2XjVdIbhlSvNB3nBkXAOTDsM/R9XYoMubi+UzXPg+3x8PQeEHWxgDDMfQoAg6Y17j1EYPrhhTkeAWfAJukZ2DJWYU1gQFeD+7Gy8v31/R365XqfjbCIyKdQKBgD+/3tr2oB2WVUK9tfQPJag1BNtSe1KOBubImULjS/O4ZZC6g51//E3wc/X5Xc+nwj4UZ1n0fFJmFt6xOrxWryaF9BhG/VjFwe8+KY3vCn8v0CtKctD8oP842e4jVqXgbo7UkDl6LxQHrthDdzys2+lBMKLpcAMLe8LA01pzcA/xAoGBAK3KXGXz0AsM+5FBbUFVZFOROUQLcd+N8esHnSqD8i7/J0PJsxm9irutuLht0cYK7Fcq65fYmZ4lrJO7bpiBRzONR78lMgm/rcKfCCNr4o4n6almvuFxA+jGgEM2W7iYb9pW+FFOqIOjl0cSHy2hsN7seGv3JBcz5StRjtwuSWf6</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-secret</span><br><span class="line">  namespace: kube-system</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br></pre></td></tr></table></figure><ul><li>创建完成后 create<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f ingress-secret.yml</span></span><br><span class="line">secret/ingress-secret created</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3、快速创建"><a href="#5-3、快速创建" class="headerlink" title="5.3、快速创建"></a>5.3、快速创建</h4><p>5.2步骤可以简化创建，可以执行一条命令进行创建，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create secret tls ingress-secret --key cert/ingress-key.pem --cert cert/ingress.pem</span></span><br></pre></td></tr></table></figure><h4 id="5-4、重新部署-Ingress"><a href="#5-4、重新部署-Ingress" class="headerlink" title="5.4、重新部署 Ingress"></a>5.4、重新部署 Ingress</h4><p>在tls生成完成后，需要重新部署Ingress，让Ingress能够家在tls。修改配置文件</p><h5 id="5-4-1、jenkins-tls"><a href="#5-4-1、jenkins-tls" class="headerlink" title="5.4.1、jenkins tls"></a>5.4.1、jenkins tls</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi jenkins-ingress.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-ingress</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">"nginx"</span></span><br><span class="line">spec:</span><br><span class="line">  tls:</span><br><span class="line">  - hosts:</span><br><span class="line">    - ci.xxlaila.io</span><br><span class="line">    secretName: ingress-secret</span><br><span class="line">  rules:</span><br><span class="line">  - host: ci.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: jenkins2</span><br><span class="line">          servicePort: 8080</span><br><span class="line"><span class="comment"># kubect create -f jenkins-ingress.yaml</span></span><br></pre></td></tr></table></figure><p>访问jenkins域名，这里输入http访问会强制跳转到https<br><img src="https://img.xxlaila.cn/1566808668453.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1566808711171.jpg" alt="img"></p><h5 id="5-4-2、kubernetes-dashboard-tls"><a href="#5-4-2、kubernetes-dashboard-tls" class="headerlink" title="5.4.2、kubernetes dashboard tls"></a>5.4.2、kubernetes dashboard tls</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim nginx-kubernetes-dashboard.yaml </span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard-ingress</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">"nginx"</span></span><br><span class="line">spec:</span><br><span class="line">  tls:</span><br><span class="line">  - hosts:</span><br><span class="line">    - k8s.xxlaila.io</span><br><span class="line">    secretName: ingress-secret</span><br><span class="line">  rules:</span><br><span class="line">  - host: k8s.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: kubernetes-dashboard</span><br><span class="line">          servicePort: 80</span><br><span class="line"><span class="comment"># kubectl create -f nginx-kubernetes-dashboard.yaml</span></span><br></pre></td></tr></table></figure><h3 id="6、ingress-高级用法"><a href="#6、ingress-高级用法" class="headerlink" title="6、ingress 高级用法"></a>6、ingress 高级用法</h3><p><img src="https://img.xxlaila.cn/34324kjsdfh8234ks.png" alt="img"></p><ul><li>lvs 反向代理到 物理nginx。完成https拆包，继承nginx所有功能</li><li>nginx 反向代理到ingress-control。 ingress-control 有两种部署方式 。<ul><li>ingress-control 使用nodePort 方式暴漏服务</li><li>ingress-control 使用hostNetwork 方式暴漏服务</li></ul></li></ul><h3 id="7、总结分析"><a href="#7、总结分析" class="headerlink" title="7、总结分析"></a>7、总结分析</h3><ul><li>ingress-control 在自己的所属的namespace=ingress, 是可以夸不同namespace提供反向代理服.</li><li>如果需要提供夸NS 访问ingress，先给 ingress-control创建RBAC</li><li>ingress-control 使用hostnetwork 模式 性能比使用service nodePort 性能好很多。因为hostnetwork 是直接获取pod 的IP？</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>Ingress</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署Weave Scope</title>
    <url>/2019/08/26/k8s%E9%83%A8%E7%BD%B2Weave-Scope/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="1、Weave-Scope介绍"><a href="#1、Weave-Scope介绍" class="headerlink" title="1、Weave Scope介绍"></a>1、Weave Scope介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;weave scope 是Docker和Kubernetes的故障排除和监控，自动生成应用程序的地图，能够直观地了解，监控和控制基于容器的，基于微服务的应用程序。可以实时的了解docker容器，选择容器基础架构的概述，或关注特定的微服务。轻松识别和纠正问题，确保集装箱化应用的稳定性和性能，查看容器的上下文指标，标记和元数据。轻松地在容器内的进程之间导航，以运行容器，在可扩展的可排序表中进行排列。使用给定主机或服务的最大CPU或内存轻松找到容器。直接与您的容器交互：暂停，重新启动和停止容器。启动命令行。全部不离开范围浏览器窗口。</p><p><img src="https://img.xxlaila.cn/378246bsjfhsajkdq.png" alt="img"></p><h3 id="2、部署weave-scope"><a href="#2、部署weave-scope" class="headerlink" title="2、部署weave scope"></a>2、部署weave scope</h3><p>初次学习，直接下载官方配置文件，没有经过任何修改，不过相信自己随着学习的进步，会逐渐深入。<a href="https://github.com/weaveworks/scope" target="_blank" rel="noopener">github地址</a>，<a href="https://www.weave.works/docs/cloud/latest/overview/" target="_blank" rel="noopener">官方地址</a></p><a id="more"></a><h4 id="2-1、下载配置文件"><a href="#2-1、下载配置文件" class="headerlink" title="2.1、下载配置文件"></a>2.1、下载配置文件</h4><p><a href="https://github.com/weaveworks/scope/tree/master/examples/k8s" target="_blank" rel="noopener">下载配置文件</a>,配置文件如下列表:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls -l</span></span><br><span class="line">cluster-role-binding.yaml</span><br><span class="line">cluster-role.yaml</span><br><span class="line">deploy.yaml</span><br><span class="line">ds.yaml</span><br><span class="line">ns.yaml</span><br><span class="line">psp.yaml</span><br><span class="line">sa.yaml</span><br><span class="line">scope.yaml</span><br><span class="line">svc.yaml</span><br></pre></td></tr></table></figure><ul><li>执行创建<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f ./</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2、查看部署"><a href="#2-2、查看部署" class="headerlink" title="2.2、查看部署"></a>2.2、查看部署</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc,pods -n weave</span></span><br><span class="line">NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/weave-scope-app   ClusterIP   10.99.252.207   &lt;none&gt;        80/TCP    25m</span><br><span class="line"></span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/weave-scope-agent-gpwmw            1/1     Running   0          24m</span><br><span class="line">pod/weave-scope-agent-lmf22            1/1     Running   0          24m</span><br><span class="line">pod/weave-scope-agent-r8vft            1/1     Running   0          24m</span><br><span class="line">pod/weave-scope-agent-rph5p            1/1     Running   0          24m</span><br><span class="line">pod/weave-scope-agent-zfrnc            1/1     Running   0          24m</span><br><span class="line">pod/weave-scope-app-5c46dd7467-s8cp8   1/1     Running   0          24m</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/3489hdnsjkhd8324sd.png" alt="img"></p><h4 id="2-3、查看服务状态"><a href="#2-3、查看服务状态" class="headerlink" title="2.3、查看服务状态"></a>2.3、查看服务状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get services -n weave</span></span><br><span class="line">NAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">weave-scope-app   ClusterIP   10.99.252.207   &lt;none&gt;        80/TCP    27m</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;到这里weave-scope部署完成，但是我们需要进行访问，这里我们通过之前学习的nginx Ingress来对scope配置一个域名，然后吧域名解析到制定的ip地址上进行访问</p><h3 id="3、配置scope域名"><a href="#3、配置scope域名" class="headerlink" title="3、配置scope域名"></a>3、配置scope域名</h3><p>新建立一个yaml文件，如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat scope-ingress.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: scope-ingress</span><br><span class="line">  namespace: weave</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: scope.xxlaila.io</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">        - path: /</span><br><span class="line">          backend:</span><br><span class="line">            serviceName: weave-scope-app</span><br><span class="line">            servicePort: 80</span><br><span class="line"><span class="comment"># kubectl create -f scope-ingress.yaml</span></span><br></pre></td></tr></table></figure><blockquote><p>通过域名访问：<a href="http://scope.xxlaila.io" target="_blank" rel="noopener">http://scope.xxlaila.io</a></p></blockquote><p><img src="https://img.xxlaila.cn/287346jskbdjy784kjs.png" alt="img"><br><img src="https://img.xxlaila.cn/3o4wndk9234sd.png" alt="img"><br><img src="https://img.xxlaila.cn/34873i24dfsd.png" alt="img"><br><img src="https://img.xxlaila.cn/458dskjfhu2y4skdsds.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>Weave Scope</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署zookeeper集群</title>
    <url>/2019/08/24/k8s%E9%83%A8%E7%BD%B2zookeeper%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>zk属于有状态服务，需要连接外部存储，吧数据存放在数据盘里面，否则容器挂了，数据没有了</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>准备zk的yaml文件</p><a id="more"></a><h3 id="1、配置zk-data文件"><a href="#1、配置zk-data文件" class="headerlink" title="1、配置zk-data文件"></a>1、配置zk-data文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat zk-data.yaml</span></span><br><span class="line">kind: PersistentVolume</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: k8s-pv-zk1</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"anything"</span></span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">local</span></span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 3Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  hostPath:</span><br><span class="line">    path: <span class="string">"/var/lib/zookeeper"</span></span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="line">---</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: k8s-pv-zk2</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"anything"</span></span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">local</span></span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 3Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  hostPath:</span><br><span class="line">    path: <span class="string">"/var/lib/zookeeper"</span></span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="line">---</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: k8s-pv-zk3</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"anything"</span></span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">type</span>: <span class="built_in">local</span></span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 3Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  hostPath:</span><br><span class="line">    path: <span class="string">"/var/lib/zookeeper"</span></span><br><span class="line">  persistentVolumeReclaimPolicy: Recycle</span><br><span class="line"><span class="comment"># cat zookeeper.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: zk-hs</span><br><span class="line">  labels:</span><br><span class="line">    app: zk</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 2888</span><br><span class="line">    name: server</span><br><span class="line">  - port: 3888</span><br><span class="line">    name: leader-election</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: zk</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: zk-cs</span><br><span class="line">  labels:</span><br><span class="line">    app: zk</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 2181</span><br><span class="line">    name: client</span><br><span class="line">  selector:</span><br><span class="line">    app: zk</span><br><span class="line">---</span><br><span class="line">apiVersion: policy/v1beta1</span><br><span class="line">kind: PodDisruptionBudget</span><br><span class="line">metadata:</span><br><span class="line">  name: zk-pdb</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: zk</span><br><span class="line">  maxUnavailable: 1</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: zk</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: zk</span><br><span class="line">  serviceName: zk-hs</span><br><span class="line">  replicas: 3</span><br><span class="line">  updateStrategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">  podManagementPolicy: Parallel</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: zk</span><br><span class="line">    spec:</span><br><span class="line">      affinity:</span><br><span class="line">        podAntiAffinity:</span><br><span class="line">          requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class="line">            - labelSelector:</span><br><span class="line">                matchExpressions:</span><br><span class="line">                  - key: <span class="string">"app"</span></span><br><span class="line">                    operator: In</span><br><span class="line">                    values:</span><br><span class="line">                    - zk</span><br><span class="line">              topologyKey: <span class="string">"kubernetes.io/hostname"</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: kubernetes-zookeeper</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        image: <span class="string">"xxlaila/kubernetes-zookeeper:1.0-3.4.10"</span></span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            memory: <span class="string">"1Gi"</span></span><br><span class="line">            cpu: <span class="string">"0.5"</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 2181</span><br><span class="line">          name: client</span><br><span class="line">        - containerPort: 2888</span><br><span class="line">          name: server</span><br><span class="line">        - containerPort: 3888</span><br><span class="line">          name: leader-election</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - sh</span><br><span class="line">        - -c</span><br><span class="line">        - <span class="string">"start-zookeeper \</span></span><br><span class="line"><span class="string">          --servers=3 \</span></span><br><span class="line"><span class="string">          --data_dir=/var/lib/zookeeper/data \</span></span><br><span class="line"><span class="string">          --data_log_dir=/var/lib/zookeeper/data/log \</span></span><br><span class="line"><span class="string">          --conf_dir=/opt/zookeeper/conf \</span></span><br><span class="line"><span class="string">          --client_port=2181 \</span></span><br><span class="line"><span class="string">          --election_port=3888 \</span></span><br><span class="line"><span class="string">          --server_port=2888 \</span></span><br><span class="line"><span class="string">          --tick_time=2000 \</span></span><br><span class="line"><span class="string">          --init_limit=10 \</span></span><br><span class="line"><span class="string">          --sync_limit=5 \</span></span><br><span class="line"><span class="string">          --heap=512M \</span></span><br><span class="line"><span class="string">          --max_client_cnxns=60 \</span></span><br><span class="line"><span class="string">          --snap_retain_count=3 \</span></span><br><span class="line"><span class="string">          --purge_interval=12 \</span></span><br><span class="line"><span class="string">          --max_session_timeout=40000 \</span></span><br><span class="line"><span class="string">          --min_session_timeout=4000 \</span></span><br><span class="line"><span class="string">          --log_level=INFO"</span></span><br><span class="line">        readinessProbe:</span><br><span class="line">          <span class="built_in">exec</span>:</span><br><span class="line">            <span class="built_in">command</span>:</span><br><span class="line">            - sh</span><br><span class="line">            - -c</span><br><span class="line">            - <span class="string">"zookeeper-ready 2181"</span></span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">        livenessProbe:</span><br><span class="line">          <span class="built_in">exec</span>:</span><br><span class="line">            <span class="built_in">command</span>:</span><br><span class="line">            - sh</span><br><span class="line">            - -c</span><br><span class="line">            - <span class="string">"zookeeper-ready 2181"</span></span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: datadir</span><br><span class="line">          mountPath: /var/lib/zookeeper</span><br><span class="line">      securityContext:</span><br><span class="line">        runAsUser: 1000</span><br><span class="line">        fsGroup: 1000</span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: datadir</span><br><span class="line">      annotations:</span><br><span class="line">        volume.beta.kubernetes.io/storage-class: <span class="string">"managed-nfs-storage"</span></span><br><span class="line">    spec:</span><br><span class="line">      accessModes: [ <span class="string">"ReadWriteOnce"</span> ]</span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 3Gi</span><br></pre></td></tr></table></figure><h3 id="2、执行部署"><a href="#2、执行部署" class="headerlink" title="2、执行部署"></a>2、执行部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f zookeeper.yaml -n kube-dev</span></span><br></pre></td></tr></table></figure><h3 id="3、查看部署"><a href="#3、查看部署" class="headerlink" title="3、查看部署"></a>3、查看部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod -o wide -n kube-dev</span></span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE     IP            NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">zk-0                            1/1     Running   0          6m13s   10.254.62.4   172.21.17.15    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">zk-1                            1/1     Running   0          6m12s   10.254.21.4   172.21.16.96    &lt;none&gt;           &lt;none&gt;</span><br><span class="line">zk-2                            1/1     Running   0          6m12s   10.254.96.4   172.21.16.193   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="4、查看持久卷申明"><a href="#4、查看持久卷申明" class="headerlink" title="4、查看持久卷申明"></a>4、查看持久卷申明</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pv -o wide -n kube-dev</span></span><br><span class="line">NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                             STORAGECLASS          REASON   AGE</span><br><span class="line">pvc-d1cb6a1c-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            Delete           Bound    kube-dev/datadir-zk-0             managed-nfs-storage            6m18s</span><br><span class="line">pvc-d20a95ec-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            Delete           Bound    kube-dev/datadir-zk-1             managed-nfs-storage            6m18s</span><br><span class="line">pvc-d23577af-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            Delete           Bound    kube-dev/datadir-zk-2             managed-nfs-storage            6m23s</span><br></pre></td></tr></table></figure><h3 id="5、查看pvc"><a href="#5、查看pvc" class="headerlink" title="5、查看pvc"></a>5、查看pvc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pvc -o wide -n kube-dev</span></span><br><span class="line">NAME                     STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">datadir-zk-0             Bound    pvc-d1cb6a1c-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            managed-nfs-storage   6m38s</span><br><span class="line">datadir-zk-1             Bound    pvc-d20a95ec-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            managed-nfs-storage   6m37s</span><br><span class="line">datadir-zk-2             Bound    pvc-d23577af-407d-11e9-9436-fa163e14c5bd   3Gi        RWO            managed-nfs-storage   6m37s</span><br></pre></td></tr></table></figure><h3 id="6、验证集群是否工作正常"><a href="#6、验证集群是否工作正常" class="headerlink" title="6、验证集群是否工作正常"></a>6、验证集群是否工作正常</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for i in 0 1 2; do kubectl exec zk-$i zkServer.sh status -n kube-dev; done</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/bin/../etc/zookeeper/zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/bin/../etc/zookeeper/zoo.cfg</span><br><span class="line">Mode: leader</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/bin/../etc/zookeeper/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><h3 id="7、集群的访问地址"><a href="#7、集群的访问地址" class="headerlink" title="7、集群的访问地址"></a>7、集群的访问地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server.1=zk-0.zk-hs.kube-dev.svc.cluster.local.:2888:3888</span><br><span class="line">server.2=zk-1.zk-hs.kube-dev.svc.cluster.local.:2888:3888</span><br><span class="line">server.3=zk-2.zk-hs.kube-dev.svc.cluster.local.:2888:3888</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署coredns</title>
    <url>/2019/08/24/k8s%E9%83%A8%E7%BD%B2coredns/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;k8s集群中的应用通常是通过ingress实现微服务发布的，前文介绍过在K8S集群中使用traefik实现服务的自动发布，其实现方式是traefik通过集群的DNS服务来解析service对应的集群地址（clusterip），从而将用户的访问请求转发到集群地址上。因此，在部署完集群后的第一件事情应该是配置DNS服务，目前可选的方案有skydns, kube-dns, coredns。<br>&nbsp;&nbsp;&nbsp;&nbsp;kubedns是Kubernetes中的一个内置插件，目前作为一个独立的开源项目维护，见<a href="https://github.com/kubernetes/dns。该DNS服务器利用SkyDNS的库来为Kubernetes" target="_blank" rel="noopener">https://github.com/kubernetes/dns。该DNS服务器利用SkyDNS的库来为Kubernetes</a> pod和服务提供DNS请求。CoreDNS项目是SkyDNS2的作者，Miek Gieben采用更模块化，可扩展的框架构建,将此DNS服务器作为KubeDNS的替代品。CoreDNS作为CNCF中的托管的一个项目，在Kuberentes1.9版本中，使用kubeadm方式安装的集群可以通过以下命令直接安装CoreDNS。kubeadm init –feature-gates=CoreDNS=true</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>准备coredns的<a href="https://github.com/coredns/deployment.git" target="_blank" rel="noopener">yaml文件</a></p><a id="more"></a><p>首先我们的查看<code>cat /etc/kubernetes/kubelet</code> dns的ip地址是多少，这里我的是<code>10.254.0.2</code>，根据自己的情况进行修改</p><ul><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./deploy.sh -i 10.254.0.2 | kubectl apply -f -</span></span><br><span class="line">serviceaccount/coredns created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:coredns created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:coredns created</span><br><span class="line">configmap/coredns created</span><br><span class="line">deployment.apps/coredns created</span><br><span class="line">service/kube-dns created</span><br></pre></td></tr></table></figure></li><li><p>擦看coredns信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod,svc,deployment,rc -n kube-system|grep dns</span></span><br><span class="line">pod/coredns-799775f9b6-mgdc9                1/1     Running   0          12m</span><br><span class="line">pod/coredns-799775f9b6-v95lp                1/1     Running   0          12m</span><br><span class="line">service/kube-dns               ClusterIP   10.254.0.2       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   12m</span><br><span class="line"></span><br><span class="line">deployment.extensions/coredns                2/2     2            2           12m</span><br></pre></td></tr></table></figure></li></ul><h3 id="部署-DNS-自动扩容"><a href="#部署-DNS-自动扩容" class="headerlink" title="部署 DNS 自动扩容"></a>部署 DNS 自动扩容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在大规模集群的情况下，可能需要集群 DNS 自动扩容，具体文档请参考 DNS Horizontal Autoscaler，DNS 扩容算法可参考 Github，如有需要请自行修改；以下为具体配置</p><ul><li><p>dns-horizontal-autoscaler.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kind: ServiceAccount</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns-autoscaler</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: system:kube-dns-autoscaler</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"nodes"</span>]</span><br><span class="line">    verbs: [<span class="string">"list"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"replicationcontrollers/scale"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"extensions"</span>]</span><br><span class="line">    resources: [<span class="string">"deployments/scale"</span>, <span class="string">"replicasets/scale"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"update"</span>]</span><br><span class="line"><span class="comment"># Remove the configmaps rule once below issue is fixed:</span></span><br><span class="line"><span class="comment"># kubernetes-incubator/cluster-proportional-autoscaler#16</span></span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"configmaps"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"create"</span>]</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: system:kube-dns-autoscaler</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: kube-dns-autoscaler</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:kube-dns-autoscaler</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns-autoscaler</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns-autoscaler</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kube-dns-autoscaler</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kube-dns-autoscaler</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">    spec:</span><br><span class="line">      priorityClassName: system-cluster-critical</span><br><span class="line">      containers:</span><br><span class="line">      - name: autoscaler</span><br><span class="line">        image: gcr.azk8s.cn/google_containers/cluster-proportional-autoscaler-amd64:1.1.2-r2</span><br><span class="line">        resources:</span><br><span class="line">            requests:</span><br><span class="line">                cpu: <span class="string">"20m"</span></span><br><span class="line">                memory: <span class="string">"10Mi"</span></span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">          - /cluster-proportional-autoscaler</span><br><span class="line">          - --namespace=kube-system</span><br><span class="line">          - --configmap=kube-dns-autoscaler</span><br><span class="line">          <span class="comment"># Should keep target in sync with cluster/addons/dns/kube-dns.yaml.base</span></span><br><span class="line">          - --target=Deployment/coredns</span><br><span class="line">          <span class="comment"># When cluster is using large nodes(with more cores), "coresPerReplica" should dominate.</span></span><br><span class="line">          <span class="comment"># If using small nodes, "nodesPerReplica" should dominate.</span></span><br><span class="line">          - --default-params=&#123;<span class="string">"linear"</span>:&#123;<span class="string">"coresPerReplica"</span>:256,<span class="string">"nodesPerReplica"</span>:16,<span class="string">"preventSinglePointFailure"</span>:<span class="literal">true</span>&#125;&#125;</span><br><span class="line">          - --logtostderr=<span class="literal">true</span></span><br><span class="line">          - --v=2</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: <span class="string">"CriticalAddonsOnly"</span></span><br><span class="line">        operator: <span class="string">"Exists"</span></span><br><span class="line">      serviceAccountName: kube-dns-autoscaler</span><br></pre></td></tr></table></figure></li><li><p>执行创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f dns-horizontal-autoscaler.yaml </span></span><br><span class="line">serviceaccount/kube-dns-autoscaler created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:kube-dns-autoscaler created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:kube-dns-autoscaler created</span><br><span class="line">deployment.apps/kube-dns-autoscaler created</span><br></pre></td></tr></table></figure></li></ul><p>执行创建以后我们可以看到pod 创建了两个dns</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n kube-system|grep coredns</span></span><br><span class="line">coredns-68676b6b88-pw9c2                1/1     Running   0          7m18s</span><br><span class="line">coredns-68676b6b88-tgbbv                1/1     Running   0          100m</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>coredns</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署mysql</title>
    <url>/2019/08/24/k8s%E9%83%A8%E7%BD%B2mysql/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;后端存储利用nfs来进行存储数据，nfs安装不阐述，需要注意注意的是在创建mysql 的共享目录的时候参数设定<code>/data/mysql *(rw,sync,no_root_squash,no_subtree_check)</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl  restart nfs.service</span><br><span class="line">$ sudo exportfs -arv</span><br></pre></td></tr></table></figure><h3 id="1、创建mysql存储"><a href="#1、创建mysql存储" class="headerlink" title="1、创建mysql存储"></a>1、创建mysql存储</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat mysql-pvc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: pvc001</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 10Gi</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteMany</span><br><span class="line">  persistentVolumeReclaimPolicy: Delete</span><br><span class="line">  nfs:</span><br><span class="line">    server: 172.21.16.240</span><br><span class="line">    path: /data/mysql</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-pvc</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 10Gi</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、部署mysql"><a href="#2、部署mysql" class="headerlink" title="2、部署mysql"></a>2、部署mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat mysql-deploy.yaml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-deploy</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: mysql-ops</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels: </span><br><span class="line">        name: mysql-ops</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: mysql</span><br><span class="line">          image: mysql:8.0.12</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          env:</span><br><span class="line">          - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">            value: <span class="string">"noc-mysql"</span></span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 3306</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: mysql-persistent-storage</span><br><span class="line">              mountPath: <span class="string">"/var/lib/mysql"</span></span><br><span class="line">      volumes:</span><br><span class="line">        - name: mysql-persistent-storage</span><br><span class="line">          persistentVolumeClaim:</span><br><span class="line">            claimName: mysql-pvc</span><br></pre></td></tr></table></figure><h3 id="3、设置端口映射"><a href="#3、设置端口映射" class="headerlink" title="3、设置端口映射"></a>3、设置端口映射</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat mysql-svc.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql-svc</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  labels: </span><br><span class="line">    name: mysql-svc</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 3306</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 3306</span><br><span class="line">    name: http</span><br><span class="line">    nodePort: 30003</span><br><span class="line">  selector:</span><br><span class="line">    name: mysql-ops</span><br></pre></td></tr></table></figure><h3 id="4、查看pod部署"><a href="#4、查看pod部署" class="headerlink" title="4、查看pod部署"></a>4、查看pod部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod -n kube-ops</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/8364iqhkdaskda.png" alt="img"></p><h3 id="5、查看mysql部署哪个node节点"><a href="#5、查看mysql部署哪个node节点" class="headerlink" title="5、查看mysql部署哪个node节点"></a>5、查看mysql部署哪个node节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod -o wide -n kube-ops</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/42joud02jef24.png" alt="img"></p><h3 id="6、进入mysql容器"><a href="#6、进入mysql容器" class="headerlink" title="6、进入mysql容器"></a>6、进入mysql容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo docker ps -a</span><br><span class="line">$ sudo docker <span class="built_in">exec</span> -it ded7f2990db5 /bin/bash</span><br><span class="line">root@mysql-deploy-6dc5d9786b-lgkxk:/<span class="comment"># mysql -h127.0.0.1 -uroot -pnoc-mysql</span></span><br></pre></td></tr></table></figure><h4 id="6-1、设置mysql"><a href="#6-1、设置mysql" class="headerlink" title="6.1、设置mysql"></a>6.1、设置mysql</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter user <span class="string">'root'</span>@<span class="string">'%'</span> identified with mysql_native_password by<span class="string">'root'</span>;</span><br><span class="line">mysql&gt; alter  user <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'mysql'</span>;</span><br><span class="line">mysql&gt; alter  user <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'noc-mysql'</span>;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;退出mysql和容器，执行quit;退出mysql，按ctrl+p+q从容器中返回node主机。利用navicat 通过node主机的ip地址和端口30003连接mysql数据库<br><img src="https://img.xxlaila.cn/2348wndssmadklj3.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s角色访问RBAC</title>
    <url>/2019/08/24/k8s%E8%A7%92%E8%89%B2%E8%AE%BF%E9%97%AERBAC/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="1、rbac介绍"><a href="#1、rbac介绍" class="headerlink" title="1、rbac介绍"></a>1、rbac介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes中的两个用于配置信息的重要资源对象：ConfigMap和Secret，其实到这里我们基本上学习的内容已经覆盖到Kubernetes中一些重要的资源对象了，来部署一个应用程序是完全没有问题的了。在我们演示一个完整的示例之前，我们还需要给大家讲解一个重要的概念：RBAC - 基于角色的访问控制。<br>&nbsp;&nbsp;&nbsp;&nbsp;RBAC使用rbac.authorization.k8s.io API Group 来实现授权决策，允许管理员通过 Kubernetes API 动态配置策略，要启用RBAC，需要在 apiserver 中添加参数–authorization-mode=RBAC，如果使用的kubeadm安装的集群，1.6 版本以上的都默认开启了RBAC，可以通过查看 Master 节点上 apiserver 的静态Pod定义文件：</p><h3 id="2、-kubernetes-关于空间权限赋予"><a href="#2、-kubernetes-关于空间权限赋予" class="headerlink" title="2、 kubernetes 关于空间权限赋予"></a>2、 kubernetes 关于空间权限赋予</h3><h4 id="1、获取并查看"><a href="#1、获取并查看" class="headerlink" title="1、获取并查看"></a>1、获取并查看</h4><ul><li>Role</li><li>ClusterRole</li><li>RoleBinding</li><li>ClusterRoleBinding</li></ul><a id="more"></a><ul><li><p>1.1、查看kube-system namespace下的所有role</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get role -n kube-system</span><br></pre></td></tr></table></figure></li><li><p>1.2、查看某个role定义的资源权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get role &lt;role-name&gt; -n kube-system -o yaml</span><br></pre></td></tr></table></figure></li><li><p>1.3、查看kube-system namespace下所有的rolebinding</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get rolebinding -n kube-system</span><br></pre></td></tr></table></figure></li><li><p>1.4、查看kube-system namespace下的某个rolebinding详细信息（绑定的Role和subject）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get rolebinding &lt;rolebind-name&gt; -n kube-system -o yaml</span><br></pre></td></tr></table></figure></li><li><p>1.5、查看集群所有的clusterrole</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get clusterrole</span><br></pre></td></tr></table></figure></li><li><p>1.6、查看某个clusterrole定义的资源权限详细信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get clusterrole &lt;clusterrole-name&gt; -o yaml</span><br></pre></td></tr></table></figure></li><li><p>1.7、查看所有的clusterrolebinding</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get clusterrolebinding</span><br></pre></td></tr></table></figure></li><li><p>1.8、查看某一clusterrolebinding的详细信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get clusterrolebinding &lt;clusterrolebinding-name&gt; -o yaml</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、kubectl命令可以用于在命名空间内或者整个集群内授予角色。"><a href="#2、kubectl命令可以用于在命名空间内或者整个集群内授予角色。" class="headerlink" title="2、kubectl命令可以用于在命名空间内或者整个集群内授予角色。"></a>2、kubectl命令可以用于在命名空间内或者整个集群内授予角色。</h4><ul><li><p>在某一特定名字空间内授予Role或者ClusterRole。示例如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create rolebinding</span><br></pre></td></tr></table></figure></li><li><p>在名为”acme”的名字空间中将admin ClusterRole授予用户”bob”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create rolebinding bob-admin-binding --clusterrole=admin --user=bob --namespace=acme</span><br></pre></td></tr></table></figure></li><li><p>在名为”acme”的名字空间中将view ClusterRole授予服务账户”myapp”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create rolebinding myapp-view-binding --clusterrole=view --serviceaccount=acme:myapp --namespace=acme</span><br><span class="line">kubectl create clusterrolebinding</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、在整个集群中授予ClusterRole，包括所有名字空间。示例如下："><a href="#3、在整个集群中授予ClusterRole，包括所有名字空间。示例如下：" class="headerlink" title="3、在整个集群中授予ClusterRole，包括所有名字空间。示例如下："></a>3、在整个集群中授予ClusterRole，包括所有名字空间。示例如下：</h4><ul><li><p>在整个集群范围内将cluster-admin ClusterRole授予用户”root”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding root-cluster-admin-binding --clusterrole=cluster-admin --user=root</span><br></pre></td></tr></table></figure></li><li><p>在整个集群范围内将system:node ClusterRole授予用户”kubelet”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding kubelet-node-binding --clusterrole=system:node --user=kubelet</span><br></pre></td></tr></table></figure></li><li><p>在整个集群范围内将view ClusterRole授予名字空间”acme”内的服务账户”myapp”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding myapp-view-binding --clusterrole=view --serviceaccount=acme:myapp</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、对某一个namespace赋予jenkins部署权限"><a href="#4、对某一个namespace赋予jenkins部署权限" class="headerlink" title="4、对某一个namespace赋予jenkins部署权限"></a>4、对某一个namespace赋予jenkins部署权限</h4><ul><li><p>查看kube-ops 下面的角色</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get role -n kube-ops</span></span><br><span class="line">NAME       AGE</span><br><span class="line">jenkins2   2d6h</span><br></pre></td></tr></table></figure></li><li><p>查看role定义的资源权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get role jenkins2 -n kube-ops -o yaml</span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">"2019-01-14T03:07:25Z"</span></span><br><span class="line">  name: jenkins2</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  resourceVersion: <span class="string">"2389179"</span></span><br><span class="line">  selfLink: /apis/rbac.authorization.k8s.io/v1/namespaces/kube-ops/roles/jenkins2</span><br><span class="line">  uid: 84762132-17a9-11e9-8991-fa163e14c5bd</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  verbs:</span><br><span class="line">  - create</span><br><span class="line">  - delete</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - patch</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods/<span class="built_in">exec</span></span><br><span class="line">  verbs:</span><br><span class="line">  - create</span><br><span class="line">  - delete</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - patch</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods/<span class="built_in">log</span></span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - secrets</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br></pre></td></tr></table></figure></li><li><p>创建jenkins2的权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-zxc-test-3 ~]<span class="comment"># kubectl -n kube-system create sa jenkins2</span></span><br><span class="line">serviceaccount/jenkins2 created</span><br></pre></td></tr></table></figure></li><li><p>授权访问</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-zxc-test-3 ~]<span class="comment"># kubectl create clusterrolebinding jenkins2 --clusterrole cluster-admin --serviceaccount=kube-ops:jenkins2</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/jenkins2 created</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>RBAC</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s heapster</title>
    <url>/2019/08/24/k8s-heapster/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="1、heapster-介绍"><a href="#1、heapster-介绍" class="headerlink" title="1、heapster 介绍"></a>1、heapster 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Heapster是容器集群监控和性能分析工具,支持Kubernetes和CoreOS。<br>&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes有个监控agent—cAdvisor。在每个kubernetes Node上都会运行cAdvisor,它会收集本机以及容器的监控数据(cpu,memory,filesystem,network,uptime)。在较新的版本中，K8S已经将cAdvisor功能集成到kubelet组件中。每个Node节点可以直接进行web访问。</p><h3 id="2、heapster-安装"><a href="#2、heapster-安装" class="headerlink" title="2、heapster 安装"></a>2、heapster 安装</h3><p>下载heapster的<a href="https://github.com/kubernetes-retired/heapster/tree/master/deploy/kube-config" target="_blank" rel="noopener">yaml文件</a>，下载完成后我们需要对文件修改，以满足我们的的需求.</p><h4 id="2-1、grafana修改"><a href="#2-1、grafana修改" class="headerlink" title="2.1、grafana修改"></a>2.1、grafana修改</h4><p>grafana添加nodePort: 30003让grafana支持外部访问，我们可以通过这个端口进行但单独的页面配置。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat grafana.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: monitoring-grafana</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        task: monitoring</span><br><span class="line">        k8s-app: grafana</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: grafana</span><br><span class="line">        image: k8s.gcr.io/heapster-grafana-amd64:v5.0.4</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 3000</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /etc/ssl/certs</span><br><span class="line">          name: ca-certificates</span><br><span class="line">          readOnly: <span class="literal">true</span></span><br><span class="line">        - mountPath: /var</span><br><span class="line">          name: grafana-storage</span><br><span class="line">        env:</span><br><span class="line">        - name: INFLUXDB_HOST</span><br><span class="line">          value: monitoring-influxdb</span><br><span class="line">        - name: GF_SERVER_HTTP_PORT</span><br><span class="line">          value: <span class="string">"3000"</span></span><br><span class="line">          <span class="comment"># The following env variables are required to make Grafana accessible via</span></span><br><span class="line">          <span class="comment"># the kubernetes api-server proxy. On production clusters, we recommend</span></span><br><span class="line">          <span class="comment"># removing these env variables, setup auth for grafana, and expose the grafana</span></span><br><span class="line">          <span class="comment"># service using a LoadBalancer or a public IP.</span></span><br><span class="line">        - name: GF_AUTH_BASIC_ENABLED</span><br><span class="line">          value: <span class="string">"false"</span></span><br><span class="line">        - name: GF_AUTH_ANONYMOUS_ENABLED</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">        - name: GF_AUTH_ANONYMOUS_ORG_ROLE</span><br><span class="line">          value: Admin</span><br><span class="line">        - name: GF_SERVER_ROOT_URL</span><br><span class="line">          <span class="comment"># If you're only using the API Server proxy, set this value instead:</span></span><br><span class="line">          <span class="comment"># value: /api/v1/namespaces/kube-system/services/monitoring-grafana/proxy</span></span><br><span class="line">          value: /</span><br><span class="line">      volumes:</span><br><span class="line">      - name: ca-certificates</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /etc/ssl/certs</span><br><span class="line">      - name: grafana-storage</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">'true'</span></span><br><span class="line">    kubernetes.io/name: monitoring-grafana</span><br><span class="line">  name: monitoring-grafana</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># In a production setup, we recommend accessing Grafana through an external Loadbalancer</span></span><br><span class="line">  <span class="comment"># or through a public IP.</span></span><br><span class="line">  <span class="comment"># type: LoadBalancer</span></span><br><span class="line">  <span class="comment"># You could also use NodePort to expose the service at a randomly-generated port</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 3000</span><br><span class="line">    nodePort: 30003</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: grafana</span><br></pre></td></tr></table></figure><h4 id="2-2、heapster文件修改"><a href="#2-2、heapster文件修改" class="headerlink" title="2.2、heapster文件修改"></a>2.2、heapster文件修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- --<span class="built_in">source</span>=kubernetes:https://kubernetes.default?useServiceAccount=<span class="literal">true</span>&amp;kubeletHttps=<span class="literal">true</span>&amp;kubeletPort=10250&amp;insecure=<span class="literal">true</span></span><br><span class="line">连接k8s api的地址，默认是kubernetes.default，后面一段加入用户认证，端口，以及https;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- --sink=influxdb:http://monitoring-influxdb.kube-system.svc:8086</span><br><span class="line">指定 influxdb数据库的地址，这个在infuxdb文件里面有这个域名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat heapster.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        task: monitoring</span><br><span class="line">        k8s-app: heapster</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: heapster</span><br><span class="line">      containers:</span><br><span class="line">      - name: heapster</span><br><span class="line">        image: k8s.gcr.io/heapster-amd64:v1.5.4</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /heapster</span><br><span class="line">        - --<span class="built_in">source</span>=kubernetes:https://kubernetes.default?useServiceAccount=<span class="literal">true</span>&amp;kubeletHttps=<span class="literal">true</span>&amp;kubeletPort=10250&amp;insecure=<span class="literal">true</span></span><br><span class="line">        - --sink=influxdb:http://monitoring-influxdb.kube-system.svc:8086</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    task: monitoring</span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">'true'</span></span><br><span class="line">    kubernetes.io/name: Heapster</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 8082</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: heapster</span><br></pre></td></tr></table></figure><h3 id="3、执行创建heapster"><a href="#3、执行创建heapster" class="headerlink" title="3、执行创建heapster"></a>3、执行创建heapster</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubect create -f ./</span></span><br></pre></td></tr></table></figure><p>在执行创建完成后，等待一会显示图像<br><img src="https://img.xxlaila.cn/459348skndiy923s.png" alt="img"><br><img src="https://img.xxlaila.cn/34293knsdalsk0329.png" alt="img"></p><h4 id="3-1、访问grafana是否正常"><a href="#3-1、访问grafana是否正常" class="headerlink" title="3.1、访问grafana是否正常"></a>3.1、访问grafana是否正常</h4><p>前面在grafana文件里面增加了nodePoer: 30003的端口，我们可以通过任意节点ip:30003进行访问grafana界面。</p><p><img src="https://img.xxlaila.cn/453847sndkniuy234wds.png" alt="img"><br><strong>可以进行配置grafana。</strong></p><h3 id="influxdb-使用pvc-进行挂在，数据存储到nfs上"><a href="#influxdb-使用pvc-进行挂在，数据存储到nfs上" class="headerlink" title="influxdb 使用pvc 进行挂在，数据存储到nfs上"></a>influxdb 使用pvc 进行挂在，数据存储到nfs上</h3><h4 id="修改influxdb文件"><a href="#修改influxdb文件" class="headerlink" title="修改influxdb文件"></a>修改influxdb文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">volumes:</span><br><span class="line">     - name: influxdb-storage</span><br><span class="line">       persistentVolumeClaim:</span><br><span class="line">         claimName: influxdb-pvc</span><br></pre></td></tr></table></figure><h4 id="新建influxdb-pvc"><a href="#新建influxdb-pvc" class="headerlink" title="新建influxdb-pvc"></a>新建influxdb-pvc</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt; influxdb-pvc.yaml &lt;&lt;EOF</span></span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: influxdb-pvc</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  storageClassName: xxlaila-nfs-storage</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 20Gi</span><br></pre></td></tr></table></figure><h4 id="执行创建"><a href="#执行创建" class="headerlink" title="执行创建"></a>执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubelet delete -f influxdb.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubelet apply -f influxdb-pvc.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubelet apply -f influxdb.yaml</span></span><br></pre></td></tr></table></figure><p>最新文件已经修改，下载即可使用。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>heapster</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署eureka集群</title>
    <url>/2019/08/24/k8s%E9%83%A8%E7%BD%B2eureka%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>eureka 不阐述介绍，这里直接开始在kubernetes下部署eureka集群</p><h3 id="1、配置文件的增加"><a href="#1、配置文件的增加" class="headerlink" title="1、配置文件的增加"></a>1、配置文件的增加</h3><p>eureka 只一个有状态的服务，部署有状态服务我们可以使用StatefulSet</p><h4 id="1-1、增加dockerfile"><a href="#1-1、增加dockerfile" class="headerlink" title="1.1、增加dockerfile"></a>1.1、增加dockerfile</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat Dockerfile</span><br><span class="line">FROM docker.io/xxlaila/centos7.6-jdk1.8:latest</span><br><span class="line">MAINTAINER xxlaila <span class="string">"cq_xxlaila@163.com"</span></span><br><span class="line"><span class="comment"># Install dependent plugin</span></span><br><span class="line"></span><br><span class="line">ADD target/kxl-eureka.jar /opt/webapps/kxl-eureka.jar</span><br><span class="line">ADD application.yaml /opt/webapps/application.yaml</span><br><span class="line"></span><br><span class="line">WORKDIR /opt/webapps</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"-Dspring.profiles.active=dev"</span>, <span class="string">"kxl-eureka.jar"</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1-2、修改配置文件"><a href="#1-2、修改配置文件" class="headerlink" title="1.2、修改配置文件"></a>1.2、修改配置文件</h4><p>在做eureka集群的时候，application.yaml的配置文件很重要，配置文件做不好，将会直接影响到eureka的启动，还有集群的模式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat application.yaml</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: kxl-eureka</span><br><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line"><span class="comment">#    prefer-ip-address: true</span></span><br><span class="line">    hostname: <span class="variable">$&#123;EUREKA_HOST_NAME:peer1&#125;</span> <span class="comment">#服务主机名</span></span><br><span class="line">    appname: <span class="variable">$&#123;spring.application.name&#125;</span>  <span class="comment">#服务名称，默认为 unknow 这里直接取 spring.application.name 了</span></span><br><span class="line">    <span class="comment"># server 从最后一次收到心跳到移除废弃服务的超时时间（秒）</span></span><br><span class="line">    lease-expiration-duration-in-seconds: 90</span><br><span class="line">    <span class="comment"># client 给 server 发送心跳的间隔时间（秒），比 lease-expiration-duration-in-seconds 小</span></span><br><span class="line">    lease-renewal-interval-in-seconds: 30</span><br><span class="line"></span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: <span class="variable">$&#123;EUREKA_URL_LIST:http://peer1:8761/eureka/&#125;</span> <span class="comment"># 指定服务中心 eureka server的地址</span></span><br><span class="line">    <span class="comment"># client 是否从eureka上拉取注册信息， server模式可关掉</span></span><br><span class="line">    fetch-registry: <span class="variable">$&#123;BOOL_FETCH:true&#125;</span>   <span class="comment"># 是否拉取 eureka server 的注册信息。 默认为true</span></span><br><span class="line">    <span class="comment"># client 是否注册到eureka上， server模式可关掉</span></span><br><span class="line">    register-with-eureka: <span class="variable">$&#123;BOOL_REGISTER:true&#125;</span>  <span class="comment"># 是否把服务中心本身当做eureka client 注册。默认为true</span></span><br><span class="line">    <span class="comment"># client 间隔多久去拉去服务信息(秒)</span></span><br><span class="line">    registry-fetch-interval-seconds: 30</span><br><span class="line">  server:</span><br><span class="line">    <span class="comment"># 自我保护机制，应对网络闪断情况，大面积丢失过多的client，不删除服务</span></span><br><span class="line">    <span class="built_in">enable</span>-self-preservation: <span class="variable">$&#123;SELF_PRESERVATION:true&#125;</span>     <span class="comment"># 是否开启自我保护。 默认为 true.</span></span><br><span class="line">    <span class="comment"># 每分钟心跳数 实际/期望，如果小于阈值(threshold)，则触发自我保护机制</span></span><br><span class="line">    renewal-percent-threshold: 0.85</span><br><span class="line">    <span class="comment"># 扫描失效服务的间隔时间（毫秒）</span></span><br><span class="line">    eviction-interval-timer-in-ms: 60000</span><br><span class="line"></span><br><span class="line">  application:</span><br><span class="line">    name: <span class="variable">$&#123;EUREKA_APPLICATION_NAME:eureka-server&#125;</span></span><br></pre></td></tr></table></figure><h4 id="1-3、创建-eureka-docker镜像"><a href="#1-3、创建-eureka-docker镜像" class="headerlink" title="1.3、创建 eureka docker镜像"></a>1.3、创建 eureka docker镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t xxlaila/kxl-eureka:v1 .</span><br><span class="line">$ docker push xxlaila/kxl-eureka:v1</span><br></pre></td></tr></table></figure><h3 id="2、在k8s创建eureka集群"><a href="#2、在k8s创建eureka集群" class="headerlink" title="2、在k8s创建eureka集群"></a>2、在k8s创建eureka集群</h3><h4 id="2-1、创建eureka集群"><a href="#2-1、创建eureka集群" class="headerlink" title="2.1、创建eureka集群"></a>2.1、创建eureka集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat kxl-eureka.yaml</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: eureka</span><br><span class="line">  namespace: kube-dev</span><br><span class="line">  labels:</span><br><span class="line">    app: eureka</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8761</span><br><span class="line">    name: eureka</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: eureka</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: eureka</span><br><span class="line">  namespace: kube-dev</span><br><span class="line">spec:</span><br><span class="line">  serviceName: <span class="string">"eureka"</span></span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: eureka</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: eureka</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: eureka</span><br><span class="line">        image:  docker.io/xxlaila/kxl-eureka:v1</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8761</span><br><span class="line">        env:</span><br><span class="line">        - name: MY_POD_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.name</span><br><span class="line">          <span class="comment"># Due to camelcase issues with "defaultZone" and "preferIpAddress", _JAVA_OPTIONS is used here</span></span><br><span class="line">        - name: eureka_client_serviceUrl_defaultZone</span><br><span class="line">          <span class="comment">#value: http://eureka-0.eureka.&lt;namespace&gt;.svc.cluster.local:8761/eureka/,http://eureka-1.eureka.&lt;namespace&gt;.svc.cluster.local:8761/eureka/</span></span><br><span class="line">          value: http://eureka-0.eureka:8761/eureka/,http://eureka-1.eureka:8761/eureka/,http://eureka-2.eureka:8761/eureka/</span><br><span class="line">        - name: EUREKA_CLIENT_REGISTERWITHEUREKA</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">        - name: EUREKA_CLIENT_FETCHREGISTRY</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">          <span class="comment"># In the docker image, this is set to localhost. Otherwise, we could leave this empty.</span></span><br><span class="line">          <span class="comment"># The hostnames must match with the the eureka serviceUrls, otherwise the replicas are reported as unavailable in the eureka dashboard</span></span><br><span class="line">        - name: EUREKA_INSTANCE_HOSTNAME</span><br><span class="line">          <span class="comment">#value: "$(MY_POD_NAME).eureka.&lt;namespace.svc.cluster.local"</span></span><br><span class="line">          value: <span class="string">"<span class="variable">$(MY_POD_NAME)</span>.eureka"</span></span><br><span class="line">          <span class="comment">#value: eureka</span></span><br><span class="line">          <span class="comment"># For the other (stateless) services, this should probably be set to true, since their pods have no DNS-resolvable  hostnames</span></span><br><span class="line">       <span class="comment">#- name: EUREKA_INSTANCE_PREFERIPADDRESS</span></span><br><span class="line">       <span class="comment">#  value: "false"</span></span><br><span class="line">  <span class="comment"># No need to start the pods in order. We just need the stable network identity</span></span><br><span class="line">  podManagementPolicy: <span class="string">"Parallel"</span></span><br></pre></td></tr></table></figure><p>在做这个的时候其实遇到了很多坑，也是参考一些文章才完成的,<a href="https://github.com/kingschan1204/blog/issues/5" target="_blank" rel="noopener">参考文献</a></p><h4 id="2-2、创建eureka-Ingress"><a href="#2-2、创建eureka-Ingress" class="headerlink" title="2.2、创建eureka Ingress"></a>2.2、创建eureka Ingress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat eureka-ingress.yaml</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: eureka-ingress</span><br><span class="line">  namespace: kube-dev</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: <span class="string">"nginx"</span></span><br><span class="line">    nginx.ingress.kubernetes.io/secure-backends: <span class="string">"true"</span></span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: eureka.xxlaila.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: eureka</span><br><span class="line">          servicePort: 8761</span><br></pre></td></tr></table></figure><h4 id="2-3、执行创建"><a href="#2-3、执行创建" class="headerlink" title="2.3、执行创建"></a>2.3、执行创建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f .</span><br><span class="line">$ kubectl get pods -n kube-dev</span><br><span class="line">NAME       READY   STATUS    RESTARTS   AGE</span><br><span class="line">eureka-0   1/1     Running   0          21m</span><br><span class="line">eureka-1   1/1     Running   0          21m</span><br><span class="line">eureka-2   1/1     Running   0          21m</span><br><span class="line">$ kubectl get pods,svc,rs -n kube-dev</span><br><span class="line">NAME           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/eureka-0   1/1     Running   0          21m</span><br><span class="line">pod/eureka-1   1/1     Running   0          21m</span><br><span class="line">pod/eureka-2   1/1     Running   0          21m</span><br><span class="line"></span><br><span class="line">NAME             TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service/eureka   ClusterIP   None         &lt;none&gt;        8761/TCP   21m</span><br></pre></td></tr></table></figure><h4 id="2-4、访问验证"><a href="#2-4、访问验证" class="headerlink" title="2.4、访问验证"></a>2.4、访问验证</h4><p><img src="https://img.xxlaila.cn/34239uskdnksjda.png" alt="img"><br>通过域名访问：<br><img src="https://img.xxlaila.cn/89745jkndklsajkdhsajkbfa.png" alt="img"></p><h3 id="3、eureka-环境"><a href="#3、eureka-环境" class="headerlink" title="3、eureka 环境"></a>3、eureka 环境</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;根据2.4小节可以看到，enviroonment为test，我们在dockerfile指定的为dev，所以这里就有点差池，但是查看了一下资料，这个要么就写多个application.yaml的配置文件，要么就打多个包，这样就比较麻烦，而且考虑到公司微服务的特殊性，既要满足于公司的微服务架构，有要考虑的模版的通用性，还需要考虑运维维护的便捷性。下面一起来看看基于公司的定制化来改变这个局限性。</p><h4 id="3-1、公司的系统环境变量"><a href="#3-1、公司的系统环境变量" class="headerlink" title="3.1、公司的系统环境变量"></a>3.1、公司的系统环境变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONFIG_API_SERVER=http://api.conf.xxlaila.io</span><br><span class="line">RUN_CLUSTER=default</span><br><span class="line">RUN_MODE=AUTO</span><br><span class="line">RUN_ENV=demo</span><br><span class="line">CONFIG_API_SERVER：公司配置中心api的地址，app拉取配置中心的配置</span><br><span class="line">RUN_CLUSTER：默认集群，做灰度发布使用</span><br><span class="line">RUN_MODE：</span><br><span class="line">RUN_ENV：当前系统所运行的环境</span><br></pre></td></tr></table></figure><h4 id="3-2、修改eureka的配置文件"><a href="#3-2、修改eureka的配置文件" class="headerlink" title="3.2、修改eureka的配置文件"></a>3.2、修改eureka的配置文件</h4><p>增加配置eureka:<code>environment: ${RUN_ENV}</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat application.yaml</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: kxl-eureka</span><br><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line">eureka:</span><br><span class="line">  environment: <span class="variable">$&#123;RUN_ENV&#125;</span></span><br><span class="line">  instance:</span><br><span class="line"><span class="comment">#    prefer-ip-address: true</span></span><br><span class="line">    hostname: <span class="variable">$&#123;EUREKA_HOST_NAME:peer1&#125;</span></span><br><span class="line">    appname: <span class="variable">$&#123;spring.application.name&#125;</span></span><br><span class="line">    <span class="comment"># server 从最后一次收到心跳到移除废弃服务的超时时间（秒）</span></span><br><span class="line">    lease-expiration-duration-in-seconds: 90</span><br><span class="line">    <span class="comment"># client 给 server 发送心跳的间隔时间（秒），比 lease-expiration-duration-in-seconds 小</span></span><br><span class="line">    lease-renewal-interval-in-seconds: 30</span><br><span class="line"></span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: <span class="variable">$&#123;EUREKA_URL_LIST:http://peer1:8761/eureka/&#125;</span></span><br><span class="line">    <span class="comment"># client 是否从eureka上拉取注册信息， server模式可关掉</span></span><br><span class="line">    fetch-registry: <span class="variable">$&#123;BOOL_FETCH:true&#125;</span></span><br><span class="line">    <span class="comment"># client 是否注册到eureka上， server模式可关掉</span></span><br><span class="line">    register-with-eureka: <span class="variable">$&#123;BOOL_REGISTER:true&#125;</span></span><br><span class="line">    <span class="comment"># client 间隔多久去拉去服务信息(秒)</span></span><br><span class="line">    registry-fetch-interval-seconds: 30</span><br><span class="line">  server:</span><br><span class="line">    <span class="comment"># 自我保护机制，应对网络闪断情况，大面积丢失过多的client，不删除服务</span></span><br><span class="line">    <span class="built_in">enable</span>-self-preservation: <span class="variable">$&#123;SELF_PRESERVATION:true&#125;</span></span><br><span class="line">    <span class="comment"># 每分钟心跳数 实际/期望，如果小于阈值(threshold)，则触发自我保护机制</span></span><br><span class="line">    renewal-percent-threshold: 0.85</span><br><span class="line">    <span class="comment"># 扫描失效服务的间隔时间（毫秒）</span></span><br><span class="line">    eviction-interval-timer-in-ms: 60000</span><br><span class="line"></span><br><span class="line">  application:</span><br><span class="line">    name: <span class="variable">$&#123;EUREKA_APPLICATION_NAME:eureka-server&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-3、修改eureka部署文件"><a href="#3-3、修改eureka部署文件" class="headerlink" title="3.3、修改eureka部署文件"></a>3.3、修改eureka部署文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat kxl-eureka.yaml </span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: eureka</span><br><span class="line">  namespace: kube-dev</span><br><span class="line">  labels:</span><br><span class="line">    app: eureka</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8761</span><br><span class="line">    name: eureka</span><br><span class="line">  clusterIP: None</span><br><span class="line">  selector:</span><br><span class="line">    app: eureka</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1beta1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: eureka</span><br><span class="line">  namespace: kube-dev</span><br><span class="line">spec:</span><br><span class="line">  serviceName: <span class="string">"eureka"</span></span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: eureka</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: eureka</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: eureka</span><br><span class="line">        image:  docker.io/xxlaila/kxl-eureka:v2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8761</span><br><span class="line">        env:</span><br><span class="line">        - name: MY_POD_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.name</span><br><span class="line">          <span class="comment"># Due to camelcase issues with "defaultZone" and "preferIpAddress", _JAVA_OPTIONS is used here</span></span><br><span class="line">        - name: eureka_client_serviceUrl_defaultZone</span><br><span class="line">          <span class="comment">#value: http://eureka-0.eureka.&lt;namespace&gt;.svc.cluster.local:8761/eureka/,http://eureka-1.eureka.&lt;namespace&gt;.svc.cluster.local:8761/eureka/</span></span><br><span class="line">          value: http://eureka-0.eureka:8761/eureka/,http://eureka-1.eureka:8761/eureka/,http://eureka-2.eureka:8761/eureka/</span><br><span class="line">        - name: EUREKA_CLIENT_REGISTERWITHEUREKA</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">        - name: EUREKA_CLIENT_FETCHREGISTRY</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">          <span class="comment"># In the docker image, this is set to localhost. Otherwise, we could leave this empty.</span></span><br><span class="line">          <span class="comment"># The hostnames must match with the the eureka serviceUrls, otherwise the replicas are reported as unavailable in the eureka dashboard</span></span><br><span class="line">        - name: EUREKA_INSTANCE_HOSTNAME</span><br><span class="line">          <span class="comment">#value: "$(MY_POD_NAME).eureka.&lt;namespace.svc.cluster.local"</span></span><br><span class="line">          value: <span class="string">"<span class="variable">$(MY_POD_NAME)</span>.eureka"</span></span><br><span class="line">        - name: RUN_ENV</span><br><span class="line">          value: <span class="built_in">test</span></span><br><span class="line">        - name: CONFIG_API_SERVER</span><br><span class="line">          value: http://api.conf.xxlaila.io</span><br><span class="line">        - name: RUN_CLUSTER</span><br><span class="line">          value: default</span><br><span class="line">        - name: RUN_MODE</span><br><span class="line">          value: AUTO</span><br><span class="line">          <span class="comment">#value: eureka</span></span><br><span class="line">          <span class="comment"># For the other (stateless) services, this should probably be set to true, since their pods have no DNS-resolvable  hostnames</span></span><br><span class="line">       <span class="comment">#- name: EUREKA_INSTANCE_PREFERIPADDRESS</span></span><br><span class="line">       <span class="comment">#  value: "false"</span></span><br><span class="line">  <span class="comment"># No need to start the pods in order. We just need the stable network identity</span></span><br><span class="line">  podManagementPolicy: <span class="string">"Parallel"</span></span><br></pre></td></tr></table></figure><h4 id="3-4、重建pod"><a href="#3-4、重建pod" class="headerlink" title="3.4、重建pod"></a>3.4、重建pod</h4><p>pod重建以后我们经过访问可以看到</p><p><img src="https://img.xxlaila.cn/453khskdha324.png" alt="img"><br><img src="https://img.xxlaila.cn/3746dfnks324.png" alt="img"></p><p><em>后续持续优化</em></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>jira接入LDAP</title>
    <url>/2019/08/24/jira%E6%8E%A5%E5%85%A5LDAP/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><blockquote><p>场景:<br>&nbsp;&nbsp;&nbsp;&nbsp;之前介绍了jira 和confluence的账户结合，jira和confluence可以使用一个账户，有人员离职之后直接在jira吧用户禁用即可，一端操作，方便两端，但是随着公司人员越来越多，这样的方式已经不在适合这种了，来一个用户就需要去创建，对运维来说，这是重复的工作，提升不了任何效率，而且枯草无味。这里我们就可以使用ldap，jira和confluence都是支持ldap，ldap的好处，这里不阐述，下面来看看如何配置jira介入ldap。confluence还是接入jira，这样我们就只操作ladp和jira，简单省事。</p></blockquote><blockquote><p>问题点:<br>&nbsp;&nbsp;&nbsp;&nbsp;由于在建立jira和confluence的时候还没有ldap，ldap是后期才接入的，所以这里就存在于怎么吧以前有jira登录的账户认证切换到ldap。而且不影响之前的文档，但是用户权限会影响，问题不大，可以添加。下面开始操作</p></blockquote><a id="more"></a><h3 id="1、进入jira用户管理页面"><a href="#1、进入jira用户管理页面" class="headerlink" title="1、进入jira用户管理页面"></a>1、进入jira用户管理页面</h3><p><img src="https://img.xxlaila.cn/image2018-7-12_11-12-55.png" alt="img"></p><h3 id="2、选择ldap，进入ldap配置页面"><a href="#2、选择ldap，进入ldap配置页面" class="headerlink" title="2、选择ldap，进入ldap配置页面"></a>2、选择ldap，进入ldap配置页面</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-32-32.png" alt="img"><br><img src="https://img.xxlaila.cn/image2019-6-12_15-32-48.png" alt="img"></p><h3 id="3、高级设置"><a href="#3、高级设置" class="headerlink" title="3、高级设置"></a>3、高级设置</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-33-17.png" alt="img"></p><h3 id="4、配置用户模式"><a href="#4、配置用户模式" class="headerlink" title="4、配置用户模式"></a>4、配置用户模式</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-33-35.png" alt="img"></p><h3 id="5、设置组模式"><a href="#5、设置组模式" class="headerlink" title="5、设置组模式"></a>5、设置组模式</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-33-55.png" alt="img"></p><h3 id="6、设置成员模式"><a href="#6、设置成员模式" class="headerlink" title="6、设置成员模式"></a>6、设置成员模式</h3><p>这里ldap一定要存在与ladp的group里面<br><img src="https://img.xxlaila.cn/image2019-6-12_15-34-23.png" alt="img"></p><h3 id="7、测试并保存"><a href="#7、测试并保存" class="headerlink" title="7、测试并保存"></a>7、测试并保存</h3><p>这里测试账户一定是ladp的账户<br><img src="https://img.xxlaila.cn/image2019-6-12_15-34-58.png" alt="img"></p><h3 id="8、同步账户"><a href="#8、同步账户" class="headerlink" title="8、同步账户"></a>8、同步账户</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-35-50.png" alt="img"></p><h3 id="9、用ladp账户登录测试"><a href="#9、用ladp账户登录测试" class="headerlink" title="9、用ladp账户登录测试"></a>9、用ladp账户登录测试</h3><p><img src="https://img.xxlaila.cn/image2019-6-12_15-36-53.png" alt="img"></p><h2 id="jira账户切换至ldap"><a href="#jira账户切换至ldap" class="headerlink" title="jira账户切换至ldap"></a>jira账户切换至ldap</h2><blockquote><p>jira配置ldap以后默认是本地账户和ldap是同时存在的，用户可以用以前的本地账户和ldap都登录，这里实现ldap登录，禁止本地登录。</p></blockquote><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul><li>jira的本地账户和ldap的账户名称必须一样</li><li>操作前请备份数据库</li><li>用户邮箱保持一致</li><li>密码无所谓，不需要统一</li></ul><h3 id="查看用户信息关联"><a href="#查看用户信息关联" class="headerlink" title="查看用户信息关联"></a>查看用户信息关联</h3><p>登录jira的数据库。然后找到cwd_user表</p><h4 id="cwd-user表"><a href="#cwd-user表" class="headerlink" title="cwd_user表"></a>cwd_user表</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;jira的前台不能直接去更改，只有更改数据库，进入数据库，找到一张cwd_user的表，里面包含了所有用户的登录账号信息，其中有一个字段directory_id的，这个字段我们可以看到本地账户的id是1，ldap同步过来的账户是10001，如下图：<br><img src="https://img.xxlaila.cn/1566617986314.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;继续看该表的credential字段，密码也有区别,本地账户是有一串加密后的字符串，ldap认证的是nopass，包括后面的external_id 也是有区别的，如下图<br><img src="https://img.xxlaila.cn/1566618124910.jpg" alt="img"></p><h4 id="cwd-directory表"><a href="#cwd-directory表" class="headerlink" title="cwd_directory表"></a>cwd_directory表</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在打开cwd_directory表，里面有两条数据，一个对应的是ldap，一个对应的本地，和cwd_user是对应的，如图：<br><img src="https://img.xxlaila.cn/image2019-6-13_10-0-47.png" alt="img"></p><h4 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;记住ldap目录的id，然后在cwd_user表里面删除ldap的相同账户的整条记录，因为要伪装原本系统自带的目录服务器，原来编辑的文件和内容为原先这个用户的id。修改directory_id 为ldap的id，还有一个需要修改的地方为CREDENTIAL的字段，把它修改为nopass。修改完成后需要重启jira，不重启不会生效，而且登录服务器还会报错。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;这里jira和confluence是做了关联的，jira修改以后，confluence也可以进行登录，无需在confluence在设置一次ldap;修改完成后，以前用户的管理员权限有问题，重新添加一次即可。不会影响其他的。设置文档，ldap权限要选择为只读，且为本地组。然后吧jia和confluence的普通组添加进去，否则用户进来没有权限</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jira</category>
      </categories>
      <tags>
        <tag>ldap</tag>
      </tags>
  </entry>
  <entry>
    <title>confluence与jira账户打通</title>
    <url>/2019/08/24/confluence%E4%B8%8Ejira%E8%B4%A6%E6%88%B7%E6%89%93%E9%80%9A/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p><a href="http://xxlaila.github.io/2019/08/24/confluence-install/" target="_blank" rel="noopener">confluence</a>安装</p><h3 id="登录confluence"><a href="#登录confluence" class="headerlink" title="登录confluence"></a>登录confluence</h3><p>点击用户管理</p><a id="more"></a><p><img src="https://img.xxlaila.cn/1566615435701.jpg" alt="img"></p><ul><li>点击用户目录<br><img src="https://img.xxlaila.cn/1566615500778.jpg" alt="img"></li></ul><h3 id="开始配置和jira的连接"><a href="#开始配置和jira的连接" class="headerlink" title="开始配置和jira的连接"></a>开始配置和jira的连接</h3><ul><li>点击添加目录</li></ul><p><img src="https://img.xxlaila.cn/1566615580951.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1566616502650.jpg" alt="img"><br><img src="https://img.xxlaila.cn/1566616536151.jpg" alt="img"></p><p>点击测试连接，连接成功以后，点击测试保存。回到界面可以点击同步<br><img src="https://img.xxlaila.cn/1566616609967.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>confluence</category>
      </categories>
      <tags>
        <tag>confluence,jira</tag>
      </tags>
  </entry>
  <entry>
    <title>jira安装和配置</title>
    <url>/2019/08/24/jira%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;JIRA是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。</p><ul><li>环境准备</li></ul><table><thead><tr><th>应用</th><th>服务器配置</th><th>操作系统</th><th>插件</th></tr></thead><tbody><tr><td>mysql 5.6 +</td><td>2/4G/50G</td><td>centos 7.4</td><td></td></tr><tr><td>jira</td><td>4/8G/200G</td><td>centos 7.4</td><td>jdk1.8</td></tr></tbody></table><a id="more"></a><h3 id="安装JIRA"><a href="#安装JIRA" class="headerlink" title="安装JIRA"></a>安装JIRA</h3><ul><li>执行可执行文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./atlassian-jira-software-7.2.2-x64.bin</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img.xxlaila.cn/1524710136913-900.png" alt="img"></p><ul><li><p>安装完成后停止JIRA</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃/etc/init.d/jira stop</span><br></pre></td></tr></table></figure></li><li><p>复制破解包和数据库驱动连接器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃cp mysql-connector-java-5.1.39-bin.jar atlassian-extras-3.1.2.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</span><br></pre></td></tr></table></figure></li><li><p>启动JIRA</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">＃/etc/init.d/jira start</span><br></pre></td></tr></table></figure></li></ul><p>登陆网页控制台进行配置，这里略过，这里这是完成，无法截图(后期有机会安装截图补上)，设置以后的截图<br><img src="https://img.xxlaila.cn/1524710090658-810.png" alt="img"></p><h3 id="配置JIRA的邮件服务器"><a href="#配置JIRA的邮件服务器" class="headerlink" title="配置JIRA的邮件服务器"></a>配置JIRA的邮件服务器</h3><p><img src="https://img.xxlaila.cn/1524710057086-739.png" alt="img"><br><img src="https://img.xxlaila.cn/1524710038583-516.png" alt="img"></p><p>配置完成后点击最下面的测试连接</p><p><img src="https://img.xxlaila.cn/1524710027432-202.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jira</category>
      </categories>
      <tags>
        <tag>jira</tag>
      </tags>
  </entry>
  <entry>
    <title>git清空commit记录方法</title>
    <url>/2019/08/24/git%E6%B8%85%E7%A9%BAcommit%E8%AE%B0%E5%BD%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><blockquote><p>说明:<br>&nbsp;&nbsp;&nbsp;&nbsp;例如将代码提交到git仓库，将一些敏感信息提交，所以需要删除提交记录以彻底清除提交信息，以得到一个干净的仓库且代码不变</p></blockquote><h3 id="1-Checkout"><a href="#1-Checkout" class="headerlink" title="1.Checkout"></a>1.Checkout</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout --orphan latest_branch</span><br></pre></td></tr></table></figure><h3 id="2-Add-all-the-files"><a href="#2-Add-all-the-files" class="headerlink" title="2. Add all the files"></a>2. Add all the files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add -A</span><br></pre></td></tr></table></figure><h3 id="3-Commit-the-changes"><a href="#3-Commit-the-changes" class="headerlink" title="3. Commit the changes"></a>3. Commit the changes</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -am <span class="string">"commit message"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="4-Delete-the-branch"><a href="#4-Delete-the-branch" class="headerlink" title="4. Delete the branch"></a>4. Delete the branch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -D master</span><br></pre></td></tr></table></figure><h3 id="5-Rename-the-current-branch-to-master"><a href="#5-Rename-the-current-branch-to-master" class="headerlink" title="5.Rename the current branch to master"></a>5.Rename the current branch to master</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -m master</span><br></pre></td></tr></table></figure><h3 id="6-Finally-force-update-your-repository"><a href="#6-Finally-force-update-your-repository" class="headerlink" title="6.Finally, force update your repository"></a>6.Finally, force update your repository</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -f origin master</span><br></pre></td></tr></table></figure><h2 id="git-主干和分支同步"><a href="#git-主干和分支同步" class="headerlink" title="git 主干和分支同步"></a>git 主干和分支同步</h2><h3 id="1、远程分支"><a href="#1、远程分支" class="headerlink" title="1、远程分支"></a>1、远程分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看当前的远程分支</span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h3 id="2、增加远程分支"><a href="#2、增加远程分支" class="headerlink" title="2、增加远程分支"></a>2、增加远程分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add latest https://github.com/xxlaila/work.git</span><br></pre></td></tr></table></figure><h3 id="3、更新主库的远程分支"><a href="#3、更新主库的远程分支" class="headerlink" title="3、更新主库的远程分支"></a>3、更新主库的远程分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">更新远程分支</span><br><span class="line">$ git fetch latest</span><br></pre></td></tr></table></figure><h3 id="4、合并主库的最新代码"><a href="#4、合并主库的最新代码" class="headerlink" title="4、合并主库的最新代码"></a>4、合并主库的最新代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">合并主库的最新代码</span><br><span class="line">$ git rebase latest/dev</span><br></pre></td></tr></table></figure><h3 id="5、推送本地代码到自身远程仓库"><a href="#5、推送本地代码到自身远程仓库" class="headerlink" title="5、推送本地代码到自身远程仓库"></a>5、推送本地代码到自身远程仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">推送远程仓库</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h2 id="git-代码信息统计"><a href="#git-代码信息统计" class="headerlink" title="git 代码信息统计"></a>git 代码信息统计</h2><blockquote><p>说明: 公司每个季度都要对公司开发人员的工作量进行整体评估，评估git上所有代码库的commit数量和修改文件的总行数</p></blockquote><h3 id="统计时间区间commit数量"><a href="#统计时间区间commit数量" class="headerlink" title="统计时间区间commit数量"></a>统计时间区间commit数量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --since==2019-04-1 --until=2019-06-30 | wc -l</span><br></pre></td></tr></table></figure><h3 id="统计添加修改的代码行数"><a href="#统计添加修改的代码行数" class="headerlink" title="统计添加修改的代码行数"></a>统计添加修改的代码行数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span> --since=<span class="string">"2019-4-01"</span> --before=<span class="string">"2019-06-30"</span> |perl -ne <span class="string">'END &#123; print $c &#125; $c += $1 if /(\d+) insertions/'</span></span><br></pre></td></tr></table></figure><h2 id="git-stash使用"><a href="#git-stash使用" class="headerlink" title="git stash使用"></a>git stash使用</h2><blockquote><p>场景:<br>&nbsp;&nbsp;&nbsp;&nbsp;今天遇到一个特殊的场景，写的一个python程序到服务器上有一个小bug运行报错，然后就直接在服务器上调试，修改了程序，程序正常跑起，然而本地也要修改，修改的时候同时修改了其他的地方，然后提交了git上，这时，需要在服务器上更新最新的代码，但是服务器上的代码和git上的不一致，这就会导致错误，这时git的强大之处就体现出来了。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">能够将所有未提交的修改（工作区和暂存区）保存至堆栈中，用于后续恢复当前工作目录。</span><br></pre></td></tr></table></figure><ul><li>更新代码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure></li></ul><p>将当前stash中的内容弹出，并应用到当前分支对应的工作目录上。</p><blockquote><p>注:<br>&nbsp;&nbsp;&nbsp;&nbsp;该命令将堆栈中最近保存的内容删除（栈是先进后出）</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><p>更多的git stash 命令详解请<a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%EF%BC%88Stashing%EF%BC%89" target="_blank" rel="noopener">点击</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>confluence_install</title>
    <url>/2019/08/24/confluence-install/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;Confluence是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论，信息推送。为团队提供一个协作环境。在这里，团队成员齐心协力，各擅其能，协同地编写文档和管理项目。从此打破不同团队、不同部门以及个人之间信息孤岛的僵局，Confluence真正实现了组织资源共享。</p><p>环境准备</p><table><thead><tr><th>系统版本</th><th>插件</th><th>软件</th><th>版本</th><th>服务配置</th></tr></thead><tbody><tr><td>centos 7.4</td><td></td><td>mysql</td><td>5.6+</td><td>2/4G/50G</td></tr><tr><td>centos 7.4</td><td>jdk 1.8</td><td>confluence</td><td>6.12.2</td><td>4/8G/200G</td></tr></tbody></table><p>confluence 6.12.2安装并破解，mysql 版本这里使用的是5.7.24</p><a id="more"></a><h2 id="安装mysql-5-7-24-版本"><a href="#安装mysql-5-7-24-版本" class="headerlink" title="安装mysql 5.7.24 版本"></a>安装mysql 5.7.24 版本</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</span></span><br><span class="line"><span class="comment"># yum list |grep "mysql"</span></span><br><span class="line"><span class="comment"># yum install -y mysql-community-server</span></span><br></pre></td></tr></table></figure><ul><li><p>动mysql</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl start mysqld.service</span></span><br><span class="line"><span class="comment"># systemctl enable mysqld.service</span></span><br></pre></td></tr></table></figure></li><li><p>修改myslq密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep 'temporary password' /var/log/mysqld.log</span></span><br><span class="line">mysql&gt; SET PASSWORD = PASSWORD(<span class="string">'news password'</span>);</span><br><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> PASSWORD EXPIRE NEVER;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改mysql的配置文件，用于支持confluence的最低安装需求"><a href="#修改mysql的配置文件，用于支持confluence的最低安装需求" class="headerlink" title="修改mysql的配置文件，用于支持confluence的最低安装需求"></a>修改mysql的配置文件，用于支持confluence的最低安装需求</h3><blockquote><p>在my.cnf配置文件[mysqld]里面添加下面配置参数</p></blockquote><ul><li><p>将默认字符集指定为UTF-8</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_bin</span><br></pre></td></tr></table></figure></li><li><p>将默认存储引擎设置为InnoDB</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure></li><li><p>指定值max_allowed_packet至少为256M</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">max_allowed_packet=512M</span><br></pre></td></tr></table></figure></li><li><p>指定值 innodb_log_file_size 至少为2GB</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">innodb_log_file_size=2GB</span><br></pre></td></tr></table></figure></li><li><p>确保数据库的全局事务隔离级别已设置为READ-COMMITTED</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">transaction-isolation=READ-COMMITTED</span><br></pre></td></tr></table></figure></li><li><p>检查二进制日志记录格式是否配置为使用“基于行”的二进制日志记录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">binlog_format=row</span><br></pre></td></tr></table></figure></li><li><p>确保sql_mode参数未指定NO_AUTO_VALUE_ON_ZERO</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sql_mode = <span class="string">"ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span></span><br></pre></td></tr></table></figure></li><li><p>重启mysql数据库</p></li></ul><h3 id="为Confluence创建数据库用户和数据库"><a href="#为Confluence创建数据库用户和数据库" class="headerlink" title="为Confluence创建数据库用户和数据库"></a>为Confluence创建数据库用户和数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE confluence CHARACTER SET utf8 COLLATE utf8_bin;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON confluence.* TO confluence@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'password'</span></span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h2 id="安装Confluence"><a href="#安装Confluence" class="headerlink" title="安装Confluence"></a>安装Confluence</h2><p>下载Confluence，这里下载bin文件进行安装，<a href="https://www.atlassian.com/software/confluence/download-archives" target="_blank" rel="noopener">下载地址</a>,下载的版本为atlassian-confluence-6.12.2-x64.bin,包有点大，需要等待……</p><ul><li><p>赋予权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chmod a+x atlassian-confluence-6.12.2-x64.bin</span></span><br></pre></td></tr></table></figure></li><li><p>开始安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./atlassian-confluence-6.12.2-x64.bin</span></span><br></pre></td></tr></table></figure></li><li><p>安装过程中需要做一些基本的配置，详情查看我的配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Unpacking JRE ...</span><br><span class="line">Starting Installer ...</span><br><span class="line"></span><br><span class="line">This will install Confluence 6.12.2 on your computer.</span><br><span class="line">OK [o, Enter], Cancel [c]</span><br><span class="line">o （输入o同意）</span><br><span class="line">Click Next to <span class="built_in">continue</span>, or Cancel to <span class="built_in">exit</span> Setup.</span><br><span class="line"></span><br><span class="line">Choose the appropriate installation or upgrade option.</span><br><span class="line">Please choose one of the following:</span><br><span class="line">Express Install (uses default settings) [1], </span><br><span class="line">Custom Install (recommended <span class="keyword">for</span> advanced users) [2, Enter], </span><br><span class="line">Upgrade an existing Confluence installation [3]</span><br><span class="line">2   (选择2自定义安装，我们可以进行一些定制的配置)</span><br></pre></td></tr></table></figure></li><li><p>开始进行安装参数的配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Select the folder <span class="built_in">where</span> you would like Confluence 6.12.2 to be installed,</span><br><span class="line"><span class="keyword">then</span> click Next.</span><br><span class="line">Where should Confluence 6.12.2 be installed?</span><br><span class="line">[/opt/atlassian/confluence](安装目录,目录变化可以在这里输入，这里直接回车)</span><br><span class="line"></span><br><span class="line">Default location <span class="keyword">for</span> Confluence data</span><br><span class="line">[/var/atlassian/application-data/confluence]（数据的存放目录，这里我们修改到我们的数据盘）</span><br><span class="line">/opt/atlassian/confluence-data/</span><br><span class="line"></span><br><span class="line">Configure <span class="built_in">which</span> ports Confluence will use.</span><br><span class="line">Confluence requires two TCP ports that are not being used by any other</span><br><span class="line">applications on this machine. The HTTP port is <span class="built_in">where</span> you will access</span><br><span class="line">Confluence through your browser. The Control port is used to Startup and</span><br><span class="line">Shutdown Confluence.</span><br><span class="line">Use default ports (HTTP: 8090, Control: 8000) - Recommended [1, Enter], Set custom value <span class="keyword">for</span> HTTP and Control ports [2]</span><br><span class="line">（这里是设置使用的端口，默认即可）</span><br><span class="line"></span><br><span class="line">Confluence can be run <span class="keyword">in</span> the background.</span><br><span class="line">You may choose to run Confluence as a service, <span class="built_in">which</span> means it will start</span><br><span class="line">automatically whenever the computer restarts.</span><br><span class="line">Install Confluence as Service?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">Extracting files ...</span><br><span class="line">                                                                           </span><br><span class="line"></span><br><span class="line">Please <span class="built_in">wait</span> a few moments <span class="keyword">while</span> we configure Confluence.</span><br><span class="line"></span><br><span class="line">Installation of Confluence 6.12.2 is complete</span><br><span class="line">Start Confluence now?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">Please <span class="built_in">wait</span> a few moments <span class="keyword">while</span> Confluence starts up.</span><br><span class="line">Launching Confluence ...</span><br><span class="line">输入y回车后Confluence会进行后台安装，这里等待安装完成即可</span><br><span class="line"></span><br><span class="line">Installation of Confluence 6.12.2 is complete</span><br><span class="line">Your installation of Confluence 6.12.2 is now ready and can be accessed via</span><br><span class="line">your browser.</span><br><span class="line">Confluence 6.12.2 can be accessed at http://localhost:8090</span><br><span class="line">安装完成</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>通过浏览器访问试一下: <a href="http://ip:8090" target="_blank" rel="noopener">http://ip:8090</a></p></blockquote><h2 id="进行访问配置"><a href="#进行访问配置" class="headerlink" title="进行访问配置"></a>进行访问配置</h2><h3 id="安装nginx-进行方向代理访问"><a href="#安装nginx-进行方向代理访问" class="headerlink" title="安装nginx 进行方向代理访问"></a>安装nginx 进行方向代理访问</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span></span><br><span class="line"><span class="comment"># yum install nginx -y</span></span><br><span class="line"><span class="comment"># systemctl start nginx.service</span></span><br><span class="line"><span class="comment"># systemctl enable nginx.service</span></span><br><span class="line">配置nginx的upstream这里将不再阐述</span><br></pre></td></tr></table></figure><h3 id="接下来通过浏览器进行配置"><a href="#接下来通过浏览器进行配置" class="headerlink" title="接下来通过浏览器进行配置"></a>接下来通过浏览器进行配置</h3><ul><li>打开页面</li></ul><p><img src="https://img.xxlaila.cn/1566609337530.jpg" alt="img"></p><ul><li>设置语言为中文和产品安装</li></ul><p><img src="https://img.xxlaila.cn/1566609486131.jpg" alt="img"></p><p>在下面的一个界面需要记住服务器的ID，这个ip在后面破解的时候需要的</p><ul><li>停止confluence<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/init.d/confluence stop</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="破解Confluence"><a href="#破解Confluence" class="headerlink" title="破解Confluence"></a>破解Confluence</h3><ul><li>在本地下载破解器</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/xxlaila/work/blob/master/zip/confluence.zip</span></span><br><span class="line"><span class="comment"># unzip confluence.zip</span></span><br></pre></td></tr></table></figure><ul><li><p>在服务器上把atlassian-extras-decoder-v2-3.4.1.jar进行如下操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /opt/atlassian/confluence/confluence/WEB-INF/lib</span></span><br><span class="line"><span class="comment"># cp atlassian-extras-decoder-v2-3.4.1.jar /opt/atlassian-extras-2.4.jar</span></span><br><span class="line"><span class="comment"># mv atlassian-extras-decoder-v2-3.4.1.jar atlassian-extras-decoder-v2-3.4.1.jar.bak</span></span><br></pre></td></tr></table></figure></li><li><p>把/opt/atlassian-extras-2.4.jar下载到本地,在本地启动Confluence破解器</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -jar confluence_keygen.jar</span><br></pre></td></tr></table></figure><ul><li>点击.patch! 选择下载到本地的atlassian-extras-2.4.jar包，文件类型不变，点击打开，自动生产一个新的atlassian-extras-2.4.jar包</li></ul><p><img src="https://img.xxlaila.cn/FA8682F205BB1655E20AAD392DF13417.jpg" alt="img"></p><ul><li>把服务器id输入到server id，name项随便输入，名称不要过短，店家.gen!生成授权吗，然后把授权复制到confluence框里面</li></ul><p><img src="https://img.xxlaila.cn/CB99372F30342EBABC1125510FBC50B9.jpg" alt="img"></p><ul><li>把新生成的包上传到/opt/atlassian/confluence/confluence/WEB-INF/lib/目录下面</li></ul><h3 id="下载mysql驱动"><a href="#下载mysql驱动" class="headerlink" title="下载mysql驱动"></a>下载mysql驱动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.47.zip</span></span><br></pre></td></tr></table></figure><ul><li><p>完成后进行解压，并把mysql-connector-java-5.1.47-bin.jar 复制到lib目录下面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cp mysql-connector-java-5.1.47-bin.jar /opt/atlassian/confluence/confluence/WEB-INF/lib</span></span><br><span class="line"><span class="comment"># /etc/init.d/confluence start</span></span><br></pre></td></tr></table></figure></li><li><p>设置数据库</p></li></ul><p><img src="https://img.xxlaila.cn/EFF70DEA9DFBCA88E24BE83BEE9DFFC8.jpg" alt="img"><br><img src="https://img.xxlaila.cn/BF70624FCFA9E5ECFD4E121E02D08FD3.jpg" alt="img"></p><blockquote><p>这是完成以后进行测试，是否联通，在下一步（需要进行等待，后台在生成数据库）,生成完成后，系统会跳转到另外一个页面，这里忘记截图,是进行数据导入、站点恢复等</p></blockquote><ul><li><p>重新打开网址连接<br><img src="https://img.xxlaila.cn/BEE317A48B4CEE0407638F47CDBDF31F.jpg" alt="img"></p></li><li><p>由于这里没有ladp和jira,所以选择在confluence中管理用户和组</p></li><li><p>设置系统管理账户</p></li></ul><p><img src="https://img.xxlaila.cn/93FDD95874C661340531C27CC77298FD.jpg" alt="img"><br><img src="https://img.xxlaila.cn/6B1F3A2EBF1B3DAF1A962317AA59DC15.jpg" alt="img"></p><blockquote><p>这里跳过个人头像设定,头像设定完成后会提示你新建一个空间</p></blockquote><p><img src="https://img.xxlaila.cn/FCE130BD8B121A290010FEA2C2342898.jpg" alt="img"></p><ul><li>查看授权期限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">设置——&gt;一般设置——&gt;管理——&gt;授权细节</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/EEB25C9704F4C76C30E1DF32A2E1EDE0.jpg" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>confluence</category>
      </categories>
      <tags>
        <tag>confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>nexus3搭建npm私服</title>
    <url>/2019/08/23/nexus3%E6%90%AD%E5%BB%BAnpm%E7%A7%81%E6%9C%8D/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;公司前端全是nodejs的，nodejs在install的时候往往是连接外网，或者是设置taobao源，即使是设置了taobao源，但是还是解决不了慢的问题，为此搭建了一个内部的npm私服，这里用google一下有很多都可以来进行搭建npm私服，然后也看到了nexus也可以来做，正好maven私服也是用的这个，都是3版本，为此选择了nexus来做npm的私服，和maven一套便于维护。</p><h3 id="nexus安装"><a href="#nexus安装" class="headerlink" title="nexus安装"></a>nexus安装</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;不介绍，安装完成nexus后，在浏览器打开并进行登录，第一次安装登录nexus的默认用户<code>admin</code>,默认密码是<code>admin123</code></p><a id="more"></a><h3 id="1、创建repository"><a href="#1、创建repository" class="headerlink" title="1、创建repository"></a>1、创建repository</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Nexus Repository Manager 3 可以用于多种类型的包管理。此处我们要搭建的是npm包管理私服。登录在界面点击下图所示按钮。<br><img src="https://img.xxlaila.cn/1566524933898.jpg" alt="img"></p><ul><li>进入设置界面<br><img src="https://img.xxlaila.cn/1566525058628.jpg" alt="img"></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;上图中左面菜单有很多功能。可以在 Security 下的 Users 可以创建用户并设置用户权限，修改用户信息。Logging 下的 Log Viewer 可以查看运行日志。而本次配置主要用到了 Repository -&gt; Repositories 和 Security -&gt; Realms 两项</p><ul><li>首先在 Repositories 创建仓库</li></ul><p><img src="https://img.xxlaila.cn/1566526054409.jpg" alt="img"></p><ul><li><p>接下来会进入到 Repositorty 的选择：（npm 有三种）<br><img src="https://img.xxlaila.cn/1566526144738.jpg" alt="img"></p></li><li><p>第一种：代理 npm 仓库</p></li></ul><p><a href="https://help.sonatype.com/repomanager3/formats/npm-registry" target="_blank" rel="noopener">Proxying npm Registries</a>可产看官方文档</p><p>&nbsp;&nbsp;&nbsp;&nbsp;将公共 npm 服务器的资源代理缓存，减少重复下载，加快开发人员和CI服务器的下载速度。创建时选择 npm(proxy) ，只需填写 Name 和 Remote storage （公有库域名）即可。<br><img src="https://img.xxlaila.cn/1566526375641.jpg" alt="img"></p><ul><li>第二种：私有 npm 仓库<br><a href="https://help.sonatype.com/repomanager3/formats/npm-registry" target="_blank" rel="noopener">Private npm Registries</a>官方文档</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;用于 上传自己的npm包 以及第三方npm包。同样的创建步骤，只不过选择的 仓库类型为 npm(hosted)。 只填写 Name 即可</p><p><img src="https://img.xxlaila.cn/1566526835511.jpg" alt="img"></p><ul><li>第三种：npm 仓库组<br><a href="https://help.sonatype.com/repomanager3/formats/npm-registry" target="_blank" rel="noopener">Grouping npm Registries</a>官方文档</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;用于将多个内部或外部 npm 仓库统一为一个 npm仓库。被添加到 npm仓库组 中的 其他仓库内的包都能够通过该 npm仓库组 访问到。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;例如：可以新建一个npm仓库组将 上面两个刚刚创建的 npm 仓库都添加进去。这样可以通过这个 npm仓库组，既可以访问 公有npm仓库 又可以访问自己的 私有npm仓库。<br>&nbsp;&nbsp;&nbsp;&nbsp;仓库类型为 npm(group)，起一个名字 Name，然后选择需要添加到组里的 其他 npm 仓库。此处我选择的是 npm-kxl-external 和 npm-kxl-internal</p><p><img src="https://img.xxlaila.cn/1566527053731.jpg" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;仓库都创建完毕了。接下来需要验证一下是否可用,在 Repositories 中点击创建的 仓库。可以查看该仓库的 URL。<br>在项目目录下创建 .npmrc 文件。文件内容为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">registry=http://172.21.16.90:8081/repository/npm-kxl-all/</span><br></pre></td></tr></table></figure><p>然后随便安装一个 包 试试（日志级别设置为 info）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm --loglevel info install react</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/1566528241640.jpg" alt="img"></p><p>如图。确实是从设置的 npm 私服下载的react。成功</p><h3 id="发布到-npm-私服"><a href="#发布到-npm-私服" class="headerlink" title="发布到 npm 私服"></a>发布到 npm 私服</h3><p>除了从 npm 仓库安装依赖。我们还需要将公司内部的 代码打包 发布到 npm 的私服。这里没什么特殊的，就是需要设置一下 Nexus Repository Manager 的权限。这样才能使用 npm login 认证登录到我们的私服。</p><p><img src="https://img.xxlaila.cn/1566528346695.jpg" alt="img"></p><p>此处在 Realms 下。将 npm Bearer Token Realm 添加到 Active 列表内保存即可。<br>然后可以执行（登录 私有npm仓库）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm login --registry=http://172.21.16.90:8081/repository/npm-kxl-internal/</span><br><span class="line">Username: admin</span><br><span class="line">Password: </span><br><span class="line">Email: (this IS public) 1@qq.com</span><br><span class="line">Logged <span class="keyword">in</span> as admin on http://172.21.16.90:8081/repository/npm-kxl-internal/.</span><br></pre></td></tr></table></figure><p>执行命令，提示填写账号密码和邮箱，验证通过后将会在 用户主目录下的 .npmrc 文件中插入一条 此仓库 url 和对应的 token。</p><p><img src="https://img.xxlaila.cn/1566528452423.jpg" alt="img"></p><p>在确保项目有 package.json 前提下，执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish --registry=http://172.21.16.90:8081/repository/npm-kxl-internal/</span><br></pre></td></tr></table></figure><p>至此，使用 Nexus Repository Manager 3 搭建 npm 私服结束。整体流程并不复杂，文档很详尽,直接读文档可能会遗漏一些东西。可以参考<a href="https://help.sonatype.com/repomanager3/formats/npm-registry" target="_blank" rel="noopener">官方文档</a></p><p><a href="https://xxlaila.github.io/2019/10/15/nexus配置ldap/" target="_blank" rel="noopener">nexus ldap配置</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>nexus</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx URL 斜杠问题</title>
    <url>/2019/08/22/nginx-URL-%E6%96%9C%E6%9D%A0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>今天公司新上的一个前端应用遇到一个问题，那就是在微信登录界面扫码登录之后，微信回调给我们的地址多加了一个斜杠;</p><blockquote><p>错误的地址:<a href="http://a.xxlaila.com/wx.html/?code=011amZet0h1IUf19Fvht0jg4ft0amZeN" target="_blank" rel="noopener">http://a.xxlaila.com/wx.html/?code=011amZet0h1IUf19Fvht0jg4ft0amZeN</a><br>正确的地址:<a href="http://a.xxlaila.com/wx.html?code=011amZet0h1IUf19Fvht0jg4ft0amZeN" target="_blank" rel="noopener">http://a.xxlaila.com/wx.html?code=011amZet0h1IUf19Fvht0jg4ft0amZeN</a></p></blockquote><p>在nginx上配置需要吧这个斜杠删除掉。用户才能正常的访问；</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在配置文件里面增加如下配置项</p><a id="more"></a><ul><li>删除URL结尾的斜杠</li></ul><p><em>rewrite ^/(.</em>)/$ /$1 permanent;*</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  a.xxlaila.com;</span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)/$</span> /<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm index.jsp index.php;</span><br><span class="line">  <span class="attribute">root</span> /opt/webapps/a.xxlaila.com;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* /</span> &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">access_log</span>   /var/log/nginx/a.xxlaila.com.access.log main;</span><br><span class="line"><span class="comment">#  error_log   /var/log/nginx/a.xxlaila.com.error.log debug;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在URL结尾添加斜杠<br>在配置文件增加如下配置项目</li></ul><p><em>rewrite ^(.</em>[^/])$ $1/ permanent;*</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  a.xxlaila.com;</span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^(.*[^/])$</span> <span class="variable">$1</span>/ <span class="literal">permanent</span>;</span><br><span class="line">  <span class="attribute">index</span> index.html index.htm index.jsp index.php;</span><br><span class="line">  <span class="attribute">root</span> /opt/webapps/a.xxlaila.com;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~* /</span> &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">access_log</span>   /var/log/nginx/a.xxlaila.com.access.log main;</span><br><span class="line"><span class="comment">#  error_log   /var/log/nginx/a.xxlaila.com.error.log debug;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>在浏览器访问某一个url/页面的时候，通常有时候带有.html的一个扩展名，现需求是带<code>.html</code>和不带<code>.html</code>都可以访问</p><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p>增加如下配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;    </span><br><span class="line">       rewrite ^(.*)$ /<span class="variable">$1</span>.html last;</span><br><span class="line">       <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  charset utf-8;</span><br><span class="line">  server_name  a.xxlaila.com;</span><br><span class="line">  rewrite ^/(.*)/$ /<span class="variable">$1</span> permanent;</span><br><span class="line">  index index.html index.htm index.jsp index.php;</span><br><span class="line">  root /opt/webapps/a.xxlaila.com;</span><br><span class="line"></span><br><span class="line">  location ~* / &#123;</span><br><span class="line">    <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">       rewrite ^(.*)$ /<span class="variable">$1</span>.html last;</span><br><span class="line">       <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  access_log   /var/<span class="built_in">log</span>/nginx/a.xxlaila.com.access.log main;</span><br><span class="line"><span class="comment">#  error_log   /var/log/nginx/a.xxlaila.com.error.log debug;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-ci/cd-(四)</title>
    <url>/2019/08/20/kubernetes-ci-cd-%E5%9B%9B/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h2 id="1、Blue-Ocean"><a href="#1、Blue-Ocean" class="headerlink" title="1、Blue Ocean"></a>1、Blue Ocean</h2><p>安装Blue Ocean插件</p><h3 id="1-1、创建pipeline"><a href="#1-1、创建pipeline" class="headerlink" title="1.1、创建pipeline"></a>1.1、创建pipeline</h3><p><img src="https://img.xxlaila.cn/348knfnsdlds.png" alt="img"></p><ul><li>配置代码库的地址</li><li>然后配置授权账户</li></ul><p><img src="https://img.xxlaila.cn/9857jksdhfjkhdsfds.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这儿之前git库里面必须存在于jenkinsfile文件，pipeline会自动去扫描代码库里面的分支，然后根据每一个分支建立一个类似于job的形式，然后我们可以根据每一个分支进行部署，可以执行定时触发，部署</p><p><img src="https://img.xxlaila.cn/382dklfjdskjfs.png" alt="img"></p><h2 id="2、jenkins-直接使用nfs"><a href="#2、jenkins-直接使用nfs" class="headerlink" title="2、jenkins 直接使用nfs"></a>2、jenkins 直接使用nfs</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面jenkins ci/cd 使用的是pv/pvc的方式来进行安装，这样安装显得比较麻烦多余，因为之前的pv和pvc 都是使用的nfs，在nfs上建立pv/pvc，由jenkins挂在pvc。这样用起来有点多此一举，这里介绍直接使用nfs来进行jenkins的安装</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nfs搭建不阐述，直接修改 <code>jenkins-deployment.yaml</code> 文件</p><ul><li>jenkins-deployment.yaml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">securityContext:</span><br><span class="line">  fsGroup: 1000</span><br><span class="line">volumes:</span><br><span class="line">- name: jenkinshome</span><br><span class="line">  nfs:</span><br><span class="line">    server: 1.1.1.1</span><br><span class="line">    path: <span class="string">"/opt/jenkins_home"</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>参数</strong>:</p><ul><li>server: nfs 服务器的地址</li><li>path: nfs 服务器建立的共享目录</li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-ci/cd-(三)</title>
    <url>/2019/08/20/kubernetes-ci-cd-%E4%B8%89/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;jenkins 配置完成后，最终实现的是ci/cd，在编译的过程中，经常会遇到后端java的，前端nodejs的，这里就需要进行一个k8s在调度的时候生产pod来进行指定pod进行编译</p><h3 id="1、制作容器"><a href="#1、制作容器" class="headerlink" title="1、制作容器"></a>1、制作容器</h3><p>自定义一个容器，里面包含了 java，nodejs的所需要的环境，同时需要同步容器的时间，包含来jenkins的node</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat Dockerfile</span></span><br><span class="line"><span class="attr">FROM</span> <span class="string">docker.io/centos:latest</span></span><br><span class="line"><span class="attr">MAINTAINER</span> <span class="string">xxlaila "cq_xxlaila@163.com"</span></span><br><span class="line"><span class="comment"># Install dependent plugin</span></span><br><span class="line"><span class="attr">ENV</span> <span class="string">VERSION v10.15.1</span></span><br><span class="line"><span class="attr">RUN</span> <span class="string">yum install -y wget \</span></span><br><span class="line">    <span class="attr">git</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">java-1.8.0-openjdk.x86_64</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">curl -sL https://rpm.nodesource.com/setup_11.x | bash - \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">yum install -y gcc gcc-c++ make \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">yum install -y nodejs \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">yum clean all</span></span><br><span class="line"><span class="comment"># System variable setting</span></span><br><span class="line"><span class="attr">RUN</span> <span class="string">echo "LANG=zh_CN.UTF-8" &gt;&gt; /etc/locale.conf \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">source /etc/locale.conf \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">echo "Asia/shanghai" &gt;&gt; /etc/timezone \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">groupadd -g 10000 jenkins \</span></span><br><span class="line">    <span class="meta">&amp;&amp;</span> <span class="string">useradd -g jenkins -u 10000 jenkins</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">EXPOSE</span> <span class="string">50000</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><p>执行容器打包</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="attr"># docker build -t centos7</span><span class="number">.6</span>/<span class="symbol">node11</span>:latest .\</span><br></pre></td></tr></table></figure></li><li><p>推送容器到私有镜像仓库</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># docker tag centos7<span class="number">.6</span>/node11:latest docker.io/xxlaila/centos<span class="number">-7</span>-jdk1<span class="number">.8</span>-nodejs11<span class="number">.10</span>-jenkins:latest</span><br><span class="line"># docker push docker.io/xxlaila/centos<span class="number">-7</span>-jdk1<span class="number">.8</span>-nodejs11<span class="number">.10</span>-jenkins:latest</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、jenkins的配置"><a href="#2、jenkins的配置" class="headerlink" title="2、jenkins的配置"></a>2、jenkins的配置</h3><h4 id="2-1、系统配置"><a href="#2-1、系统配置" class="headerlink" title="2.1、系统配置"></a>2.1、系统配置</h4><p>jenkins——&gt;系统管理——&gt;系统设置<br><strong>名称</strong>：kubernetes<br><strong>地址</strong>：<a href="https://kubernetes.default.svc.cluster.local" target="_blank" rel="noopener">https://kubernetes.default.svc.cluster.local</a><br><strong>jenkins地址</strong>：<a href="http://jenkins2.kube-ops.svc.cluster.local:8080" target="_blank" rel="noopener">http://jenkins2.kube-ops.svc.cluster.local:8080</a><br><img src="https://img.xxlaila.cn/489kdngkdhfkodsmf.png" alt="img"></p><h4 id="2-2、增加一个kubenetes-pod-templates"><a href="#2-2、增加一个kubenetes-pod-templates" class="headerlink" title="2.2、增加一个kubenetes pod templates"></a>2.2、增加一个kubenetes pod templates</h4><p><img src="https://img.xxlaila.cn/83jknfkdslfds.png" alt="img"></p><h4 id="2-3、配置容器环境"><a href="#2-3、配置容器环境" class="headerlink" title="2.3、配置容器环境"></a>2.3、配置容器环境</h4><p><img src="https://img.xxlaila.cn/42clkdsjfkldsfs.png" alt="img"></p><h4 id="2-4、配置权限"><a href="#2-4、配置权限" class="headerlink" title="2.4、配置权限"></a>2.4、配置权限</h4><p><img src="https://img.xxlaila.cn/3486238kmxnfksd.png" alt="img"></p><h3 id="3、测试job"><a href="#3、测试job" class="headerlink" title="3、测试job"></a>3、测试job</h3><p>建立一个test job 的pipeline来进行容器是否正常</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node (<span class="string">'agent-node'</span>)&#123;</span><br><span class="line">    container(<span class="string">'nodejs'</span>) &#123;</span><br><span class="line">        sh <span class="string">'whoami'</span></span><br><span class="line">        sh <span class="string">'hostname'</span></span><br><span class="line">        sh <span class="string">'echo $PATH'</span></span><br><span class="line">        sh <span class="string">'npm version'</span></span><br><span class="line">        sh <span class="string">'node -v'</span></span><br><span class="line">        sh <span class="string">'npx -v'</span></span><br><span class="line">        sh <span class="string">'java -version'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1、建立pipeline"><a href="#3-1、建立pipeline" class="headerlink" title="3.1、建立pipeline"></a>3.1、建立pipeline</h4><h5 id="3-1-1、建立一个后端"><a href="#3-1-1、建立一个后端" class="headerlink" title="3.1.1、建立一个后端"></a>3.1.1、建立一个后端</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node(<span class="string">'agent-build'</span>) &#123;</span><br><span class="line">   stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">      git credentialsId:<span class="string">'gitlabUser'</span>, url: <span class="string">'http://gitlab.xxlaila.com/plat/middleware/kxl-eureka.git'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'build'</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"2. Start build <span class="variable">$&#123;JOB_NAME&#125;</span>"</span></span><br><span class="line">        sh <span class="string">'/opt/bin/mvn clean package'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'show package'</span>) &#123;</span><br><span class="line">        sh <span class="string">'pwd'</span></span><br><span class="line">        sh <span class="string">'ls -ltrh target/'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-2、建立一个前端"><a href="#3-1-2、建立一个前端" class="headerlink" title="3.1.2、建立一个前端"></a>3.1.2、建立一个前端</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">node(<span class="string">'agent-build'</span>) &#123;</span><br><span class="line">    stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">      git credentialsId:<span class="string">'gitlabUser'</span>, ur<span class="variable">l:</span> <span class="string">'http://gitlab.xxlaila.com/front-end/portal/kts-platform.git'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'install'</span>) &#123;</span><br><span class="line">        container(<span class="string">'nodejs'</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"2. Start install $&#123;JOB_NAME&#125;"</span></span><br><span class="line">            <span class="keyword">sh</span> <span class="string">'node -v'</span></span><br><span class="line">            <span class="keyword">sh</span> <span class="string">'npm install'</span></span><br><span class="line">            <span class="keyword">sh</span> <span class="string">'npm run build production'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'show package'</span>) &#123;</span><br><span class="line">        <span class="keyword">sh</span> <span class="string">'pwd'</span></span><br><span class="line">        <span class="keyword">sh</span> <span class="string">'ls -ltrh'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes-ci/cd-(二)</title>
    <url>/2019/08/20/kubernetes-ci-cd-%E4%BA%8C/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h1 id="基于jenkins-pipeline进行部署"><a href="#基于jenkins-pipeline进行部署" class="headerlink" title="基于jenkins  pipeline进行部署"></a>基于jenkins pipeline进行部署</h1><h2 id="1、jenkins-pipeline介绍"><a href="#1、jenkins-pipeline介绍" class="headerlink" title="1、jenkins pipeline介绍"></a>1、jenkins pipeline介绍</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;要实现在 Jenkins 中的构建工作，可以有多种方式，我们这里采用比较常用的 Pipeline 这种方式。Pipeline，简单来说，就是一套运行在 Jenkins 上的工作流框架，将原来独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排和可视化的工作。</p><p>Jenkins Pipeline 有几个核心概念:</p><ul><li>Node：节点，一个 Node 就是一个 Jenkins 节点，Master 或者 Agent，是执行 Step 的具体运行环境，比如我们之前动态运行的 Jenkins Slave 就是一个 Node 节点</li><li>Stage：阶段，一个 Pipeline 可以划分为若干个 Stage，每个 Stage 代表一组操作，比如：Build、Test、Deploy，Stage 是一个逻辑分组的概念，可以跨多个 Node</li><li>Step：步骤，Step 是最基本的操作单元，可以是打印一句话，也可以是构建一个 Docker 镜像，由各类 Jenkins 插件提供，比如命令：sh ‘make’，就相当于我们平时 shell 终端中执行 make 命令一样。</li></ul><p>那么我们如何创建 Jenkins Pipline 呢？</p><ul><li>Pipeline 脚本是由 Groovy 语言实现的，但是我们没必要单独去学习 Groovy，当然你会的话最好</li><li>Pipeline 支持两种语法：Declarative(声明式)和 Scripted Pipeline(脚本式)语法</li><li>Pipeline 也有两种创建方法：可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中</li><li>一般我们都推荐在 Jenkins 中直接从源代码控制(SCMD)中直接载入 Jenkinsfile Pipeline 这种方法创建一个简单的 Pipeline<blockquote><p>我们这里来给大家快速创建一个简单的 Pipeline，直接在 Jenkins 的 Web UI 界面中输入脚本运行。</p></blockquote></li><li>新建 Job：在 Web UI 中点击 New Item -&gt; 输入名称：pipeline-demo -&gt; 选择下面的 Pipeline -&gt; 点击 OK</li><li>配置：在最下方的 Pipeline 区域输入如下 Script 脚本，然后点击保存。</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shell node &#123;</span><br><span class="line">    stage(<span class="string">'Clone'</span>) &#123; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"1.Clone Stage"</span> </span><br><span class="line">    &#125; </span><br><span class="line">    stage(<span class="string">'Test'</span>) &#123; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"2.Test Stage"</span> </span><br><span class="line">    &#125; </span><br><span class="line">    stage(<span class="string">'Build'</span>) &#123; </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"3.Build Stage"</span> </span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">    stage(<span class="string">'Deploy'</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"4. Deploy Stage"</span> </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>构建：点击左侧区域的 Build Now，可以看到 Job 开始构建了<blockquote><p>隔一会儿，构建完成，可以点击左侧区域的 Console Output，我们就可以看到如下输出信息：</p></blockquote></li></ul><p><img src="https://img.xxlaila.cn/sdsdsjid23874823ehsj.png" alt="img"></p><ul><li>在 Slave 中构建任务<br>&nbsp;&nbsp;&nbsp;&nbsp;上面我们创建了一个简单的 Pipeline 任务，但是我们可以看到这个任务并没有在 Jenkins 的 Slave 中运行，那么如何让我们的任务跑在 Slave 中呢？还记得上节课我们在添加 Slave Pod 的时候，一定要记住添加的 label 吗？没错，我们就需要用到这个 label，我们重新编辑上面创建的 Pipeline 脚本，给 node 添加一个 label 属性，如下:</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node(<span class="string">'jnlp-agent'</span>) &#123;</span><br><span class="line">    stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"2.Test Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"3.Build Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Deploy'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"4. Deploy Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只是给 node 添加了一个jnlp-agent这样的一个label，然后我们保存，构建之前查看下 kubernetes 集群中的 Pod：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>] [root@k8s-zxc-test-3 ~]<span class="comment"># kubectl get pods -n kube-ops</span></span><br><span class="line">NAME                        READY   STATUS              RESTARTS   AGE</span><br><span class="line">jenkins2-696b8fbdbb-q24nm   1/1     Running             0          45h</span><br><span class="line">jnlp-agent-342fv            0/1     ContainerCreating   0          0s</span><br><span class="line">[<span class="built_in">test</span>] [root@k8s-zxc-test-3 ~]<span class="comment"># kubectl get pods -n kube-ops</span></span><br><span class="line">NAME                        READY   STATUS              RESTARTS   AGE</span><br><span class="line">jenkins2-696b8fbdbb-q24nm   1/1     Running             0          45h</span><br><span class="line">jnlp-agent-342fv            0/1     ContainerCreating   0          1s</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/dhf482390dsfjkdsg.png" alt="img"></p><ul><li><p>kubernetes 界面显示<br><img src="https://img.xxlaila.cn/9374hkdhskfjsdd.png" alt="img"></p></li><li><p>jenkins执行结果显示<br><img src="https://img.xxlaila.cn/23cvkndiuyriens.png" alt="img"></p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp; 证明我们当前的任务在跑在上面动态生成的这个 Pod 中，也符合我们的预期。我们回到 Job 的主界面，也可以看到大家可能比较熟悉的 Stage View 界面：<br><img src="https://img.xxlaila.cn/45ksfh9whnkxa.png" alt="img"></p><h5 id="部署-Kubernetes-应用"><a href="#部署-Kubernetes-应用" class="headerlink" title="部署 Kubernetes 应用"></a>部署 Kubernetes 应用</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;我们已经知道了如何在 Jenkins Slave 中构建任务了，那么如何来部署一个原生的 Kubernetes 应用呢？ 要部署 Kubernetes 应用，我们就得对我们之前部署应用的流程要非常熟悉才行，我们之前的流程是怎样的：</p><ul><li>1、编写代码</li><li>2、测试</li><li>3、编写 Dockerfile</li><li>4、构建打包 Docker 镜像</li><li>5、推送 Docker 镜像到仓库</li><li>6、编写 Kubernetes YAML 文件</li><li>7、更改 YAML 文件中 Docker 镜像 TAG</li><li>8、利用 kubectl 工具部署应用</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;我们之前在 Kubernetes 环境中部署一个原生应用的流程应该基本上是上面这些流程吧？现在我们就需要把上面这些流程放入 Jenkins 中来自动帮我们完成(当然编码除外)，从测试到更新 YAML 文件属于 CI 流程，后面部署属于 CD 的流程。如果按照我们上面的示例，我们现在要来编写一个 Pipeline 的脚本。</p><ul><li><p>修改test-spring-social-wechat-sample pipeline脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node(<span class="string">'jnlp-agent'</span>) &#123;</span><br><span class="line">   stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"2.Test Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"3.Build Docker Image Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Push'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"4.Push Docker Image Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'YAML'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"5. Change YAML File Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Deploy'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"6. Deploy Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>1）、增加git地址，进行代码的clone</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'Clone'</span>)</span></span> &#123;</span><br><span class="line">   echo <span class="string">"1.Clone Stage"</span></span><br><span class="line">   git url: <span class="string">"https://github.com/xxlaila/jenkins-demo.git"</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>2）、进行测试</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'Test'</span>)</span></span> &#123;</span><br><span class="line">  echo <span class="string">"2.Test Stage"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3）、构建一个docker镜像</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'Build'</span>)</span></span> &#123;</span><br><span class="line">  echo <span class="string">"3.Build Docker Image Stage"</span></span><br><span class="line">  sh <span class="string">"docker build -t xxlaila/jenkins-demo:$&#123;build_tag&#125; ."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;平时构建的时候是不是都是直接使用docker build命令进行构建就行了，那么这个地方呢？我们上节课给大家提供的 Slave Pod 的镜像里面是不是采用的 Docker In Docker 的方式，也就是说我们也可以直接在 Slave 中使用 docker build 命令，所以我们这里直接使用 sh 直接执行 docker build 命令即可，但是镜像的 tag 呢？如果我们使用镜像 tag，则每次都是 latest 的 tag，这对于以后的排查或者回滚之类的工作会带来很大麻烦，我们这里采用和git commit的记录为镜像的 tag，这里有一个好处就是镜像的 tag 可以和 git 提交记录对应起来，也方便日后对应查看。但是由于这个 tag 不只是我们这一个 stage 需要使用，下一个推送镜像是不是也需要，所以这里我们把这个 tag 编写成一个公共的参数，把它放在 Clone 这个 stage 中，修改前面两个 stage:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">      git url: <span class="string">"https://github.com/xxlaila/jenkins-demo.git"</span></span><br><span class="line">      script &#123;</span><br><span class="line">        build_tag = sh(returnStdout: <span class="literal">true</span>, script: <span class="string">'git rev-parse --short HEAD'</span>).trim()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"3.Build Docker Image Stage"</span></span><br><span class="line">      sh <span class="string">"docker build -t xxlaila/jenkins-demo:<span class="variable">$&#123;build_tag&#125;</span> ."</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>4）、推送镜像<br>&nbsp;&nbsp;&nbsp;&nbsp;镜像构建完成了，现在我们就需要将此处构建的镜像推送到镜像仓库中去，当然如果你有私有镜像仓库也可以，这里还没有自己搭建私有的仓库，所以直接使用 docker hub 即可。<br>&nbsp;&nbsp;&nbsp;&nbsp;我们知道 docker hub 是公共的镜像仓库，任何人都可以获取上面的镜像，但是要往上推送镜像我们就需要用到一个帐号了，所以我们需要提前注册一个 docker hub 的帐号，记住用户名和密码，我们这里需要使用。正常来说我们在本地推送 docker 镜像的时候，是不是需要使用docker login命令，然后输入用户名和密码，认证通过后，就可以使用docker push命令来推送本地的镜像到 docker hub 上面去了，如果是这样的话，我们这里的 Pipeline 是不是就该这样写了：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">'Push'</span>) &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"4.Push Docker Image Stage"</span></span><br><span class="line">      sh <span class="string">"docker login -u cq_xxlaila@163.com -p 111111"</span></span><br><span class="line">      sh <span class="string">"docker push xxlaila/jenkins-demo:<span class="variable">$&#123;build_tag&#125;</span>"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;如果只是在 Jenkins 的 Web UI 界面中来完成这个任务的话，我们这里的 Pipeline 是可以这样写的，但是我们是不是推荐使用 Jenkinsfile 的形式放入源码中进行版本管理，这样的话我们直接把 docker 仓库的用户名和密码暴露给别人这样很显然是非常非常不安全的，更何况我们这里使用的是 github 的公共代码仓库，所有人都可以直接看到我们的源码，所以我们应该用一种方式来隐藏用户名和密码这种私密信息，幸运的是 Jenkins 为我们提供了解决方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;在首页点击 Credentials -&gt; Stores scoped to Jenkins 下面的 Jenkins -&gt; Global credentials (凭据) -&gt;system(系统)-&gt;全局凭据 (unrestricted)-&gt; 左侧的 Add Credentials( 添加凭据)：添加一个 Username with password 类型的认证信息，如下：<br><img src="https://img.xxlaila.cn/374kdjfkskfdsd.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Add Credentials 输入 docker hub 的用户名和密码，ID 部分我们输入dockerHub，注意，这个值非常重要，在后面 Pipeline 的脚本中我们需要使用到这个 ID 值。<br>&nbsp;&nbsp;&nbsp;&nbsp;有了上面的 docker hub 的用户名和密码的认证信息，现在修改 Pipeline 中的第四部，使用这里的用户名和密码：</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">stage('Push') &#123;</span><br><span class="line">     echo <span class="string">"4.Push Docker Image Stage"</span></span><br><span class="line">     <span class="keyword">with</span><span class="constructor">Credentials([<span class="params">usernamePassword</span>(<span class="params">credentialsId</span>: '<span class="params">dockerHub</span>', <span class="params">passwordVariable</span>: '<span class="params">dockerHubPassword</span>', <span class="params">usernameVariable</span>: '<span class="params">dockerHubUser</span>')</span>]) &#123;</span><br><span class="line">         sh <span class="string">"docker login -u $&#123;dockerHubUser&#125; -p $&#123;dockerHubPassword&#125;"</span></span><br><span class="line">         sh <span class="string">"docker push xxlaila/jenkins-demo:$&#123;build_tag&#125;"</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p><em>注意</em>:<br>&nbsp;&nbsp;&nbsp;&nbsp;我们这里在 stage 中使用了一个新的函数withCredentials，其中有一个credentialsId值就是我们刚刚创建的 ID 值，然后就可以在脚本中直接使用这里两个变量值来直接替换掉之前的登录 docker hub 的用户名和密码，这样操作就相对来说就很安全了，只是传递进去了两个变量而已，别人并不知道真正用户名和密码，只有我们自己的 Jenkins 平台上添加的才知道。<br><em>测试结果</em>:</p></blockquote><p><img src="https://img.xxlaila.cn/4ykjdbfjdshfkojdsl.png" alt="img"></p><ul><li>5）、更改 YAML<br>&nbsp;&nbsp;&nbsp;&nbsp;上面已经完成了镜像的打包、推送的工作，接下来我们是不是应该更新 Kubernetes 系统中应用的镜像版本了，当然为了方便维护，我们都是用 YAML 文件的形式来编写应用部署规则，比如我们这里的 YAML 文件：(k8s.yaml)<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># cat k8s.yaml</span></span><br><span class="line"><span class="symbol">apiVersion:</span> extensions/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> Deployment</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> jenkins-demo</span><br><span class="line"><span class="symbol">  namespace:</span> default</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  template:</span></span><br><span class="line"><span class="symbol">    metadata:</span></span><br><span class="line"><span class="symbol">      labels:</span></span><br><span class="line"><span class="symbol">        app:</span> jenkins-demo</span><br><span class="line"><span class="symbol">    spec:</span></span><br><span class="line"><span class="symbol">      containers:</span></span><br><span class="line">      - image: xxlaila/jenkins-demo:<span class="params">&lt;BUILD_TAG&gt;</span></span><br><span class="line"><span class="symbol">        imagePullPolicy:</span> IfNotPresent</span><br><span class="line"><span class="symbol">        name:</span> jenkins-demo</span><br><span class="line"><span class="symbol">        env:</span></span><br><span class="line">        - name: branch</span><br><span class="line"><span class="symbol">          value:</span> <span class="params">&lt;BRANCH_NAME&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;使用一个 Deployment 资源对象来管理 Pod，该 Pod 使用的就是我们上面推送的镜像，唯一不同的地方是 Docker 镜像的 tag 不是我们平常见的具体的 tag，而是一个 的标识，实际上如果我们将这个标识替换成上面的 Docker 镜像的 tag，是不是就是最终我们本次构建需要使用到的镜像？怎么替换呢？其实也很简单，我们使用一个sed命令就可以实现了：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'YAML'</span>)</span></span> &#123;</span><br><span class="line">      echo <span class="string">"5. Change YAML File Stage"</span></span><br><span class="line">      sh <span class="string">"sed -i 's/&lt;BUILD_TAG&gt;/$&#123;build_tag&#125;/' k8s.yaml"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>sed 命令就是将 k8s.yaml 文件中的 标识给替换成变量 build_tag 的值。</p></blockquote><ul><li>6）、部署<br>&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes 应用的 YAML 文件已经更改完成了，之前我们手动的环境下，是不是直接使用 kubectl apply 命令就可以直接更新应用。当然这里只是写入到了 Pipeline 里面，思路都是一样的：</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'Deploy'</span>)</span></span> &#123;</span><br><span class="line">      echo <span class="string">"6. Deploy Stage"</span></span><br><span class="line">      sh <span class="string">"kubectl apply -f k8s.yaml"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>点击jenkins进行构建<br><img src="https://img.xxlaila.cn/56hjkshdfdksnfkldsj.png" alt="img"></li></ul><blockquote><p>当然，这里部署失败，先别管，证明流程是对的，可以这么走</p></blockquote><p><img src="https://img.xxlaila.cn/3947dnfdsflskfjdsf.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;以上的配置基本已经完成，但是我们的实际项目实践过程中，可能还需要一些人工干预的步骤，比如我们提交了一次代码，测试也通过了，镜像也打包上传了，但是这个版本并不一定就是要立刻上线到生产环境的。我们可能需要将该版本先发布到测试环境、QA 环境、或者预览环境之类的，总之直接就发布到线上环境去还是挺少见的，所以我们需要增加人工确认的环节，一般都是在 CD 的环节才需要人工干预，比如我们这里的最后两步，我们就可以在前面加上确认，比如：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">'YAML'</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"5. Change YAML File Stage"</span></span><br><span class="line">      def userInput = <span class="built_in">input</span>(</span><br><span class="line">          id: <span class="string">'userInput'</span>,</span><br><span class="line">          message: <span class="string">'Choose a deploy environment'</span>,</span><br><span class="line">          parameter<span class="variable">s:</span> [</span><br><span class="line">              [</span><br><span class="line">                  #clas<span class="variable">s:</span> <span class="string">'ChoiceParameterDefinition'</span>,</span><br><span class="line">                  choice<span class="variable">s:</span> <span class="string">"Dev\nTest\nUat\nDemo\nPord"</span>,</span><br><span class="line">                  name: <span class="string">'Env'</span></span><br><span class="line">                  ]</span><br><span class="line">              ]</span><br><span class="line">          )</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">"This is a deploy step to $&#123;userInput.Env&#125;"</span></span><br><span class="line">          <span class="keyword">sh</span> <span class="string">"sed -i 's/&lt;BUILD_TAG&gt;/$&#123;build_tag&#125;/' k8s.yaml"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;这里使用了 input 关键字，里面使用一个 Choice 的列表来让用户进行选择，然后在我们选择了部署环境后，我们当然也可以针对不同的环境再做一些操作，比如可以给不同环境的 YAML 文件部署到不同的 namespace 下面去，增加不同的标签等等操作：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">stage</span><span class="params">(<span class="string">'Deploy'</span>)</span></span> &#123;</span><br><span class="line">      echo <span class="string">"6. Deploy Stage"</span></span><br><span class="line">      <span class="keyword">if</span> (userInput<span class="selector-class">.Env</span> == <span class="string">"Dev"</span>)&#123;</span><br><span class="line">          <span class="comment">// deploy dev stuff</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userInput<span class="selector-class">.Env</span> == <span class="string">"Test"</span>)&#123;</span><br><span class="line">          <span class="comment">// deploy test stuff</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// deploy prod stuff</span></span><br><span class="line">      &#125;</span><br><span class="line">      sh <span class="string">"kubectl apply -f k8s.yaml"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于这一步也属于部署的范畴，所以我们可以将最后两步都合并成一步，我们最终的 Pipeline 脚本如下：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">node(<span class="string">'node-jnlp'</span>) &#123;</span><br><span class="line">    stage(<span class="string">'Clone'</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"1.Clone Stage"</span></span><br><span class="line">        git ur<span class="variable">l:</span> <span class="string">"https://github.com/xxlaila/jenkins-demo.git"</span></span><br><span class="line">        script &#123;</span><br><span class="line">            build_tag = <span class="keyword">sh</span>(returnStdou<span class="variable">t:</span> true, <span class="keyword">scrip</span><span class="variable">t:</span> <span class="string">'git rev-parse --short HEAD'</span>).trim()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Test'</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"2.Test Stage"</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"3.Build Docker Image Stage"</span></span><br><span class="line">        <span class="keyword">sh</span> <span class="string">"docker build -t xxlaila/jenkins-demo:$&#123;build_tag&#125; ."</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Push'</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"4.Push Docker Image Stage"</span></span><br><span class="line">        withCredentials([usernamePassword(credentialsId: <span class="string">'dockerHub'</span>, passwordVariable: <span class="string">'dockerHubPassword'</span>, usernameVariable: <span class="string">'dockerHubUser'</span>)]) &#123;</span><br><span class="line">            <span class="keyword">sh</span> <span class="string">"docker login -u $&#123;dockerHubUser&#125; -p $&#123;dockerHubPassword&#125;"</span></span><br><span class="line">            <span class="keyword">sh</span> <span class="string">"docker push cnych/jenkins-demo:$&#123;build_tag&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'Deploy'</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"5. Deploy Stage"</span></span><br><span class="line">        def userInput = <span class="built_in">input</span>(</span><br><span class="line">            id: <span class="string">'userInput'</span>,</span><br><span class="line">            message: <span class="string">'Choose a deploy environment'</span>,</span><br><span class="line">            parameter<span class="variable">s:</span> [</span><br><span class="line">                [</span><br><span class="line">                    $clas<span class="variable">s:</span> <span class="string">'ChoiceParameterDefinition'</span>,</span><br><span class="line">                    choice<span class="variable">s:</span> <span class="string">"Dev\nQA\nProd"</span>,</span><br><span class="line">                    name: <span class="string">'Env'</span></span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"This is a deploy step to $&#123;userInput&#125;"</span></span><br><span class="line">        <span class="keyword">sh</span> <span class="string">"sed -i 's/&lt;BUILD_TAG&gt;/$&#123;build_tag&#125;/' k8s.yaml"</span></span><br><span class="line">        <span class="keyword">if</span> (userInput == <span class="string">"Dev"</span>) &#123;</span><br><span class="line">            // deploy dev stuff</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userInput == <span class="string">"QA"</span>)&#123;</span><br><span class="line">            // deploy <span class="keyword">qa</span> stuff</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            // deploy prod stuff</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">sh</span> <span class="string">"kubectl apply -f k8s.yaml"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>错误</em>: 在jenkins执行构建的时候提示:</p><p><img src="https://img.xxlaila.cn/2846djkfhklsdjdklsd.png" alt="img"></p><blockquote><p>没有权限进行部署，下面进行权限的分配。</p></blockquote><ul><li><p>查看kube-ops 下面的角色</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get role -n kube-ops</span></span><br><span class="line">NAME       AGE</span><br><span class="line">jenkins2   2d6h</span><br></pre></td></tr></table></figure></li><li><p>查看role定义的资源权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get role jenkins2 -n kube-ops -o yaml</span></span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">"2019-01-14T03:07:25Z"</span></span><br><span class="line">  name: jenkins2</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  resourceVersion: <span class="string">"2389179"</span></span><br><span class="line">  selfLink: /apis/rbac.authorization.k8s.io/v1/namespaces/kube-ops/roles/jenkins2</span><br><span class="line">  uid: 84762132-17a9-11e9-8991-fa163e14c5bd</span><br><span class="line">rules:</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods</span><br><span class="line">  verbs:</span><br><span class="line">  - create</span><br><span class="line">  - delete</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - patch</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods/<span class="built_in">exec</span></span><br><span class="line">  verbs:</span><br><span class="line">  - create</span><br><span class="line">  - delete</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - patch</span><br><span class="line">  - update</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - pods/<span class="built_in">log</span></span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br><span class="line">  - list</span><br><span class="line">  - watch</span><br><span class="line">- apiGroups:</span><br><span class="line">  - <span class="string">""</span></span><br><span class="line">  resources:</span><br><span class="line">  - secrets</span><br><span class="line">  verbs:</span><br><span class="line">  - get</span><br></pre></td></tr></table></figure></li><li><p>创建jenkins2的权限</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>k8s-zxc-test<span class="number">-3</span> ~]# kubectl -n kube-system create sa jenkins2</span><br><span class="line">serviceaccount/jenkins2 created</span><br></pre></td></tr></table></figure></li><li><p>授权访问</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">[root@k8s-zxc-test<span class="number">-3</span> ~]# kubectl <span class="built_in">create</span> clusterrolebinding jenkins2 <span class="comment">--clusterrole cluster-admin --serviceaccount=kube-ops:jenkins2</span></span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.<span class="built_in">io</span>/jenkins2 created</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix企业微信告警</title>
    <url>/2019/08/20/zabbix%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E5%91%8A%E8%AD%A6/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;Zabbix可以通过多种方式把告警信息发送到指定人，常用的有邮件，短信报警方式，但是越来越多的企业开始使用zabbix结合微信作为主要的告警方式，这样可以及时有效的把告警信息推送到接收人，方便告警的及时处理。<br>&nbsp;&nbsp;&nbsp;&nbsp;微信企业号需要先在企业通信录新建该员工，该员工才能关注该企业号，这样就能实现告警信息的私密性。如果使用公众号，则只要所有关注了该公众号的人都能收到告警消息，容易造成信息泄露。而且员工数少于200人的企业号是不用钱的，也没有任何申请限制.</p><h3 id="1、脚本存放目录"><a href="#1、脚本存放目录" class="headerlink" title="1、脚本存放目录"></a>1、脚本存放目录</h3><p>/usr/lib/zabbix/alertscripts，脚本的权限是zabbix 账户，具有可执行权限</p><a id="more"></a><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat wechat.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment">#_*_coding:utf-8 _*_</span></span><br><span class="line"><span class="built_in">import</span> requests,sys,json</span><br><span class="line"><span class="built_in">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding('utf-<span class="number">8</span>')</span><br><span class="line">def GetToken(Corpid,Secret):</span><br><span class="line">    <span class="attr">Url</span> = <span class="string">"https://qyapi.weixin.qq.com/cgi-bin/gettoken"</span></span><br><span class="line">    <span class="attr">Data</span> = &#123;</span><br><span class="line">        <span class="string">"corpid"</span>:Corpid,</span><br><span class="line">        <span class="string">"corpsecret"</span>:Secret</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">r</span> = requests.get(<span class="attr">url=Url,params=Data,verify=False)</span></span><br><span class="line">    <span class="attr">Token</span> = r.json()['access_token']</span><br><span class="line">    return Token</span><br><span class="line">def SendMessage(Token,User,Agentid,Subject,Content):</span><br><span class="line">    <span class="attr">Url</span> = <span class="string">"https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=%s"</span> % Token</span><br><span class="line">    <span class="attr">Data</span> = &#123;</span><br><span class="line">        <span class="string">"touser"</span>: User,                                 <span class="comment"># 企业号中的用户帐号，在zabbix用户Media中配置，如果配置不正常，将按部门发送。</span></span><br><span class="line">        <span class="comment">#"totag": Tagid,                                # 企业号中的标签id，群发使用（推荐）</span></span><br><span class="line">        <span class="string">"toparty"</span>: <span class="string">"2"</span>,                            <span class="comment"># 企业号中的部门id，群发时使用。</span></span><br><span class="line">        <span class="string">"msgtype"</span>: <span class="string">"text"</span>,                              <span class="comment"># 消息类型。</span></span><br><span class="line">        <span class="string">"agentid"</span>: Agentid,                             <span class="comment"># 企业号中的应用id。</span></span><br><span class="line">        <span class="string">"text"</span>: &#123;</span><br><span class="line">            <span class="string">"content"</span>: Subject + '\n' + Content</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"safe"</span>: <span class="string">"0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">r</span> = requests.post(<span class="attr">url=Url,data=json.dumps(Data),verify=False)</span></span><br><span class="line">    return r.text</span><br><span class="line"><span class="keyword">if</span> <span class="attr">__name__</span> == '__main__':</span><br><span class="line">    <span class="attr">User</span> = sys.argv[<span class="number">1</span>]                                                              <span class="comment"># zabbix传过来的第一个参数</span></span><br><span class="line">    <span class="attr">Subject</span> = sys.argv[<span class="number">2</span>]                                                           <span class="comment"># zabbix传过来的第二个参数</span></span><br><span class="line">    <span class="attr">Content</span> = sys.argv[<span class="number">3</span>]                                                           <span class="comment"># zabbix传过来的第三个参数</span></span><br><span class="line">    <span class="attr">Corpid</span> = <span class="string">"wwa9c9999"</span>                                                   <span class="comment"># CorpID是企业号的标识</span></span><br><span class="line">    <span class="attr">Secret</span> = <span class="string">"VGbZvXJ5RiLskdksh2dkhaskdu92uihsjdhjksadh"</span>     <span class="comment"># Secret是管理组凭证密钥</span></span><br><span class="line">    <span class="comment">#Tagid = "1"                                                                     # 通讯录标签ID</span></span><br><span class="line">    <span class="attr">Agentid</span> = <span class="string">"1000001"</span>                                                                   <span class="comment"># 应用ID</span></span><br><span class="line">    <span class="comment">#Partyid = "1"                                                                  # 部门ID</span></span><br><span class="line">    <span class="attr">Token</span> = GetToken(Corpid, Secret)</span><br><span class="line">    <span class="attr">Status</span> = SendMessage(Token,User,Agentid,Subject,Content)</span><br><span class="line">    print Status</span><br></pre></td></tr></table></figure><h3 id="2、重要参数介绍"><a href="#2、重要参数介绍" class="headerlink" title="2、重要参数介绍"></a>2、重要参数介绍</h3><ul><li>toparty：”2” 这个参数是在企业微信里面部门的id</li><li>Corpid：企业的CorpID标示</li><li>Secret：管理组的密钥凭证</li><li>Agentid：新建应用的id</li><li>只需要求修改以上参数即可</li></ul><p><img src="https://img.xxlaila.cn/image2018-8-23_16-8-30.png" alt="img"></p><ul><li>以上部门没有新建，只是在这个应用中新增加了几个用户。最好的方式是增加一个部门组，用户添加到部门组里面，这种方式最科学</li></ul><h3 id="3、登陆zabbix-进行配置"><a href="#3、登陆zabbix-进行配置" class="headerlink" title="3、登陆zabbix 进行配置"></a>3、登陆zabbix 进行配置</h3><h4 id="3-1、创建一个媒介类型"><a href="#3-1、创建一个媒介类型" class="headerlink" title="3.1、创建一个媒介类型"></a>3.1、创建一个媒介类型</h4><p><img src="https://img.xxlaila.cn/image2018-8-23_16-11-59.png" alt="img"></p><h4 id="3-2、创建一个告警类别"><a href="#3-2、创建一个告警类别" class="headerlink" title="3.2、创建一个告警类别"></a>3.2、创建一个告警类别</h4><p><img src="https://img.xxlaila.cn/image2018-8-23_16-12-53.png" alt="img"><br><img src="https://img.xxlaila.cn/image2018-8-23_16-13-9.png" alt="img"></p><blockquote><p>服务器:{HOST.NAME}发生: {TRIGGER.NAME}故障!</p><p>告警主机:{HOST.NAME}<br>告警地址:{HOST.IP}<br>监控项目:{ITEM.NAME}<br>监控取值:{ITEM.LASTVALUE}<br>告警等级:{TRIGGER.SEVERITY}<br>当前状态:{TRIGGER.STATUS}<br>告警信息:{TRIGGER.NAME}<br>告警时间:{EVENT.DATE} {EVENT.TIME}<br>事件ID:{EVENT.ID}</p></blockquote><p><img src="https://img.xxlaila.cn/image2018-8-23_16-13-20.png" alt="img"></p><blockquote><p>服务器:{HOST.NAME}: {TRIGGER.NAME}已恢复!</p><p>告警主机:{HOST.NAME}<br>告警地址:{HOST.IP}<br>监控项目:{ITEM.NAME}<br>监控取值:{ITEM.LASTVALUE}<br>告警等级:{TRIGGER.SEVERITY}<br>当前状态:{TRIGGER.STATUS}<br>告警信息:{TRIGGER.NAME}<br>告警时间:{EVENT.DATE} {EVENT.TIME}<br>恢复时间:{EVENT.RECOVERY.DATE} {EVENT.RECOVERY.TIME}<br>持续时间:{EVENT.AGE}<br>事件ID:{EVENT.ID}</p></blockquote><p><img src="https://img.xxlaila.cn/image2018-8-23_16-13-28.png" alt="img"></p><blockquote><p>服务器:{HOST.NAME}: 报警确认</p><p>确认人:{USER.FULLNAME}<br>时间:{ACK.DATE} {ACK.TIME}<br>确认信息如下:<br>“{ACK.MESSAGE}”<br>问题服务器IP:{HOSTNAME1}<br>问题ID:{EVENT.ID}<br>当前的问题是: {TRIGGER.NAME}</p></blockquote><h4 id="3-3、为用户添加告警类型"><a href="#3-3、为用户添加告警类型" class="headerlink" title="3.3、为用户添加告警类型"></a>3.3、为用户添加告警类型</h4><p><img src="https://img.xxlaila.cn/image2018-8-23_16-21-58.png" alt="img"><br>这里为admin用户添加的 告警方式。注意一下send to 这个参数，这里一定要是@all。否则不成功</p><h3 id="4、企业微信测试"><a href="#4、企业微信测试" class="headerlink" title="4、企业微信测试"></a>4、企业微信测试</h3><p><img src="https://img.xxlaila.cn/image2018-8-23_16-23-14.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>帧中继配置</title>
    <url>/2019/08/19/%E5%B8%A7%E4%B8%AD%E7%BB%A7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="点对点配置"><a href="#点对点配置" class="headerlink" title="点对点配置"></a>点对点配置</h3><p><img src="https://img.xxlaila.cn/1566222269423.jpg" alt="img"></p><ul><li><p>RA配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RA]int s0/<span class="number">0</span></span><br><span class="line">[RA-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">102</span>      设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">102</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RA-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本接口IP地址</span><br><span class="line">[RA-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>RB配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RB]int s0/<span class="number">0</span></span><br><span class="line">[RB-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">201</span>       设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">201</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RB-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本接口IP地址</span><br><span class="line">[RB-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li>FRAME-RELAY配置:<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[FRAME-RELAY]frame-relay switching                 允许帧中继进行PVC交换</span><br><span class="line">[FRAME-RELAY]int s0/0</span><br><span class="line">[FRAME-RELAY-s0/0] encap frame-relay    封装帧中继协议 </span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/0]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>102<span class="built_in"> interface </span>s0/1 201    配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/1</span><br><span class="line">[FRAME-RELAY-s0/1] encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/1]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay<span class="built_in"> route </span>pvc 201<span class="built_in"> interface </span>s0/0 102    配置帧中继PVC交换路由</span><br></pre></td></tr></table></figure></li></ul><h3 id="点对多点（星形）"><a href="#点对多点（星形）" class="headerlink" title="点对多点（星形）"></a>点对多点（星形）</h3><p><img src="https://img.xxlaila.cn/1566222529208.jpg" alt="img"></p><ul><li><p>RA配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RA]int s0/<span class="number">0</span></span><br><span class="line">[RA-s0/<span class="number">0</span>] encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">102</span>      设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">103</span>                 </span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">102</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RA-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.3</span> <span class="number">103</span>  </span><br><span class="line">[RA-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>     配置本接口IP地址</span><br><span class="line">[RA-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>RB配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RB]int s0/<span class="number">0</span></span><br><span class="line">[RB-s0/<span class="number">0</span>] encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">201</span>       设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">201</span>  建立对端协议地址与本地INTERFACE-DLCI</span><br><span class="line">[RB-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       配置本接口IP地址</span><br><span class="line">[RC-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>RC配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RC]int s0/<span class="number">0</span></span><br><span class="line">[RC-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RC-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">301</span>       设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RC-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">301</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RC-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.3</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       配置本接口IP地址</span><br><span class="line">[RC-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>FRAME-RELAY配置:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[FRAME-RELAY]frame-relay switching      允许帧中继进行PVC交换</span><br><span class="line">[FRAME-RELAY]int s0/0</span><br><span class="line">[FRAME-RELAY-s0/0]encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/0]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>102<span class="built_in"> interface </span>s0/1 201   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>103<span class="built_in"> interface </span>s0/2 301   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/1</span><br><span class="line">[FRAME-RELAY-s0/1]encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/1]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay<span class="built_in"> route </span>201<span class="built_in"> interface </span>s0/0 102   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/2</span><br><span class="line">[FRAME-RELAY-s0/2]encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/2]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay<span class="built_in"> route </span>301<span class="built_in"> interface </span>s0/0 103   配置帧中继PVC交换路由</span><br></pre></td></tr></table></figure></li></ul><h3 id="点对多点子接口（星形）"><a href="#点对多点子接口（星形）" class="headerlink" title="点对多点子接口（星形）"></a>点对多点子接口（星形）</h3><p><img src="https://img.xxlaila.cn/1566222807499.jpg" alt="img"></p><ul><li><p>RA配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RA]int s0/<span class="number">0</span></span><br><span class="line">[RA-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RA]int s0/<span class="number">0.1</span> multipoint</span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay interface-dlci <span class="number">102</span>     设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay interface-dlci <span class="number">103</span>                 </span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">102</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.3</span> <span class="number">103</span>  </span><br><span class="line">[RA-s0/<span class="number">0.1</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本子接口IP地址</span><br></pre></td></tr></table></figure></li><li><p>RB配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RB]int s0/<span class="number">0</span></span><br><span class="line">[RB-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">201</span>       设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RB-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">201</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RB-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       配置本接口IP地址</span><br><span class="line">[RB-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>RC配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RC]int s0/<span class="number">0</span></span><br><span class="line">[RC-s0/<span class="number">0</span>]encap frame-relay    封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RC-s0/<span class="number">0</span>]frame-relay interface-dlci <span class="number">301</span>       设置本接口对应的INTERFACE-DLCI号</span><br><span class="line">[RC-s0/<span class="number">0</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">301</span>  建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RC-s0/<span class="number">0</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.3</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>    配置本接口IP地址</span><br><span class="line">[RC-s0/<span class="number">0</span>]no sh                    打开此物理接口</span><br></pre></td></tr></table></figure></li><li><p>FRAME-RELAY配置:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[FRAME-RELAY]frame-relay switching    允许帧中继进行PVC交换</span><br><span class="line">[FRAME-RELAY]int s0/0</span><br><span class="line">[FRAME-RELAY-s0/0]encap frame-relay    封装帧中继协议 </span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/0]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>102<span class="built_in"> interface </span>s0/1 201   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>103<span class="built_in"> interface </span>s0/2 301   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/1</span><br><span class="line">[FRAME-RELAY-s0/1]encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/1]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay<span class="built_in"> route </span>201<span class="built_in"> interface </span>s0/0 102   配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/2</span><br><span class="line">[FRAME-RELAY-s0/2]encap frame-relay    封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/2]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay<span class="built_in"> route </span>301<span class="built_in"> interface </span>s0/0 103   配置帧中继PVC交换路由</span><br></pre></td></tr></table></figure></li></ul><h3 id="点对点子接口（全网状）"><a href="#点对点子接口（全网状）" class="headerlink" title="点对点子接口（全网状）"></a>点对点子接口（全网状）</h3><p><img src="https://img.xxlaila.cn/1566222918549.jpg" alt="img"></p><ul><li><p>RA配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RA]int s0/<span class="number">0</span> </span><br><span class="line">[RA-s0/<span class="number">0</span>]encap frame-relay     封装帧中继协议</span><br><span class="line">[RA-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RA-s0/<span class="number">0</span>]no sh               打开此物理接口</span><br><span class="line">[RA]int s0/<span class="number">0.1</span> point-to-point</span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay interface-dlci <span class="number">102</span>        设置本接口对应的INTERFACE-DLCI号              </span><br><span class="line">[RA-s0/<span class="number">0.1</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">102</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RA-s0/<span class="number">0.1</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本子接口IP地址</span><br><span class="line">[RA]int s0/<span class="number">0.2</span> point-to-point</span><br><span class="line">[RA-s0/<span class="number">0.2</span>]frame-relay interface-dlci <span class="number">103</span>        设置本接口对应的INTERFACE-DLCI号              </span><br><span class="line">[RA-s0/<span class="number">0.2</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">103</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RA-s0/<span class="number">0.2</span>]ip add <span class="number">172.16</span><span class="number">.2</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>    配置本子接口IP地址</span><br></pre></td></tr></table></figure></li><li><p>RB配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RB]int s0/<span class="number">0</span></span><br><span class="line">[RB-s0/<span class="number">0</span>]encap frame-relay     封装帧中继协议</span><br><span class="line">[RB-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RB-s0/<span class="number">0</span>]no sh                   打开此物理接口</span><br><span class="line">[RB]int s0/<span class="number">0.1</span> point-to-point</span><br><span class="line">[RB-s0/<span class="number">0.1</span>]frame-relay interface-dlci <span class="number">201</span>     设置本接口对应的INTERFACE-DLCI号             </span><br><span class="line">[RB-s0/<span class="number">0.1</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">201</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RB-s0/<span class="number">0.1</span>]ip add <span class="number">172.16</span><span class="number">.1</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>     配置本接口IP地址</span><br><span class="line">[RB]int s0/<span class="number">0.2</span> point-to-point</span><br><span class="line">[RB-s0/<span class="number">0.2</span>]frame-relay interface-dlci <span class="number">203</span>      设置本接口对应的INTERFACE-DLCI号             </span><br><span class="line">[RB-s0/<span class="number">0.2</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.1</span><span class="number">.1</span> <span class="number">203</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RB-s0/<span class="number">0.2</span>]ip add <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本接口IP地址</span><br></pre></td></tr></table></figure></li><li><p>RC配置:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[RC]int s0/<span class="number">0</span></span><br><span class="line">[RC-s0/<span class="number">0</span>]encap frame-relay     封装帧中继协议</span><br><span class="line">[RC-s0/<span class="number">0</span>] frame-relay intf dte</span><br><span class="line">[RC-s0/<span class="number">0</span>]no sh                     打开此物理接口</span><br><span class="line">[RC]int s0/<span class="number">0.1</span> point-to-point</span><br><span class="line">[RC-s0/<span class="number">0.1</span>]frame-relay interface-dlci <span class="number">301</span>         设置本接口对应的INTERFACE-DLCI号                </span><br><span class="line">[RC-s0/<span class="number">0.1</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.3</span><span class="number">.1</span> <span class="number">301</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RC-s0/<span class="number">0.1</span>]ip add <span class="number">172.16</span><span class="number">.3</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>       配置本接口IP地址</span><br><span class="line">[RC]int s0/<span class="number">0.2</span> point-to-point</span><br><span class="line">[RC-s0/<span class="number">0.2</span>]frame-relay interface-dlci <span class="number">302</span>         设置本接口对应的INTERFACE-DLCI号                </span><br><span class="line">[RC-s0/<span class="number">0.2</span>]frame-relay map ip <span class="number">172.16</span><span class="number">.2</span><span class="number">.1</span> <span class="number">302</span> 建立对端协议地址与本地INTERFACE-DLCI号的映射关系</span><br><span class="line">[RC-s0/<span class="number">0.2</span>]ip add <span class="number">172.16</span><span class="number">.2</span><span class="number">.2</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        配置本接口IP地址</span><br></pre></td></tr></table></figure></li><li><p>FRAME-RELAY配置:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[FRAME-RELAY]frame-relay switching                 允许帧中继进行PVC交换</span><br><span class="line">[FRAME-RELAY]int s0/0</span><br><span class="line">[FRAME-RELAY-s0/0]encap frame-relay    封装帧中继协议 </span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/0]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>102<span class="built_in"> interface </span>s0/1 201     配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY-s0/0]frame-relay<span class="built_in"> route </span>103<span class="built_in"> interface </span>s0/2 301     配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/1</span><br><span class="line">[FRAME-RELAY-s0/1]encap frame-relay           封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/1]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay<span class="built_in"> route </span>201<span class="built_in"> interface </span>s0/0 102    配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY-s0/1]frame-relay<span class="built_in"> route </span>pvc 203<span class="built_in"> interface </span>s0/0 302    配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY]int s0/2</span><br><span class="line">[FRAME-RELAY-s0/2]encap frame-relay           封装帧中继协议</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay intf dce        设置帧中继接口类型为DCE端</span><br><span class="line">[FRAME-RELAY-s0/2]clock rate 630100            设置DCE时钟频率</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay<span class="built_in"> route </span>301<span class="built_in"> interface </span>s0/0 103    配置帧中继PVC交换路由</span><br><span class="line">[FRAME-RELAY-s0/2]frame-relay<span class="built_in"> route </span>302<span class="built_in"> interface </span>s0/0 203    配置帧中继PVC交换路由</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
      <tags>
        <tag>帧中继</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes ci/cd(一)</title>
    <url>/2019/08/12/kubernetes-ci-cd-%E4%B8%80/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><blockquote><p>基于jenkins的CI/CD安装</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jenkins一个流行的持续集成/发布工具，在Kubernetes使用,持续构建与发布是我们日常工作中必不可少的一个步骤，目前大多公司都采用 Jenkins 集群来搭建符合需求的 CI/CD 流程，然而传统的 Jenkins Slave 一主多从方式会存在一些痛点，比如：主 Master 发生单点故障时，整个流程都不可用了；每个 Slave 的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲；资源分配不均衡，有的 Slave 要运行的 job 出现排队等待，而有的 Slave 处于空闲状态；最后资源有浪费，每台 Slave 可能是实体机或者 VM，当 Slave 处于空闲状态时，也不会完全释放掉资源。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提到基于Kubernete的CI/CD，可以使用的工具有很多，比如Jenkins、Gitlab CI已经新兴的drone之类的，我们这里会使用大家最为熟悉的Jenins来做CI/CD的工具。</p><ul><li>优点:<ul><li>Jenkins 安装完成了，接下来我们不用急着就去使用，我们要了解下在 Kubernetes 环境下面使用 Jenkins 有什么好处。都知道持续构建与发布是我们日常工作中必不可少的一个步骤，目前大多公司都采用 Jenkins 集群来搭建符合需求的 CI/CD 流程，然而传统的 Jenkins Slave 一主多从方式会存在一些痛点，比如:<ul><li>E 主 Master 发生单点故障时，整个流程都不可用了。</li><li>E 每个 Slave 的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲。</li><li>E 资源分配不均衡，有的 Slave 要运行的 job 出现排队等待，而有的 Slave 处于空闲状态。</li><li>E 资源有浪费，每台 Slave 可能是物理机或者虚拟机，当 Slave 处于空闲状态时，也不会完全释放掉资源。</li></ul></li><li>正因为这些种种痛点，我们渴望一种更高效更可靠的方式来完成这个 CI/CD 流程，而 Docker 虚拟化容器技术能很好的解决这个痛点，又特别是在 Kubernetes 集群环境下面能够更好来解决上面的问题，下图是基于 Kubernetes 搭建 Jenkins 集群的简单示意图<br><img src="https://img.xxlaila.cn/xjfhs84we.png" alt="img"></li></ul></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以看到 Jenkins Master 和 Jenkins Slave 以 Pod 形式运行在 Kubernetes 集群的 Node 上，Master 运行在其中一个节点，并且将其配置数据存储到一个 Volume 上去，Slave 运行在各个节点上，并且它不是一直处于运行状态，它会按照需求动态的创建并自动删除。</p><a id="more"></a><ul><li>这种方式的工作流程大致为<ul><li>当 Jenkins Master 接受到 Build 请求时，会根据配置的 Label 动态创建一个运行在 Pod 中的 Jenkins Slave 并注册到 Master 上，当运行完 Job 后，这个 Slave 会被注销并且这个 Pod 也会自动删除，恢复到最初状态。那么使用这种方式带来了哪些好处呢？</li><li>E 服务高可用，当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。</li><li>E 动态伸缩，合理使用资源，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。</li><li>E 扩展性好，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。</li></ul></li></ul><h2 id="1、安装jenkins"><a href="#1、安装jenkins" class="headerlink" title="1、安装jenkins"></a>1、安装jenkins</h2><h3 id="1-1、新建一个-Deployment"><a href="#1-1、新建一个-Deployment" class="headerlink" title="1.1、新建一个 Deployment"></a>1.1、新建一个 Deployment</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cat  jenkins-deployment.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-ops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">jenkins/jenkins:lts</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">50000</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">agent</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">1000</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">1</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">500</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">512</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        livenessProbe:</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/login</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line"><span class="attr">          timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">          failureThreshold:</span> <span class="number">12</span></span><br><span class="line"><span class="attr">        readinessProbe:</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/login</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line"><span class="attr">          timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">          failureThreshold:</span> <span class="number">12</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">jenkinshome</span></span><br><span class="line"><span class="attr">          subPath:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/var/jenkins_home</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">LIMITS_MEMORY</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            resourceFieldRef:</span></span><br><span class="line"><span class="attr">              resource:</span> <span class="string">limits.memory</span></span><br><span class="line"><span class="attr">              divisor:</span> <span class="number">1</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">JAVA_OPTS</span></span><br><span class="line"><span class="attr">          value:</span> <span class="bullet">-Xmx$(LIMITS_MEMORY)m</span> <span class="attr">-XshowSettings:vm</span> <span class="bullet">-Dhudson.slaves.NodeProvisioner.initialDelay=0</span> <span class="bullet">-Dhudson.slaves.NodeProvisioner.MARGIN=50</span> <span class="bullet">-Dhudson.slaves.NodeProvisioner.MARGIN0=0.85</span> <span class="bullet">-Duser.timezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">      securityContext:</span></span><br><span class="line"><span class="attr">        fsGroup:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">jenkinshome</span></span><br><span class="line"><span class="attr">        persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">          claimName:</span> <span class="string">opspvc</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-ops</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">30002</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">agent</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">50000</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="string">agent</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;对象资源都放置在一个名为 kube-ops 的 namespace 下面，所以我们需要添加创建一个 namespace,namespace 请参考namspace章节的具体介绍</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"># kubectl <span class="keyword">create</span> <span class="keyword">namespace</span> kube-ops</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;这里使用一个名为 jenkins/jenkins:lts 的官方镜像，这是 jenkins 官方的 Docker 镜像，然后也有一些环境变量，当然我们也可以根据自己的需求来定制一个镜像，比如我们可以将一些插件打包在自定义的镜像当中，<a href="https://github.com/jenkinsci/docker" target="_blank" rel="noopener">可以参考文档</a>。我们这里使用默认的官方镜像就行，另外一个还需要注意的是我们将容器的 /var/jenkins_home 目录挂载到了一个名为 opspvc 的 PVC 对象上面，所以我们同样还得提前创建一个对应的 PVC 对象，当然我们也可以使用我们前面的 StorageClass 对象来自动创建：(jenkins-pvc.yaml)</p><h3 id="1-2-Jenkins-StorageClass-创建"><a href="#1-2-Jenkins-StorageClass-创建" class="headerlink" title="1.2 Jenkins StorageClass 创建"></a>1.2 Jenkins StorageClass 创建</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat jenkins-pvc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">opspv</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-ops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  capacity:</span></span><br><span class="line"><span class="attr">    storage:</span> <span class="number">20</span><span class="string">Gi</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ReadWriteMany</span></span><br><span class="line"><span class="attr">  persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line"><span class="attr">  nfs:</span></span><br><span class="line"><span class="attr">    server:</span> <span class="number">172.21</span><span class="number">.16</span><span class="number">.231</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/data/jenkins</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">opspvc</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-ops</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteMany</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">20</span><span class="string">Gi</span></span><br></pre></td></tr></table></figure><ul><li>创建pvc对象<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># kubectl create -f jenkins-pvc.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;另外这里还需要使用到一个拥有相关权限的 serviceAccount：jenkins2，我们这里只是给jenkins 赋予了一些必要的权限，当然如果你对 serviceAccount 的权限不是很熟悉的话，我们给这个 sa 绑定一个 cluster-admin 的集群角色权限也是可以的，当然这样具有一定的安全风险：（jenkins-rbac.yaml）</p><h3 id="1-3-Jenkins-serviceAccount"><a href="#1-3-Jenkins-serviceAccount" class="headerlink" title="1.3 Jenkins serviceAccount"></a>1.3 Jenkins serviceAccount</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># cat jenkins-rbac.yaml</span></span><br><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> ServiceAccount</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> jenkins2</span><br><span class="line"><span class="symbol">  namespace:</span> kube-ops</span><br><span class="line"> </span><br><span class="line">---</span><br><span class="line"> </span><br><span class="line"><span class="symbol">kind:</span> Role</span><br><span class="line"><span class="symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> jenkins2</span><br><span class="line"><span class="symbol">  namespace:</span> kube-ops</span><br><span class="line"><span class="symbol">rules:</span></span><br><span class="line">  - apiGroups: [<span class="string">"extensions"</span>, <span class="string">"apps"</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"deployments"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"create"</span>, <span class="string">"delete"</span>, <span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"patch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"services"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"create"</span>, <span class="string">"delete"</span>, <span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"patch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"pods"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"create"</span>,<span class="string">"delete"</span>,<span class="string">"get"</span>,<span class="string">"list"</span>,<span class="string">"patch"</span>,<span class="string">"update"</span>,<span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"pods/exec"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"create"</span>,<span class="string">"delete"</span>,<span class="string">"get"</span>,<span class="string">"list"</span>,<span class="string">"patch"</span>,<span class="string">"update"</span>,<span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"pods/log"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"get"</span>,<span class="string">"list"</span>,<span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line"><span class="symbol">    resources:</span> [<span class="string">"secrets"</span>]</span><br><span class="line"><span class="symbol">    verbs:</span> [<span class="string">"get"</span>]</span><br><span class="line"> </span><br><span class="line">---</span><br><span class="line"><span class="symbol">apiVersion:</span> rbac.authorization.k8s.io/v1beta1</span><br><span class="line"><span class="symbol">kind:</span> RoleBinding</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> jenkins2</span><br><span class="line"><span class="symbol">  namespace:</span> kube-ops</span><br><span class="line"><span class="symbol">roleRef:</span></span><br><span class="line"><span class="symbol">  apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line"><span class="symbol">  kind:</span> Role</span><br><span class="line"><span class="symbol">  name:</span> jenkins2</span><br><span class="line"><span class="symbol">subjects:</span></span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line"><span class="symbol">    name:</span> jenkins2</span><br></pre></td></tr></table></figure><ul><li>创建 rbac 相关的资源对象<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># kubectl create -f jenkins-rbac.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;这里通过 ingress的形式来访问Jenkins 的 web 服务，Jenkins 服务端口为8080，50000 端口为agent，这个端口主要是用于 Jenkins 的 master 和 slave 之间通信使用的。(jenkins-ingress.yaml)</p><h3 id="1-4-Jenkins-对外提供访问"><a href="#1-4-Jenkins-对外提供访问" class="headerlink" title="1.4 Jenkins 对外提供访问"></a>1.4 Jenkins 对外提供访问</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat jenkins-ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">jenkins-ingress</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-ops</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">ci.xxlaila.cn</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">jenkins2</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><ul><li>创建 Jenkins 服务<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># kubectl create -f jenkins-deployment.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>创建完成后docke回去拉去镜像，需要等待一会，我们可以通过命令来进行查看jenkins是否部署成功</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># kubectl <span class="keyword">get</span> pods -n kube-ops</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">jenkins2<span class="number">-84f</span>476cbb-vz4b2   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">2</span>d19h</span><br></pre></td></tr></table></figure><p>部署完成以后我么可以通过在jenkins-ingress.yaml里面绑定过的域名进行访问，然后进行安装配置：<br><img src="https://img.xxlaila.cn/sfdsfdsf38432.png" alt="img"></p><blockquote><p>初始化的密码我们可以在 jenkins 的容器的日志中进行查看，也可以直接在 nfs 的共享数据目录中查看</p><p>$ cat /data/jenkins/jenkins2/secrets/initialAdminPassword</p></blockquote><p>完成配置，就可以到jenkins的界面，就和我们在vm下安装的jenkins没有任何的区别。<br><img src="https://img.xxlaila.cn/isdy823723894324.png" alt="img"></p><h2 id="2-配置jenkins"><a href="#2-配置jenkins" class="headerlink" title="2 配置jenkins"></a>2 配置jenkins</h2><p>接下来我们需要来配置 Jenkins，让他能够动态的生成 Slave 的 Pod，安装jenkins的插件清单</p><p><code>Kubernetes This plugin integrates Jenkins with Kubernetes</code><br>2.1 Kubernetes和Jenkins的结合<br>&nbsp;&nbsp;&nbsp;&nbsp;点击 系统管理(Manage Jenkins) —&gt; 系统配置(Configure System) —&gt; (拖到最下方)Add a new cloud —&gt; 选择 Kubernetes，然后填写 Kubernetes 和 Jenkins 配置信息。</p><p><img src="https://img.xxlaila.cn/di32sdsf.png" alt="img"></p><blockquote><p>注意 namespace，我们这里填 kube-ops，然后点击Test Connection，如果出现 Connection test successful 的提示信息证明Jenkins 已经可以和 Kubernetes 系统正常通信了，然后下方的 Jenkins URL 地址：<a href="http://jenkins2.kube-ops.svc.cluster.local:8080，这里的格式为服务名.namespace.svc.cluster.local:8080，根据上面创建的jenkins的服务名填写，我这里是之前创建的名为jenkins，如果是用上面我们创建的就应该是jenkins2" target="_blank" rel="noopener">http://jenkins2.kube-ops.svc.cluster.local:8080，这里的格式为服务名.namespace.svc.cluster.local:8080，根据上面创建的jenkins的服务名填写，我这里是之前创建的名为jenkins，如果是用上面我们创建的就应该是jenkins2</a></p></blockquote><h3 id="2-2、配置-Pod-Template"><a href="#2-2、配置-Pod-Template" class="headerlink" title="2.2、配置 Pod Template"></a>2.2、配置 Pod Template</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;配置 Jenkins Slave 运行的 Pod 模板，命名空间我们同样是用kube-ops，Labels 这里也非常重要，对于后面执行 Job 的时候需要用到该值，然后我们这里使用的是 cnych/jenkins:jnlp 这个镜像，这个镜像是在官方的 jnlp 镜像基础上定制的，加入了 kubectl 等一些实用的工具。<br><img src="https://img.xxlaila.cn/897kdfhgdkjb4.png" alt="img"><br><img src="https://img.xxlaila.cn/kjgsadsad8234632.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;另外需要注意我们这里需要在下面挂载一个主机目录，一个是 /var/run/docker.sock，该文件是用于 Pod 中的容器能够共享宿主机的 Docker，这就是说的 docker in docker 的方式，Docker 二进制文件我们已经打包到上面的镜像中了。如果在slave agent中想要访问kubernetes 集群中其他资源，我们还需要绑定之前创建的Service Account 账号:jenkins2</p><p><img src="https://img.xxlaila.cn/khsdif28734knsdfkds.png" alt="img"><br>&nbsp;&nbsp;&nbsp;&nbsp;另外还有几个参数需要注意，上图有一个pod寿命代理的空闲存活时间（分），意思是当处于空闲状态的时候保留 Slave Pod多长时间，这个参数最好我们保存默认就行了，如果你设置过大的话，Job 任务执行完成后，对应的 Slave Pod 就不会立即被销毁删除。到这里我们的 Kubernetes Plugin插件就算配置完成了</p><h3 id="2-3-Jenkins-测试"><a href="#2-3-Jenkins-测试" class="headerlink" title="2.3 Jenkins 测试"></a>2.3 Jenkins 测试</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Kubernetes 插件的配置工作完成了，接下来我们就来添加一个 Job 任务，看是否能够在 Slave Pod 中执行，任务执行完成后看 Pod 是否会被销毁在 Jenkins 首页点击create new jobs，创建一个测试的任务，输入任务名称，然后我们选择 Freestyle project 类型的任务<br>&nbsp;&nbsp;&nbsp;&nbsp;新建一个job为simple-test，增加一个shell模块，shell模块里面增加简单的echo来测试slave的动态部署：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"测试 Kubernetes 动态生成 jenkins slave"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"==============docker in docker==========="</span></span><br><span class="line">docker info</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"=============kubectl============="</span></span><br><span class="line">kubectl <span class="built_in">get</span> pods -n kube-<span class="built_in">system</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/s94uskljdslfd.png" alt="img"></p><p>现在我们直接在页面点击做成的 Build now 触发构建即可，然后观察 Kubernetes 集群中 Pod 的变化</p><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># kubectl get pods -n kube-ops</span></span><br></pre></td></tr></table></figure><p>Kubernetes 界面也会出现jenkins agent的进行pod的进行部署。部署完成后随及删除pod。</p><p><img src="https://img.xxlaila.cn/sakhd89234klmds.png" alt="img"><br><img src="https://img.xxlaila.cn/nslkfhio3rsd.png" alt="img"></p><h2 id="3、Jenkins错误解决"><a href="#3、Jenkins错误解决" class="headerlink" title="3、Jenkins错误解决"></a>3、Jenkins错误解决</h2><p>第一次学习安装jenkins踩了很多坑，但是同时也学习了很多的，下面是在k8s上安装jenkins遇到的一些错误：</p><ul><li>打开jenkins页面的时候提示dns不能解析，洁面如下图：</li></ul><p><img src="https://img.xxlaila.cn/skajdh823648uesd.png" alt="img"></p><ul><li>查看jenkins的日志提示</li></ul><p><img src="https://img.xxlaila.cn/8243ihkdfnklsads.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;导致的问题有https、网络连接不通畅，这里我们需要吧https修改为http，需要修改jenkins的配置文件。然后再重新建立jenkins的pod。进入jenkins的目录修改hudson.model.UpdateCenter.xml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ cat hudson.model.UpdateCenter.xml</span><br><span class="line"><span class="meta">&lt;?xml version='1.1' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sites</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://updates.jenkins.io/update-center.json<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;在做k8s的时候一定要用证书，不然后期在做各种服务的时候都会遇到错误，因为docker默认去私有registory要https，kuber-api要https。当然没有使用https都可以换成http，在次重新部署jenkins以后提示系列信息。访问目录没有权限。</p><p><img src="https://img.xxlaila.cn/2864jksfhjdsh.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;进入nfs目录，需要修改下目录权限, 因为当映射本地数据卷时，/home/docker/jenkins目录的拥有者为root用户，而容器中jenkins user的uid为1000</p><p><code>$ sudo chown -R 1000:1000 /data/jenkins</code></p><blockquote><p>这里吧https解决了还是遇到提示网络不通。下图</p></blockquote><p><img src="https://img.xxlaila.cn/xnks94uoildsfs.png" alt="img"></p><blockquote><p>这里是dns的不能解析的问题，以下排错思路：登陆jenkins的容器里面查看路由是否正确</p></blockquote><p><img src="https://img.xxlaila.cn/382468365324.png" alt="img"></p><blockquote><p>然后在确认容器是否可以联通外网，还是dns不能解析<br><img src="https://img.xxlaila.cn/fnijwy4nkdsfkhdsf.png" alt="img"></p></blockquote><blockquote><p>这里ping 114没有问题，ping域名不能解析，说明是dns解析有问题。接着我们在查看容器的dns配置</p></blockquote><p><img src="https://img.xxlaila.cn/dkjfsg328943242.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;这里是dns问题。这里不阐述dns，参考第二章k8s dns,jenkins 在执行编译的时候提示: <code>‘Jenkins’ doesn’t have label ‘jnlp-agent’</code>,在系统配置配置里面进行测试连接k8s 的api提示如下错误</p><p><img src="https://img.xxlaila.cn/324768ksdjsfhds.png" alt="img"></p><ul><li>添加jenkins的secret认证</li></ul><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># kubectl get secret  -<span class="keyword">n</span> kube-ops</span><br><span class="line">NAME                     <span class="keyword">TYPE</span>                                  DATA   AGE</span><br><span class="line">default-<span class="keyword">token</span>-4gzkv      kubernetes.io/service-account-<span class="keyword">token</span>   3      13d</span><br><span class="line">jenkins2-<span class="keyword">token</span>-mjnw4     kubernetes.io/service-account-<span class="keyword">token</span>   3      14m</span><br><span class="line">prometheus-<span class="keyword">token</span>-84p87   kubernetes.io/service-account-<span class="keyword">token</span>   3      13d</span><br><span class="line"># kubectl <span class="keyword">describe</span> secret jenkins2-<span class="keyword">token</span>-mjnw4 -<span class="keyword">n</span> kube-ops</span><br><span class="line">Name:         jenkins2-<span class="keyword">token</span>-mjnw4</span><br><span class="line">Namespace:    kube-ops</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: jenkins2</span><br><span class="line">              kubernetes.io/service-account.uid: ffced652-2f6c-11e9-98a4-fa163e14c5bd</span><br><span class="line"></span><br><span class="line"><span class="keyword">Type</span>:  kubernetes.io/service-account-<span class="keyword">token</span></span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line"><span class="keyword">ca</span>.crt:     1025 bytes</span><br><span class="line">namespace:  8 bytes</span><br><span class="line"><span class="keyword">token</span>:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLW9wcyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJqZW5raW5zMi10b2tlbi1tam53NCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJqZW5raW5zMiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImZmY2VkNjUyLTJmNmMtMTFlOS05OGE0LWZhMTYzZTE0YzViZCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlLW9wczpqZW5raW5zMiJ9.PlPvO_AST4Q6tJJ2i2zGFfufFN1xjWLlHZ5ipTK0aU5CdR49OAropPQhQ0TjLRWf4Z66h847g28OCABmxO1cSG_-8UpwVsohFROTCOjx9Ka3KACmaIkw9Bvihm_lPQlaLykdyXxVDrfI6TobtG0Y5KnKPFj8CjkIFPk5ewTKpOm5pDKVDKu4W_4uOhSnISfLVUvHp8A_ojK_JCVnBBr0Py3UeuEF8vjJES0_yKNxPUtXQq-vkWEZecnAC_x5sfFJTA5aB18sEnxCaeMzgUxzi4IflNxxyVjdZrbq0UdS8llmfnGg5Ur7Zf-lu2ajdOlRdQp6VRPMcQmQaWoHUuoevg</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/2372837934232.png" alt="img"><br><img src="https://img.xxlaila.cn/djfjsr3897493432.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>kube nfs 动态存储</title>
    <url>/2019/08/12/kube-nfs-%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;nfs-client-provisioner是一个automatic provisioner，使用NFS作为存储，自动创建PV和对应的PVC，本身不提供NFS存储，需要外部先有一套NFS存储服务。</p><ul><li>PV以 ${namespace}-${pvcName}-${pvName}的命名格式提供（在NFS服务器上）</li><li>PV回收的时候以 archieved-${namespace}-${pvcName}-${pvName} 的命名格式（在NFS服务器上）</li></ul><p><a href="https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client" target="_blank" rel="noopener">官方访问地址</a></p><h2 id="1、权限体系构建"><a href="#1、权限体系构建" class="headerlink" title="1、权限体系构建"></a>1、权限体系构建</h2><h3 id="1-1、创建serviceaccount"><a href="#1-1、创建serviceaccount" class="headerlink" title="1.1、创建serviceaccount"></a>1.1、创建serviceaccount</h3><p>ServiceAccount也是一种账号, 供运行在pod中的进程使用, 为pod中的进程提供必要的身份证明.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat serviceaccount.yaml </span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">  namespace: kube-test</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-2、创建role"><a href="#1-2、创建role" class="headerlink" title="1.2、创建role"></a>1.2、创建role</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat  clusterrole.yaml</span></span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  namespace: kube-test</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumes"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"delete"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumeclaims"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"storage.k8s.io"</span>]</span><br><span class="line">    resources: [<span class="string">"storageclasses"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"events"</span>]</span><br><span class="line">    verbs: [<span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"services"</span>, <span class="string">"endpoints"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"create"</span>,<span class="string">"list"</span>, <span class="string">"watch"</span>,<span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"extensions"</span>]</span><br><span class="line">    resources: [<span class="string">"podsecuritypolicies"</span>]</span><br><span class="line">    resourceNames: [<span class="string">"nfs-client-provisioner"</span>]</span><br><span class="line">    verbs: [<span class="string">"use"</span>]</span><br></pre></td></tr></table></figure><h3 id="1-3、账户和角色绑定"><a href="#1-3、账户和角色绑定" class="headerlink" title="1.3、账户和角色绑定"></a>1.3、账户和角色绑定</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat clusterrolebinding.yaml </span></span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: run-nfs-client-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nfs-client-provisioner</span><br><span class="line">    namespace: kube-test</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">执行创建</span><br><span class="line">kubectl create -f serviceaccount.yaml -f clusterrole.yaml -f clusterrolebinding.yaml</span><br></pre></td></tr></table></figure><h2 id="2、安装部署"><a href="#2、安装部署" class="headerlink" title="2、安装部署"></a>2、安装部署</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;下载deployment.yaml文件,需要修改NFS服务器所在的IP地址（10.10.10.60），以及NFS服务器共享的路径（/ifs/kubernetes），两处都需要修改为你实际的NFS服务器和共享目录</p><h3 id="2-1、部署存储供应卷"><a href="#2-1、部署存储供应卷" class="headerlink" title="2.1、部署存储供应卷"></a>2.1、部署存储供应卷</h3><blockquote><p>根据PVC的请求, 动态创建PV存储.</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat deployment.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">---</span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nfs-client-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nfs-client-provisioner</span><br><span class="line">      containers:</span><br><span class="line">        - name: nfs-client-provisioner</span><br><span class="line">          image: quay.io/external_storage/nfs-client-provisioner:latest</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: nfs-client-root</span><br><span class="line">              mountPath: /persistentvolumes</span><br><span class="line">          env:</span><br><span class="line">            - name: PROVISIONER_NAME</span><br><span class="line">              value: fuseim.pri/ifs</span><br><span class="line">            - name: NFS_SERVER</span><br><span class="line">              value: 172.21.16.244</span><br><span class="line">            - name: NFS_PATH</span><br><span class="line">              value: /data</span><br><span class="line">      volumes:</span><br><span class="line">        - name: nfs-client-root</span><br><span class="line">          nfs:</span><br><span class="line">            server: 10.10.10.60</span><br><span class="line">            path: /ifs/kubernetes</span><br></pre></td></tr></table></figure><pre><code>* 修改StorageClass文件并部署class.yaml</code></pre><p>此处可以不修改，或者修改provisioner的名字，需要与上面的deployment的PROVISIONER_NAME名字一致</p><h3 id="2-2、创建storageclass"><a href="#2-2、创建storageclass" class="headerlink" title="2.2、创建storageclass"></a>2.2、创建storageclass</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat class.yaml</span></span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: managed-nfs-storage</span><br><span class="line">provisioner: fuseim.pri/ifs <span class="comment"># or choose another name, must match deployment's env PROVISIONER_NAME'</span></span><br><span class="line">parameters:</span><br><span class="line">  archiveOnDelete: <span class="string">"false"</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1、查看StorageClass"><a href="#2-2-1、查看StorageClass" class="headerlink" title="2.2.1、查看StorageClass"></a>2.2.1、查看StorageClass</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get sc</span></span><br><span class="line"><span class="comment"># kubectl get storageclass</span></span><br><span class="line">NAME                  PROVISIONER      AGE</span><br><span class="line">managed-nfs-storage   fuseim.pri/ifs   19h</span><br></pre></td></tr></table></figure><h4 id="2-2-2、设置默认后端存储"><a href="#2-2-2、设置默认后端存储" class="headerlink" title="2.2.2、设置默认后端存储"></a>2.2.2、设置默认后端存储</h4><p>设置这个default名字的SC为Kubernetes的默认存储后端</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl patch storageclass managed-nfs-storage -p '&#123;"metadata": &#123;"annotations":&#123;"storageclass.kubernetes.io/is-default-class":"true"&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3、测试创建PVC"><a href="#2-2-3、测试创建PVC" class="headerlink" title="2.2.3、测试创建PVC"></a>2.2.3、测试创建PVC</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat test-claim.yaml </span></span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-claim</span><br><span class="line">  namespace: kube-test</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: <span class="string">"managed-nfs-storage"</span></span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Mi</span><br></pre></td></tr></table></figure><h4 id="2-2-4、启动测试POD"><a href="#2-2-4、启动测试POD" class="headerlink" title="2.2.4、启动测试POD"></a>2.2.4、启动测试POD</h4><p>POD文件如下，作用就是在test-claim的PV里touch一个SUCCESS文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat test-pod.yaml </span></span><br><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-pod</span><br><span class="line">  namespace: kube-test</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: <span class="built_in">test</span>-pod</span><br><span class="line">    image: docker.io/busybox:1.24</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - <span class="string">"/bin/sh"</span></span><br><span class="line">    args:</span><br><span class="line">      - <span class="string">"-c"</span></span><br><span class="line">      - <span class="string">"touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1"</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">      - name: nfs-pvc</span><br><span class="line">        mountPath: <span class="string">"/mnt"</span></span><br><span class="line">  restartPolicy: <span class="string">"Never"</span></span><br><span class="line">  volumes:</span><br><span class="line">    - name: nfs-pvc</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: <span class="built_in">test</span>-claim</span><br></pre></td></tr></table></figure><h4 id="2-2-5、校验是否成功"><a href="#2-2-5、校验是否成功" class="headerlink" title="2.2.5、校验是否成功"></a>2.2.5、校验是否成功</h4><p>去NFS共享目录查看有没有SUCCESS文件<br><img src="https://img.xxlaila.cn/%E6%88%AA%E5%9B%BE.png" alt="img"><br><img src="https://img.xxlaila.cn/8934nsdlsa.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pvc -n kube-test</span></span><br><span class="line">NAME         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line"><span class="built_in">test</span>-claim   Bound    pvc-f8e08fa5-2de2-11e9-8991-fa163e14c5bd   1Mi        RWX            managed-nfs-storage   20h</span><br></pre></td></tr></table></figure><h3 id="2-3、更改PersistentVolumes-中的一个回收策略"><a href="#2-3、更改PersistentVolumes-中的一个回收策略" class="headerlink" title="2.3、更改PersistentVolumes 中的一个回收策略"></a>2.3、更改PersistentVolumes 中的一个回收策略</h3><ul><li><p>查看集群中PersistentVolumes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pv</span></span><br></pre></td></tr></table></figure></li><li><p>更改PersistentVolumes</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl patch pv pvc-f8e08fa5-2de2-11e9-8991-fa163e14c5bd -p '&#123;"spec":&#123;"persistentVolumeReclaimPolicy":"Retain"&#125;&#125;'</span></span><br><span class="line">persistentvolume/pvc-f8e08fa5-2de2-11e9-8991-fa163e14c5bd patched</span><br></pre></td></tr></table></figure></li><li><p>查看更改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pv</span></span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>nfs</tag>
      </tags>
  </entry>
  <entry>
    <title>pvc pv</title>
    <url>/2019/08/12/pvc-pv/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;PersistentVolume（pv）和PersistentVolumeClaim（pvc）是k8s提供的两种API资源，用于抽象存储细节。管理员关注于如何通过pv提供存储功能而无需关注用户如何使用，同样的用户只需要挂载pvc到容器中而不需要关注存储卷采用何种技术实现。<br>&nbsp;&nbsp;&nbsp;&nbsp;pvc和pv的关系与pod和node关系类似，前者消耗后者的资源。pvc可以向pv申请指定大小的存储资源并设置访问模式,这就可以通过Provision -&gt; Claim 的方式，来对存储资源进行控制。</p><h2 id="2、生命周期"><a href="#2、生命周期" class="headerlink" title="2、生命周期"></a>2、生命周期</h2><p>pv和pvc遵循以下生命周期：</p><ul><li>供应准备。通过集群外的存储系统或者云平台来提供存储持久化支持。</li></ul><ul><li><p>静态提供：管理员手动创建多个PV，供PVC使用。</p></li><li><p>动态提供：动态创建PVC特定的PV，并绑定。</p><ul><li>绑定。用户创建pvc并指定需要的资源和访问模式。在找到可用pv之前，pvc会保持未绑定状态。</li><li>使用。用户可在pod中像volume一样使用pvc。</li><li>释放。用户删除pvc来回收存储资源，pv将变成“released”状态。由于还保留着之前的数据，这些数据需要根据不同的策略来处理，否则这些存储资源无法被其他pvc使用。</li><li>回收(Reclaiming)。pv可以设置三种回收策略：保留（Retain），回收（Recycle）和删除（Delete）。</li></ul></li><li><p>保留策略：允许人工处理保留的数据。</p></li><li><p>删除策略：将删除pv和外部关联的存储资源，需要插件支持。</p></li><li><p>回收策略：将执行清除操作，之后可以被新的pvc使用，需要插件支持。</p></li></ul><blockquote><p><em>目前只有NFS和HostPath类型卷支持回收策略，AWS EBS,GCE PD,Azure Disk和Cinder支持删除(Delete)策略。</em></p></blockquote><h3 id="2-1、Provisioning"><a href="#2-1、Provisioning" class="headerlink" title="2.1、Provisioning"></a>2.1、Provisioning</h3><p>两种方式提供的PV资源供给</p><a id="more"></a><p>static</p><ul><li>通过集群管理者创建多个PV，为集群“使用者”提供存储能力而隐藏真实存储的细节。并且存在于kubenretes api中，可被直接使用。</li></ul><p>dynamic</p><ul><li>动态卷供给是kubernetes独有的功能，这一功能允许按需创建存储建。在此之前，集群管理员需要事先在集群外由存储提供者或者云提供商创建</li><li>存储卷，成功之后再创建PersistentVolume对象，才能够在kubernetes中使用。动态卷供给能让集群管理员不必进行预先创建存储卷，而是随着用户需求进行创建。在1.5版本提高了动态卷的弹性和可用性。</li></ul><h2 id="3、PV类型"><a href="#3、PV类型" class="headerlink" title="3、PV类型"></a>3、PV类型</h2><p>pv支持以下类型:</p><pre><code>* GCEPersistentDisk
* AWSElasticBlockStore
* NFS
* iSCSI
* RBD (Ceph Block Device)
* Glusterfs
* AzureFile
* AzureDisk
* CephFS
* cinder
* FC
* FlexVolume
* Flocker
* PhotonPersistentDisk
* Quobyte
* VsphereVolume
* HostPath (single node testing only – local storage is not supported in any way and WILL NOT WORK in a multi-node cluster)</code></pre><h3 id="3-1、PV属性"><a href="#3-1、PV属性" class="headerlink" title="3.1、PV属性"></a>3.1、PV属性</h3><ul><li>访问模式,与pv的语义相同。在请求资源时使用特定模式。</li><li>资源,申请的存储资源数额。</li></ul><h3 id="3-2、PV卷阶段状态"><a href="#3-2、PV卷阶段状态" class="headerlink" title="3.2、PV卷阶段状态"></a>3.2、PV卷阶段状态</h3><ul><li>Available – 资源尚未被claim使用</li><li>Bound – 卷已经被绑定到claim了</li><li>Released – claim被删除，卷处于释放状态，但未被集群回收。</li><li>Failed – 卷自动回收失败</li></ul><h2 id="4、利用nfs创建pv-pvc"><a href="#4、利用nfs创建pv-pvc" class="headerlink" title="4、利用nfs创建pv_pvc"></a>4、利用nfs创建pv_pvc</h2><p>准备一台机器，搭建NFS服务，nfs搭建这里不阐述，</p><h3 id="4-1、在master节点创建pv"><a href="#4-1、在master节点创建pv" class="headerlink" title="4.1、在master节点创建pv"></a>4.1、在master节点创建pv</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat pv.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: opspv</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 20Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  nfs:</span><br><span class="line">    path: /data/jenkins</span><br><span class="line">    server: 172.21.16.236</span><br><span class="line"><span class="comment"># kubectl create -f pv.yaml</span></span><br><span class="line"><span class="comment"># kubectl get pv</span></span><br></pre></td></tr></table></figure><h3 id="4-2、在master节点上创建pvc"><a href="#4-2、在master节点上创建pvc" class="headerlink" title="4.2、在master节点上创建pvc"></a>4.2、在master节点上创建pvc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat pvc.yaml</span></span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: opspv</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 20Gi</span><br><span class="line"><span class="comment"># kubectl create -f pvc.yaml</span></span><br><span class="line"><span class="comment"># kubectl get pvc</span></span><br></pre></td></tr></table></figure><h3 id="4-3、创建pod挂载pv-pvc"><a href="#4-3、创建pod挂载pv-pvc" class="headerlink" title="4.3、创建pod挂载pv_pvc"></a>4.3、创建pod挂载pv_pvc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat jenkins-deployment.yaml </span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins2</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: jenkins2</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 10</span><br><span class="line">      containers:</span><br><span class="line">      - name: jenkins</span><br><span class="line">        image: jenkins/jenkins:lts</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line">          name: web</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 50000</span><br><span class="line">          name: agent</span><br><span class="line">          protocol: TCP</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">            memory: 1Gi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 500m</span><br><span class="line">            memory: 512Mi</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /login</span><br><span class="line">            port: 8080</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          failureThreshold: 12</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /login</span><br><span class="line">            port: 8080</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          failureThreshold: 12</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: jenkinshome</span><br><span class="line">          subPath: jenkins2</span><br><span class="line">          mountPath: /var/jenkins_home</span><br><span class="line">        env:</span><br><span class="line">        - name: LIMITS_MEMORY</span><br><span class="line">          valueFrom:</span><br><span class="line">            resourceFieldRef:</span><br><span class="line">              resource: limits.memory</span><br><span class="line">              divisor: 1Mi</span><br><span class="line">        - name: JAVA_OPTS</span><br><span class="line">          value: -Xmx$(LIMITS_MEMORY)m -XshowSettings:vm -Dhudson.slaves.NodeProvisioner.initialDelay=0 -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85 -Duser.timezone=Asia/Shanghai</span><br><span class="line">      securityContext:</span><br><span class="line">        fsGroup: 1000</span><br><span class="line">      volumes:</span><br><span class="line">      - name: jenkinshome</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: opspvc</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins2</span><br><span class="line">  namespace: kube-ops</span><br><span class="line">  labels:</span><br><span class="line">    app: jenkins2</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: jenkins2</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: web</span><br><span class="line">    nodePort: 30002</span><br><span class="line">  - name: agent</span><br><span class="line">    port: 50000</span><br><span class="line">    targetPort: agent</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>pvc,pv,kubernetes,存储</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes 单机安装</title>
    <url>/2019/08/12/kubernetes-%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><blockquote><p>一个master节点，四个node节点<br>master节点ip</p><ul><li>172.21.16.244<br>node节点ip</li><li>172.21.16.24</li><li>172.21.16.231</li><li>172.21.16.202</li><li>172.21.16.55</li></ul></blockquote><ul><li>以下是每一个节点上均进行操作</li></ul><h2 id="2、服务器添加阿里云yum源"><a href="#2、服务器添加阿里云yum源" class="headerlink" title="2、服务器添加阿里云yum源"></a>2、服务器添加阿里云yum源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">  http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="3、重新建立yum缓存"><a href="#3、重新建立yum缓存" class="headerlink" title="3、重新建立yum缓存"></a>3、重新建立yum缓存</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install epel-release &amp;&amp;yum clean all &amp;&amp;yum makecach</span></span><br></pre></td></tr></table></figure><ul><li>记得同步系统的时间</li></ul><h2 id="3、配置转发请求"><a href="#3、配置转发请求" class="headerlink" title="3、配置转发请求"></a>3、配置转发请求</h2><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">关闭swap</span><br><span class="line"><span class="comment"># sudo swapoff -a</span></span><br><span class="line"><span class="comment"># cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># sysctl --system</span></span><br></pre></td></tr></table></figure><h2 id="4、安装docker"><a href="#4、安装docker" class="headerlink" title="4、安装docker"></a>4、安装docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install docker</span></span><br><span class="line"><span class="comment"># systemctl enable docker &amp;&amp; systemctl start docker</span></span><br></pre></td></tr></table></figure><h2 id="5、安装k8s-需要的插件"><a href="#5、安装k8s-需要的插件" class="headerlink" title="5、安装k8s 需要的插件"></a>5、安装k8s 需要的插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install kubelet kubeadm kubectl kubernetes-cni</span></span><br><span class="line"><span class="comment"># systemctl enable kubelet &amp;&amp; systemctl start kubelet</span></span><br></pre></td></tr></table></figure><ul><li>修改为 kubelet 为Cgroup模式</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span></span><br><span class="line">Environment=<span class="string">"KUBELET_CGROUP_ARGS=--cgroup-driver=systemd"</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure><h2 id="6、拉取镜像"><a href="#6、拉取镜像" class="headerlink" title="6、拉取镜像"></a>6、拉取镜像</h2><p>新建一个shell 拉取镜像到本地(所有节点均操作)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">images=(kube-proxy:v1.13.0 kube-scheduler:v1.13.0 kube-controller-manager:v1.13.0 kube-apiserver:v1.13.0 etcd:3.2.24 coredns:1.2.6 pause:3.1 kubernetes-dashboard-amd64:v1.10.0 kubernetes-dashboard-init-amd64:v1.0.1  k8s-dns-sidecar-amd64:1.14.9 k8s-dns-kube-dns-amd64:1.14.9 k8s-dns-dnsmasq-nanny:1.15.0 heapster:v1.5.2 kubernetes-dashboard-arm:v1.10.0)</span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">docker pull xxlaila/<span class="variable">$imageName</span></span><br><span class="line">docker tag xxlaila/<span class="variable">$imageName</span> k8s.gcr.io/<span class="variable">$imageName</span></span><br><span class="line">docker rmi xxlaila/<span class="variable">$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>以下操作是在k8s的master进行操作</li></ul><h2 id="7、初始化相关镜像"><a href="#7、初始化相关镜像" class="headerlink" title="7、初始化相关镜像"></a>7、初始化相关镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm init --kubernetes-version=v1.13.0 --pod-network-cidr=10.244.0.0/16</span></span><br><span class="line"><span class="comment"># 记下这句话，后面node节点加入需要</span></span><br><span class="line"><span class="comment"># kubeadm join 172.21.17.4:6443 --token 0mdk7x.du3cn19qm1jl2b0e --discovery-token-ca-cert-hash sha256:19bf79b41a931735b1f2f5138e1daa436ab26a4f19781ccf2015cff749ddb4b9</span></span><br></pre></td></tr></table></figure><h3 id="7-1、执行创建目录"><a href="#7-1、执行创建目录" class="headerlink" title="7.1、执行创建目录"></a>7.1、执行创建目录</h3><p>后面在生成证书的时候需要</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="7-2、查看验证"><a href="#7-2、查看验证" class="headerlink" title="7.2、查看验证"></a>7.2、查看验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get componentstatus</span></span><br><span class="line">NAME                 STATUS    MESSAGE              ERROR</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>: <span class="string">"true"</span>&#125;</span><br><span class="line"><span class="comment"># kubectl get cs</span></span><br><span class="line">NAME                 STATUS    MESSAGE              ERROR</span><br><span class="line">scheduler            Healthy   ok</span><br><span class="line">controller-manager   Healthy   ok</span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>: <span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="8、安装flannel-网络"><a href="#8、安装flannel-网络" class="headerlink" title="8、安装flannel 网络"></a>8、安装flannel 网络</h2><blockquote><p>(配置文件和目录每个node都要建立)</p></blockquote><h3 id="8-1-创建flannel配置文件"><a href="#8-1-创建flannel配置文件" class="headerlink" title="8.1 创建flannel配置文件"></a>8.1 创建flannel配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /etc/cni/net.d/</span></span><br><span class="line"><span class="comment"># cat &lt;&lt;EOF&gt; /etc/cni/net.d/10-flannel.conf</span></span><br><span class="line">&#123;</span><br><span class="line">“name”: “cbr0”,</span><br><span class="line">“<span class="built_in">type</span>”: “flannel”,</span><br><span class="line">“delegate”: &#123;</span><br><span class="line">“isDefaultGateway”: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="8-2-创建网络配置"><a href="#8-2-创建网络配置" class="headerlink" title="8.2 创建网络配置"></a>8.2 创建网络配置</h3><blockquote><p>(只需要在主节点操作即可)</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.extensions/kube-flannel-ds-amd64 created</span><br><span class="line">daemonset.extensions/kube-flannel-ds-arm64 created</span><br><span class="line">daemonset.extensions/kube-flannel-ds-arm created</span><br><span class="line">daemonset.extensions/kube-flannel-ds-ppc64le created</span><br><span class="line">daemonset.extensions/kube-flannel-ds-s390x created</span><br></pre></td></tr></table></figure><h2 id="9、查看命名空间"><a href="#9、查看命名空间" class="headerlink" title="9、查看命名空间"></a>9、查看命名空间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get ns</span></span><br><span class="line">NAME          STATUS   AGE</span><br><span class="line">default       Active   27m</span><br><span class="line">kube-public   Active   27m</span><br><span class="line">kube-system   Active   27m</span><br></pre></td></tr></table></figure><h2 id="10、查看system的pod"><a href="#10、查看system的pod" class="headerlink" title="10、查看system的pod"></a>10、查看system的pod</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n kube-system</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-86c58d9df4-4gfvd                     1/1     Running   0          27m</span><br><span class="line">coredns-86c58d9df4-cxtz5                     1/1     Running   0          27m</span><br><span class="line">etcd-k8s-zxc-test-3.kxl                      1/1     Running   0          26m</span><br><span class="line">kube-apiserver-k8s-zxc-test-3.kxl            1/1     Running   0          26m</span><br><span class="line">kube-controller-manager-k8s-zxc-test-3.kxl   1/1     Running   0          26m</span><br><span class="line">kube-flannel-ds-nh95x                        1/1     Running   0          15m</span><br><span class="line">kube-proxy-kvlng                             1/1     Running   0          27m</span><br><span class="line">kube-scheduler-k8s-zxc-test-3.kxl            1/1     Running   0          27m</span><br></pre></td></tr></table></figure><h2 id="11、节点加入到kuberneter"><a href="#11、节点加入到kuberneter" class="headerlink" title="11、节点加入到kuberneter"></a>11、节点加入到kuberneter</h2><ul><li>以下是每个node节点执行</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm join 172.21.17.4:6443 --token 0mdk7x.du3cn19qm1jl2b0e --discovery-token-ca-cert-hash sha256:19bf79b41a931735b1f2f5138e1daa436ab26a4f19781ccf2015cff749ddb4b9</span></span><br></pre></td></tr></table></figure><ul><li>查看节点是否加入</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line"><span class="comment"># 使用kubectl get pods命令来查看部署状态</span></span><br><span class="line"><span class="comment"># kubectl get pods --all-namespaces</span></span><br></pre></td></tr></table></figure><h2 id="12、安装kubernetes-dashboard"><a href="#12、安装kubernetes-dashboard" class="headerlink" title="12、安装kubernetes dashboard"></a>12、安装kubernetes dashboard</h2><p>下载官网的dashboard文件修改kubernetes-dashboard.yaml文件,用修改之后的kubernetes-dashboard.yaml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/xxlaila/kubernetes-yaml.git</span></span><br><span class="line"><span class="comment"># 执行创建dashboard</span></span><br><span class="line"><span class="comment"># cd kubernetes-yaml/kubernetes-dashboard</span></span><br><span class="line"><span class="comment"># kubectl apply -f kubernetes-dashboard.yaml</span></span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br></pre></td></tr></table></figure><h2 id="13、查看dashboard部署是否成功"><a href="#13、查看dashboard部署是否成功" class="headerlink" title="13、查看dashboard部署是否成功"></a>13、查看dashboard部署是否成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods -n kube-system</span></span><br></pre></td></tr></table></figure><h3 id="13-1、查看dashboard-info"><a href="#13-1、查看dashboard-info" class="headerlink" title="13.1、查看dashboard info"></a>13.1、查看dashboard info</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe svc kubernetes-dashboard -n kube-system</span></span><br></pre></td></tr></table></figure><h3 id="13-2、查看dashboard部署在那个节点"><a href="#13-2、查看dashboard部署在那个节点" class="headerlink" title="13.2、查看dashboard部署在那个节点"></a>13.2、查看dashboard部署在那个节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl  get pods -n kube-system -o wide</span></span><br></pre></td></tr></table></figure><h3 id="13-3、查看service-节点端口"><a href="#13-3、查看service-节点端口" class="headerlink" title="13.3、查看service 节点端口"></a>13.3、查看service 节点端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get service -n kube-system -o wide</span></span><br></pre></td></tr></table></figure><h3 id="13-4、创建dashboard-admin-账户"><a href="#13-4、创建dashboard-admin-账户" class="headerlink" title="13.4、创建dashboard admin 账户"></a>13.4、创建dashboard admin 账户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl apply -f admin-user.yaml</span></span><br><span class="line">获取tokens</span><br><span class="line"><span class="comment"># kubectl describe serviceaccount admin -n kube-system</span></span><br><span class="line">Name:                admin</span><br><span class="line">Namespace:           kube-system</span><br><span class="line">Labels:              k8s-app=kubernetes-dashboard</span><br><span class="line">Annotations:         kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                       &#123;<span class="string">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="string">"kind"</span>:<span class="string">"ServiceAccount"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"labels"</span>:&#123;<span class="string">"k8s-app"</span>:<span class="string">"kubernetes-dashboard"</span>&#125;,<span class="string">"name"</span>:<span class="string">"admin"</span>,<span class="string">"namesp...</span></span><br><span class="line"><span class="string">Image pull secrets:  &lt;none&gt;</span></span><br><span class="line"><span class="string">Mountable secrets:   admin-token-kxs6k</span></span><br><span class="line"><span class="string">Tokens:              admin-token-kxs6k</span></span><br><span class="line"><span class="string">Events:              &lt;none&gt;</span></span><br><span class="line"><span class="string">查看token 信息</span></span><br><span class="line"><span class="string"># kubectl describe secret admin-token-kxs6k -n kube-system</span></span><br></pre></td></tr></table></figure><h2 id="14、dashboard-访问"><a href="#14、dashboard-访问" class="headerlink" title="14、dashboard 访问"></a>14、dashboard 访问</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;利用节点ip+30001 端口进行访问。访问之前需要在master节点生成证书，把证书(kubecfg.p12)下载到本地，进行导入到浏览器，这里使用火狐浏览器，google浏览器导入,不成功，生产证书之前记得第9步已操作</p><h3 id="14-1、生成证书"><a href="#14-1、生成证书" class="headerlink" title="14.1、生成证书"></a>14.1、生成证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep 'client-certificate-data' ~/.kube/config | head -n 1 | awk '&#123;print $2&#125;' | base64 -d &gt;&gt; kubecfg.crt</span></span><br><span class="line"><span class="comment"># grep 'client-key-data' ~/.kube/config | head -n 1 | awk '&#123;print $2&#125;' | base64 -d &gt;&gt; kubecfg.key</span></span><br><span class="line"><span class="comment"># openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name "kubernetes-client"</span></span><br></pre></td></tr></table></figure><h3 id="14-2、dashboard-配置修改"><a href="#14-2、dashboard-配置修改" class="headerlink" title="14.2、dashboard 配置修改"></a>14.2、dashboard 配置修改</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;kubernetes dashboard v1.10.0使用的是双因子登陆，默认token失效的时间是900秒，15分钟，每15分钟就要进行一次认证。我们可以功过修改token-ttl参数来设置，主要是修改dashboard.yaml文件，并重新建立即可</p><ul><li>在配置文件里面添加<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ports:</span><br><span class="line">- containerPort: 8443</span><br><span class="line">  protocol: TCP</span><br><span class="line">args:</span><br><span class="line">  - --auto-generate-certificates</span><br><span class="line">  - --token-ttl=43200</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>重建dashboard,通过利用http添加端口30001，然后利用tonken进行验证登陆,安装失败清理环境</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm reset</span></span><br><span class="line">查看加入集群token</span><br><span class="line"><span class="comment"># kubeadm token list</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 5.5 安装DRBD</title>
    <url>/2019/08/11/Centos-5-5-%E5%AE%89%E8%A3%85DRBD/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>Centos5.5 32bit安装DRBD</p><ul><li>安装前准备</li></ul><table><thead><tr><th>节点类型</th><th>IP地址规划</th><th>主机名</th></tr></thead><tbody><tr><td>主用节点</td><td>192.168.1.101</td><td>node2</td></tr><tr><td>备用节点</td><td>192.168.1.102</td><td>node1</td></tr><tr><td>磁盘</td><td>两台10G磁盘</td><td></td></tr></tbody></table><h2 id="在主节点安装DRBD"><a href="#在主节点安装DRBD" class="headerlink" title="在主节点安装DRBD"></a>在主节点安装DRBD</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># yum -y install kmod-drbd83 drbd83</span></span><br></pre></td></tr></table></figure><p>安装成功之后/sbin目录下面有drbdadm，drbdmeta，drbdsetup命令，以及/etc /init.d/drbd启动脚本。</p><ul><li>备用节点安装DRBD</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># yum -y install kmod-drbd83 drbd83</span></span><br></pre></td></tr></table></figure><blockquote><p>安装完成后。默认配置文件/etc/drbd.conf，以下是两台的主机配置实例:</p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># cat /etc/drbd.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># please have a a look at the example configuration file in</span></span><br><span class="line"><span class="comment"># /usr/share/doc/drbd83/drbd.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># drbd.conf</span></span><br><span class="line"><span class="comment"># create by dba.gao@gmail.com at 2010-10-11</span></span><br><span class="line">global &#123;</span><br><span class="line">    <span class="comment"># minor-count 64;</span></span><br><span class="line">    <span class="comment"># dialog-refresh 5; # 5 seconds</span></span><br><span class="line">    <span class="comment"># disable-ip-verification;</span></span><br><span class="line">usage-count no; <span class="comment">#是否参加DRBD使用者统计，默认yes</span></span><br><span class="line">&#125;</span><br><span class="line">common &#123;</span><br><span class="line">    syncer &#123; rate <span class="comment">#设置主备节点同步时的网络速率最大值，单位是字节。</span></span><br><span class="line">        200M; &#125;</span><br><span class="line">&#125;</span><br><span class="line">resource r0 &#123;</span><br><span class="line">protocol C;</span><br><span class="line"><span class="comment"># 使用drbd的第三种同步协议,表示收到远程主机的写入确认后,则认为写入完成</span></span><br><span class="line">handlers &#123;</span><br><span class="line">    pri-on-incon-degr <span class="string">"echo o &gt; /proc/sysrq-trigger ; halt -f"</span>;</span><br><span class="line">    pri-lost-after-sb <span class="string">"echo o &gt; /proc/sysrq-trigger ; halt -f"</span>;</span><br><span class="line">    <span class="built_in">local</span>-io-error <span class="string">"echo o &gt; /proc/sysrq-trigger ; halt -f"</span>;</span><br><span class="line">fence-peer <span class="string">"/usr/lib64/heartbeat/drbd-peer-outdater -t 5"</span>;</span><br><span class="line">pri-lost <span class="string">"echo pri-lost. Have a look at the log files. | mail -s 'DRBD Alert' root"</span>;</span><br><span class="line">    split-brain <span class="string">"/usr/lib/drbd/notify-split-brain.sh root"</span>;</span><br><span class="line">    out-of-sync <span class="string">"/usr/lib/drbd/notify-out-of-sync.sh root"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">net &#123;</span><br><span class="line"><span class="comment"># timeout 60;</span></span><br><span class="line"><span class="comment"># connect-int 10;</span></span><br><span class="line"><span class="comment"># ping-int 10;</span></span><br><span class="line"><span class="comment"># max-buffers 2048;</span></span><br><span class="line"><span class="comment"># max-epoch-size 2048;</span></span><br><span class="line">cram-hmac-alg <span class="string">"sha1"</span>;</span><br><span class="line">shared-secret <span class="string">"MySQL-HA"</span>;</span><br><span class="line"><span class="comment"># DRBD同步时使用的验证方式和密码信息。</span></span><br><span class="line">&#125;</span><br><span class="line">disk &#123;</span><br><span class="line">    on-io-error detach;</span><br><span class="line">fencing resource-only;</span><br><span class="line">&#125;</span><br><span class="line">startup &#123;</span><br><span class="line">    wfc-timeout 120;</span><br><span class="line">    degr-wfc-timeout 120;</span><br><span class="line">  &#125;</span><br><span class="line">  device        /dev/drbd0;</span><br><span class="line"><span class="comment">#这里配置档我们挂在的系统的磁盘标示驱动盘符; on node2 &#123;</span></span><br><span class="line"><span class="comment">#每个主机的说明以on开头,后面是hostname(uname - n)，在后面的&#123;&#125;中为这个主机的配置。</span></span><br><span class="line">disk /dev/sdb5;</span><br><span class="line"><span class="comment">#/dev/drbd0使用的磁盘分区是/dev/sdb5</span></span><br><span class="line">address     192.168.1.101:7788;</span><br><span class="line">IP地址以及DRBD使用的端口 meta-disk internal;</span><br><span class="line">&#125;</span><br><span class="line">on node1 &#123;</span><br><span class="line">disk /dev/sdb5;</span><br><span class="line">address 192.168.1.102:7788; 和上述一样</span><br><span class="line">meta-disk internal; <span class="comment">#drbd的元数据存放方式 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;配置完成后启动节点，在启动DRBD之前,你需要分别在两台主机的hd分区上,创建供DRBD记录信息的数据块.分别在两台主机上执行(这里注意:在创建分区之前我们需要吧磁盘的分区分好)</p><p><img src alt="img"></p><p>分区分好以后先不要挂在和格式化(挂在以后创建会报错)，然后创建供DRBD记 录信息的数据块</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># drbdadm create-md r0</span></span><br><span class="line">[root@node1 ~]<span class="comment"># drbdadm create-md r0</span></span><br><span class="line">或者执行drbdadm create-md all</span><br></pre></td></tr></table></figure><ul><li><p>在两个节点启动服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># /etc/init.d/drbd start</span></span><br><span class="line">[root@node1 ~]<span class="comment"># /etc/init.d/drbd start</span></span><br></pre></td></tr></table></figure></li><li><p>在任意节点查看节点状态</p></li></ul><blockquote><p>1: cs:Connected ro:Secondary/Secondary ds:Inconsistent/Inconsistent C r—-<br>ns:0 nr:0 dw:0 dr:0 al:0 bm:0 lo:0 pe:0 ua:0 ap:0 ep:1 wo:b oos:2007644</p></blockquote><blockquote><p>对输出的含义解释如下:<br>ro表示角色信息，第一次启动drbd时，两个drbd节点默认都处于Secondary状态,<br>ds是磁盘状态信息，“Inconsistent/Inconsisten”，即为“不一致/不一致” 状态，表示两个节点的磁盘数据处于不一致状态。<br>Ns表示网络发送的数据包信息。</p></blockquote><h3 id="这里我设置是node2"><a href="#这里我设置是node2" class="headerlink" title="这里我设置是node2"></a>这里我设置是node2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># drbdsetup /dev/drbd1 primary –o 或者执行下面命令也是可以的</span></span><br><span class="line">[root@node2 ~]<span class="comment">#drbdadm -- --overwrite-data-of-peer primary all</span></span><br></pre></td></tr></table></figure><p>第一次执行完此命令后，在后面如果需要设置哪个是主节点时，就可以使用另 外一个命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment">#/sbin/drbdadm primary r0或者/sbin/drbdadm primary all</span></span><br></pre></td></tr></table></figure><blockquote><p>执行此命令后，开始同步两台机器对应磁盘的数据</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ node2 ~]<span class="comment">#cat /proc/drbd</span></span><br><span class="line">1: cs:SyncSource ro:Primary/Secondary ds:UpToDate/Inconsistent C r--- -</span><br><span class="line">ns:576224 nr:0 dw:0 dr:581760 al:0 bm:34 lo:84 pe:369 ua:256 ap:0 ep:1 wo:b oos:1443196</span><br><span class="line">[====&gt;...............] sync<span class="string">'ed: 28.4% (1443196/2007644)K delay_probe: 69</span></span><br><span class="line"><span class="string">finish: 0:03:56 speed: 6,024 (5,876) K/sec</span></span><br></pre></td></tr></table></figure><blockquote><p>最后格式化文件系统,由于mount操作只能在主节点进行，所以只有设置了主节点后才能格式化磁盘分 区，然后挂载:</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node2 ~]<span class="comment"># mkfs -t ext3 /dev/drbd0</span></span><br><span class="line">[root@node2 ~]<span class="comment"># mount /dev/drbd0 /data/</span></span><br><span class="line">[root@node2 ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem</span><br><span class="line">/dev/sda3</span><br><span class="line">/dev/sda1</span><br><span class="line">tmpfs</span><br><span class="line">/dev/drbd0</span><br><span class="line">Size  Used Avail Use% Mounted on</span><br><span class="line"> 28G  3.7G   23G  15% /</span><br><span class="line">487M   22M  440M   5% /boot</span><br><span class="line">125M     0  125M   0% /dev/shm</span><br><span class="line">9.9G  151M  9.2G   2% /data</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;Dw是磁盘写信息;Dr是磁盘读信息;启动DRBD后设置主次节点，选择需要设置主机的主节点，然后执行如下命令: 这里我设置是node2</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>存储,Centos</category>
      </categories>
      <tags>
        <tag>drdb</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle ORA-12519</title>
    <url>/2019/08/10/oracle-ORA-12519/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><blockquote><p>oracle ORA-12519错误解决<br>今天遇到做系统压力测试的时候，系统报了一个错误<br>OERR: ORA-12519 TNS:no appropriate service handler found</p></blockquote><p><img src="https://img.xxlaila.cn/ORA-12519-error.png" alt="img"></p><p>在网上搜索了一下oralc的错误信息ORA-12519，解决办法挺多的，这里记录一下</p><h3 id="登陆oracle的服务器，在登陆oracle数据库"><a href="#登陆oracle的服务器，在登陆oracle数据库" class="headerlink" title="登陆oracle的服务器，在登陆oracle数据库"></a>登陆oracle的服务器，在登陆oracle数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlplus <span class="string">"/as sysdba"</span></span><br></pre></td></tr></table></figure><blockquote><p>首先检查process和session的使用情况</p></blockquote><p><img src="https://img.xxlaila.cn/parameter_%20processes_1.png" alt="img"><br><img src="https://img.xxlaila.cn/parameter_%20session_3.png" alt="img"></p><a id="more"></a><ul><li>这里可以看到process几乎已经满了</li></ul><h3 id="修改oracle的process和session值"><a href="#修改oracle的process和session值" class="headerlink" title="修改oracle的process和session值"></a>修改oracle的process和session值</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这里我们把这些值修改为1000和1135</span><br><span class="line">SQL&gt; alter system <span class="built_in">set</span> processes=1000 scope=spfile;</span><br><span class="line">系统已更改。</span><br><span class="line">SQL&gt; alter system <span class="built_in">set</span> sessions=1135 scope=spfile;</span><br><span class="line">系统已更改。</span><br></pre></td></tr></table></figure><h3 id="重启数据库后参数修改完成"><a href="#重启数据库后参数修改完成" class="headerlink" title="重启数据库后参数修改完成"></a>重启数据库后参数修改完成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SQL&gt; shutdown abort;</span><br><span class="line">ORACLE 例程已经关闭。</span><br><span class="line">SQL&gt; startup;</span><br><span class="line">ORACLE 例程已经启动。</span><br><span class="line">Total System Global Area  534462464 bytes</span><br><span class="line">Fixed Size                  2215064 bytes</span><br><span class="line">Variable Size             234881896 bytes</span><br><span class="line">Database Buffers          289406976 bytes</span><br><span class="line">Redo Buffers                7958528 bytes</span><br><span class="line">数据库装载完毕。</span><br><span class="line">数据库已经打开。</span><br></pre></td></tr></table></figure><h2 id="查看并验证"><a href="#查看并验证" class="headerlink" title="查看并验证"></a>查看并验证</h2><p><img src="https://img.xxlaila.cn/W.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx https</title>
    <url>/2019/08/10/nginx-https/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>nginx http 强制跳转到https</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$scheme</span> = http ) &#123;</span><br><span class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>列子</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name xxx.test.com;</span><br><span class="line">    index index.html index.php index.htm;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$scheme</span> = http ) &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$server_port</span> = 80 ) &#123;</span><br><span class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>列子</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name xxx.test.com;</span><br><span class="line">    index index.html index.php index.htm;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$server_port</span> = 80 ) &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$ssl_protocol</span> = <span class="string">""</span>) &#123; <span class="built_in">return</span> 301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$host</span> != xxx.test.com) &#123; <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://xxx.test.com<span class="variable">$request_uri</span>; &#125;</span><br></pre></td></tr></table></figure><ul><li>列子</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name xxx.test.com;</span><br><span class="line">    index index.html index.php index.htm;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$ssl_protocol</span> = <span class="string">""</span>) &#123; <span class="built_in">return</span> 301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$host</span> != xxx.test.com) &#123; <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://xxx.test.com<span class="variable">$request_uri</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name test.com www.test.com;</span><br><span class="line">    rewrite ^(.*) https://www.test.com<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name test.com www.test.com;</span><br><span class="line">    rewrite ^(.*) https://www.test.com<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name test.com www.test.com;</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    root ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法五"><a href="#方法五" class="headerlink" title="方法五"></a>方法五</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name test.com www.test.com;</span><br><span class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>haproxy keepalived </title>
    <url>/2019/08/10/haproxy-keepalived/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>本文主要是代理kubernetes master的高可用。</p><h2 id="安装haproxy和keepalived"><a href="#安装haproxy和keepalived" class="headerlink" title="安装haproxy和keepalived"></a>安装haproxy和keepalived</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install keepalived.x86_64</span></span><br><span class="line"><span class="comment"># yum -y install haproxy18u.x86_64</span></span><br></pre></td></tr></table></figure><h2 id="2、配置haproxy"><a href="#2、配置haproxy" class="headerlink" title="2、配置haproxy"></a>2、配置haproxy</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/haproxy/haproxy.cfg</span></span><br><span class="line">global</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  uid 99</span><br><span class="line">  gid 99</span><br><span class="line">  <span class="comment">#daemon</span></span><br><span class="line">  nbproc 1</span><br><span class="line">  pidfile haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  retries 3</span><br><span class="line">  timeout connect 5s</span><br><span class="line">  timeout client 30s</span><br><span class="line">  timeout server 30s</span><br><span class="line">  timeout check 2s</span><br><span class="line"></span><br><span class="line">listen admin_stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:1080</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  stats refresh 30s</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats realm   Haproxy\ Statistics</span><br><span class="line">  stats auth    admin:admin1</span><br><span class="line">  stats hide-version</span><br><span class="line">  stats admin <span class="keyword">if</span> TRUE</span><br><span class="line"></span><br><span class="line">frontend k8s-https</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:8443</span><br><span class="line">  mode tcp</span><br><span class="line">  default_backend k8s-http</span><br><span class="line"></span><br><span class="line">backend k8s-http</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server k8s-master-01 172.21.17.4:6443</span><br><span class="line">  server k8s-master-02 172.21.16.230:6443</span><br><span class="line">  server k8s-master-03 172.21.240:6443</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="3、keepalived配置"><a href="#3、keepalived配置" class="headerlink" title="3、keepalived配置"></a>3、keepalived配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat keepalived.conf </span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">  notification_email &#123;</span><br><span class="line">    cq_xxlaila@163.com</span><br><span class="line">    &#125;</span><br><span class="line">  notification_email_from cq_xxlaila@163.com</span><br><span class="line">  smtp_server 127.0.0.1</span><br><span class="line">  smtp_connect_timeout 30</span><br><span class="line">  router_id haproxy-01</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">  script <span class="string">"/etc/keepalived/haproxy_check.sh"</span></span><br><span class="line">  interval 2</span><br><span class="line">  timeout 2</span><br><span class="line">  fall 3</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">    dont_track_primary</span><br><span class="line">    nopreempt</span><br><span class="line">    authentication &#123;</span><br><span class="line">      auth_type PASS</span><br><span class="line">      auth_pass 57D0BC82E074C9D6</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">      172.21.16.45</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">      chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>监测脚本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat haproxy_check.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">A=`ps -C haproxy --no-header | wc -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$A</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    systemctl start haproxy</span><br><span class="line">    sleep 3</span><br><span class="line">    <span class="keyword">if</span> [ `ps -C haproxy --no-header | wc -l ` -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        systemctl stop haproxy</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>启动服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl enable haproxy &amp;&amp;systemctl enable keepalived</span></span><br><span class="line"><span class="comment"># systemctl start keepalived &amp;&amp;systemctl start haproxy</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>haproxy,keepalived,kubernetes</category>
      </categories>
      <tags>
        <tag>haproxy,keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-prometheus</title>
    <url>/2019/08/10/k8s-prometheus/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p><a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a>是一个集数据收集存储、数据查询和数据图表显示于一身的开源监控组件。本文主要讲解如何搭建Prometheus，并使用它监控Kubernetes集群。</p><h2 id="1、下载相关yaml"><a href="#1、下载相关yaml" class="headerlink" title="1、下载相关yaml"></a>1、下载相关yaml</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/xxlaila/kubernetes-yaml/tree/master/prometheus-grafana</span></span><br><span class="line"><span class="comment"># ls -l</span></span><br><span class="line">configmap.yaml</span><br><span class="line">grafana-deploy.yaml</span><br><span class="line">grafana-ingress.yaml</span><br><span class="line">grafana-svc.yaml</span><br><span class="line">node-exporter.yaml</span><br><span class="line">prometheus-deploy.yaml</span><br><span class="line">prometheus-svc.yaml</span><br><span class="line">rbac-setup.yaml</span><br><span class="line">prometheus-ingress.yaml</span><br></pre></td></tr></table></figure><h2 id="2、开始部署"><a href="#2、开始部署" class="headerlink" title="2、开始部署"></a>2、开始部署</h2><h3 id="2-1、采用daemonset方式部署node-exporter组件"><a href="#2-1、采用daemonset方式部署node-exporter组件" class="headerlink" title="2.1、采用daemonset方式部署node-exporter组件"></a>2.1、采用daemonset方式部署node-exporter组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f  node-exporter.yaml</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-2、部署prometheus组件"><a href="#2-2、部署prometheus组件" class="headerlink" title="2.2、部署prometheus组件"></a>2.2、部署prometheus组件</h3><h4 id="2-2-1、rbac文件"><a href="#2-2-1、rbac文件" class="headerlink" title="2.2.1、rbac文件"></a>2.2.1、rbac文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f rbac-setup.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2、以configmap的形式管理prometheus组件的配置文件"><a href="#2-2-2、以configmap的形式管理prometheus组件的配置文件" class="headerlink" title="2.2.2、以configmap的形式管理prometheus组件的配置文件"></a>2.2.2、以configmap的形式管理prometheus组件的配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f configmap.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3、Prometheus-deployment-文件"><a href="#2-2-3、Prometheus-deployment-文件" class="headerlink" title="2.2.3、Prometheus deployment 文件"></a>2.2.3、Prometheus deployment 文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f  prometheus-deploy.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4、Prometheus-service文件"><a href="#2-2-4、Prometheus-service文件" class="headerlink" title="2.2.4、Prometheus service文件"></a>2.2.4、Prometheus service文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f prometheus-svc.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-2-5、配置Ingress"><a href="#2-2-5、配置Ingress" class="headerlink" title="2.2.5、配置Ingress"></a>2.2.5、配置Ingress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f prometheus-ingress.yaml</span></span><br></pre></td></tr></table></figure><h3 id="2-3、部署grafana组件"><a href="#2-3、部署grafana组件" class="headerlink" title="2.3、部署grafana组件"></a>2.3、部署grafana组件</h3><h4 id="2-3-1、grafana-deployment配置文件"><a href="#2-3-1、grafana-deployment配置文件" class="headerlink" title="2.3.1、grafana deployment配置文件"></a>2.3.1、grafana deployment配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f grafana-deploy.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2、grafana-service配置文件"><a href="#2-3-2、grafana-service配置文件" class="headerlink" title="2.3.2、grafana service配置文件"></a>2.3.2、grafana service配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f grafana-svc.yaml</span></span><br></pre></td></tr></table></figure><h4 id="2-3-3、grafana-ingress配置文件"><a href="#2-3-3、grafana-ingress配置文件" class="headerlink" title="2.3.3、grafana ingress配置文件"></a>2.3.3、grafana ingress配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f grafana-ingress.yaml</span></span><br></pre></td></tr></table></figure><h3 id="2-4、WEB界面配置"><a href="#2-4、WEB界面配置" class="headerlink" title="2.4、WEB界面配置"></a>2.4、WEB界面配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc,pods -n kube-ops</span></span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/46ds9824.png" alt="img"></p><h4 id="2-4-1-查看node-exporter"><a href="#2-4-1-查看node-exporter" class="headerlink" title="2.4.1 查看node-exporter"></a>2.4.1 查看node-exporter</h4><p><img src="https://img.xxlaila.cn/8764kjfnks.png" alt="img"></p><h4 id="2-4-2、查看promethues"><a href="#2-4-2、查看promethues" class="headerlink" title="2.4.2、查看promethues"></a>2.4.2、查看promethues</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;prometheus对应的nodeport端口为30005，通过访问<a href="http://172.21.17.4:30005/targets" target="_blank" rel="noopener">http://172.21.17.4:30005/targets</a> 可以看到prometheus已经成功连接上了k8s的apiserver,这里我们前面增加了prometheus的ingress，这里可以直接通过域名进行访问</p><p><img src="https://img.xxlaila.cn/skd9234342.png" alt="img"></p><h4 id="2-4-3、访问grafana"><a href="#2-4-3、访问grafana" class="headerlink" title="2.4.3、访问grafana"></a>2.4.3、访问grafana</h4><p>通过域名访问grafana，默认用户名密码均为admin，配置数据源<br><img src="https://img.xxlaila.cn/sld023423.png" alt="img"></p><ul><li>到grafana官方<a href="https://grafana.com/dashboards/315" target="_blank" rel="noopener">下载模版</a>，导入json模版</li></ul><p><img src="https://img.xxlaila.cn/kf24skdsfds.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>kubedns插件配置</title>
    <url>/2019/08/10/kubedns%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h1 id="安装和配置kubedns插件"><a href="#安装和配置kubedns插件" class="headerlink" title="安装和配置kubedns插件"></a>安装和配置kubedns插件</h1><h2 id="1、配置文件准备"><a href="#1、配置文件准备" class="headerlink" title="1、配置文件准备"></a>1、配置文件准备</h2><p>下载官方的yaml文件目录：kubernetes/cluster/addons/dns。该插件直接使用kubernetes部署,yaml文件经过修改完成部署</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/xxlaila/kubernetes-yaml.git</span></span><br><span class="line"><span class="comment"># cd kubernetes-yaml/coredns</span></span><br><span class="line"><span class="comment"># sed -i 's/10.96.0.10/10.254.0.2/g' coredns-service.yaml</span></span><br><span class="line"><span class="comment"># kubectl create -f ./</span></span><br><span class="line"><span class="comment"># kubectl get pods,svc,rs -n kube-system</span></span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/coredns-68676b6b88-l7b5g   1/1     Running   0          16m</span><br><span class="line"></span><br><span class="line">NAME              TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">service/coredns   ClusterIP   10.254.0.2   &lt;none&gt;        53/UDP,53/TCP   16m</span><br><span class="line"></span><br><span class="line">NAME                                       DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.extensions/coredns-68676b6b88   1         1         1       16m</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get pods -o wide -n kube-system</span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE     IP            NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-68676b6b88-l7b5g                1/1     Running   0          40m     10.254.28.2   172.21.16.248   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h2 id="2、安装和配置dashboard"><a href="#2、安装和配置dashboard" class="headerlink" title="2、安装和配置dashboard"></a>2、安装和配置dashboard</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;官方配置文件kubernetes/cluster/addons/dashboard，这里已经修改过了，经过测试部署，直接进入dashboard目录，修改inages参数进行部署</p><a id="more"></a><h3 id="2-1、安装dashboard"><a href="#2-1、安装dashboard" class="headerlink" title="2.1、安装dashboard"></a>2.1、安装dashboard</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd ../kubernetes-dashboard</span></span><br><span class="line"><span class="comment"># kubectl create -f kubernetes-dashboard.yaml </span></span><br><span class="line">secret/kubernetes-dashboard-certs created</span><br><span class="line">serviceaccount/kubernetes-dashboard created</span><br><span class="line">role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created</span><br><span class="line">deployment.apps/kubernetes-dashboard created</span><br><span class="line">service/kubernetes-dashboard created</span><br><span class="line"><span class="comment"># kubectl get pods -o wide -n kube-system</span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE     IP            NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">kubernetes-dashboard-6c655d9445-4557x   1/1     Running   0          6m54s   10.254.90.2   172.21.16.110   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2、配置账户授权"><a href="#2-2、配置账户授权" class="headerlink" title="2.2、配置账户授权"></a>2.2、配置账户授权</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f admin-user.yaml </span></span><br><span class="line">serviceaccount/admin created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/admin created</span><br><span class="line"><span class="comment"># kubectl describe serviceaccount admin -n kube-system</span></span><br><span class="line">Name:                admin</span><br><span class="line">Namespace:           kube-system</span><br><span class="line">Labels:              k8s-app=kubernetes-dashboard</span><br><span class="line">Annotations:         &lt;none&gt;</span><br><span class="line">Image pull secrets:  &lt;none&gt;</span><br><span class="line">Mountable secrets:   admin-token-wwjw8</span><br><span class="line">Tokens:              admin-token-wwjw8</span><br><span class="line">Events:              &lt;none&gt;</span><br><span class="line"><span class="comment"># kubectl describe secret admin-token-wwjw8 -n kube-system</span></span><br><span class="line">在浏览器访问任意节点IP地址http://&lt;node_ip&gt;:30001</span><br></pre></td></tr></table></figure><h2 id="3、监控安装"><a href="#3、监控安装" class="headerlink" title="3、监控安装"></a>3、监控安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd ../heapster-influxdb-grafana</span></span><br><span class="line"><span class="comment"># kubectl create -f ./</span></span><br><span class="line"><span class="comment"># kubectl get pods -o wide -n kube-system</span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE   IP            NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">heapster-658646db69-lh5tx               1/1     Running   0          11m   10.254.28.3   172.21.16.248   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">monitoring-grafana-7bfc56ffcd-kgh56     1/1     Running   0          11m   10.254.90.3   172.21.16.110   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">monitoring-influxdb-7478d7675c-9255v    1/1     Running   0          11m   10.254.85.2   172.21.16.244   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;这里遇到一个怪事情；heapster安装以后图始终无法出来，这里折腾差不多大半天。最后在dashboard的yaml文件里面添加了以下参数，图就可以了，</p><p><img src="https://img.xxlaila.cn/4udfs93.png" alt="img"></p><p>args:<br>- –auto-generate-certificates<br>- –token-ttl=43200<br><em>- –heapster-host=<a href="http://heapster" target="_blank" rel="noopener">http://heapster</a></em></p><p><img src="https://img.xxlaila.cn/ds832948dk.png" alt="img"></p><p>Prometheus的安装请参考<a href="http://xxlaila.github.io/2019/08/10/k8s-prometheus/" target="_blank" rel="noopener">《Prometheus 入门》</a>文章，grafana不需要重复部署。只需要在grafana里面增加目录挂在，吧kube-ops 修改kube-system即可</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kube-dns,dashboard</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes node节点安装</title>
    <url>/2019/08/10/kubernetes-node%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>More: <a href="https://xxlaila.github.io/2019/08/09/kubernetes-v1-13-3%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">master节点安装请参考</a></p><h2 id="1、部署kubernetes-node节点"><a href="#1、部署kubernetes-node节点" class="headerlink" title="1、部署kubernetes node节点"></a>1、部署kubernetes node节点</h2><p>Kubernetes node节点包含如下组件：</p><ul><li><strong>Flanneld</strong>: 之前单机节点安装没有配置TLS，现在需要在service配置文件中增加TLS配置</li><li><strong>Docker</strong>: version 18.06.2-ce</li><li><strong>kubelet</strong></li><li><strong>kube-proxy</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls /etc/kubernetes/</span></span><br><span class="line">bootstrap.kubeconfig  kubelet   kube-proxy.kubeconfig  proxy  ssl</span><br><span class="line"><span class="comment"># ls /etc/kubernetes/ssl</span></span><br><span class="line">admin-key.pem  kube-apiserver-key.pem  kube-controller-manager-key.pem  kubelet-api-admin-key.pem   kube-proxy-key.pem  kubernetes-ca-key.pem  kube-scheduler-key.pem</span><br><span class="line">admin.pem      kube-apiserver.pem      kube-controller-manager.pem      kubelet-api-admin.pem       kube-proxy.pem      kubernetes-ca.pem      kube-scheduler.pem</span><br></pre></td></tr></table></figure><h3 id="增加docker-源"><a href="#增加docker-源" class="headerlink" title="增加docker 源"></a>增加docker 源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum-config-manager \</span></span><br><span class="line">  --add-repo \</span><br><span class="line">  https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ul><li><p>根据实际查找当前版本 (可选)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum list docker-ce --showduplicates | sort -r</span></span><br></pre></td></tr></table></figure></li><li><p>如果确定了版本,直接安装,如果要装17。03直接修改下面数字即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install docker-ce-18.06.2.ce-3.el7  # 主意版本填写包名的格式.</span></span><br></pre></td></tr></table></figure></li><li><p>启docker服务,和开机启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl start docker &amp;&amp; systemctl enable docker</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-1、安装flanneld"><a href="#1-1、安装flanneld" class="headerlink" title="1.1、安装flanneld"></a>1.1、安装flanneld</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv kubernetes  /etc/ &amp;&amp; chown -R root: /etc/kubernetes</span></span><br><span class="line"><span class="comment"># wget https://github.com/coreos/flannel/releases/download/v0.11.0/flannel-v0.11.0-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar zxf flannel-v0.11.0-linux-amd64.tar.gz &amp;&amp; mv flanneld mk-docker-opts.sh /usr/bin/ &amp;&amp; rm -rf flannel-v0.11.0-linux-amd64.tar.gz</span></span><br></pre></td></tr></table></figure><h4 id="1-1-1、flanneld启动配置文件"><a href="#1-1-1、flanneld启动配置文件" class="headerlink" title="1.1.1、flanneld启动配置文件"></a>1.1.1、flanneld启动配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /lib/systemd/system/flanneld.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=etcd.service</span><br><span class="line">Before=docker.service</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/etc/sysconfig/flanneld</span><br><span class="line">ExecStart=/usr/bin/flanneld -etcd-endpoints=<span class="variable">$&#123;FLANNEL_ETCD&#125;</span> <span class="variable">$FLANNEL_OPTIONS</span></span><br><span class="line">ExecStartPost=/usr/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/subnet.env</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">RequiredBy=docker.service</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1-1-2、flanneld配置文件"><a href="#1-1-2、flanneld配置文件" class="headerlink" title="1.1.2、flanneld配置文件"></a>1.1.2、flanneld配置文件</h4><p>flanneld 配置文件连接了etcd，而在配置etcd的时候需要证书，所以记的吧证书copy到node节点上去</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/sysconfig/flanneld</span></span><br><span class="line"><span class="comment"># Flanneld configuration options</span></span><br><span class="line"><span class="comment"># etcd url location.  Point this to the server where etcd runs</span></span><br><span class="line">FLANNEL_ETCD=<span class="string">"https://172.21.17.4:2379,https://172.21.16.230:2379,https://172.21.16.240:2379"</span></span><br><span class="line"><span class="comment"># etcd config key.  This is the configuration key that flannel queries</span></span><br><span class="line"><span class="comment"># For address range assignment</span></span><br><span class="line">FLANNEL_ETCD_PREFIX=<span class="string">"/coreos.com/network"</span></span><br><span class="line"><span class="comment"># Any additional options that you want to pass</span></span><br><span class="line">FLANNEL_OPTIONS=<span class="string">"-etcd-cafile=/etc/etcd/ssl/etcd-ca.pem -etcd-certfile=/etc/etcd/ssl/etcd.pem -etcd-keyfile=/etc/etcd/ssl/etcd-key.pem"</span></span><br></pre></td></tr></table></figure><ul><li>在启动flanneld之前，需要在etcd中添加一条网络配置记录，这个配置将用于flanneld分配给每个docker的虚拟ip地址段,</li><li>在任意一台master执行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl set /coreos.com/network/config '&#123; "Network": "10.254.0.0/16" &#125;'</span></span><br><span class="line">&#123; <span class="string">"Network"</span>: <span class="string">"10.254.0.0/16"</span> &#125;</span><br><span class="line"><span class="comment"># etcdctl get  /coreos.com/network/config </span></span><br><span class="line">&#123; <span class="string">"Network"</span>: <span class="string">"10.254.0.0/16"</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;在执行的时候我们需要创建一个配置文件，因为前面etcd是启用了https的，否则的话，会报<code>Error: client: etcd cluster is unavailable or misconfigured; error #0: x509: certificate signed by unknown authority</code>的错误。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcd.rc</span></span><br><span class="line"><span class="built_in">export</span> ETCDCTL_ENDPOINT=https://172.21.17.4:2379,https://172.21.16.230:2379,https://172.21.16.240:2379</span><br><span class="line"><span class="built_in">export</span> ETCDCTL_CERT_FILE=/etc/etcd/ssl/etcd.pem</span><br><span class="line"><span class="built_in">export</span> ETCDCTL_KEY_FILE=/etc/etcd/ssl/etcd-key.pem</span><br><span class="line"><span class="built_in">export</span> ETCDCTL_CA_FILE=/etc/etcd/ssl/etcd-ca.pem</span><br></pre></td></tr></table></figure><h3 id="1-1-3、启动flanneld"><a href="#1-1-3、启动flanneld" class="headerlink" title="1.1.3、启动flanneld"></a>1.1.3、启动flanneld</h3><p>在启动flanneld之前，我们需要修改docker的配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /lib/systemd/system/docker.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/run/flannel/subnet.env</span><br><span class="line">ExecStart=/usr/bin/dockerd <span class="variable">$DOCKER_NETWORK_OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable flanneld &amp;&amp;systemctl start flanneld &amp;&amp;systemctl status flanneld</span></span><br></pre></td></tr></table></figure><p>重启了docker和flanneld以后，我们在任意一台node节点上通过ip add s可以查看。flanneld 和docker 网络绑定的情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip add s</span></span><br></pre></td></tr></table></figure><h2 id="2、安装和配置kubelet"><a href="#2、安装和配置kubelet" class="headerlink" title="2、安装和配置kubelet"></a>2、安装和配置kubelet</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;kubelet启动时向kube-apiserver发送tls bootstrapping请求，需要将bootstrap token文件中kube-bootsrap用户授予system:node-bootstrapper cluster角色（role），然后kubelet才能有权限创建认证请求（certificate signing requests）</p><h3 id="2-1、安装kubelet"><a href="#2-1、安装kubelet" class="headerlink" title="2.1、安装kubelet"></a>2.1、安装kubelet</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://dl.k8s.io/v1.13.3/kubernetes-server-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar -xzf kubernetes-server-linux-amd64.tar.gz &amp;&amp;cp -r ./kubernetes/server/bin/&#123;kube-proxy,kubelet&#125; /usr/bin/ &amp;&amp; rm -rf ./kubernetes*</span></span><br></pre></td></tr></table></figure><h3 id="2-2、创建kubelet启动文件"><a href="#2-2、创建kubelet启动文件" class="headerlink" title="2.2、创建kubelet启动文件"></a>2.2、创建kubelet启动文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kubelet.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/var/lib/kubelet</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/kubelet</span><br><span class="line">ExecStart=/usr/bin/kubelet \</span><br><span class="line">           <span class="variable">$KUBE_LOGTOSTDERR</span> \</span><br><span class="line">           <span class="variable">$KUBE_LOG_LEVEL</span> \</span><br><span class="line">           <span class="variable">$KUBELET_API_SERVER</span> \</span><br><span class="line">           <span class="variable">$KUBELET_ADDRESS</span> \</span><br><span class="line">           <span class="variable">$KUBELET_PORT</span> \</span><br><span class="line">           <span class="variable">$KUBELET_HOSTNAME</span> \</span><br><span class="line">           <span class="variable">$KUBE_ALLOW_PRIV</span> \</span><br><span class="line">           <span class="variable">$KUBELET_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="2-3、kubelet配置文件"><a href="#2-3、kubelet配置文件" class="headerlink" title="2.3、kubelet配置文件"></a>2.3、kubelet配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/kubelet</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes kubelet (minion) config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The address for the info server to serve on (set to 0.0.0.0 or "" for all interfaces)</span></span><br><span class="line">KUBELET_ADDRESS=<span class="string">"--node-ip=&#123;node_ip&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The port for the info server to serve on</span></span><br><span class="line"><span class="comment"># KUBELET_PORT="--port=10250"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You may leave this blank to use the actual hostname</span></span><br><span class="line">KUBELET_HOSTNAME=<span class="string">"--hostname-override=&#123;node_ip&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># location of the api-server</span></span><br><span class="line"><span class="comment"># KUBELET_API_SERVER=""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBELET_ARGS=<span class="string">"  --address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                --allow-privileged \</span></span><br><span class="line"><span class="string">                --anonymous-auth=false \</span></span><br><span class="line"><span class="string">                --authorization-mode=Webhook \</span></span><br><span class="line"><span class="string">                --bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</span></span><br><span class="line"><span class="string">                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --cgroup-driver=cgroupfs \</span></span><br><span class="line"><span class="string">                --cert-dir=/etc/kubernetes/ssl \</span></span><br><span class="line"><span class="string">                --cluster-dns=10.254.0.2 \</span></span><br><span class="line"><span class="string">                --cluster-domain=cluster.local \</span></span><br><span class="line"><span class="string">                --eviction-soft=imagefs.available&lt;15%,memory.available&lt;512Mi,nodefs.available&lt;15%,nodefs.inodesFree&lt;10% \</span></span><br><span class="line"><span class="string">                --eviction-soft-grace-period=imagefs.available=3m,memory.available=1m,nodefs.available=3m,nodefs.inodesFree=1m \</span></span><br><span class="line"><span class="string">                --eviction-hard=imagefs.available&lt;10%,memory.available&lt;256Mi,nodefs.available&lt;10%,nodefs.inodesFree&lt;5% \</span></span><br><span class="line"><span class="string">                --eviction-max-pod-grace-period=30 \</span></span><br><span class="line"><span class="string">                --image-gc-high-threshold=80 \</span></span><br><span class="line"><span class="string">                --image-gc-low-threshold=70 \</span></span><br><span class="line"><span class="string">                --image-pull-progress-deadline=30s \</span></span><br><span class="line"><span class="string">                --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</span></span><br><span class="line"><span class="string">                --max-pods=100 \</span></span><br><span class="line"><span class="string">                --minimum-image-ttl-duration=720h0m0s \</span></span><br><span class="line"><span class="string">                --node-labels=node.kubernetes.io/k8s-node=true \</span></span><br><span class="line"><span class="string">                --pod-infra-container-image=docker.io/kubernetes/pause:latest \</span></span><br><span class="line"><span class="string">                --port=10250 \</span></span><br><span class="line"><span class="string">                --read-only-port=0 \</span></span><br><span class="line"><span class="string">                --rotate-certificates \</span></span><br><span class="line"><span class="string">                --rotate-server-certificates \</span></span><br><span class="line"><span class="string">                --fail-swap-on=false \</span></span><br><span class="line"><span class="string">                --v=2"</span></span><br></pre></td></tr></table></figure><h3 id="2-4、启动kubelet"><a href="#2-4、启动kubelet" class="headerlink" title="2.4、启动kubelet"></a>2.4、启动kubelet</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir /var/lib/kubelet -p</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kubelet &amp;&amp;systemctl start kubelet &amp;&amp; systemctl status kubelet</span></span><br><span class="line"><span class="comment"># journalctl -fxeu kubelet</span></span><br></pre></td></tr></table></figure><h2 id="3、通过kubelet的tls请求"><a href="#3、通过kubelet的tls请求" class="headerlink" title="3、通过kubelet的tls请求"></a>3、通过kubelet的tls请求</h2><p>kubelet首次启动时像kube-apiserver发送证书签名请求，必须通过后kubernetes系统才会将该node加入集群：</p><h3 id="3-1、查看未授权csr请求"><a href="#3-1、查看未授权csr请求" class="headerlink" title="3.1、查看未授权csr请求"></a>3.1、查看未授权csr请求</h3><ul><li>任意master节点均可</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get csr</span></span><br><span class="line">NAME                                                   AGE   REQUESTOR                   CONDITION</span><br><span class="line">csr-kxfql                                              78m   system:node:172.21.16.204   Pending</span><br><span class="line">node-csr-QptfMgAu2y4GmUZX1Ph9B0XomA0Rg-fxcgs0Yzd-XRU   79m   system:bootstrap:ff90fd     Approved,Issued</span><br><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line">No resources found.</span><br></pre></td></tr></table></figure><h3 id="3-2、通过csr请求"><a href="#3-2、通过csr请求" class="headerlink" title="3.2、通过csr请求"></a>3.2、通过csr请求</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl certificate approve csr-kxfql</span></span><br><span class="line">certificatesigningrequest.certificates.k8s.io/csr-kxfql approved</span><br></pre></td></tr></table></figure><ul><li>自动生成kubelet kubeconfig文件和公私钥,新版本 kubelet server 的证书自动签发已经被关闭,所以对于 kubelet server 的证书仍需要手动签署</li></ul><h2 id="4、配置kube-proxy"><a href="#4、配置kube-proxy" class="headerlink" title="4、配置kube-proxy"></a>4、配置kube-proxy</h2><h3 id="4-1、kupe-proxy-启动文件"><a href="#4-1、kupe-proxy-启动文件" class="headerlink" title="4.1、kupe-proxy 启动文件"></a>4.1、kupe-proxy 启动文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-proxy.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kube-Proxy Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/proxy</span><br><span class="line">ExecStart=/usr/bin/kube-proxy \</span><br><span class="line">       <span class="variable">$KUBE_LOGTOSTDERR</span> \</span><br><span class="line">       <span class="variable">$KUBE_LOG_LEVEL</span> \</span><br><span class="line">       <span class="variable">$KUBE_MASTER</span> \</span><br><span class="line">       <span class="variable">$KUBE_PROXY_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="4-2、kube-proxy配置文件"><a href="#4-2、kube-proxy配置文件" class="headerlink" title="4.2、kube-proxy配置文件"></a>4.2、kube-proxy配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/proxy</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes proxy config</span></span><br><span class="line"><span class="comment"># default config should be adequate</span></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_PROXY_ARGS=<span class="string">"   --bind-address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                    --cleanup-ipvs=true \</span></span><br><span class="line"><span class="string">                    --cluster-cidr=10.254.0.0/16 \</span></span><br><span class="line"><span class="string">                    --hostname-override=docker4.node \</span></span><br><span class="line"><span class="string">                    --healthz-bind-address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                    --healthz-port=10256 \</span></span><br><span class="line"><span class="string">                    --masquerade-all=true \</span></span><br><span class="line"><span class="string">                    --proxy-mode=ipvs \</span></span><br><span class="line"><span class="string">                    --ipvs-min-sync-period=5s \</span></span><br><span class="line"><span class="string">                    --ipvs-sync-period=5s \</span></span><br><span class="line"><span class="string">                    --ipvs-scheduler=wrr \</span></span><br><span class="line"><span class="string">                    --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig \</span></span><br><span class="line"><span class="string">                    --logtostderr=true \</span></span><br><span class="line"><span class="string">                    --v=2"</span></span><br></pre></td></tr></table></figure><h3 id="4-3、启动kube-proxy"><a href="#4-3、启动kube-proxy" class="headerlink" title="4.3、启动kube-proxy"></a>4.3、启动kube-proxy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kube-proxy &amp;&amp; systemctl start kube-proxy &amp;&amp; systemctl status kube-proxy</span></span><br></pre></td></tr></table></figure><h3 id="4-4-在kube-proxy和kubelet启动之前"><a href="#4-4-在kube-proxy和kubelet启动之前" class="headerlink" title="4.4 在kube-proxy和kubelet启动之前"></a>4.4 在kube-proxy和kubelet启动之前</h3><p>由于 kubelet 组件是采用 TLS Bootstrap 启动，所以需要预先创建相关配置</p><ul><li>创建用于 tls bootstrap 的 token secret<blockquote><p>master节点操作</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f bootstrap.secret.yaml</span></span><br></pre></td></tr></table></figure></li></ul><p>为了能让 kubelet 实现自动更新证书，需要配置相关 clusterrolebinding</p><ul><li><p>允许 kubelet tls bootstrap 创建 csr 请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding create-csrs-for-bootstrapping \</span><br><span class="line">    --clusterrole=system:node-bootstrapper \</span><br><span class="line">    --group=system:bootstrappers</span><br></pre></td></tr></table></figure></li><li><p>自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding auto-approve-csrs-for-group \</span><br><span class="line">    --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient \</span><br><span class="line">    --group=system:bootstrappers</span><br></pre></td></tr></table></figure></li><li><p>自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding auto-approve-renewals-for-nodes \</span><br><span class="line">    --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient \</span><br><span class="line">    --group=system:nodes</span><br></pre></td></tr></table></figure></li><li><p>在 kubelet server 开启 api 认证的情况下，apiserver 反向访问 kubelet 10250 需要此授权(eg: kubectl logs)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create clusterrolebinding system:kubelet-api-admin \</span><br><span class="line">    --clusterrole=system:kubelet-api-admin \</span><br><span class="line">    --user=system:kubelet-api-admin</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>问题</strong>:<br>在启动kubelet的时候，node节点在master节点无法查看，查看kubelet的日志提示如下：</li><li>查看kubelet的日志方式有两种</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># journalctl -f -u kubelet</span></span><br><span class="line"><span class="comment"># systemctl  status kubelet -l</span></span><br></pre></td></tr></table></figure><ul><li>查看nodes<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME            STATUS   ROLES    AGE   VERSION</span><br><span class="line">172.21.16.244   Ready    &lt;none&gt;   12m   v1.13.3</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>验证测试集群</strong><br>创建一个nginx测试集群是否可用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl run nginx --image=docker.io/nginx:latest --replicas=2 --labels run=nginx</span></span><br><span class="line">kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.</span><br><span class="line">deployment.apps/nginx created</span><br><span class="line"><span class="comment"># kubectl expose deployment nginx --port=80 --type=NodePort</span></span><br><span class="line">service/nginx exposed</span><br></pre></td></tr></table></figure></li><li><p>查看pod情况</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod -o wide</span></span><br><span class="line">NAME                     READY   STATUS              RESTARTS   AGE   IP            NODE            NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-766994fc9f-gcv4n   0/1     ContainerCreating   0          55s   &lt;none&gt;        172.21.16.248   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-766994fc9f-w2j8p   1/1     Running             0          55s   10.254.45.2   172.21.16.83    &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><ul><li>查看对外的服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc nginx</span></span><br><span class="line">NAME    TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">nginx   NodePort   10.254.11.147   &lt;none&gt;        80:48713/TCP   31s</span><br></pre></td></tr></table></figure><p>部署完成后，通过任意node节点IP的地址加端口48713即可访问<br><a href="http://node-ip:48713/" target="_blank" rel="noopener">http://node-ip:48713/</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes v13.3 node</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes v1.13.3安装</title>
    <url>/2019/08/09/kubernetes-v1-13-3%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:43 GMT+0800 (China Standard Time) --><h2 id="1、-环境准备"><a href="#1、-环境准备" class="headerlink" title="1、 环境准备"></a>1、 环境准备</h2><table><thead><tr><th>ip</th><th>type</th><th>docker</th><th>os</th><th>k8s version</th></tr></thead><tbody><tr><td>172.21.17.4</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td>v1.13.3</td></tr><tr><td>172.21.16.230</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.240</td><td>master,etcd</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.244</td><td>node,flanneld,ha+kee</td><td>18.06.2-ce</td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.248</td><td>node,flanneld,ha+kee</td><td>18.06.2-ce</td><td>CentOS Linux release 7.4.1708</td><td></td></tr><tr><td>172.21.16.45</td><td>vip</td><td></td><td>CentOS Linux release 7.4.1708</td><td></td></tr></tbody></table><h2 id="2、部署ETC集群"><a href="#2、部署ETC集群" class="headerlink" title="2、部署ETC集群"></a>2、部署ETC集群</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;etcd的正常运行是k8s集群运行的提前条件，因此部署k8s集群首先部署etcd集群。安装CA证书，安装CFSSL证书管理工具。直接下载二进制安装包</p><a id="more"></a><h3 id="2-1、下载cfssl"><a href="#2-1、下载cfssl" class="headerlink" title="2.1、下载cfssl"></a>2.1、下载cfssl</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -o cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span></span><br><span class="line"><span class="comment"># curl -o cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span></span><br><span class="line"><span class="comment"># curl -o cfssl-certinfo https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span></span><br><span class="line"><span class="comment"># chmod +x * &amp;&amp;mv cfssl* /usr/bin/</span></span><br></pre></td></tr></table></figure><h3 id="2-2-、创建etcd证书"><a href="#2-2-、创建etcd证书" class="headerlink" title="2.2 、创建etcd证书"></a>2.2 、创建etcd证书</h3><ul><li><p>etcd-ca-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir etcd_ssl &amp;&amp; cd etcd_ssl</span></span><br><span class="line"><span class="comment"># cat etcd-ca-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"etcd-ca"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 4096</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"etcd Security"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"Beijing"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"Beijing"</span>,</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"ca"</span>: &#123;</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>etcd-gencert.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat etcd-gencert.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"signing"</span>: &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"usages"</span>: [</span><br><span class="line">          <span class="string">"signing"</span>,</span><br><span class="line">          <span class="string">"key encipherment"</span>,</span><br><span class="line">          <span class="string">"server auth"</span>,</span><br><span class="line">          <span class="string">"client auth"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>etcd-csr.json</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat etcd-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"etcd Security"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"Beijing"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"Beijing"</span>,</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">        <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="string">"172.21.17.4"</span>,</span><br><span class="line">        <span class="string">"172.21.16.231"</span>,</span><br><span class="line">        <span class="string">"172.21.16.240"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接下来执行生成即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert --initca=true etcd-ca-csr.json | cfssljson --bare etcd-ca</span></span><br><span class="line"><span class="comment"># cfssl gencert --ca etcd-ca.pem --ca-key etcd-ca-key.pem --config etcd-gencert.json etcd-csr.json | cfssljson --bare etcd</span></span><br><span class="line"><span class="comment"># mkdir -p /etc/etcd/ssl &amp;&amp;mkdir -p /var/lib/etcd</span></span><br><span class="line"><span class="comment"># cp *.pem /etc/etcd/ssl</span></span><br><span class="line"><span class="comment"># ls /etc/etcd/ssl/</span></span><br><span class="line">etcd-ca-key.pem  etcd-ca.pem  etcd-key.pem  etcd.pem</span><br><span class="line"><span class="comment"># scp -r /etc/etcd k8s-master-02:/etc</span></span><br><span class="line"><span class="comment"># scp -r /etc/etcd k8s-master-03:/etc</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3、开始配置etcd"><a href="#2-3、开始配置etcd" class="headerlink" title="2.3、开始配置etcd"></a>2.3、开始配置etcd</h3><h4 id="2-3-1、下载etcd"><a href="#2-3-1、下载etcd" class="headerlink" title="2.3.1、下载etcd"></a>2.3.1、下载etcd</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://github.com/etcd-io/etcd/releases/download/v3.3.15/etcd-v3.3.15-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar zxf etcd-v3.3.15-linux-amd64.tar.gz &amp;&amp;cd etcd-v3.3.15-linux-amd64 &amp;&amp;cp -arp etcd* /usr/bin/</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2、创建etcd的Systemd-unit-文件"><a href="#2-3-2、创建etcd的Systemd-unit-文件" class="headerlink" title="2.3.2、创建etcd的Systemd unit 文件"></a>2.3.2、创建etcd的Systemd unit 文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Etcd 这里采用最新的 3.3.15 版本，安装方式直接复制二进制文件、systemd service 配置即可，不过需要注意相关用户权限问题，以下脚本配置等参考了 etcd rpm 安装包</p><h4 id="2-3-3、配置etcd-conf"><a href="#2-3-3、配置etcd-conf" class="headerlink" title="2.3.3、配置etcd.conf"></a>2.3.3、配置etcd.conf</h4><ul><li>k8s-master-01<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/etcd/etcd.conf</span></span><br><span class="line"><span class="comment"># [member]</span></span><br><span class="line">ETCD_NAME=etcd1</span><br><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd"</span></span><br><span class="line">ETCD_SNAPSHOT_COUNT=<span class="string">"100"</span></span><br><span class="line">ETCD_HEARTBEAT_INTERVAL=<span class="string">"100"</span></span><br><span class="line">ETCD_ELECTION_TIMEOUT=<span class="string">"1000"</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"https://172.21.17.4:2380"</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"https://172.21.17.4:2379,http://127.0.0.1:2379"</span></span><br><span class="line">ETCD_MAX_SNAPSHOTS=<span class="string">"5"</span></span><br><span class="line">ETCD_MAX_WALS=<span class="string">"5"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [cluster]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"https://172.21.17.4:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd1=https://172.21.17.4:2380,etcd2=https://172.21.16.231:2380,etcd3=https://172.21.16.240:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"new"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"https://172.21.17.4:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [security]</span></span><br><span class="line">ETCD_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_AUTO_TLS=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_PEER_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_PEER_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_PEER_AUTO_TLS=<span class="string">"true"</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>k8s-master-02</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/etcd/etcd.conf</span></span><br><span class="line"><span class="comment"># [member]</span></span><br><span class="line">ETCD_NAME=etcd2</span><br><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd"</span></span><br><span class="line">ETCD_SNAPSHOT_COUNT=<span class="string">"100"</span></span><br><span class="line">ETCD_HEARTBEAT_INTERVAL=<span class="string">"100"</span></span><br><span class="line">ETCD_ELECTION_TIMEOUT=<span class="string">"1000"</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"https://172.21.16.231:2380"</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"https://172.21.16.231:2379,http://127.0.0.1:2379"</span></span><br><span class="line">ETCD_MAX_SNAPSHOTS=<span class="string">"5"</span></span><br><span class="line">ETCD_MAX_WALS=<span class="string">"5"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [cluster]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"https://172.21.16.231:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd1=https://172.21.17.4:2380,etcd2=https://172.21.16.231:2380,etcd3=https://172.21.16.240:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"new"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"https://172.21.16.231:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [security]</span></span><br><span class="line">ETCD_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_AUTO_TLS=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_PEER_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_PEER_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_PEER_AUTO_TLS=<span class="string">"true"</span></span><br></pre></td></tr></table></figure></li><li><p>k8s-master-03</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/etcd/etcd.conf</span></span><br><span class="line"><span class="comment"># [member]</span></span><br><span class="line">ETCD_NAME=etcd3</span><br><span class="line">ETCD_DATA_DIR=<span class="string">"/var/lib/etcd"</span></span><br><span class="line">ETCD_SNAPSHOT_COUNT=<span class="string">"100"</span></span><br><span class="line">ETCD_HEARTBEAT_INTERVAL=<span class="string">"100"</span></span><br><span class="line">ETCD_ELECTION_TIMEOUT=<span class="string">"1000"</span></span><br><span class="line">ETCD_LISTEN_PEER_URLS=<span class="string">"https://172.21.16.240:2380"</span></span><br><span class="line">ETCD_LISTEN_CLIENT_URLS=<span class="string">"https://172.21.16.240:2379,http://127.0.0.1:2379"</span></span><br><span class="line">ETCD_MAX_SNAPSHOTS=<span class="string">"5"</span></span><br><span class="line">ETCD_MAX_WALS=<span class="string">"5"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [cluster]</span></span><br><span class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="string">"https://172.21.16.240:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER=<span class="string">"etcd1=https://172.21.17.4:2380,etcd2=https://172.21.16.231:2380,etcd3=https://172.21.16.240:2380"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_STATE=<span class="string">"new"</span></span><br><span class="line">ETCD_INITIAL_CLUSTER_TOKEN=<span class="string">"etcd-cluster"</span></span><br><span class="line">ETCD_ADVERTISE_CLIENT_URLS=<span class="string">"https://172.21.16.240:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [security]</span></span><br><span class="line">ETCD_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_AUTO_TLS=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_CERT_FILE=<span class="string">"/etc/etcd/ssl/etcd.pem"</span></span><br><span class="line">ETCD_PEER_KEY_FILE=<span class="string">"/etc/etcd/ssl/etcd-key.pem"</span></span><br><span class="line">ETCD_PEER_CLIENT_CERT_AUTH=<span class="string">"true"</span></span><br><span class="line">ETCD_PEER_TRUSTED_CA_FILE=<span class="string">"/etc/etcd/ssl/etcd-ca.pem"</span></span><br><span class="line">ETCD_PEER_AUTO_TLS=<span class="string">"true"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-4、配置etcd启动文件"><a href="#2-3-4、配置etcd启动文件" class="headerlink" title="2.3.4、配置etcd启动文件"></a>2.3.4、配置etcd启动文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /lib/systemd/system/etcd.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/var/lib/etcd/</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line">User=etcd</span><br><span class="line"><span class="comment"># set GOMAXPROCS to number of processors</span></span><br><span class="line">ExecStart=/bin/bash -c <span class="string">"GOMAXPROCS=<span class="variable">$(nproc)</span> /usr/bin/etcd --name=\"<span class="variable">$&#123;ETCD_NAME&#125;</span>\" --data-dir=\"<span class="variable">$&#123;ETCD_DATA_DIR&#125;</span>\" --listen-client-urls=\"<span class="variable">$&#123;ETCD_LISTEN_CLIENT_URLS&#125;</span>\""</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="2-3-5、etcd授权"><a href="#2-3-5、etcd授权" class="headerlink" title="2.3.5、etcd授权"></a>2.3.5、etcd授权</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># groupadd -r etcd</span></span><br><span class="line"><span class="comment"># useradd -r -g etcd -d /var/lib/etcd -s /sbin/nologin -c "etcd user" etcd</span></span><br><span class="line"><span class="comment"># chown -R etcd:etcd /etc/etcd &amp;&amp; chmod -R 755 /etc/etcd/ssl &amp;&amp;chown -R etcd:etcd /var/lib/etcd</span></span><br><span class="line"><span class="comment"># systemctl daemon-reload &amp;&amp; systemctl enable etcd &amp;&amp;systemctl start etcd &amp;&amp; systemctl status etcd</span></span><br></pre></td></tr></table></figure><h4 id="2-3-6、验证etcd"><a href="#2-3-6、验证etcd" class="headerlink" title="2.3.6、验证etcd"></a>2.3.6、验证etcd</h4><p>由于etcd使用了证书，所以etcd命令需要带上证书</p><ul><li><p>查看成员列表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl --key-file /etc/etcd/ssl/etcd-key.pem --cert-file /etc/etcd/ssl/etcd.pem --ca-file /etc/etcd/ssl/etcd-ca.pem member list</span></span><br><span class="line">93c04a995ff8aa8: name=etcd3 peerURLs=https://172.21.16.240:2380 clientURLs=https://172.21.16.240:2379 isLeader=<span class="literal">false</span></span><br><span class="line">7cc4daf6e4db3a8a: name=etcd2 peerURLs=https://172.21.16.231:2380 clientURLs=https://172.21.16.231:2379 isLeader=<span class="literal">false</span></span><br><span class="line">ec7ea930930d012e: name=etcd1 peerURLs=https://172.21.17.4:2380 clientURLs=https://172.21.17.4:2379 isLeader=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>查看集群状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etcdctl --key-file /etc/etcd/ssl/etcd-key.pem --cert-file /etc/etcd/ssl/etcd.pem --ca-file /etc/etcd/ssl/etcd-ca.pem cluster-health</span></span><br><span class="line">member 93c04a995ff8aa8 is healthy: got healthy result from https://172.21.16.240:2379</span><br><span class="line">member 7cc4daf6e4db3a8a is healthy: got healthy result from https://172.21.16.231:2379</span><br><span class="line">member ec7ea930930d012e is healthy: got healthy result from https://172.21.17.4:2379</span><br><span class="line">cluster is healthy</span><br></pre></td></tr></table></figure></li></ul><h2 id="3、部署kubernetes"><a href="#3、部署kubernetes" class="headerlink" title="3、部署kubernetes"></a>3、部署kubernetes</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;新版本已经越来越趋近全面 TLS + RBAC 配置，所以本次安装将会启动大部分 TLS + RBAC 配置，包括 kube-controler-manager、kube-scheduler 组件不再连接本地 kube-apiserver 的 8080 非认证端口，kubelet 等组件 API 端点关闭匿名访问，启动 RBAC 认证等；为了满足这些认证，需要签署以下证书</p><h3 id="3-2、创建CA"><a href="#3-2、创建CA" class="headerlink" title="3.2、创建CA"></a>3.2、创建CA</h3><h4 id="3-2-1、创建CA配置文件"><a href="#3-2-1、创建CA配置文件" class="headerlink" title="3.2.1、创建CA配置文件"></a>3.2.1、创建CA配置文件</h4><ul><li><p>kubernetes-ca-csr.json集群CA根证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir ssl &amp;&amp; cd ssl/</span></span><br><span class="line"><span class="comment"># cat kubernetes-ca-csr.json </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 4096</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"ca"</span>: &#123;</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>“CN”</strong>: Common Name，kube-apiserver 从该证书中提取该字段作为请求的用户名（User Name）;浏览器使用该字段验证网站合法性；</li><li><strong>“O”</strong>: Organization，kube-apiserver从该证书中提取该字段作为请求用户所属组（Group）；</li></ul></li><li><p>kubernetes-gencert.json<br>用于生成其他证书的标准</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kubernetes-gencert.json </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"signing"</span>: &#123;</span><br><span class="line">        <span class="string">"default"</span>: &#123;</span><br><span class="line">            <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"profiles"</span>: &#123;</span><br><span class="line">            <span class="string">"kubernetes"</span>: &#123;</span><br><span class="line">                <span class="string">"usages"</span>: [</span><br><span class="line">                    <span class="string">"signing"</span>,</span><br><span class="line">                    <span class="string">"key encipherment"</span>,</span><br><span class="line">                    <span class="string">"server auth"</span>,</span><br><span class="line">                    <span class="string">"client auth"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>kube-apiserver-csr.json<br>apiserver TLS 认证端口需要的证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kube-apiserver-csr.json </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">        <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"10.254.0.1"</span>,</span><br><span class="line">        <span class="string">"localhost"</span>,</span><br><span class="line">        <span class="string">"172.21.16.45"</span>,</span><br><span class="line">        <span class="string">"*.master.kubernetes.node"</span>,</span><br><span class="line">        <span class="string">"kubernetes"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">        <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>172.21.16.45</strong>: vip地址</li><li>如果hosts字段不为空则需要指定授权使用该证书的ip或域名列表,kube-apiserver指定的service-cluster-ip-range网段的第一个ip，如10.254.0.1</li></ul><ul><li><p>kube-controller-manager-csr.json<br>controller manager 连接 apiserver 需要使用的证书，同时本身 10257 端口也会使用此证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kube-controller-manager-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"localhost"</span>,</span><br><span class="line">    <span class="string">"*.master.kubernetes.node"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>kube-scheduler-csr.json<br>scheduler连接 apiserver 需要使用的证书，同时本身 10259 端口也会使用此证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kube-scheduler-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"localhost"</span>,</span><br><span class="line">    <span class="string">"*.master.kubernetes.node"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>kube-proxy-csr.json<br>proxy 组件连接 apiserver 需要使用的证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kube-proxy-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>kubelet-api-admin-csr.json<br>apiserver 反向连接 kubelet 组件 10250 端口需要使用的证书(例如执行 kubectl logs)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat kubelet-api-admin-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kubelet-api-admin"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:kubelet-api-admin"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>admin-csr.json<br>集群管理员(kubectl)连接 apiserver 需要使用的证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat admin-csr.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:masters"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:masters"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>: 证书文件里面的CN、O字段，两个比较特殊的字段，基本都是system:开头，是为了匹配RBAC规则,<a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#default-roles-and-role-bindings" target="_blank" rel="noopener">详情参考</a></p><h4 id="3-3、使用命令生成即可"><a href="#3-3、使用命令生成即可" class="headerlink" title="3.3、使用命令生成即可"></a>3.3、使用命令生成即可</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cfssl gencert --initca=true kubernetes-ca-csr.json | cfssljson --bare kubernetes-ca</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for targetName in kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet-api-admin admin; do</span></span><br><span class="line">  cfssl gencert --ca kubernetes-ca.pem --ca-key kubernetes-ca-key.pem --config kubernetes-gencert.json --profile kubernetes <span class="variable">$targetName</span>-csr.json | cfssljson --bare <span class="variable">$targetName</span>; </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="3-4、分发证书"><a href="#3-4、分发证书" class="headerlink" title="3.4、分发证书"></a>3.4、分发证书</h4><p>将生成的证书和秘钥文件（后缀名为.pem）拷贝到所有机器；kubernetes系统的各个组建需要使用tls证书对通信进行加密。</p><h5 id="1）、生成的证书ca证书和秘钥文件如下："><a href="#1）、生成的证书ca证书和秘钥文件如下：" class="headerlink" title="1）、生成的证书ca证书和秘钥文件如下："></a>1）、生成的证书ca证书和秘钥文件如下：</h5><ul><li>admin-key.pem</li><li>admin.pem</li><li>kube-apiserver-key.pem</li><li>kube-apiserver.pem</li><li>kube-controller-manager-key.pem</li><li>kube-controller-manager.pem</li><li>kubelet-api-admin-key.pem</li><li>kubelet-api-admin.pem</li><li>kube-proxy-key.pem</li><li>kube-proxy.pem</li><li>kubernetes-ca-key.pem</li><li>kubernetes-ca.pem</li><li>kube-scheduler-key.pem</li><li>kube-scheduler.pem</li></ul><h5 id="3）、证书拷贝"><a href="#3）、证书拷贝" class="headerlink" title="3）、证书拷贝"></a>3）、证书拷贝</h5><ul><li><p><strong>master 节点拷贝</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /etc/kubernetes/ssl</span></span><br><span class="line"><span class="comment"># cp *.pem /etc/kubernetes/ssl/</span></span><br><span class="line"><span class="comment"># scp -r /etc/kubernetes k8s-master-02:/etc</span></span><br><span class="line"><span class="comment"># scp -r /etc/kubernetes k8s-master-03:/etc</span></span><br><span class="line"><span class="comment"># scp -r /etc/kubernetes node-01:/etc</span></span><br><span class="line"><span class="comment"># scp -r /etc/kubernetes node-02:/etc</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建目录</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir -p /var/log/kube-audit &amp;&amp; mkdir /var/lib/kubelet -p &amp;&amp; mkdir /usr/libexec -p</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4、创建kube-config文件"><a href="#4、创建kube-config文件" class="headerlink" title="4、创建kube config文件"></a>4、创建kube config文件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;kubelet、kube-proxy等Node机器上的经常与master机器的kube-apiserver进程通信时需要认证和授权；kubernetes 1.4 开始支持有kube-apiserver为客户端生成tls证书的 TLS Bootstrapping功能，这样就不需要为每个客户端生成证书了，该功能当前仅支持为kuelet生成证书；</p><h3 id="4-1、生成配置文件"><a href="#4-1、生成配置文件" class="headerlink" title="4.1、生成配置文件"></a>4.1、生成配置文件</h3><ul><li>bootstrap.kubeconfig kubelet TLS Bootstarp 引导阶段需要使用的配置文件</li><li>kube-controller-manager.kubeconfig controller manager 组件开启安全端口及 RBAC 认证所需配置</li><li>kube-scheduler.kubeconfig scheduler 组件开启安全端口及 RBAC 认证所需配置</li><li>kube-proxy.kubeconfig proxy 组件连接 apiserver 所需配置文件</li><li>audit-policy.yaml apiserver RBAC 审计日志配置文件</li><li>bootstrap.secret.yaml kubelet TLS Bootstarp 引导阶段使用 Bootstrap Token 方式引导，需要预先创建此 Token</li></ul><h3 id="4-2、创建kubelet-bootstrapping-kubeconfig文件"><a href="#4-2、创建kubelet-bootstrapping-kubeconfig文件" class="headerlink" title="4.2、创建kubelet bootstrapping kubeconfig文件"></a>4.2、创建kubelet bootstrapping kubeconfig文件</h3><p>在这之前我们需要下载kubernetes 相关的二进制包，把对应的工具和命令拷贝到/usr/bin目录下面;下载二进制包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://dl.k8s.io/v1.13.3/kubernetes-server-linux-amd64.tar.gz</span></span><br><span class="line"><span class="comment"># tar zxf kubernetes-server-linux-amd64.tar.gz &amp;&amp; cd kubernetes/server/bin</span></span><br></pre></td></tr></table></figure><ul><li>master节点拷贝</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv apiextensions-apiserver cloud-controller-manager hyperkube kube-apiserver kube-controller-manager kube-proxy kube-scheduler kubectl kubelet mounter kubeadm /usr/bin/ &amp;&amp; cd &amp;&amp;rm -rf kubernetes kubernetes-server-linux-amd64.tar.gz</span></span><br></pre></td></tr></table></figure><h4 id="4-2-1、生成文件bootstrapping"><a href="#4-2-1、生成文件bootstrapping" class="headerlink" title="4.2.1、生成文件bootstrapping"></a>4.2.1、生成文件bootstrapping</h4><ul><li>master-01<br>&nbsp;&nbsp;&nbsp;&nbsp;config 是一个通用配置文件要连接本地的 6443 加密端口；而这个变量将会覆盖 kubeconfig 中指定的master_vip地址172.21.16.45:6443 地址</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export KUBE_APISERVER="https://172.21.16.45:6443"</span></span><br></pre></td></tr></table></figure><ul><li>生成 Bootstrap Token<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BOOTSTRAP_TOKEN_ID=$(head -c 6 /dev/urandom | md5sum | head -c 6)</span></span><br><span class="line"><span class="comment"># BOOTSTRAP_TOKEN_SECRET=$(head -c 16 /dev/urandom | md5sum | head -c 16)</span></span><br><span class="line"><span class="comment"># BOOTSTRAP_TOKEN="$&#123;BOOTSTRAP_TOKEN_ID&#125;.$&#123;BOOTSTRAP_TOKEN_SECRET&#125;"</span></span><br><span class="line"><span class="comment"># echo "Bootstrap Tokne: $&#123;BOOTSTRAP_TOKEN&#125;"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-2-2、生成-kubelet-tls-bootstrap-配置"><a href="#4-2-2、生成-kubelet-tls-bootstrap-配置" class="headerlink" title="4.2.2、生成 kubelet tls bootstrap 配置"></a>4.2.2、生成 kubelet tls bootstrap 配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=kubernetes-ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-credentials "system:bootstrap:$&#123;BOOTSTRAP_TOKEN_ID&#125;" \</span></span><br><span class="line">  --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-context default \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=<span class="string">"system:bootstrap:<span class="variable">$&#123;BOOTSTRAP_TOKEN_ID&#125;</span>"</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3、生成-kube-controller-manager-配置文件"><a href="#4-2-3、生成-kube-controller-manager-配置文件" class="headerlink" title="4.2.3、生成 kube-controller-manager 配置文件"></a>4.2.3、生成 kube-controller-manager 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=kubernetes-ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-credentials "system:kube-controller-manager" \</span></span><br><span class="line">  --client-certificate=kube-controller-manager.pem \</span><br><span class="line">  --client-key=kube-controller-manager-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-context default \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-controller-manager \</span><br><span class="line">  --kubeconfig=kube-controller-manager.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig</span></span><br></pre></td></tr></table></figure><h4 id="4-2-4、生成-kube-scheduler-配置文件"><a href="#4-2-4、生成-kube-scheduler-配置文件" class="headerlink" title="4.2.4、生成 kube-scheduler 配置文件"></a>4.2.4、生成 kube-scheduler 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=kubernetes-ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-credentials "system:kube-scheduler" \</span></span><br><span class="line">  --client-certificate=kube-scheduler.pem \</span><br><span class="line">  --client-key=kube-scheduler-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-context default \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-scheduler \</span><br><span class="line">  --kubeconfig=kube-scheduler.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig</span></span><br></pre></td></tr></table></figure><h4 id="4-2-5、生成-kube-proxy-配置文件"><a href="#4-2-5、生成-kube-proxy-配置文件" class="headerlink" title="4.2.5、生成 kube-proxy 配置文件"></a>4.2.5、生成 kube-proxy 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl config set-cluster kubernetes \</span></span><br><span class="line">  --certificate-authority=kubernetes-ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-credentials "system:kube-proxy" \</span></span><br><span class="line">  --client-certificate=kube-proxy.pem \</span><br><span class="line">  --client-key=kube-proxy-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config set-context default \</span></span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-proxy \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span></span><br></pre></td></tr></table></figure><h4 id="4-2-6、生成-apiserver-RBAC-审计配置文件"><a href="#4-2-6、生成-apiserver-RBAC-审计配置文件" class="headerlink" title="4.2.6、生成 apiserver RBAC 审计配置文件"></a>4.2.6、生成 apiserver RBAC 审计配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;&gt; audit-policy.yaml &lt;&lt;EOF</span></span><br><span class="line"><span class="comment"># Log all requests at the Metadata level.</span></span><br><span class="line">apiVersion: audit.k8s.io/v1</span><br><span class="line">kind: Policy</span><br><span class="line">rules:</span><br><span class="line">- level: Metadata</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="4-2-7、生成-tls-bootstrap-token-secret-配置文件"><a href="#4-2-7、生成-tls-bootstrap-token-secret-配置文件" class="headerlink" title="4.2.7、生成 tls bootstrap token secret 配置文件"></a>4.2.7、生成 tls bootstrap token secret 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;&gt; bootstrap.secret.yaml &lt;&lt;EOF</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  <span class="comment"># Name MUST be of form "bootstrap-token-&lt;token id&gt;"</span></span><br><span class="line">  name: bootstrap-token-<span class="variable">$&#123;BOOTSTRAP_TOKEN_ID&#125;</span></span><br><span class="line">  namespace: kube-system</span><br><span class="line"><span class="comment"># Type MUST be 'bootstrap.kubernetes.io/token'</span></span><br><span class="line"><span class="built_in">type</span>: bootstrap.kubernetes.io/token</span><br><span class="line">stringData:</span><br><span class="line">  <span class="comment"># Human readable description. Optional.</span></span><br><span class="line">  description: <span class="string">"The default bootstrap token."</span></span><br><span class="line">  <span class="comment"># Token ID and secret. Required.</span></span><br><span class="line">  token-id: <span class="variable">$&#123;BOOTSTRAP_TOKEN_ID&#125;</span></span><br><span class="line">  token-secret: <span class="variable">$&#123;BOOTSTRAP_TOKEN_SECRET&#125;</span></span><br><span class="line">  <span class="comment"># Expiration. Optional.</span></span><br><span class="line">  expiration: $(date -d<span class="string">'+2 day'</span> -u +<span class="string">"%Y-%m-%dT%H:%M:%SZ"</span>)</span><br><span class="line">  <span class="comment"># Allowed usages.</span></span><br><span class="line">  usage-bootstrap-authentication: <span class="string">"true"</span></span><br><span class="line">  usage-bootstrap-signing: <span class="string">"true"</span></span><br><span class="line">  <span class="comment"># Extra groups to authenticate the token as. Must start with "system:bootstrappers:"</span></span><br><span class="line"><span class="comment">#  auth-extra-groups: system:bootstrappers:worker,system:bootstrappers:ingress</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="4-3、复制文件"><a href="#4-3、复制文件" class="headerlink" title="4.3、复制文件"></a>4.3、复制文件</h4><p>把刚生成的文件复制到<code>/etc/kubernetes</code>目录下面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master 节点</span></span><br><span class="line"><span class="comment"># cp audit-policy.yaml bootstrap.kubeconfig  bootstrap.secret.yaml kube-proxy.kubeconfig  kube-scheduler.kubeconfig /etc/kubernetes</span></span><br><span class="line"><span class="comment"># scp -r audit-policy.yaml bootstrap.kubeconfig  bootstrap.secret.yaml kube-proxy.kubeconfig  kube-scheduler.kubeconfig k8s-master-02:/etc/kubernetes</span></span><br><span class="line"><span class="comment"># scp -r audit-policy.yaml bootstrap.kubeconfig  bootstrap.secret.yaml kube-proxy.kubeconfig  kube-scheduler.kubeconfig k8s-master-03:/etc/kubernetes</span></span><br><span class="line"><span class="comment"># node 节点</span></span><br><span class="line"><span class="comment"># scp -r  bootstrap.kubeconfig kube-proxy.kubeconfig node-01:/etc/kubernetes</span></span><br><span class="line"><span class="comment"># scp -r  bootstrap.kubeconfig kube-proxy.kubeconfig node-02:/etc/kubernetes</span></span><br></pre></td></tr></table></figure><h4 id="4-4、处理-ipvs-及依赖"><a href="#4-4、处理-ipvs-及依赖" class="headerlink" title="4.4、处理 ipvs 及依赖"></a>4.4、处理 ipvs 及依赖</h4><p>&nbsp;&nbsp;&nbsp;&nbsp; 新版本目前 kube-proxy 组件全部采用 ipvs 方式负载，所以为了 kube-proxy 能正常工作需要预先处理一下 ipvs 配置以及相关依赖(每台 node 都要处理)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;&gt; /etc/sysctl.conf &lt;&lt;EOF</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># sysctl -p</span></span><br></pre></td></tr></table></figure><p>kubernetes 中启用 ipvs,详细介绍，<a href="https://github.com/kubernetes/kubernetes/tree/master/pkg/proxy/ipvs" target="_blank" rel="noopener">官方</a>,<a href="https://juejin.im/entry/5b7e409ce51d4538b35c03df" target="_blank" rel="noopener">参考文献</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install ipvsadm</span></span><br><span class="line"><span class="comment"># cat &gt;&gt; /etc/modules &lt;&lt;EOF</span></span><br><span class="line">ip_vs</span><br><span class="line">ip_vs_lc</span><br><span class="line">ip_vs_wlc</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_lblc</span><br><span class="line">ip_vs_lblcr</span><br><span class="line">ip_vs_dh</span><br><span class="line">ip_vs_sh</span><br><span class="line">ip_vs_fo</span><br><span class="line">ip_vs_nq</span><br><span class="line">ip_vs_sed</span><br><span class="line">ip_vs_ftp</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="5、配置和启动kube-apiserver"><a href="#5、配置和启动kube-apiserver" class="headerlink" title="5、配置和启动kube-apiserver"></a>5、配置和启动kube-apiserver</h2><h3 id="5-1、设置启动文件"><a href="#5-1、设置启动文件" class="headerlink" title="5.1、设置启动文件"></a>5.1、设置启动文件</h3><ul><li><strong>kube-apiserver.service</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-apiserver.service</span></span><br><span class="line">[Unit]</span><br><span class="line">  Description=Kubernetes API Service</span><br><span class="line">  Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">  After=network.target</span><br><span class="line">  After=etcd.service</span><br><span class="line">[Service]</span><br><span class="line">  EnvironmentFile=-/etc/kubernetes/apiserver</span><br><span class="line">  ExecStart=/usr/bin/kube-apiserver \</span><br><span class="line">          <span class="variable">$KUBE_LOGTOSTDERR</span> \</span><br><span class="line">          <span class="variable">$KUBE_LOG_LEVEL</span> \</span><br><span class="line">          <span class="variable">$KUBE_ETCD_SERVERS</span> \</span><br><span class="line">          <span class="variable">$KUBE_API_ADDRESS</span> \</span><br><span class="line">          <span class="variable">$KUBE_API_PORT</span> \</span><br><span class="line">          <span class="variable">$KUBELET_PORT</span> \</span><br><span class="line">          <span class="variable">$KUBE_ALLOW_PRIV</span> \</span><br><span class="line">          <span class="variable">$KUBE_SERVICE_ADDRESSES</span> \</span><br><span class="line">          <span class="variable">$KUBE_ADMISSION_CONTROL</span> \</span><br><span class="line">          <span class="variable">$KUBE_API_ARGS</span></span><br><span class="line">  Restart=on-failure</span><br><span class="line">  Type=notify</span><br><span class="line">  LimitNOFILE=65536</span><br><span class="line">[Install]</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-2、apiserver配置文件"><a href="#5-2、apiserver配置文件" class="headerlink" title="5.2、apiserver配置文件"></a>5.2、apiserver配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/apiserver</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes system config</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following values are used to configure the kube-apiserver</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The address on the local server to listen to.</span></span><br><span class="line">KUBE_API_ADDRESS=<span class="string">"--advertise-address=172.21.17.4 --bind-address=0.0.0.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The port on the local server to listen on.</span></span><br><span class="line">KUBE_API_PORT=<span class="string">"--secure-port=6443"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Port minions listen on</span></span><br><span class="line"><span class="comment"># KUBELET_PORT="--kubelet-port=10250"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Comma separated list of nodes in the etcd cluster</span></span><br><span class="line">KUBE_ETCD_SERVERS=<span class="string">"--etcd-servers=https://172.21.17.4:2379,https://172.21.16.230:2379,https://172.21.16.240:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Address range to use for services</span></span><br><span class="line">KUBE_SERVICE_ADDRESSES=<span class="string">"--service-cluster-ip-range=10.254.0.0/16"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default admission control policies</span></span><br><span class="line">KUBE_ADMISSION_CONTROL=<span class="string">"--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,Priority,ResourceQuota"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_API_ARGS=<span class="string">" --allow-privileged=true \</span></span><br><span class="line"><span class="string">                --anonymous-auth=false \</span></span><br><span class="line"><span class="string">                --alsologtostderr \</span></span><br><span class="line"><span class="string">                --apiserver-count=3 \</span></span><br><span class="line"><span class="string">                --audit-log-maxage=30 \</span></span><br><span class="line"><span class="string">                --audit-log-maxbackup=3 \</span></span><br><span class="line"><span class="string">                --audit-log-maxsize=100 \</span></span><br><span class="line"><span class="string">                --audit-log-path=/var/log/kube-audit/audit.log \</span></span><br><span class="line"><span class="string">                --audit-policy-file=/etc/kubernetes/audit-policy.yaml \</span></span><br><span class="line"><span class="string">                --authorization-mode=Node,RBAC \</span></span><br><span class="line"><span class="string">                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --enable-bootstrap-token-auth \</span></span><br><span class="line"><span class="string">                --enable-garbage-collector \</span></span><br><span class="line"><span class="string">                --enable-logs-handler \</span></span><br><span class="line"><span class="string">                --endpoint-reconciler-type=lease \</span></span><br><span class="line"><span class="string">                --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem \</span></span><br><span class="line"><span class="string">                --etcd-certfile=/etc/etcd/ssl/etcd.pem \</span></span><br><span class="line"><span class="string">                --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</span></span><br><span class="line"><span class="string">                --etcd-compaction-interval=0s \</span></span><br><span class="line"><span class="string">                --event-ttl=168h0m0s \</span></span><br><span class="line"><span class="string">                --kubelet-https=true \</span></span><br><span class="line"><span class="string">                --kubelet-certificate-authority=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --kubelet-client-certificate=/etc/kubernetes/ssl/kubelet-api-admin.pem \</span></span><br><span class="line"><span class="string">                --kubelet-client-key=/etc/kubernetes/ssl/kubelet-api-admin-key.pem \</span></span><br><span class="line"><span class="string">                --kubelet-timeout=3s \</span></span><br><span class="line"><span class="string">                --runtime-config=api/all=true \</span></span><br><span class="line"><span class="string">                --service-node-port-range=30000-50000 \</span></span><br><span class="line"><span class="string">                --service-account-key-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                --tls-cert-file=/etc/kubernetes/ssl/kube-apiserver.pem \</span></span><br><span class="line"><span class="string">                --tls-private-key-file=/etc/kubernetes/ssl/kube-apiserver-key.pem \</span></span><br><span class="line"><span class="string">                --v=2"</span></span><br></pre></td></tr></table></figure><ul><li><strong>–client-ca-file</strong>: 定义客户端 CA</li><li><strong>–endpoint-reconciler-type</strong>: master endpoint 策略</li><li><strong>–kubelet-client-certificate、–kubelet-client-key</strong>: master 反向连接 kubelet 使用的证书</li><li><strong>–service-account-key-file</strong>: service account 签名 key(用于有效性验证)</li><li><strong>–tls-cert-file、–tls-private-key-file</strong>: master apiserver 6443 端口证书<br>详细参数<a href="https://www.jianshu.com/p/36ad3028a710" target="_blank" rel="noopener">介绍</a></li></ul><h3 id="5-2-1、启动kube-apiserver"><a href="#5-2-1、启动kube-apiserver" class="headerlink" title="5.2.1、启动kube-apiserver"></a>5.2.1、启动kube-apiserver</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kube-apiserver &amp;&amp;systemctl start kube-apiserver &amp;&amp;systemctl status kube-apiserver</span></span><br></pre></td></tr></table></figure><h3 id="5-3、配置kube-controller-manager"><a href="#5-3、配置kube-controller-manager" class="headerlink" title="5.3、配置kube-controller-manager"></a>5.3、配置kube-controller-manager</h3><p>创建kube-controller-manager的service配置文件</p><h3 id="5-3-1、配置kube-controller-manager启动文件"><a href="#5-3-1、配置kube-controller-manager启动文件" class="headerlink" title="5.3.1、配置kube-controller-manager启动文件"></a>5.3.1、配置kube-controller-manager启动文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/lib/systemd/system/kube-controller-manager.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/controller-manager</span><br><span class="line">ExecStart=/usr/bin/kube-controller-manager \</span><br><span class="line">	    <span class="variable">$KUBE_LOGTOSTDERR</span> \</span><br><span class="line">	    <span class="variable">$KUBE_LOG_LEVEL</span> \</span><br><span class="line">	    <span class="variable">$KUBE_MASTER</span> \</span><br><span class="line">	    <span class="variable">$KUBE_CONTROLLER_MANAGER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="5-3-2、配置controller-manager文件"><a href="#5-3-2、配置controller-manager文件" class="headerlink" title="5.3.2、配置controller-manager文件"></a>5.3.2、配置controller-manager文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/controller-manager</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># The following values are used to configure the kubernetes controller-manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># defaults from config and apiserver should be adequate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_CONTROLLER_MANAGER_ARGS=<span class="string">"  --address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                                --authentication-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --authorization-kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --bind-address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                                --cluster-name=kubernetes \</span></span><br><span class="line"><span class="string">                                --cluster-signing-cert-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --cluster-signing-key-file=/etc/kubernetes/ssl/kubernetes-ca-key.pem \</span></span><br><span class="line"><span class="string">                                --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --controllers=*,bootstrapsigner,tokencleaner \</span></span><br><span class="line"><span class="string">                                --deployment-controller-sync-period=10s \</span></span><br><span class="line"><span class="string">                                --experimental-cluster-signing-duration=87600h0m0s \</span></span><br><span class="line"><span class="string">                                --enable-garbage-collector=true \</span></span><br><span class="line"><span class="string">                                --kubeconfig=/etc/kubernetes/kube-controller-manager.kubeconfig \</span></span><br><span class="line"><span class="string">                                --leader-elect=true \</span></span><br><span class="line"><span class="string">                                --node-monitor-grace-period=20s \</span></span><br><span class="line"><span class="string">                                --node-monitor-period=5s \</span></span><br><span class="line"><span class="string">                                --port=10252 \</span></span><br><span class="line"><span class="string">                                --pod-eviction-timeout=2m0s \</span></span><br><span class="line"><span class="string">                                --requestheader-client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --terminated-pod-gc-threshold=50 \</span></span><br><span class="line"><span class="string">                                --tls-cert-file=/etc/kubernetes/ssl/kube-controller-manager.pem \</span></span><br><span class="line"><span class="string">                                --tls-private-key-file=/etc/kubernetes/ssl/kube-controller-manager-key.pem \</span></span><br><span class="line"><span class="string">                                --root-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                                --secure-port=10257 \</span></span><br><span class="line"><span class="string">                                --service-cluster-ip-range=10.254.0.0/16 \</span></span><br><span class="line"><span class="string">                                --service-account-private-key-file=/etc/kubernetes/ssl/kubernetes-ca-key.pem \</span></span><br><span class="line"><span class="string">                                --use-service-account-credentials=true \</span></span><br><span class="line"><span class="string">                                --v=2"</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;controller manager 将不安全端口 10252 绑定到 127.0.0.1 确保 kuebctl get cs 有正确返回；将安全端口 10257 绑定到 0.0.0.0 公开，提供服务调用；由于 controller manager 开始连接 apiserver 的 6443 认证端口，所以需要 –use-service-account-credentials 选项来让 controller manager 创建单独的 service account(默认 system:kube-controller-manager 用户没有那么高权限)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get componentstatuses</span></span><br><span class="line">NAME                 STATUS      MESSAGE                                                                                     ERROR</span><br><span class="line">controller-manager   Unhealthy   Get http://127.0.0.1:10252/healthz: dial tcp 127.0.0.1:10252: connect: connection refused   </span><br><span class="line">scheduler            Unhealthy   Get http://127.0.0.1:10251/healthz: dial tcp 127.0.0.1:10251: connect: connection refused   </span><br><span class="line">etcd-0               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;                                                                           </span><br><span class="line">etcd-1               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;                                                                           </span><br><span class="line">etcd-2               Healthy     &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-3、启动kube-controller-manager"><a href="#5-3-3、启动kube-controller-manager" class="headerlink" title="5.3.3、启动kube-controller-manager"></a>5.3.3、启动kube-controller-manager</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># systemctl enable kube-controller-manager &amp;&amp;systemctl start kube-controller-manager &amp;&amp;systemctl status kube-controller-manager</span></span><br></pre></td></tr></table></figure><h3 id="5-4、配置kube-scheduler"><a href="#5-4、配置kube-scheduler" class="headerlink" title="5.4、配置kube-scheduler"></a>5.4、配置kube-scheduler</h3><p>创建kube-scheduler的service配置文件</p><h4 id="5-4-1、创建kube-scheduler启动文件"><a href="#5-4-1、创建kube-scheduler启动文件" class="headerlink" title="5.4.1、创建kube-scheduler启动文件"></a>5.4.1、创建kube-scheduler启动文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /lib/systemd/system/kube-scheduler.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler Plugin</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/scheduler</span><br><span class="line">ExecStart=/usr/bin/kube-scheduler \</span><br><span class="line">	    <span class="variable">$KUBE_LOGTOSTDERR</span> \</span><br><span class="line">	    <span class="variable">$KUBE_LOG_LEVEL</span> \</span><br><span class="line">	    <span class="variable">$KUBE_MASTER</span> \</span><br><span class="line">	    <span class="variable">$KUBE_SCHEDULER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="5-4-2、创建scheduler配置文件"><a href="#5-4-2、创建scheduler配置文件" class="headerlink" title="5.4.2、创建scheduler配置文件"></a>5.4.2、创建scheduler配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/kubernetes/scheduler </span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes scheduler config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default config should be adequate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_SCHEDULER_ARGS=<span class="string">"   --address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                        --authentication-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span></span><br><span class="line"><span class="string">                        --authorization-kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span></span><br><span class="line"><span class="string">                        --bind-address=0.0.0.0 \</span></span><br><span class="line"><span class="string">                        --client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                        --kubeconfig=/etc/kubernetes/kube-scheduler.kubeconfig \</span></span><br><span class="line"><span class="string">                        --requestheader-client-ca-file=/etc/kubernetes/ssl/kubernetes-ca.pem \</span></span><br><span class="line"><span class="string">                        --secure-port=10259 \</span></span><br><span class="line"><span class="string">                        --leader-elect=true \</span></span><br><span class="line"><span class="string">                        --port=10251 \</span></span><br><span class="line"><span class="string">                        --tls-cert-file=/etc/kubernetes/ssl/kube-scheduler.pem \</span></span><br><span class="line"><span class="string">                        --tls-private-key-file=/etc/kubernetes/ssl/kube-scheduler-key.pem \</span></span><br><span class="line"><span class="string">                        --v=2"</span></span><br></pre></td></tr></table></figure><p>shceduler 同 controller manager 一样将不安全端口绑定在本地，安全端口对外公开</p><h4 id="5-4-3、启动kube-scheduler"><a href="#5-4-3、启动kube-scheduler" class="headerlink" title="5.4.3、启动kube-scheduler"></a>5.4.3、启动kube-scheduler</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl enable kube-scheduler &amp;&amp;systemctl start kube-scheduler &amp;&amp;systemctl status kube-scheduler</span></span><br></pre></td></tr></table></figure><h3 id="5-4、验证master节点"><a href="#5-4、验证master节点" class="headerlink" title="5.4、验证master节点"></a>5.4、验证master节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get componentstatuses</span></span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">scheduler            Healthy   ok                  </span><br><span class="line">controller-manager   Healthy   ok                  </span><br><span class="line">etcd-2               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;   </span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;   </span><br><span class="line">etcd-1               Healthy   &#123;<span class="string">"health"</span>:<span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><p>至此master节点部署完毕</p><p>kubernetes高可用使用haproxy进行代理,<a href="https://xxlaila.github.io/2019/08/10/haproxy-keepalived/" target="_blank" rel="noopener">haproxy</a>代理安装</p><p><a href="https://xxlaila.github.io/2019/08/10/kubernetes-node%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">node节点安装</a></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes v1.13.3</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftpd安装</title>
    <url>/2019/08/09/vsftpd%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;Centos下ftp的安装一般采用的是vsftpd，但是在ftp的模式中又有几个用户配置项需要注意，有些人喜欢用本地用户去登陆FTP，虽然在建立本地用户的时候加了/sbin/nologin参数，但是这个还是不够安全，而且这样权限控制也不是很好，他们都是统一的控制权限，这里采用虚拟用户前来配置。虚拟用户配合防火墙selinux还有单个用户的权限，这使得FTP有着足够的安全。而且权限控制特别灵活，修改一个用户的权限不会影响到其他用户。<br>centos 系统版本(5.5、5.3、6.0、6.5)<br>centos 7.4 已经验证</p><h3 id="首先我们安装vsftpd"><a href="#首先我们安装vsftpd" class="headerlink" title="首先我们安装vsftpd"></a>首先我们安装vsftpd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># yum –y install vsftpd</span></span><br></pre></td></tr></table></figure><h3 id="2、启动和加载vsftp"><a href="#2、启动和加载vsftp" class="headerlink" title="2、启动和加载vsftp"></a>2、启动和加载vsftp</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># service vsftpd restart</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># chkconfig –level 35 vsftpd on</span></span><br></pre></td></tr></table></figure><h3 id="3、开始配置vsftpd"><a href="#3、开始配置vsftpd" class="headerlink" title="3、开始配置vsftpd"></a>3、开始配置vsftpd</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Vsftpd的配置文件在/etc/vsftpd下面，在配置之前我们先cp一份做备份用以免发生意外(做什么都要随手备份，因为没有一万，只有万一。)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment">#  cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># vim /etc/vsftpd/vsftpd.conf</span></span><br></pre></td></tr></table></figure><ul><li><strong>vsftpd的参数介绍</strong></li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reverse_lookup_enable=NO <span class="comment">#添加此行，解决客户端登陆缓慢问题！重要！默认vsftpd开启了DNS反响解析！这里需要关闭，如果启动有错误，请注销！</span></span><br><span class="line">listen_port=21 <span class="comment">#默认无此行，ftp端口为21，添加listen_port=2222把默认端口修改为2222，注意：防火墙同时要开启2222端口</span></span><br><span class="line">anonymous_enable=NO　　 <span class="comment">#禁止匿名用户</span></span><br><span class="line">local_enable=YES</span><br><span class="line">设定本地用户可以访问。注意：主要是为虚拟宿主用户，如果该项目设定为NO那么所有虚拟用户将无法访问</span><br><span class="line">write_enable=YES <span class="comment">#全局设置，是否容许写入（无论是匿名用户还是本地用户，若要启用上传权限的话，就要开启他）</span></span><br><span class="line">local_umask=022 设定上传后文件的权限掩码。</span><br><span class="line">anon_upload_enable=NO 禁止匿名用户上传。</span><br><span class="line">anon_mkdir_write_enable=NO 禁止匿名用户建立目录。</span><br><span class="line">dirmessage_enable=YES 设定开启目录标语功能。</span><br><span class="line">xferlog_enable=YES 设定开启日志记录功能。</span><br><span class="line">connect_from_port_20=YES 设定端口20进行数据连接。</span><br><span class="line">chown_uploads=NO 设定禁止上传文件更改宿主。</span><br><span class="line">xferlog_file=/var/<span class="built_in">log</span>/vsftpd.log 日志保存路径（先创建好文件）</span><br><span class="line">xferlog_std_format=YES　　 <span class="comment">#使用标准格式</span></span><br><span class="line">async_abor_enable=YES 设定支持异步传输功能。</span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES 设定支持ASCII模式的上传和下载功能。</span><br><span class="line">ftpd_banner=Welcome to Awei FTP servers 设定Vsftpd的登陆标语。</span><br><span class="line">chroot_local_user=YES 禁止本地用户登出自己的FTP主目录。</span><br><span class="line">pam_service_name=vsftpd 设定PAM服务下Vsftpd的验证配置文件名。因此，PAM验证将参考/etc/pam.d/下的vsftpd文件配置。</span><br><span class="line">userlist_enable=YES 设为YES的时候，如果一个用户名是在userlist_file参数指定的文件中，</span><br><span class="line"> 那么在要求他们输入密码之前，会直接拒绝他们登陆。</span><br><span class="line">tcp_wrappers=YES 是否支持tcp_wrappers</span><br></pre></td></tr></table></figure><ul><li><strong>以下是我使用的参数,使用的是被动模式</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anonymous_enable=No</span><br><span class="line">listen_port=21</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line"><span class="comment">#chown_uploads=YES</span></span><br><span class="line">xferlog_file=/var/<span class="built_in">log</span>/vsftpd.log</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">async_abor_enable=YES</span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES</span><br><span class="line">ftpd_banner=Welcome to blah FTP service.</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">listen=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line">reverse_lookup_enable=No</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=vsftpd</span><br><span class="line">user_config_dir=/etc/vsftpd/vconf</span><br><span class="line">virtual_use_local_privs=YES</span><br><span class="line">pasv_min_port=9000</span><br><span class="line">pasv_max_port=9045</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_enable=NO</span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line"><span class="comment">#port_enable=YES</span></span><br><span class="line"><span class="comment">#connect_from_port_20=YES</span></span><br><span class="line">pasv_enable=yes</span><br></pre></td></tr></table></figure></li></ul><ul><li>备注: 这里vsftp采用的被动模式，被动模式开放了一个端口段，公司路由器上需要开放这一个端口端，<a href="https://xxlaila.github.io/2019/09/10/路由器端口映射/" target="_blank" rel="noopener">路由器端口映射</a></li></ul><h3 id="4、建立虚拟用户名单文件"><a href="#4、建立虚拟用户名单文件" class="headerlink" title="4、建立虚拟用户名单文件"></a>4、建立虚拟用户名单文件</h3><p>编辑虚拟用户的名单：（第一行用户名。第二行密码。不能使用root）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># vim /etc/vsftpd/xuniusers</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">23123213</span><br><span class="line">test1</span><br><span class="line">34dsfds</span><br><span class="line">test2</span><br><span class="line">df43sd</span><br></pre></td></tr></table></figure><h3 id="5、开始建立生成虚拟用户数据文件"><a href="#5、开始建立生成虚拟用户数据文件" class="headerlink" title="5、开始建立生成虚拟用户数据文件"></a>5、开始建立生成虚拟用户数据文件</h3><p>这里需要安装db4,设置PAM文件权限，并制定虚拟用户数据库文件读取</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># yum –y install db4-utils</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># db_load -T -t hash -f /etc/vsftpd/xuniusers /etc/vsftpd/xuniusers.db</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># chmod 600 /etc/vsftpd/xuniusers.db</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;在/etc/pam.d/vsftpd的文件头部加入以下信息（<strong>注</strong>: 这里一定要在前面，不能再后面，刚开始我也加载到后面登陆的时候提示错误）,修改前先备份</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># cp /etc/pam.d/vsftpd /etc/pam.d/vsftpd.bak</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># vi /etc/pam.d/vsftpd</span></span><br><span class="line">auth sufficient /lib/security/pam_userdb.so db=/etc/vsftpd/xuniusers</span><br><span class="line">account sufficient /lib/security/pam_userdb.so db=/etc/vsftpd/xuniusers</span><br></pre></td></tr></table></figure><p><img src="https://img.xxlaila.cn/%E5%9B%BE%E7%89%87%201.png" alt="img"></p><ul><li><strong>注</strong>: 64位的操作系统，则上面lib改为64。不然配置也会无效</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auth sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/xuniusers</span><br><span class="line">account sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/xuniusers</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;建立一个系统用户vsftpd，用户的主目录可以自己设置，/home/wwwroot，设置用户登陆的终端为/bin/false</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># useradd vsftpd -d /home/wwwroot -s /bin/false</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># chown vsftpd:vsftpd /home/wwwroot -R</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># chown www:www /home/wwwroot –R #如果虚拟用户的宿主用户为nginx，需要这样设置。</span></span><br></pre></td></tr></table></figure><h3 id="6、建立虚拟用户个人vsftp的配置文件"><a href="#6、建立虚拟用户个人vsftp的配置文件" class="headerlink" title="6、建立虚拟用户个人vsftp的配置文件"></a>6、建立虚拟用户个人vsftp的配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># mkdir /etc/vsftpd/vconf</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># cd /etc/vsftpd/vconf</span></span><br><span class="line">touch test1 test2 test3 <span class="comment">#这里创建三个虚拟用户配置文件</span></span><br><span class="line">vi web1 <span class="comment">#编辑用户test1配置文件，其他的跟这个配置文件类似</span></span><br><span class="line">[root@RAID1 ~]<span class="comment"># vim test1</span></span><br><span class="line">local_root=/home/wwwroot/test1/</span><br><span class="line">write_enable=YES</span><br><span class="line">anon_umask=022</span><br><span class="line">anon_world_readable_only=NO</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># chmod u-w /home/wwwroot</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;最后重启vsftpd服务,不关闭Selinux可以执行以下命令通过FTP。防火墙开放端口<code>setsebool -P ftpd_disable_trans 1</code><br>&nbsp;&nbsp;&nbsp;&nbsp;上述配置完成后还可以通过#adduser -d /目录路径 -g vsftpd -s /sbin/nologin 用户名 这个命令来添加一个用户，不需要配置任何权限都可以进行FTP的访问,最后补充说明，需要安装的其他插件</p><ul><li><p>需要安装的的是pan</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># yum install -y pam</span></span><br></pre></td></tr></table></figure></li><li><p>这里我们还可以查看日志，可以根据提示的提示来判断。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@RAID1 ~]<span class="comment"># cat /var/log/secure</span></span><br></pre></td></tr></table></figure></li></ul><p>测试用户登录虚拟用户只能看到自己本身的目录 ，不能去其他目录查看(到这里vsftpd配置结束)</p><p><strong>注</strong>: 如果这里配置的被动模式，且用的是<a href="http://localhost:4000/2019/09/25/iptables/" target="_blank" rel="noopener">iptables</a>来进行对外代理提供访问，那么需要在vsftpd.conf 的配置文件里面增加一行配置: <code>pasv_promiscuous=YES</code>。否则用户在连接的时候会提示 <code>425 Security: Bad IP connecting.</code>。</p><h3 id="7-pasv-promiscuous选项参数说明"><a href="#7-pasv-promiscuous选项参数说明" class="headerlink" title="7. pasv_promiscuous选项参数说明"></a>7. pasv_promiscuous选项参数说明</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此选项激活时，将关闭PASV模式的安全检查。该检查确保数据连接和控制连接是来自同一个IP地址。小心打开此选项。此选项唯一合理的用法是存在于由安全隧道方案构成的组织中。默认值为NO。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合理的用法是：在一些安全隧道配置环境下，或者更好地支持FXP时(才启用它)</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>vsftpd</tag>
      </tags>
  </entry>
  <entry>
    <title>TeamViewer mac破解</title>
    <url>/2019/08/09/TeamViewer-mac%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h2 id="TeamViewer14-4-MAC破解"><a href="#TeamViewer14-4-MAC破解" class="headerlink" title="TeamViewer14.4 MAC破解"></a>TeamViewer14.4 MAC破解</h2><h3 id="在终端执行以下命令"><a href="#在终端执行以下命令" class="headerlink" title="在终端执行以下命令"></a>在终端执行以下命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python TeamViewer-id-changer.py</span><br><span class="line">使用mac自带python2.7 执行即可</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim TeamViewer-id-changer.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/8/1 14:57</span></span><br><span class="line"><span class="comment"># @Author  : xxlaila</span></span><br><span class="line"><span class="comment"># @Site    : </span></span><br><span class="line"><span class="comment"># @File    : TeamViewer-id-changer.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import platform</span><br><span class="line">import random</span><br><span class="line">import re</span><br><span class="line">import string</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">--------------------------------</span></span><br><span class="line"><span class="string">TeamViewer 14 ID Changer for MAC OS</span></span><br><span class="line"><span class="string">Version: 0.2 2019</span></span><br><span class="line"><span class="string">--------------------------------</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> platform.system() != <span class="string">"Darwin"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This script can be run only on MAC OS."</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.geteuid() != 0:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This script must be run form root."</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"SUDO_USER"</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    USERNAME = os.environ[<span class="string">"SUDO_USER"</span>]</span><br><span class="line">    <span class="keyword">if</span> USERNAME == <span class="string">"root"</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Can not find user name. Run this script via sudo from regular user"</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Can not find user name. Run this script via sudo from regular user"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">HOMEDIRLIB = <span class="string">"/Users/"</span> + USERNAME + <span class="string">"/library/preferences/"</span></span><br><span class="line">GLOBALLIB = <span class="string">"/library/preferences/"</span></span><br><span class="line"></span><br><span class="line">CONFIGS = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Find config files</span></span><br><span class="line"></span><br><span class="line">def listdir_fullpath(d):</span><br><span class="line">    <span class="built_in">return</span> [os.path.join(d, f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(d)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> listdir_fullpath(HOMEDIRLIB):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'teamviewer'</span> <span class="keyword">in</span> file.lower():</span><br><span class="line">        CONFIGS.append(file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> listdir_fullpath(GLOBALLIB):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'teamviewer'</span> <span class="keyword">in</span> file.lower():</span><br><span class="line">        CONFIGS.append(file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not CONFIGS:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">            There is no TemViewer configs found.</span></span><br><span class="line"><span class="string">            Maybe you have deleted it manualy or never run TeamViewer after installation.</span></span><br><span class="line"><span class="string">            Nothing to delete.</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># Delete config files</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Configs found:\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> CONFIGS:</span><br><span class="line">        <span class="built_in">print</span>(file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        This files will be DELETED permanently.</span></span><br><span class="line"><span class="string">        All TeamViewer settings will be lost</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span>)</span><br><span class="line">        raw_input(<span class="string">"Press Enter to continue or CTR+C to abort..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> CONFIGS:</span><br><span class="line">        try:</span><br><span class="line">            os.remove(file)</span><br><span class="line">        except:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Cannot delete config files. Permission denied?"</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Done."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find binaryes</span></span><br><span class="line"></span><br><span class="line">TMBINARYES = [</span><br><span class="line">    <span class="string">'/Applications/TeamViewer.app/Contents/MacOS/TeamViewer'</span>,</span><br><span class="line">    <span class="string">'/Applications/TeamViewer.app/Contents/MacOS/TeamViewer_Service'</span>,</span><br><span class="line">    <span class="string">'/Applications/TeamViewer.app/Contents/Helpers/TeamViewer_Desktop'</span>,</span><br><span class="line">    <span class="string">'/Applications/TeamViewer.app/Contents/Helpers/TeamViewer_Assignment'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> TMBINARYES:</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file):</span><br><span class="line">        pass</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"File not found: "</span> + file)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">"Install TeamViewer correctly"</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Patch files</span></span><br><span class="line"></span><br><span class="line">def idpatch(fpath, platf, serial):</span><br><span class="line">    file = open(fpath, <span class="string">'r+b'</span>)</span><br><span class="line">    binary = file.read()</span><br><span class="line">    PlatformPattern = <span class="string">"IOPlatformExpert.&#123;6&#125;"</span></span><br><span class="line">    SerialPattern = <span class="string">"IOPlatformSerialNumber%s%s%s"</span></span><br><span class="line"></span><br><span class="line">    binary = re.sub(PlatformPattern, platf, binary)</span><br><span class="line">    binary = re.sub(SerialPattern % (chr(0), <span class="string">"[0-9a-zA-Z]&#123;8,8&#125;"</span>, chr(0)), SerialPattern % (chr(0), serial, chr(0)), binary)</span><br><span class="line"></span><br><span class="line">    file = open(fpath, <span class="string">'wb'</span>).write(binary)</span><br><span class="line">    <span class="built_in">return</span> True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def random_generator(size=8, chars=string.ascii_uppercase + string.ascii_lowercase + string.digits):</span><br><span class="line">    <span class="built_in">return</span> <span class="string">''</span>.join(random.choice(chars) <span class="keyword">for</span> _ <span class="keyword">in</span> range(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RANDOMSERIAL = random_generator(8)</span><br><span class="line">RANDOMPLATFORM = <span class="string">"IOPlatformExpert"</span> + random_generator(6)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> TMBINARYES:</span><br><span class="line">    try:</span><br><span class="line">        idpatch(file, RANDOMPLATFORM, RANDOMSERIAL)</span><br><span class="line">    except:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Error: can not patch file "</span> + file)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"PlatformDevice: "</span> + RANDOMPLATFORM)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"PlatformSerial: "</span> + RANDOMSERIAL)</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">"sudo codesign -f -s - /Applications/TeamViewer.app/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">ID changed sucessfully.</span></span><br><span class="line"><span class="string">!!! Restart computer before using TeamViewer !!!!</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span>)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>TeamViewer</category>
      </categories>
      <tags>
        <tag>TeamViewer</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins job管理</title>
    <url>/2019/08/09/jenkins-job%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul><li><strong>介绍</strong>: 由于公司的ci用于编译的环境比较多，为了更好的区分，为每一个环境建立了一个view</li><li><strong>痛点</strong>: 运维人员在建立job的时候需要到对应的view下面建立，虽然这不是狠痛苦，但是还是不太方便。</li><li><strong>解决</strong>: 人员登陆默认是在all view下面，每个运维人员在这下面建立job，然后每个view根据自己的规则吧对应的job添加进来。job规则自己提前定义好</li></ul><h2 id="1、安装jenkins插件"><a href="#1、安装jenkins插件" class="headerlink" title="1、安装jenkins插件"></a>1、安装jenkins插件</h2><p>view job 过滤插件view-job-filters，安装过程不累赘</p><h2 id="2、配置view规则"><a href="#2、配置view规则" class="headerlink" title="2、配置view规则"></a>2、配置view规则</h2><p>这里设置两个前端和一个后端实例</p><a id="more"></a><h3 id="2-1、前端1"><a href="#2-1、前端1" class="headerlink" title="2.1、前端1"></a>2.1、前端1</h3><p><img src="https://img.xxlaila.cn/image2018-5-29_10-47-20.png" alt="img"></p><h3 id="2-2、前端test"><a href="#2-2、前端test" class="headerlink" title="2.2、前端test"></a>2.2、前端test</h3><p>test 我们用安装的这个插件来进行配置,点击Add Job Filter——&gt;会有很多的规则，可以根据不同的状态、栏目来进行却分，这里我们选择</p><p><img src="https://img.xxlaila.cn/image2018-5-29_10-49-46.png" alt="img"><br><img src="https://img.xxlaila.cn/image2018-5-29_10-52-49.png" alt="img"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;这里添加了两条规则，这个是建立job的时候有点特殊性，用第一种方式实现就会有问题，第一条规则是现实所有test类的job，但是吧下面的一条给加进来了，不现实这类job。保持即可</p><h2 id="后端java程序"><a href="#后端java程序" class="headerlink" title="后端java程序"></a>后端java程序</h2><p>dev环境为例子</p><p><img src="https://img.xxlaila.cn/image2018-5-29_10-54-54.png" alt="img"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins job</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins用户权限配置</title>
    <url>/2019/08/09/jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><h3 id="1、jenkins用户权限"><a href="#1、jenkins用户权限" class="headerlink" title="1、jenkins用户权限"></a>1、jenkins用户权限</h3><ul><li>可以集成gitlab、jenkins专有账户、LDAP、Servlet容器代理、Unix用户/组数据库</li></ul><h3 id="2、授权策略"><a href="#2、授权策略" class="headerlink" title="2、授权策略"></a>2、授权策略</h3><ul><li>Gitlab Commiter Authorization Strategy</li><li>Role-Based Strategy</li><li>任何用户可以做任何事(没有任何限制)</li><li>安全矩阵</li><li>登录用户可以做任何事</li><li>遗留模式</li><li>项目矩阵授权策略</li></ul><h3 id="3、插件安装"><a href="#3、插件安装" class="headerlink" title="3、插件安装"></a>3、插件安装</h3><p>安装插件：Role-based Authorization Strategy</p><a id="more"></a><h3 id="4、jenkins设置"><a href="#4、jenkins设置" class="headerlink" title="4、jenkins设置"></a>4、jenkins设置</h3><p>系统管理——&gt;全局安全配置——&gt;<br><img src="https://img.xxlaila.cn/image2018-5-11_14-26-37.png" alt="img"></p><p>回到系统管理界面，就可以看到多出来一个插件: Mangge and Assing Roles</p><h3 id="5、权限设置"><a href="#5、权限设置" class="headerlink" title="5、权限设置"></a>5、权限设置</h3><p>进入Manager and Assign Roles——&gt;Manage Roles,这里建立了四个权限，分别来对应不同的人员<br><img src="https://img.xxlaila.cn/image2018-5-24_11-35-15.png" alt="img"></p><ul><li>创建项目角色:</li></ul><p><img src="https://img.xxlaila.cn/image2018-5-24_11-35-27.png" alt="img"></p><p>回到Manage and Assign Roles界面</p><h3 id="6、配置角色"><a href="#6、配置角色" class="headerlink" title="6、配置角色"></a>6、配置角色</h3><p>选择Assign Roles,用户新建以后，根据用户不同类型的勾选不同的权限,</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb副本集</title>
    <url>/2019/08/09/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86/</url>
    <content><![CDATA[<!-- build time:Wed Dec 11 2019 13:50:42 GMT+0800 (China Standard Time) --><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mongodb replica set安装加认证，这里使用的是keyFile进行认证，之前看过很多文章，坑一大堆，这里是看了两天的官方文档进行的安装，并用户生产，配置文件参数贴一部分,三个带有数据集的节点组成的复制集拥有，架构图如下，参考官方</p><p><img src="https://img.xxlaila.cn/image2018-8-13_15-27-53.png" alt="img"><br>一个主节点，两个从节点，这两个从节点都可以在选举中升级为主节点</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>三台服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">primary: 192.168.32.7</span><br><span class="line">secaodray: 192.168.32.11</span><br><span class="line">secondary: 192.168.32.14</span><br></pre></td></tr></table></figure><h2 id="1、安装mongodb"><a href="#1、安装mongodb" class="headerlink" title="1、安装mongodb"></a>1、安装mongodb</h2><h3 id="1-1、每个节点都需要操作"><a href="#1-1、每个节点都需要操作" class="headerlink" title="1.1、每个节点都需要操作"></a>1.1、每个节点都需要操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo vim /etc/yum.repos.d/mongodb-enterprise.repo</span></span><br><span class="line">[mongodb-enterprise]</span><br><span class="line">name=MongoDB Enterprise Repository</span><br><span class="line">baseurl=https://repo.mongodb.com/yum/redhat/<span class="variable">$releasever</span>/mongodb-enterprise/3.4/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc   </span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo yum install -y mongodb-enterprise</span></span><br></pre></td></tr></table></figure><p>注意：如果采用源码包方式安装需要安装一下插件</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo yum install cyrus-sasl cyrus-sasl-plain cyrus-sasl-gssapi krb5-libs lm_sensors-libs net-snmp-agent-libs net-snmp openssl rpm-libs tcp_wrappers-libs libcurl</span></span><br></pre></td></tr></table></figure><h2 id="2、修改mongodb的配置文件-每个节点均操作"><a href="#2、修改mongodb的配置文件-每个节点均操作" class="headerlink" title="2、修改mongodb的配置文件(每个节点均操作)"></a>2、修改mongodb的配置文件(每个节点均操作)</h2><h3 id="自定义mongodb的目录"><a href="#自定义mongodb的目录" class="headerlink" title="自定义mongodb的目录"></a>自定义mongodb的目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir /opt/mongodb/&#123;data,conf,logs&#125; -p</span></span><br><span class="line"><span class="comment"># sudo vim /etc/mongod.conf</span></span><br><span class="line"> systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line">  path: /opt/mongodb/logs/mongod.log</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /opt/mongodb/data</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /opt/mongodb/logs/mongod.pid</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0</span><br></pre></td></tr></table></figure><h3 id="3、生成密钥文件-在mong01上操作"><a href="#3、生成密钥文件-在mong01上操作" class="headerlink" title="3、生成密钥文件(在mong01上操作)"></a>3、生成密钥文件(在mong01上操作)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># openssl rand -base64 756 &gt; ／opt/mongodb/conf/mongo-keyfile</span></span><br><span class="line"><span class="comment"># sudo chmod 400 /opt/mongo/mongo-keyfile</span></span><br><span class="line"><span class="comment"># scp –r mongo-keyfile user@192.168.32.11:/opt/mongodb/conf</span></span><br><span class="line"><span class="comment"># scp –r mongo-keyfile user@192.168.32.14:/opt/mongodb/conf</span></span><br></pre></td></tr></table></figure><h3 id="4、修改mongodb的配置"><a href="#4、修改mongodb的配置" class="headerlink" title="4、修改mongodb的配置"></a>4、修改mongodb的配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">security:</span><br><span class="line">  keyFile: /opt/mongodb/conf/mongo-keyfile</span><br><span class="line">replication:</span><br><span class="line">  replSetName: xxlaila01（可变化，自定义）</span><br></pre></td></tr></table></figure><p>分别在三台服务器上启动mongodb</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mongod --config /etc/mongod.conf</span></span><br></pre></td></tr></table></figure><h3 id="5、建立集群"><a href="#5、建立集群" class="headerlink" title="5、建立集群"></a>5、建立集群</h3><p>在你需要认为是主节点的服务器进行mongodb的登陆，和账户权限的建立，这里我选择的192.168.32.7</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo --shell --host 127.0.0.1</span><br></pre></td></tr></table></figure><p>登陆进去以后可以进行一个简单的命令进行查看</p><p><img src="https://img.xxlaila.cn/image2018-8-13_15-37-2.png" alt="img"></p><h3 id="6、把服务器加入副本集"><a href="#6、把服务器加入副本集" class="headerlink" title="6、把服务器加入副本集"></a>6、把服务器加入副本集</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MongoDB Enterprise &gt; config = &#123; _id:<span class="string">"kxlprod01"</span>,members:[ &#123;_id:0,host:<span class="string">"192.168.32.7:27017"</span>&#125;,</span><br><span class="line">...   &#123;_id:1,host:<span class="string">"192.168.32.11:27017"</span>&#125; ,&#123;_id:2,host:<span class="string">"192.168.32.14:27017"</span>&#125;] &#125;</span><br></pre></td></tr></table></figure><p>config = { _id:”kxlprod01”,members:[ {_id:0,host:”192.168.32.7:27017”},{_id:1,host:”192.168.32.11:27017”} ,{_id:2,host:”192.168.32.14:27017”}] }，增加内容</p><h4 id="6-1-看当前副本集的状态"><a href="#6-1-看当前副本集的状态" class="headerlink" title="6.1 看当前副本集的状态"></a>6.1 看当前副本集的状态</h4><p>利用rs.status()命令可以查看当前副本集的状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; rs.status()</span><br></pre></td></tr></table></figure><p>这里提示配置还没有加载到mongodb副本里面</p><h4 id="6-2、加载配置到副本集"><a href="#6-2、加载配置到副本集" class="headerlink" title="6.2、加载配置到副本集"></a>6.2、加载配置到副本集</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; rs.initiate(config)</span><br></pre></td></tr></table></figure><p>再次查看副本的状态就可以看到mongodb的副本集已建立，如果此时主节点未被选举出来，稍微等一会就成功</p><h3 id="7、创建mongodb副本集认证"><a href="#7、创建mongodb副本集认证" class="headerlink" title="7、创建mongodb副本集认证"></a>7、创建mongodb副本集认证</h3><p>下面两行我们可以看到第一次主节点没有选举成功，随即我们在回车PRIMARY节点选举成功了，下面我们创建一个管理员账户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MongoDB Enterprise xxlaila01:SECONDARY&gt; admin = db.getSiblingDB(<span class="string">"admin"</span>)</span><br><span class="line">MongoDB Enterprise xxlaila01:PRIMARY&gt;</span><br><span class="line">admin.createUser(</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">    user: <span class="string">"root"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">"123456"</span>,</span><br><span class="line"></span><br><span class="line">    roles: [ &#123; role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span> &#125; ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">db.getSiblingDB(<span class="string">"admin"</span>).auth(<span class="string">"root"</span>, <span class="string">"123456"</span> )</span><br></pre></td></tr></table></figure><h4 id="7-1、创建集群账户"><a href="#7-1、创建集群账户" class="headerlink" title="7.1、创建集群账户"></a>7.1、创建集群账户</h4><p>创建一个集群管理账户，集群账户具有管理整个副本集的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongo -u <span class="string">"root"</span> -p <span class="string">"123456"</span> --authenticationDatabase <span class="string">"admin"</span></span><br><span class="line"></span><br><span class="line">db.getSiblingDB(<span class="string">"admin"</span>).createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"user"</span> : <span class="string">"manger"</span>,</span><br><span class="line">    <span class="string">"pwd"</span> : <span class="string">"123456"</span>,</span><br><span class="line">    roles: [ &#123; <span class="string">"role"</span> : <span class="string">"clusterAdmin"</span>, <span class="string">"db"</span> : <span class="string">"admin"</span> &#125; ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="7-2-创建一个程序连接的账户"><a href="#7-2-创建一个程序连接的账户" class="headerlink" title="7.2 创建一个程序连接的账户"></a>7.2 创建一个程序连接的账户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.getSiblingDB(<span class="string">"admin"</span>).createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"user"</span> : <span class="string">"systemprod"</span>,</span><br><span class="line">    <span class="string">"pwd"</span> : <span class="string">"123456"</span>,</span><br><span class="line">    roles: [ &#123; <span class="string">"role"</span> : <span class="string">"root"</span>, <span class="string">"db"</span> : <span class="string">"admin"</span> &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>至此mongodb的副本集创建完成。测试没有问题,登陆其中一台SECONDARY服务器进行测试,这里测试192.168.32.11服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongo</span><br><span class="line"></span><br><span class="line">&gt; rs.status()    <span class="comment"># 这里提示没有权限（登录进来以后如果不是主几点，mognodb就会默认显示未secondary）</span></span><br><span class="line"></span><br><span class="line">&gt; use admin 	<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">&gt; db.getSiblingDB(<span class="string">"admin"</span>).auth(<span class="string">"manger"</span>, <span class="string">"123456"</span>)</span><br></pre></td></tr></table></figure><p>完成后我们在执行rs.status()就可以看到副本集的信息</p><h4 id="7-3-测试程序连接账户"><a href="#7-3-测试程序连接账户" class="headerlink" title="7.3 测试程序连接账户"></a>7.3 测试程序连接账户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MongoDB Enterprise xxlaila01:SECONDARY&gt; db.getSiblingDB(<span class="string">"admin"</span>).auth(<span class="string">"systemprod"</span>, <span class="string">"123456"</span> )</span><br><span class="line">&gt; show dbs;	<span class="comment">#会提示 “not master and slaveok=false”</span></span><br><span class="line"></span><br><span class="line">&gt; db.getMongo().setSlaveOk()</span><br><span class="line">&gt; show dbs;	<span class="comment">#在次执行会显示出结果</span></span><br></pre></td></tr></table></figure><p>副本集没有读的权限，需要执行db.getMongo().setSlaveOk()</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
</search>
